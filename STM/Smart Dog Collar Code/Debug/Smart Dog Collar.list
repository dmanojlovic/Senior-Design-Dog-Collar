
Smart Dog Collar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b1bc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000f818  0800b350  0800b350  0000c350  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ab68  0801ab68  0001c1ec  2**0
                  CONTENTS
  4 .ARM          00000008  0801ab68  0801ab68  0001bb68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ab70  0801ab70  0001c1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ab70  0801ab70  0001bb70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801ab74  0801ab74  0001bb74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  0801ab78  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000750  200001ec  0801ad64  0001c1ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000093c  0801ad64  0001c93c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001c1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013c5e  00000000  00000000  0001c21c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d27  00000000  00000000  0002fe7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001220  00000000  00000000  00032ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00027a35  00000000  00000000  00033dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001623c  00000000  00000000  0005b7fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000f71a6  00000000  00000000  00071a39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00168bdf  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000dd7  00000000  00000000  00168c22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000060b0  00000000  00000000  001699fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000094  00000000  00000000  0016faac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b334 	.word	0x0800b334

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	0800b334 	.word	0x0800b334

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000fec:	1d39      	adds	r1, r7, #4
 8000fee:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	4803      	ldr	r0, [pc, #12]	@ (8001004 <__io_putchar+0x20>)
 8000ff6:	f004 f939 	bl	800526c <HAL_UART_Transmit>
  return ch;
 8000ffa:	687b      	ldr	r3, [r7, #4]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20000394 	.word	0x20000394

08001008 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800100e:	f000 ff8a 	bl	8001f26 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001012:	f000 f84d 	bl	80010b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001016:	f000 fa23 	bl	8001460 <MX_GPIO_Init>
  MX_DMA_Init();
 800101a:	f000 fa03 	bl	8001424 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800101e:	f000 f9a1 	bl	8001364 <MX_USART2_UART_Init>
  MX_DAC1_Init();
 8001022:	f000 f899 	bl	8001158 <MX_DAC1_Init>
  MX_USART1_UART_Init();
 8001026:	f000 f96d 	bl	8001304 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800102a:	f000 f9cb 	bl	80013c4 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 800102e:	f000 f8e3 	bl	80011f8 <MX_TIM2_Init>
  MX_IWDG_Init();
 8001032:	f000 f8c3 	bl	80011bc <MX_IWDG_Init>
  MX_TIM7_Init();
 8001036:	f000 f92d 	bl	8001294 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  printf("START OF CODE\r\n\n");
 800103a:	4815      	ldr	r0, [pc, #84]	@ (8001090 <main+0x88>)
 800103c:	f006 fd10 	bl	8007a60 <puts>

  //Enable DAC timer
  HAL_TIM_Base_Start(&htim2);
 8001040:	4814      	ldr	r0, [pc, #80]	@ (8001094 <main+0x8c>)
 8001042:	f003 fc05 	bl	8004850 <HAL_TIM_Base_Start>
  
  //Start DAC with zero output value
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint8_t*)zero, 1, DAC_ALIGN_8B_R);
 8001046:	2308      	movs	r3, #8
 8001048:	9300      	str	r3, [sp, #0]
 800104a:	2301      	movs	r3, #1
 800104c:	4a12      	ldr	r2, [pc, #72]	@ (8001098 <main+0x90>)
 800104e:	2100      	movs	r1, #0
 8001050:	4812      	ldr	r0, [pc, #72]	@ (800109c <main+0x94>)
 8001052:	f001 f935 	bl	80022c0 <HAL_DAC_Start_DMA>

  //Set LoRa settings
  setup_lora();
 8001056:	f000 fa77 	bl	8001548 <setup_lora>
  // memcpy(tx_data_lora, "$PMTK225,0*2B<CR><LF>\r\n", 24); //set to normal mode (not always locate mode)
  // HAL_UART_Transmit(&huart1, tx_data_lora, 24, 1000);

  // HAL_Delay(1000);
  //Enable GPS Interrupt
 HAL_TIM_Base_Start_IT(&htim7);
 800105a:	4811      	ldr	r0, [pc, #68]	@ (80010a0 <main+0x98>)
 800105c:	f003 fc60 	bl	8004920 <HAL_TIM_Base_Start_IT>
  //   printf("ERROR\r\n");
  //   Error_Handler();
  // }


  HAL_IWDG_Refresh(&hiwdg);
 8001060:	4810      	ldr	r0, [pc, #64]	@ (80010a4 <main+0x9c>)
 8001062:	f002 f86c 	bl	800313e <HAL_IWDG_Refresh>
//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);

  bzero(rx_data_lora, 240); //clear rx buffer
 8001066:	4b10      	ldr	r3, [pc, #64]	@ (80010a8 <main+0xa0>)
 8001068:	4618      	mov	r0, r3
 800106a:	23f0      	movs	r3, #240	@ 0xf0
 800106c:	461a      	mov	r2, r3
 800106e:	2100      	movs	r1, #0
 8001070:	f006 fdf6 	bl	8007c60 <memset>
  HAL_UART_Receive_IT(&huart3, rx_data_lora, RX_BUF);
 8001074:	2201      	movs	r2, #1
 8001076:	490c      	ldr	r1, [pc, #48]	@ (80010a8 <main+0xa0>)
 8001078:	480c      	ldr	r0, [pc, #48]	@ (80010ac <main+0xa4>)
 800107a:	f004 fa49 	bl	8005510 <HAL_UART_Receive_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


    HAL_Delay(2000);
 800107e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001082:	f000 ffc5 	bl	8002010 <HAL_Delay>

    HAL_IWDG_Refresh(&hiwdg);
 8001086:	4807      	ldr	r0, [pc, #28]	@ (80010a4 <main+0x9c>)
 8001088:	f002 f859 	bl	800313e <HAL_IWDG_Refresh>
    HAL_Delay(2000);
 800108c:	bf00      	nop
 800108e:	e7f6      	b.n	800107e <main+0x76>
 8001090:	0800b350 	.word	0x0800b350
 8001094:	20000274 	.word	0x20000274
 8001098:	0800ffd0 	.word	0x0800ffd0
 800109c:	20000208 	.word	0x20000208
 80010a0:	200002c0 	.word	0x200002c0
 80010a4:	20000264 	.word	0x20000264
 80010a8:	20000594 	.word	0x20000594
 80010ac:	2000041c 	.word	0x2000041c

080010b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b096      	sub	sp, #88	@ 0x58
 80010b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010b6:	f107 0314 	add.w	r3, r7, #20
 80010ba:	2244      	movs	r2, #68	@ 0x44
 80010bc:	2100      	movs	r1, #0
 80010be:	4618      	mov	r0, r3
 80010c0:	f006 fdce 	bl	8007c60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c4:	463b      	mov	r3, r7
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]
 80010ce:	60da      	str	r2, [r3, #12]
 80010d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010d2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80010d6:	f002 f851 	bl	800317c <HAL_PWREx_ControlVoltageScaling>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80010e0:	f000 fb2e 	bl	8001740 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 80010e4:	2318      	movs	r3, #24
 80010e6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80010e8:	2301      	movs	r3, #1
 80010ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80010ec:	2301      	movs	r3, #1
 80010ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80010f4:	2360      	movs	r3, #96	@ 0x60
 80010f6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010f8:	2302      	movs	r3, #2
 80010fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80010fc:	2301      	movs	r3, #1
 80010fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001100:	2301      	movs	r3, #1
 8001102:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8001104:	2314      	movs	r3, #20
 8001106:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001108:	2307      	movs	r3, #7
 800110a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800110c:	2302      	movs	r3, #2
 800110e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001110:	2302      	movs	r3, #2
 8001112:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	4618      	mov	r0, r3
 800111a:	f002 f885 	bl	8003228 <HAL_RCC_OscConfig>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001124:	f000 fb0c 	bl	8001740 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001128:	230f      	movs	r3, #15
 800112a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800112c:	2303      	movs	r3, #3
 800112e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001130:	2300      	movs	r3, #0
 8001132:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001134:	2300      	movs	r3, #0
 8001136:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001138:	2300      	movs	r3, #0
 800113a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800113c:	463b      	mov	r3, r7
 800113e:	2102      	movs	r1, #2
 8001140:	4618      	mov	r0, r3
 8001142:	f002 fc4d 	bl	80039e0 <HAL_RCC_ClockConfig>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800114c:	f000 faf8 	bl	8001740 <Error_Handler>
  }
}
 8001150:	bf00      	nop
 8001152:	3758      	adds	r7, #88	@ 0x58
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b08a      	sub	sp, #40	@ 0x28
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800115e:	1d3b      	adds	r3, r7, #4
 8001160:	2224      	movs	r2, #36	@ 0x24
 8001162:	2100      	movs	r1, #0
 8001164:	4618      	mov	r0, r3
 8001166:	f006 fd7b 	bl	8007c60 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800116a:	4b12      	ldr	r3, [pc, #72]	@ (80011b4 <MX_DAC1_Init+0x5c>)
 800116c:	4a12      	ldr	r2, [pc, #72]	@ (80011b8 <MX_DAC1_Init+0x60>)
 800116e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001170:	4810      	ldr	r0, [pc, #64]	@ (80011b4 <MX_DAC1_Init+0x5c>)
 8001172:	f001 f882 	bl	800227a <HAL_DAC_Init>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800117c:	f000 fae0 	bl	8001740 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001180:	2300      	movs	r3, #0
 8001182:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001184:	2324      	movs	r3, #36	@ 0x24
 8001186:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001188:	2300      	movs	r3, #0
 800118a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800118c:	2300      	movs	r3, #0
 800118e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001194:	1d3b      	adds	r3, r7, #4
 8001196:	2200      	movs	r2, #0
 8001198:	4619      	mov	r1, r3
 800119a:	4806      	ldr	r0, [pc, #24]	@ (80011b4 <MX_DAC1_Init+0x5c>)
 800119c:	f001 f97a 	bl	8002494 <HAL_DAC_ConfigChannel>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80011a6:	f000 facb 	bl	8001740 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80011aa:	bf00      	nop
 80011ac:	3728      	adds	r7, #40	@ 0x28
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20000208 	.word	0x20000208
 80011b8:	40007400 	.word	0x40007400

080011bc <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80011c0:	4b0b      	ldr	r3, [pc, #44]	@ (80011f0 <MX_IWDG_Init+0x34>)
 80011c2:	4a0c      	ldr	r2, [pc, #48]	@ (80011f4 <MX_IWDG_Init+0x38>)
 80011c4:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 80011c6:	4b0a      	ldr	r3, [pc, #40]	@ (80011f0 <MX_IWDG_Init+0x34>)
 80011c8:	2206      	movs	r2, #6
 80011ca:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80011cc:	4b08      	ldr	r3, [pc, #32]	@ (80011f0 <MX_IWDG_Init+0x34>)
 80011ce:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80011d2:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 1875;
 80011d4:	4b06      	ldr	r3, [pc, #24]	@ (80011f0 <MX_IWDG_Init+0x34>)
 80011d6:	f240 7253 	movw	r2, #1875	@ 0x753
 80011da:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80011dc:	4804      	ldr	r0, [pc, #16]	@ (80011f0 <MX_IWDG_Init+0x34>)
 80011de:	f001 ff5d 	bl	800309c <HAL_IWDG_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 80011e8:	f000 faaa 	bl	8001740 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80011ec:	bf00      	nop
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000264 	.word	0x20000264
 80011f4:	40003000 	.word	0x40003000

080011f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b088      	sub	sp, #32
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011fe:	f107 0310 	add.w	r3, r7, #16
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]
 800120a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800120c:	1d3b      	adds	r3, r7, #4
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001216:	4b1e      	ldr	r3, [pc, #120]	@ (8001290 <MX_TIM2_Init+0x98>)
 8001218:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800121c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800121e:	4b1c      	ldr	r3, [pc, #112]	@ (8001290 <MX_TIM2_Init+0x98>)
 8001220:	2200      	movs	r2, #0
 8001222:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001224:	4b1a      	ldr	r3, [pc, #104]	@ (8001290 <MX_TIM2_Init+0x98>)
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1250;
 800122a:	4b19      	ldr	r3, [pc, #100]	@ (8001290 <MX_TIM2_Init+0x98>)
 800122c:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 8001230:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001232:	4b17      	ldr	r3, [pc, #92]	@ (8001290 <MX_TIM2_Init+0x98>)
 8001234:	2200      	movs	r2, #0
 8001236:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001238:	4b15      	ldr	r3, [pc, #84]	@ (8001290 <MX_TIM2_Init+0x98>)
 800123a:	2200      	movs	r2, #0
 800123c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800123e:	4814      	ldr	r0, [pc, #80]	@ (8001290 <MX_TIM2_Init+0x98>)
 8001240:	f003 faae 	bl	80047a0 <HAL_TIM_Base_Init>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800124a:	f000 fa79 	bl	8001740 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800124e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001252:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001254:	f107 0310 	add.w	r3, r7, #16
 8001258:	4619      	mov	r1, r3
 800125a:	480d      	ldr	r0, [pc, #52]	@ (8001290 <MX_TIM2_Init+0x98>)
 800125c:	f003 fcd7 	bl	8004c0e <HAL_TIM_ConfigClockSource>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001266:	f000 fa6b 	bl	8001740 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800126a:	2320      	movs	r3, #32
 800126c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001272:	1d3b      	adds	r3, r7, #4
 8001274:	4619      	mov	r1, r3
 8001276:	4806      	ldr	r0, [pc, #24]	@ (8001290 <MX_TIM2_Init+0x98>)
 8001278:	f003 ff04 	bl	8005084 <HAL_TIMEx_MasterConfigSynchronization>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001282:	f000 fa5d 	bl	8001740 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001286:	bf00      	nop
 8001288:	3720      	adds	r7, #32
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000274 	.word	0x20000274

08001294 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800129a:	1d3b      	adds	r3, r7, #4
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80012a4:	4b15      	ldr	r3, [pc, #84]	@ (80012fc <MX_TIM7_Init+0x68>)
 80012a6:	4a16      	ldr	r2, [pc, #88]	@ (8001300 <MX_TIM7_Init+0x6c>)
 80012a8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 19999;
 80012aa:	4b14      	ldr	r3, [pc, #80]	@ (80012fc <MX_TIM7_Init+0x68>)
 80012ac:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80012b0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b2:	4b12      	ldr	r3, [pc, #72]	@ (80012fc <MX_TIM7_Init+0x68>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 19999;
 80012b8:	4b10      	ldr	r3, [pc, #64]	@ (80012fc <MX_TIM7_Init+0x68>)
 80012ba:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80012be:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c0:	4b0e      	ldr	r3, [pc, #56]	@ (80012fc <MX_TIM7_Init+0x68>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80012c6:	480d      	ldr	r0, [pc, #52]	@ (80012fc <MX_TIM7_Init+0x68>)
 80012c8:	f003 fa6a 	bl	80047a0 <HAL_TIM_Base_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80012d2:	f000 fa35 	bl	8001740 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d6:	2300      	movs	r3, #0
 80012d8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012da:	2300      	movs	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80012de:	1d3b      	adds	r3, r7, #4
 80012e0:	4619      	mov	r1, r3
 80012e2:	4806      	ldr	r0, [pc, #24]	@ (80012fc <MX_TIM7_Init+0x68>)
 80012e4:	f003 fece 	bl	8005084 <HAL_TIMEx_MasterConfigSynchronization>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 80012ee:	f000 fa27 	bl	8001740 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80012f2:	bf00      	nop
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	200002c0 	.word	0x200002c0
 8001300:	40001400 	.word	0x40001400

08001304 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001308:	4b14      	ldr	r3, [pc, #80]	@ (800135c <MX_USART1_UART_Init+0x58>)
 800130a:	4a15      	ldr	r2, [pc, #84]	@ (8001360 <MX_USART1_UART_Init+0x5c>)
 800130c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800130e:	4b13      	ldr	r3, [pc, #76]	@ (800135c <MX_USART1_UART_Init+0x58>)
 8001310:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001314:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001316:	4b11      	ldr	r3, [pc, #68]	@ (800135c <MX_USART1_UART_Init+0x58>)
 8001318:	2200      	movs	r2, #0
 800131a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800131c:	4b0f      	ldr	r3, [pc, #60]	@ (800135c <MX_USART1_UART_Init+0x58>)
 800131e:	2200      	movs	r2, #0
 8001320:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001322:	4b0e      	ldr	r3, [pc, #56]	@ (800135c <MX_USART1_UART_Init+0x58>)
 8001324:	2200      	movs	r2, #0
 8001326:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8001328:	4b0c      	ldr	r3, [pc, #48]	@ (800135c <MX_USART1_UART_Init+0x58>)
 800132a:	2204      	movs	r2, #4
 800132c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800132e:	4b0b      	ldr	r3, [pc, #44]	@ (800135c <MX_USART1_UART_Init+0x58>)
 8001330:	2200      	movs	r2, #0
 8001332:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001334:	4b09      	ldr	r3, [pc, #36]	@ (800135c <MX_USART1_UART_Init+0x58>)
 8001336:	2200      	movs	r2, #0
 8001338:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800133a:	4b08      	ldr	r3, [pc, #32]	@ (800135c <MX_USART1_UART_Init+0x58>)
 800133c:	2200      	movs	r2, #0
 800133e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001340:	4b06      	ldr	r3, [pc, #24]	@ (800135c <MX_USART1_UART_Init+0x58>)
 8001342:	2200      	movs	r2, #0
 8001344:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001346:	4805      	ldr	r0, [pc, #20]	@ (800135c <MX_USART1_UART_Init+0x58>)
 8001348:	f003 ff42 	bl	80051d0 <HAL_UART_Init>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001352:	f000 f9f5 	bl	8001740 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	2000030c 	.word	0x2000030c
 8001360:	40013800 	.word	0x40013800

08001364 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001368:	4b14      	ldr	r3, [pc, #80]	@ (80013bc <MX_USART2_UART_Init+0x58>)
 800136a:	4a15      	ldr	r2, [pc, #84]	@ (80013c0 <MX_USART2_UART_Init+0x5c>)
 800136c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800136e:	4b13      	ldr	r3, [pc, #76]	@ (80013bc <MX_USART2_UART_Init+0x58>)
 8001370:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001374:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001376:	4b11      	ldr	r3, [pc, #68]	@ (80013bc <MX_USART2_UART_Init+0x58>)
 8001378:	2200      	movs	r2, #0
 800137a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800137c:	4b0f      	ldr	r3, [pc, #60]	@ (80013bc <MX_USART2_UART_Init+0x58>)
 800137e:	2200      	movs	r2, #0
 8001380:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001382:	4b0e      	ldr	r3, [pc, #56]	@ (80013bc <MX_USART2_UART_Init+0x58>)
 8001384:	2200      	movs	r2, #0
 8001386:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001388:	4b0c      	ldr	r3, [pc, #48]	@ (80013bc <MX_USART2_UART_Init+0x58>)
 800138a:	220c      	movs	r2, #12
 800138c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800138e:	4b0b      	ldr	r3, [pc, #44]	@ (80013bc <MX_USART2_UART_Init+0x58>)
 8001390:	2200      	movs	r2, #0
 8001392:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001394:	4b09      	ldr	r3, [pc, #36]	@ (80013bc <MX_USART2_UART_Init+0x58>)
 8001396:	2200      	movs	r2, #0
 8001398:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800139a:	4b08      	ldr	r3, [pc, #32]	@ (80013bc <MX_USART2_UART_Init+0x58>)
 800139c:	2200      	movs	r2, #0
 800139e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013a0:	4b06      	ldr	r3, [pc, #24]	@ (80013bc <MX_USART2_UART_Init+0x58>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013a6:	4805      	ldr	r0, [pc, #20]	@ (80013bc <MX_USART2_UART_Init+0x58>)
 80013a8:	f003 ff12 	bl	80051d0 <HAL_UART_Init>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80013b2:	f000 f9c5 	bl	8001740 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000394 	.word	0x20000394
 80013c0:	40004400 	.word	0x40004400

080013c4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013c8:	4b14      	ldr	r3, [pc, #80]	@ (800141c <MX_USART3_UART_Init+0x58>)
 80013ca:	4a15      	ldr	r2, [pc, #84]	@ (8001420 <MX_USART3_UART_Init+0x5c>)
 80013cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80013ce:	4b13      	ldr	r3, [pc, #76]	@ (800141c <MX_USART3_UART_Init+0x58>)
 80013d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013d6:	4b11      	ldr	r3, [pc, #68]	@ (800141c <MX_USART3_UART_Init+0x58>)
 80013d8:	2200      	movs	r2, #0
 80013da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013dc:	4b0f      	ldr	r3, [pc, #60]	@ (800141c <MX_USART3_UART_Init+0x58>)
 80013de:	2200      	movs	r2, #0
 80013e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80013e2:	4b0e      	ldr	r3, [pc, #56]	@ (800141c <MX_USART3_UART_Init+0x58>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013e8:	4b0c      	ldr	r3, [pc, #48]	@ (800141c <MX_USART3_UART_Init+0x58>)
 80013ea:	220c      	movs	r2, #12
 80013ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ee:	4b0b      	ldr	r3, [pc, #44]	@ (800141c <MX_USART3_UART_Init+0x58>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013f4:	4b09      	ldr	r3, [pc, #36]	@ (800141c <MX_USART3_UART_Init+0x58>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013fa:	4b08      	ldr	r3, [pc, #32]	@ (800141c <MX_USART3_UART_Init+0x58>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001400:	4b06      	ldr	r3, [pc, #24]	@ (800141c <MX_USART3_UART_Init+0x58>)
 8001402:	2200      	movs	r2, #0
 8001404:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001406:	4805      	ldr	r0, [pc, #20]	@ (800141c <MX_USART3_UART_Init+0x58>)
 8001408:	f003 fee2 	bl	80051d0 <HAL_UART_Init>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001412:	f000 f995 	bl	8001740 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	2000041c 	.word	0x2000041c
 8001420:	40004800 	.word	0x40004800

08001424 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800142a:	4b0c      	ldr	r3, [pc, #48]	@ (800145c <MX_DMA_Init+0x38>)
 800142c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800142e:	4a0b      	ldr	r2, [pc, #44]	@ (800145c <MX_DMA_Init+0x38>)
 8001430:	f043 0301 	orr.w	r3, r3, #1
 8001434:	6493      	str	r3, [r2, #72]	@ 0x48
 8001436:	4b09      	ldr	r3, [pc, #36]	@ (800145c <MX_DMA_Init+0x38>)
 8001438:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	607b      	str	r3, [r7, #4]
 8001440:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001442:	2200      	movs	r2, #0
 8001444:	2100      	movs	r1, #0
 8001446:	200d      	movs	r0, #13
 8001448:	f000 fee1 	bl	800220e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800144c:	200d      	movs	r0, #13
 800144e:	f000 fefa 	bl	8002246 <HAL_NVIC_EnableIRQ>

}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40021000 	.word	0x40021000

08001460 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08a      	sub	sp, #40	@ 0x28
 8001464:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001466:	f107 0314 	add.w	r3, r7, #20
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	605a      	str	r2, [r3, #4]
 8001470:	609a      	str	r2, [r3, #8]
 8001472:	60da      	str	r2, [r3, #12]
 8001474:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001476:	4b31      	ldr	r3, [pc, #196]	@ (800153c <MX_GPIO_Init+0xdc>)
 8001478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800147a:	4a30      	ldr	r2, [pc, #192]	@ (800153c <MX_GPIO_Init+0xdc>)
 800147c:	f043 0304 	orr.w	r3, r3, #4
 8001480:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001482:	4b2e      	ldr	r3, [pc, #184]	@ (800153c <MX_GPIO_Init+0xdc>)
 8001484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001486:	f003 0304 	and.w	r3, r3, #4
 800148a:	613b      	str	r3, [r7, #16]
 800148c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800148e:	4b2b      	ldr	r3, [pc, #172]	@ (800153c <MX_GPIO_Init+0xdc>)
 8001490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001492:	4a2a      	ldr	r2, [pc, #168]	@ (800153c <MX_GPIO_Init+0xdc>)
 8001494:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001498:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800149a:	4b28      	ldr	r3, [pc, #160]	@ (800153c <MX_GPIO_Init+0xdc>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800149e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a6:	4b25      	ldr	r3, [pc, #148]	@ (800153c <MX_GPIO_Init+0xdc>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014aa:	4a24      	ldr	r2, [pc, #144]	@ (800153c <MX_GPIO_Init+0xdc>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014b2:	4b22      	ldr	r3, [pc, #136]	@ (800153c <MX_GPIO_Init+0xdc>)
 80014b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	60bb      	str	r3, [r7, #8]
 80014bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014be:	4b1f      	ldr	r3, [pc, #124]	@ (800153c <MX_GPIO_Init+0xdc>)
 80014c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014c2:	4a1e      	ldr	r2, [pc, #120]	@ (800153c <MX_GPIO_Init+0xdc>)
 80014c4:	f043 0302 	orr.w	r3, r3, #2
 80014c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014ca:	4b1c      	ldr	r3, [pc, #112]	@ (800153c <MX_GPIO_Init+0xdc>)
 80014cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	607b      	str	r3, [r7, #4]
 80014d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80014d6:	2200      	movs	r2, #0
 80014d8:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80014dc:	4818      	ldr	r0, [pc, #96]	@ (8001540 <MX_GPIO_Init+0xe0>)
 80014de:	f001 fdab 	bl	8003038 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_3;
 80014e2:	f242 0308 	movw	r3, #8200	@ 0x2008
 80014e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014e8:	2300      	movs	r3, #0
 80014ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014f0:	f107 0314 	add.w	r3, r7, #20
 80014f4:	4619      	mov	r1, r3
 80014f6:	4813      	ldr	r0, [pc, #76]	@ (8001544 <MX_GPIO_Init+0xe4>)
 80014f8:	f001 fbf4 	bl	8002ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014fc:	2301      	movs	r3, #1
 80014fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001500:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001504:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800150a:	f107 0314 	add.w	r3, r7, #20
 800150e:	4619      	mov	r1, r3
 8001510:	480c      	ldr	r0, [pc, #48]	@ (8001544 <MX_GPIO_Init+0xe4>)
 8001512:	f001 fbe7 	bl	8002ce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001516:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800151a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151c:	2301      	movs	r3, #1
 800151e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001524:	2300      	movs	r3, #0
 8001526:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001528:	f107 0314 	add.w	r3, r7, #20
 800152c:	4619      	mov	r1, r3
 800152e:	4804      	ldr	r0, [pc, #16]	@ (8001540 <MX_GPIO_Init+0xe0>)
 8001530:	f001 fbd8 	bl	8002ce4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001534:	bf00      	nop
 8001536:	3728      	adds	r7, #40	@ 0x28
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	40021000 	.word	0x40021000
 8001540:	48000400 	.word	0x48000400
 8001544:	48000800 	.word	0x48000800

08001548 <setup_lora>:

/* USER CODE BEGIN 4 */
void setup_lora(void){
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  
  HAL_Delay(100);
 800154c:	2064      	movs	r0, #100	@ 0x64
 800154e:	f000 fd5f 	bl	8002010 <HAL_Delay>
  send_lora("AT\r\n", 4, 5); //basic stm to lora check (rcv: +OK)
 8001552:	2205      	movs	r2, #5
 8001554:	2104      	movs	r1, #4
 8001556:	4811      	ldr	r0, [pc, #68]	@ (800159c <setup_lora+0x54>)
 8001558:	f000 f82a 	bl	80015b0 <send_lora>
  // HAL_Delay(100);
  // send_lora("AT+FACTORY\r\n", 12, 8); //set to factory default (rcv: +FACTORY)
  HAL_Delay(100);
 800155c:	2064      	movs	r0, #100	@ 0x64
 800155e:	f000 fd57 	bl	8002010 <HAL_Delay>
  send_lora("AT+ADDRESS=124\r\n", 16, 5); //set lora address (rcv: +OK)
 8001562:	2205      	movs	r2, #5
 8001564:	2110      	movs	r1, #16
 8001566:	480e      	ldr	r0, [pc, #56]	@ (80015a0 <setup_lora+0x58>)
 8001568:	f000 f822 	bl	80015b0 <send_lora>
  HAL_Delay(100);
 800156c:	2064      	movs	r0, #100	@ 0x64
 800156e:	f000 fd4f 	bl	8002010 <HAL_Delay>
  send_lora("AT+NETWORKID=7\r\n", 16, 5); //set network id (rcv: +OK)
 8001572:	2205      	movs	r2, #5
 8001574:	2110      	movs	r1, #16
 8001576:	480b      	ldr	r0, [pc, #44]	@ (80015a4 <setup_lora+0x5c>)
 8001578:	f000 f81a 	bl	80015b0 <send_lora>
  HAL_Delay(100);
 800157c:	2064      	movs	r0, #100	@ 0x64
 800157e:	f000 fd47 	bl	8002010 <HAL_Delay>
  send_lora("AT+CPIN=102C064CA409E69030F73E7CABAA4B71\r\n", 42, 5); //set AES pin (rcv: +OK)
 8001582:	2205      	movs	r2, #5
 8001584:	212a      	movs	r1, #42	@ 0x2a
 8001586:	4808      	ldr	r0, [pc, #32]	@ (80015a8 <setup_lora+0x60>)
 8001588:	f000 f812 	bl	80015b0 <send_lora>
  HAL_Delay(100);
 800158c:	2064      	movs	r0, #100	@ 0x64
 800158e:	f000 fd3f 	bl	8002010 <HAL_Delay>

  printf("Done setting up LoRa\r\n");
 8001592:	4806      	ldr	r0, [pc, #24]	@ (80015ac <setup_lora+0x64>)
 8001594:	f006 fa64 	bl	8007a60 <puts>
}
 8001598:	bf00      	nop
 800159a:	bd80      	pop	{r7, pc}
 800159c:	0800b360 	.word	0x0800b360
 80015a0:	0800b368 	.word	0x0800b368
 80015a4:	0800b37c 	.word	0x0800b37c
 80015a8:	0800b390 	.word	0x0800b390
 80015ac:	0800b3bc 	.word	0x0800b3bc

080015b0 <send_lora>:

void send_lora(char *msg, int size, int resp_size){
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]
  bzero(tx_data_lora, LORA_BUF_SIZE);
 80015bc:	4b19      	ldr	r3, [pc, #100]	@ (8001624 <send_lora+0x74>)
 80015be:	4618      	mov	r0, r3
 80015c0:	23f0      	movs	r3, #240	@ 0xf0
 80015c2:	461a      	mov	r2, r3
 80015c4:	2100      	movs	r1, #0
 80015c6:	f006 fb4b 	bl	8007c60 <memset>
  bzero(rx_data_lora, LORA_BUF_SIZE);
 80015ca:	4b17      	ldr	r3, [pc, #92]	@ (8001628 <send_lora+0x78>)
 80015cc:	4618      	mov	r0, r3
 80015ce:	23f0      	movs	r3, #240	@ 0xf0
 80015d0:	461a      	mov	r2, r3
 80015d2:	2100      	movs	r1, #0
 80015d4:	f006 fb44 	bl	8007c60 <memset>
  memcpy(tx_data_lora, msg, size);
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	461a      	mov	r2, r3
 80015dc:	68f9      	ldr	r1, [r7, #12]
 80015de:	4811      	ldr	r0, [pc, #68]	@ (8001624 <send_lora+0x74>)
 80015e0:	f006 fbe3 	bl	8007daa <memcpy>
  HAL_UART_Transmit(&huart3, tx_data_lora, size, 1000);
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015ec:	490d      	ldr	r1, [pc, #52]	@ (8001624 <send_lora+0x74>)
 80015ee:	480f      	ldr	r0, [pc, #60]	@ (800162c <send_lora+0x7c>)
 80015f0:	f003 fe3c 	bl	800526c <HAL_UART_Transmit>
  while(HAL_UART_Receive(&huart3, rx_data_lora, resp_size, 1000)!=HAL_OK){}
 80015f4:	bf00      	nop
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	b29a      	uxth	r2, r3
 80015fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015fe:	490a      	ldr	r1, [pc, #40]	@ (8001628 <send_lora+0x78>)
 8001600:	480a      	ldr	r0, [pc, #40]	@ (800162c <send_lora+0x7c>)
 8001602:	f003 febc 	bl	800537e <HAL_UART_Receive>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d1f4      	bne.n	80015f6 <send_lora+0x46>
  HAL_UART_Transmit(&huart2, rx_data_lora, resp_size, 10);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	b29a      	uxth	r2, r3
 8001610:	230a      	movs	r3, #10
 8001612:	4905      	ldr	r1, [pc, #20]	@ (8001628 <send_lora+0x78>)
 8001614:	4806      	ldr	r0, [pc, #24]	@ (8001630 <send_lora+0x80>)
 8001616:	f003 fe29 	bl	800526c <HAL_UART_Transmit>
}
 800161a:	bf00      	nop
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	200004a4 	.word	0x200004a4
 8001628:	20000594 	.word	0x20000594
 800162c:	2000041c 	.word	0x2000041c
 8001630:	20000394 	.word	0x20000394

08001634 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{   
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af02      	add	r7, sp, #8
 800163a:	6078      	str	r0, [r7, #4]
  // printf("Enter UART Callback\r\n");
    
  if(rx_data_lora[0] == 'R'){
 800163c:	4b36      	ldr	r3, [pc, #216]	@ (8001718 <HAL_UART_RxCpltCallback+0xe4>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2b52      	cmp	r3, #82	@ 0x52
 8001642:	d151      	bne.n	80016e8 <HAL_UART_RxCpltCallback+0xb4>
  // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
  // printf("R received\r\n");
  HAL_UART_Receive(&huart3, buf, 11, 1000); //get the rest of the sent data
 8001644:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001648:	220b      	movs	r2, #11
 800164a:	4934      	ldr	r1, [pc, #208]	@ (800171c <HAL_UART_RxCpltCallback+0xe8>)
 800164c:	4834      	ldr	r0, [pc, #208]	@ (8001720 <HAL_UART_RxCpltCallback+0xec>)
 800164e:	f003 fe96 	bl	800537e <HAL_UART_Receive>
  // printf("buf:%s\r\n", buf);
  
  uint8_t audio_cue = buf[9];
 8001652:	4b32      	ldr	r3, [pc, #200]	@ (800171c <HAL_UART_RxCpltCallback+0xe8>)
 8001654:	7a5b      	ldrb	r3, [r3, #9]
 8001656:	73fb      	strb	r3, [r7, #15]
  // printf("Audio Cue: %d\n\r", audio_cue);

  if(audio_cue == 'A'){
 8001658:	7bfb      	ldrb	r3, [r7, #15]
 800165a:	2b41      	cmp	r3, #65	@ 0x41
 800165c:	d10e      	bne.n	800167c <HAL_UART_RxCpltCallback+0x48>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 800165e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001662:	4830      	ldr	r0, [pc, #192]	@ (8001724 <HAL_UART_RxCpltCallback+0xf0>)
 8001664:	f001 fd00 	bl	8003068 <HAL_GPIO_TogglePin>
    HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint8_t*)whistle, 24580, DAC_ALIGN_8B_R);
 8001668:	2308      	movs	r3, #8
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	f246 0304 	movw	r3, #24580	@ 0x6004
 8001670:	4a2d      	ldr	r2, [pc, #180]	@ (8001728 <HAL_UART_RxCpltCallback+0xf4>)
 8001672:	2100      	movs	r1, #0
 8001674:	482d      	ldr	r0, [pc, #180]	@ (800172c <HAL_UART_RxCpltCallback+0xf8>)
 8001676:	f000 fe23 	bl	80022c0 <HAL_DAC_Start_DMA>
 800167a:	e02b      	b.n	80016d4 <HAL_UART_RxCpltCallback+0xa0>
  }
  else if(audio_cue == 'B'){
 800167c:	7bfb      	ldrb	r3, [r7, #15]
 800167e:	2b42      	cmp	r3, #66	@ 0x42
 8001680:	d10e      	bne.n	80016a0 <HAL_UART_RxCpltCallback+0x6c>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 8001682:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001686:	4827      	ldr	r0, [pc, #156]	@ (8001724 <HAL_UART_RxCpltCallback+0xf0>)
 8001688:	f001 fcee 	bl	8003068 <HAL_GPIO_TogglePin>
    HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint8_t*)stopCommand, 18200, DAC_ALIGN_8B_R);
 800168c:	2308      	movs	r3, #8
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	f244 7318 	movw	r3, #18200	@ 0x4718
 8001694:	4a26      	ldr	r2, [pc, #152]	@ (8001730 <HAL_UART_RxCpltCallback+0xfc>)
 8001696:	2100      	movs	r1, #0
 8001698:	4824      	ldr	r0, [pc, #144]	@ (800172c <HAL_UART_RxCpltCallback+0xf8>)
 800169a:	f000 fe11 	bl	80022c0 <HAL_DAC_Start_DMA>
 800169e:	e019      	b.n	80016d4 <HAL_UART_RxCpltCallback+0xa0>
  }
  else if(audio_cue == 'C'){
 80016a0:	7bfb      	ldrb	r3, [r7, #15]
 80016a2:	2b43      	cmp	r3, #67	@ 0x43
 80016a4:	d10e      	bne.n	80016c4 <HAL_UART_RxCpltCallback+0x90>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 80016a6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80016aa:	481e      	ldr	r0, [pc, #120]	@ (8001724 <HAL_UART_RxCpltCallback+0xf0>)
 80016ac:	f001 fcdc 	bl	8003068 <HAL_GPIO_TogglePin>
    // HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint8_t*)noCommand, 22332, DAC_ALIGN_8B_R);
    HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint8_t*)Se7enNo, 19316, DAC_ALIGN_8B_R);
 80016b0:	2308      	movs	r3, #8
 80016b2:	9300      	str	r3, [sp, #0]
 80016b4:	f644 3374 	movw	r3, #19316	@ 0x4b74
 80016b8:	4a1e      	ldr	r2, [pc, #120]	@ (8001734 <HAL_UART_RxCpltCallback+0x100>)
 80016ba:	2100      	movs	r1, #0
 80016bc:	481b      	ldr	r0, [pc, #108]	@ (800172c <HAL_UART_RxCpltCallback+0xf8>)
 80016be:	f000 fdff 	bl	80022c0 <HAL_DAC_Start_DMA>
 80016c2:	e007      	b.n	80016d4 <HAL_UART_RxCpltCallback+0xa0>

  }
  else if(audio_cue == 'D'){
 80016c4:	7bfb      	ldrb	r3, [r7, #15]
 80016c6:	2b44      	cmp	r3, #68	@ 0x44
 80016c8:	d104      	bne.n	80016d4 <HAL_UART_RxCpltCallback+0xa0>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 80016ca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80016ce:	4815      	ldr	r0, [pc, #84]	@ (8001724 <HAL_UART_RxCpltCallback+0xf0>)
 80016d0:	f001 fcca 	bl	8003068 <HAL_GPIO_TogglePin>
    // HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint8_t*)comeHome, 22908, DAC_ALIGN_8B_R);
  }
  

    HAL_UART_Transmit(&huart3, tx_received, 24, 1000);
 80016d4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016d8:	2218      	movs	r2, #24
 80016da:	4917      	ldr	r1, [pc, #92]	@ (8001738 <HAL_UART_RxCpltCallback+0x104>)
 80016dc:	4810      	ldr	r0, [pc, #64]	@ (8001720 <HAL_UART_RxCpltCallback+0xec>)
 80016de:	f003 fdc5 	bl	800526c <HAL_UART_Transmit>
    printf("Audio Received\n\r");
 80016e2:	4816      	ldr	r0, [pc, #88]	@ (800173c <HAL_UART_RxCpltCallback+0x108>)
 80016e4:	f006 f954 	bl	8007990 <iprintf>
  }

  // printf("Callback\n\r");

  bzero(rx_data_lora, 240);
 80016e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001718 <HAL_UART_RxCpltCallback+0xe4>)
 80016ea:	4618      	mov	r0, r3
 80016ec:	23f0      	movs	r3, #240	@ 0xf0
 80016ee:	461a      	mov	r2, r3
 80016f0:	2100      	movs	r1, #0
 80016f2:	f006 fab5 	bl	8007c60 <memset>
  bzero(buf, 11);
 80016f6:	4b09      	ldr	r3, [pc, #36]	@ (800171c <HAL_UART_RxCpltCallback+0xe8>)
 80016f8:	461a      	mov	r2, r3
 80016fa:	2300      	movs	r3, #0
 80016fc:	6013      	str	r3, [r2, #0]
 80016fe:	6053      	str	r3, [r2, #4]
 8001700:	f8c2 3007 	str.w	r3, [r2, #7]
  HAL_UART_Receive_IT(&huart3, rx_data_lora, RX_BUF);
 8001704:	2201      	movs	r2, #1
 8001706:	4904      	ldr	r1, [pc, #16]	@ (8001718 <HAL_UART_RxCpltCallback+0xe4>)
 8001708:	4805      	ldr	r0, [pc, #20]	@ (8001720 <HAL_UART_RxCpltCallback+0xec>)
 800170a:	f003 ff01 	bl	8005510 <HAL_UART_Receive_IT>
}
 800170e:	bf00      	nop
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000594 	.word	0x20000594
 800171c:	200007dc 	.word	0x200007dc
 8001720:	2000041c 	.word	0x2000041c
 8001724:	48000400 	.word	0x48000400
 8001728:	08014734 	.word	0x08014734
 800172c:	20000208 	.word	0x20000208
 8001730:	0800ffd4 	.word	0x0800ffd4
 8001734:	0800b45c 	.word	0x0800b45c
 8001738:	20000000 	.word	0x20000000
 800173c:	0800b3d4 	.word	0x0800b3d4

08001740 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001744:	b672      	cpsid	i
}
 8001746:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001748:	bf00      	nop
 800174a:	e7fd      	b.n	8001748 <Error_Handler+0x8>

0800174c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001752:	4b0f      	ldr	r3, [pc, #60]	@ (8001790 <HAL_MspInit+0x44>)
 8001754:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001756:	4a0e      	ldr	r2, [pc, #56]	@ (8001790 <HAL_MspInit+0x44>)
 8001758:	f043 0301 	orr.w	r3, r3, #1
 800175c:	6613      	str	r3, [r2, #96]	@ 0x60
 800175e:	4b0c      	ldr	r3, [pc, #48]	@ (8001790 <HAL_MspInit+0x44>)
 8001760:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	607b      	str	r3, [r7, #4]
 8001768:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800176a:	4b09      	ldr	r3, [pc, #36]	@ (8001790 <HAL_MspInit+0x44>)
 800176c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800176e:	4a08      	ldr	r2, [pc, #32]	@ (8001790 <HAL_MspInit+0x44>)
 8001770:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001774:	6593      	str	r3, [r2, #88]	@ 0x58
 8001776:	4b06      	ldr	r3, [pc, #24]	@ (8001790 <HAL_MspInit+0x44>)
 8001778:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800177a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800177e:	603b      	str	r3, [r7, #0]
 8001780:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001782:	bf00      	nop
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	40021000 	.word	0x40021000

08001794 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08a      	sub	sp, #40	@ 0x28
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179c:	f107 0314 	add.w	r3, r7, #20
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
 80017aa:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a2a      	ldr	r2, [pc, #168]	@ (800185c <HAL_DAC_MspInit+0xc8>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d14d      	bne.n	8001852 <HAL_DAC_MspInit+0xbe>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80017b6:	4b2a      	ldr	r3, [pc, #168]	@ (8001860 <HAL_DAC_MspInit+0xcc>)
 80017b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ba:	4a29      	ldr	r2, [pc, #164]	@ (8001860 <HAL_DAC_MspInit+0xcc>)
 80017bc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80017c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80017c2:	4b27      	ldr	r3, [pc, #156]	@ (8001860 <HAL_DAC_MspInit+0xcc>)
 80017c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80017ca:	613b      	str	r3, [r7, #16]
 80017cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ce:	4b24      	ldr	r3, [pc, #144]	@ (8001860 <HAL_DAC_MspInit+0xcc>)
 80017d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017d2:	4a23      	ldr	r2, [pc, #140]	@ (8001860 <HAL_DAC_MspInit+0xcc>)
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017da:	4b21      	ldr	r3, [pc, #132]	@ (8001860 <HAL_DAC_MspInit+0xcc>)
 80017dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80017e6:	2310      	movs	r3, #16
 80017e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017ea:	2303      	movs	r3, #3
 80017ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f2:	f107 0314 	add.w	r3, r7, #20
 80017f6:	4619      	mov	r1, r3
 80017f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017fc:	f001 fa72 	bl	8002ce4 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8001800:	4b18      	ldr	r3, [pc, #96]	@ (8001864 <HAL_DAC_MspInit+0xd0>)
 8001802:	4a19      	ldr	r2, [pc, #100]	@ (8001868 <HAL_DAC_MspInit+0xd4>)
 8001804:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8001806:	4b17      	ldr	r3, [pc, #92]	@ (8001864 <HAL_DAC_MspInit+0xd0>)
 8001808:	2206      	movs	r2, #6
 800180a:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800180c:	4b15      	ldr	r3, [pc, #84]	@ (8001864 <HAL_DAC_MspInit+0xd0>)
 800180e:	2210      	movs	r2, #16
 8001810:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001812:	4b14      	ldr	r3, [pc, #80]	@ (8001864 <HAL_DAC_MspInit+0xd0>)
 8001814:	2200      	movs	r2, #0
 8001816:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001818:	4b12      	ldr	r3, [pc, #72]	@ (8001864 <HAL_DAC_MspInit+0xd0>)
 800181a:	2280      	movs	r2, #128	@ 0x80
 800181c:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800181e:	4b11      	ldr	r3, [pc, #68]	@ (8001864 <HAL_DAC_MspInit+0xd0>)
 8001820:	2200      	movs	r2, #0
 8001822:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001824:	4b0f      	ldr	r3, [pc, #60]	@ (8001864 <HAL_DAC_MspInit+0xd0>)
 8001826:	2200      	movs	r2, #0
 8001828:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_NORMAL;
 800182a:	4b0e      	ldr	r3, [pc, #56]	@ (8001864 <HAL_DAC_MspInit+0xd0>)
 800182c:	2200      	movs	r2, #0
 800182e:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001830:	4b0c      	ldr	r3, [pc, #48]	@ (8001864 <HAL_DAC_MspInit+0xd0>)
 8001832:	2200      	movs	r2, #0
 8001834:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8001836:	480b      	ldr	r0, [pc, #44]	@ (8001864 <HAL_DAC_MspInit+0xd0>)
 8001838:	f000 ffde 	bl	80027f8 <HAL_DMA_Init>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <HAL_DAC_MspInit+0xb2>
    {
      Error_Handler();
 8001842:	f7ff ff7d 	bl	8001740 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a06      	ldr	r2, [pc, #24]	@ (8001864 <HAL_DAC_MspInit+0xd0>)
 800184a:	609a      	str	r2, [r3, #8]
 800184c:	4a05      	ldr	r2, [pc, #20]	@ (8001864 <HAL_DAC_MspInit+0xd0>)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8001852:	bf00      	nop
 8001854:	3728      	adds	r7, #40	@ 0x28
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40007400 	.word	0x40007400
 8001860:	40021000 	.word	0x40021000
 8001864:	2000021c 	.word	0x2000021c
 8001868:	40020030 	.word	0x40020030

0800186c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800187c:	d10c      	bne.n	8001898 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800187e:	4b15      	ldr	r3, [pc, #84]	@ (80018d4 <HAL_TIM_Base_MspInit+0x68>)
 8001880:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001882:	4a14      	ldr	r2, [pc, #80]	@ (80018d4 <HAL_TIM_Base_MspInit+0x68>)
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	6593      	str	r3, [r2, #88]	@ 0x58
 800188a:	4b12      	ldr	r3, [pc, #72]	@ (80018d4 <HAL_TIM_Base_MspInit+0x68>)
 800188c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001896:	e018      	b.n	80018ca <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM7)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a0e      	ldr	r2, [pc, #56]	@ (80018d8 <HAL_TIM_Base_MspInit+0x6c>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d113      	bne.n	80018ca <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80018a2:	4b0c      	ldr	r3, [pc, #48]	@ (80018d4 <HAL_TIM_Base_MspInit+0x68>)
 80018a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018a6:	4a0b      	ldr	r2, [pc, #44]	@ (80018d4 <HAL_TIM_Base_MspInit+0x68>)
 80018a8:	f043 0320 	orr.w	r3, r3, #32
 80018ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80018ae:	4b09      	ldr	r3, [pc, #36]	@ (80018d4 <HAL_TIM_Base_MspInit+0x68>)
 80018b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018b2:	f003 0320 	and.w	r3, r3, #32
 80018b6:	60bb      	str	r3, [r7, #8]
 80018b8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 80018ba:	2200      	movs	r2, #0
 80018bc:	2105      	movs	r1, #5
 80018be:	2037      	movs	r0, #55	@ 0x37
 80018c0:	f000 fca5 	bl	800220e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80018c4:	2037      	movs	r0, #55	@ 0x37
 80018c6:	f000 fcbe 	bl	8002246 <HAL_NVIC_EnableIRQ>
}
 80018ca:	bf00      	nop
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40021000 	.word	0x40021000
 80018d8:	40001400 	.word	0x40001400

080018dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b0b0      	sub	sp, #192	@ 0xc0
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	60da      	str	r2, [r3, #12]
 80018f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018f8:	2288      	movs	r2, #136	@ 0x88
 80018fa:	2100      	movs	r1, #0
 80018fc:	4618      	mov	r0, r3
 80018fe:	f006 f9af 	bl	8007c60 <memset>
  if(huart->Instance==USART1)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a6b      	ldr	r2, [pc, #428]	@ (8001ab4 <HAL_UART_MspInit+0x1d8>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d13d      	bne.n	8001988 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800190c:	2301      	movs	r3, #1
 800190e:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001910:	2300      	movs	r3, #0
 8001912:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001914:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001918:	4618      	mov	r0, r3
 800191a:	f002 fa85 	bl	8003e28 <HAL_RCCEx_PeriphCLKConfig>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001924:	f7ff ff0c 	bl	8001740 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001928:	4b63      	ldr	r3, [pc, #396]	@ (8001ab8 <HAL_UART_MspInit+0x1dc>)
 800192a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800192c:	4a62      	ldr	r2, [pc, #392]	@ (8001ab8 <HAL_UART_MspInit+0x1dc>)
 800192e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001932:	6613      	str	r3, [r2, #96]	@ 0x60
 8001934:	4b60      	ldr	r3, [pc, #384]	@ (8001ab8 <HAL_UART_MspInit+0x1dc>)
 8001936:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001938:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800193c:	623b      	str	r3, [r7, #32]
 800193e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001940:	4b5d      	ldr	r3, [pc, #372]	@ (8001ab8 <HAL_UART_MspInit+0x1dc>)
 8001942:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001944:	4a5c      	ldr	r2, [pc, #368]	@ (8001ab8 <HAL_UART_MspInit+0x1dc>)
 8001946:	f043 0301 	orr.w	r3, r3, #1
 800194a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800194c:	4b5a      	ldr	r3, [pc, #360]	@ (8001ab8 <HAL_UART_MspInit+0x1dc>)
 800194e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	61fb      	str	r3, [r7, #28]
 8001956:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001958:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800195c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001960:	2302      	movs	r3, #2
 8001962:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	2300      	movs	r3, #0
 8001968:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800196c:	2303      	movs	r3, #3
 800196e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001972:	2307      	movs	r3, #7
 8001974:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001978:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800197c:	4619      	mov	r1, r3
 800197e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001982:	f001 f9af 	bl	8002ce4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001986:	e091      	b.n	8001aac <HAL_UART_MspInit+0x1d0>
  else if(huart->Instance==USART2)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a4b      	ldr	r2, [pc, #300]	@ (8001abc <HAL_UART_MspInit+0x1e0>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d144      	bne.n	8001a1c <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001992:	2302      	movs	r3, #2
 8001994:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001996:	2300      	movs	r3, #0
 8001998:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800199a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800199e:	4618      	mov	r0, r3
 80019a0:	f002 fa42 	bl	8003e28 <HAL_RCCEx_PeriphCLKConfig>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <HAL_UART_MspInit+0xd2>
      Error_Handler();
 80019aa:	f7ff fec9 	bl	8001740 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80019ae:	4b42      	ldr	r3, [pc, #264]	@ (8001ab8 <HAL_UART_MspInit+0x1dc>)
 80019b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019b2:	4a41      	ldr	r2, [pc, #260]	@ (8001ab8 <HAL_UART_MspInit+0x1dc>)
 80019b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80019ba:	4b3f      	ldr	r3, [pc, #252]	@ (8001ab8 <HAL_UART_MspInit+0x1dc>)
 80019bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019c2:	61bb      	str	r3, [r7, #24]
 80019c4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c6:	4b3c      	ldr	r3, [pc, #240]	@ (8001ab8 <HAL_UART_MspInit+0x1dc>)
 80019c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ca:	4a3b      	ldr	r2, [pc, #236]	@ (8001ab8 <HAL_UART_MspInit+0x1dc>)
 80019cc:	f043 0301 	orr.w	r3, r3, #1
 80019d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019d2:	4b39      	ldr	r3, [pc, #228]	@ (8001ab8 <HAL_UART_MspInit+0x1dc>)
 80019d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	617b      	str	r3, [r7, #20]
 80019dc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019de:	230c      	movs	r3, #12
 80019e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e4:	2302      	movs	r3, #2
 80019e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	2300      	movs	r3, #0
 80019ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f0:	2303      	movs	r3, #3
 80019f2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019f6:	2307      	movs	r3, #7
 80019f8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019fc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001a00:	4619      	mov	r1, r3
 8001a02:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a06:	f001 f96d 	bl	8002ce4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	2026      	movs	r0, #38	@ 0x26
 8001a10:	f000 fbfd 	bl	800220e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a14:	2026      	movs	r0, #38	@ 0x26
 8001a16:	f000 fc16 	bl	8002246 <HAL_NVIC_EnableIRQ>
}
 8001a1a:	e047      	b.n	8001aac <HAL_UART_MspInit+0x1d0>
  else if(huart->Instance==USART3)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a27      	ldr	r2, [pc, #156]	@ (8001ac0 <HAL_UART_MspInit+0x1e4>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d142      	bne.n	8001aac <HAL_UART_MspInit+0x1d0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001a26:	2304      	movs	r3, #4
 8001a28:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a32:	4618      	mov	r0, r3
 8001a34:	f002 f9f8 	bl	8003e28 <HAL_RCCEx_PeriphCLKConfig>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <HAL_UART_MspInit+0x166>
      Error_Handler();
 8001a3e:	f7ff fe7f 	bl	8001740 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a42:	4b1d      	ldr	r3, [pc, #116]	@ (8001ab8 <HAL_UART_MspInit+0x1dc>)
 8001a44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a46:	4a1c      	ldr	r2, [pc, #112]	@ (8001ab8 <HAL_UART_MspInit+0x1dc>)
 8001a48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a4e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab8 <HAL_UART_MspInit+0x1dc>)
 8001a50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a52:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a56:	613b      	str	r3, [r7, #16]
 8001a58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a5a:	4b17      	ldr	r3, [pc, #92]	@ (8001ab8 <HAL_UART_MspInit+0x1dc>)
 8001a5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a5e:	4a16      	ldr	r2, [pc, #88]	@ (8001ab8 <HAL_UART_MspInit+0x1dc>)
 8001a60:	f043 0304 	orr.w	r3, r3, #4
 8001a64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a66:	4b14      	ldr	r3, [pc, #80]	@ (8001ab8 <HAL_UART_MspInit+0x1dc>)
 8001a68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a6a:	f003 0304 	and.w	r3, r3, #4
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001a72:	2330      	movs	r3, #48	@ 0x30
 8001a74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a84:	2303      	movs	r3, #3
 8001a86:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a8a:	2307      	movs	r3, #7
 8001a8c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a90:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001a94:	4619      	mov	r1, r3
 8001a96:	480b      	ldr	r0, [pc, #44]	@ (8001ac4 <HAL_UART_MspInit+0x1e8>)
 8001a98:	f001 f924 	bl	8002ce4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	2101      	movs	r1, #1
 8001aa0:	2027      	movs	r0, #39	@ 0x27
 8001aa2:	f000 fbb4 	bl	800220e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001aa6:	2027      	movs	r0, #39	@ 0x27
 8001aa8:	f000 fbcd 	bl	8002246 <HAL_NVIC_EnableIRQ>
}
 8001aac:	bf00      	nop
 8001aae:	37c0      	adds	r7, #192	@ 0xc0
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40013800 	.word	0x40013800
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	40004400 	.word	0x40004400
 8001ac0:	40004800 	.word	0x40004800
 8001ac4:	48000800 	.word	0x48000800

08001ac8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001acc:	bf00      	nop
 8001ace:	e7fd      	b.n	8001acc <NMI_Handler+0x4>

08001ad0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ad4:	bf00      	nop
 8001ad6:	e7fd      	b.n	8001ad4 <HardFault_Handler+0x4>

08001ad8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001adc:	bf00      	nop
 8001ade:	e7fd      	b.n	8001adc <MemManage_Handler+0x4>

08001ae0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ae4:	bf00      	nop
 8001ae6:	e7fd      	b.n	8001ae4 <BusFault_Handler+0x4>

08001ae8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aec:	bf00      	nop
 8001aee:	e7fd      	b.n	8001aec <UsageFault_Handler+0x4>

08001af0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001af4:	bf00      	nop
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b10:	bf00      	nop
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b1e:	f000 fa57 	bl	8001fd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
	...

08001b28 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8001b2c:	4802      	ldr	r0, [pc, #8]	@ (8001b38 <DMA1_Channel3_IRQHandler+0x10>)
 8001b2e:	f000 fffa 	bl	8002b26 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	2000021c 	.word	0x2000021c

08001b3c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b40:	4802      	ldr	r0, [pc, #8]	@ (8001b4c <USART2_IRQHandler+0x10>)
 8001b42:	f003 fd31 	bl	80055a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000394 	.word	0x20000394

08001b50 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001b54:	4802      	ldr	r0, [pc, #8]	@ (8001b60 <USART3_IRQHandler+0x10>)
 8001b56:	f003 fd27 	bl	80055a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */


  /* USER CODE END USART3_IRQn 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	2000041c 	.word	0x2000041c

08001b64 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001b64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b66:	b091      	sub	sp, #68	@ 0x44
 8001b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001b6a:	485e      	ldr	r0, [pc, #376]	@ (8001ce4 <TIM7_IRQHandler+0x180>)
 8001b6c:	f002 ff48 	bl	8004a00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */


  printf("Start of GPS interrupt\r\n");
 8001b70:	485d      	ldr	r0, [pc, #372]	@ (8001ce8 <TIM7_IRQHandler+0x184>)
 8001b72:	f005 ff75 	bl	8007a60 <puts>
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001b76:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001b7a:	485c      	ldr	r0, [pc, #368]	@ (8001cec <TIM7_IRQHandler+0x188>)
 8001b7c:	f001 fa74 	bl	8003068 <HAL_GPIO_TogglePin>

  bzero(rx_data_gps, GPS_BUF_SIZE); //clear tx buffer
 8001b80:	4b5b      	ldr	r3, [pc, #364]	@ (8001cf0 <TIM7_IRQHandler+0x18c>)
 8001b82:	4618      	mov	r0, r3
 8001b84:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8001b88:	461a      	mov	r2, r3
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	f006 f868 	bl	8007c60 <memset>
  // printf("GPS DATA: \n\r");
  while(HAL_UART_Receive(&huart1, rx_data_gps, GPS_BUF_SIZE, 6000)!=HAL_OK){} //wait until received
 8001b90:	bf00      	nop
 8001b92:	f241 7370 	movw	r3, #6000	@ 0x1770
 8001b96:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001b9a:	4955      	ldr	r1, [pc, #340]	@ (8001cf0 <TIM7_IRQHandler+0x18c>)
 8001b9c:	4855      	ldr	r0, [pc, #340]	@ (8001cf4 <TIM7_IRQHandler+0x190>)
 8001b9e:	f003 fbee 	bl	800537e <HAL_UART_Receive>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d1f4      	bne.n	8001b92 <TIM7_IRQHandler+0x2e>
  // HAL_UART_Receive(&huart1, rx_data_gps, GPS_BUF_SIZE, 100000); //wait until received
  // printf("trasnmitting \n\r");
  // HAL_UART_Transmit(&huart2, rx_data_gps, GPS_BUF_SIZE, 10); //print received data to terminal  
  // printf("After GPS receive\n\r");

  char *gngga_loc = strstr((char *)rx_data_gps, "$GNGGA");
 8001ba8:	4953      	ldr	r1, [pc, #332]	@ (8001cf8 <TIM7_IRQHandler+0x194>)
 8001baa:	4851      	ldr	r0, [pc, #324]	@ (8001cf0 <TIM7_IRQHandler+0x18c>)
 8001bac:	f006 f86f 	bl	8007c8e <strstr>
 8001bb0:	63f8      	str	r0, [r7, #60]	@ 0x3c
  
  bzero(gngga, GNGGA_SIZE); //clear gpgga buffer
 8001bb2:	4b52      	ldr	r3, [pc, #328]	@ (8001cfc <TIM7_IRQHandler+0x198>)
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	232a      	movs	r3, #42	@ 0x2a
 8001bb8:	461a      	mov	r2, r3
 8001bba:	2100      	movs	r1, #0
 8001bbc:	f006 f850 	bl	8007c60 <memset>
  memcpy(gngga, gngga_loc, GNGGA_SIZE); //copy command to tx buffer
 8001bc0:	4a4e      	ldr	r2, [pc, #312]	@ (8001cfc <TIM7_IRQHandler+0x198>)
 8001bc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001bc4:	4610      	mov	r0, r2
 8001bc6:	f103 0420 	add.w	r4, r3, #32
 8001bca:	4602      	mov	r2, r0
 8001bcc:	4619      	mov	r1, r3
 8001bce:	f8d1 c000 	ldr.w	ip, [r1]
 8001bd2:	684e      	ldr	r6, [r1, #4]
 8001bd4:	688d      	ldr	r5, [r1, #8]
 8001bd6:	68c9      	ldr	r1, [r1, #12]
 8001bd8:	f8c2 c000 	str.w	ip, [r2]
 8001bdc:	6056      	str	r6, [r2, #4]
 8001bde:	6095      	str	r5, [r2, #8]
 8001be0:	60d1      	str	r1, [r2, #12]
 8001be2:	3310      	adds	r3, #16
 8001be4:	3010      	adds	r0, #16
 8001be6:	42a3      	cmp	r3, r4
 8001be8:	d1ef      	bne.n	8001bca <TIM7_IRQHandler+0x66>
 8001bea:	4602      	mov	r2, r0
 8001bec:	6818      	ldr	r0, [r3, #0]
 8001bee:	6859      	ldr	r1, [r3, #4]
 8001bf0:	6010      	str	r0, [r2, #0]
 8001bf2:	6051      	str	r1, [r2, #4]
 8001bf4:	891b      	ldrh	r3, [r3, #8]
 8001bf6:	8113      	strh	r3, [r2, #8]
  if(gngga_loc != NULL){
 8001bf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d05c      	beq.n	8001cb8 <TIM7_IRQHandler+0x154>
    printf("GNGGA DATA: %s\n\r", gngga);
 8001bfe:	493f      	ldr	r1, [pc, #252]	@ (8001cfc <TIM7_IRQHandler+0x198>)
 8001c00:	483f      	ldr	r0, [pc, #252]	@ (8001d00 <TIM7_IRQHandler+0x19c>)
 8001c02:	f005 fec5 	bl	8007990 <iprintf>

    if(gngga[18] == ','){ //No fix found
 8001c06:	4b3d      	ldr	r3, [pc, #244]	@ (8001cfc <TIM7_IRQHandler+0x198>)
 8001c08:	7c9b      	ldrb	r3, [r3, #18]
 8001c0a:	2b2c      	cmp	r3, #44	@ 0x2c
 8001c0c:	d10c      	bne.n	8001c28 <TIM7_IRQHandler+0xc4>
      // HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c14:	4835      	ldr	r0, [pc, #212]	@ (8001cec <TIM7_IRQHandler+0x188>)
 8001c16:	f001 fa0f 	bl	8003038 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c20:	4832      	ldr	r0, [pc, #200]	@ (8001cec <TIM7_IRQHandler+0x188>)
 8001c22:	f001 fa09 	bl	8003038 <HAL_GPIO_WritePin>
 8001c26:	e056      	b.n	8001cd6 <TIM7_IRQHandler+0x172>
    }else{ //fix found
      // HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c2e:	482f      	ldr	r0, [pc, #188]	@ (8001cec <TIM7_IRQHandler+0x188>)
 8001c30:	f001 fa02 	bl	8003038 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 8001c34:	2201      	movs	r2, #1
 8001c36:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c3a:	482c      	ldr	r0, [pc, #176]	@ (8001cec <TIM7_IRQHandler+0x188>)
 8001c3c:	f001 f9fc 	bl	8003038 <HAL_GPIO_WritePin>
      
      char txsend[55] = "AT+SEND=123,42,";
 8001c40:	4b30      	ldr	r3, [pc, #192]	@ (8001d04 <TIM7_IRQHandler+0x1a0>)
 8001c42:	1d3c      	adds	r4, r7, #4
 8001c44:	6818      	ldr	r0, [r3, #0]
 8001c46:	6859      	ldr	r1, [r3, #4]
 8001c48:	689a      	ldr	r2, [r3, #8]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c4e:	f107 0314 	add.w	r3, r7, #20
 8001c52:	2227      	movs	r2, #39	@ 0x27
 8001c54:	2100      	movs	r1, #0
 8001c56:	4618      	mov	r0, r3
 8001c58:	f006 f802 	bl	8007c60 <memset>
      strcat(txsend, gngga);
 8001c5c:	1d3b      	adds	r3, r7, #4
 8001c5e:	4927      	ldr	r1, [pc, #156]	@ (8001cfc <TIM7_IRQHandler+0x198>)
 8001c60:	4618      	mov	r0, r3
 8001c62:	f006 f805 	bl	8007c70 <strcat>
      strcat(txsend, "\r\n");
 8001c66:	1d3b      	adds	r3, r7, #4
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7fe fb01 	bl	8000270 <strlen>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	461a      	mov	r2, r3
 8001c72:	1d3b      	adds	r3, r7, #4
 8001c74:	4413      	add	r3, r2
 8001c76:	4a24      	ldr	r2, [pc, #144]	@ (8001d08 <TIM7_IRQHandler+0x1a4>)
 8001c78:	8811      	ldrh	r1, [r2, #0]
 8001c7a:	7892      	ldrb	r2, [r2, #2]
 8001c7c:	8019      	strh	r1, [r3, #0]
 8001c7e:	709a      	strb	r2, [r3, #2]
      printf("RX gps: %s", txsend);
 8001c80:	1d3b      	adds	r3, r7, #4
 8001c82:	4619      	mov	r1, r3
 8001c84:	4821      	ldr	r0, [pc, #132]	@ (8001d0c <TIM7_IRQHandler+0x1a8>)
 8001c86:	f005 fe83 	bl	8007990 <iprintf>
      
      HAL_UART_Transmit(&huart3, txsend, strlen(txsend), 1000);
 8001c8a:	1d3b      	adds	r3, r7, #4
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7fe faef 	bl	8000270 <strlen>
 8001c92:	4603      	mov	r3, r0
 8001c94:	b29a      	uxth	r2, r3
 8001c96:	1d39      	adds	r1, r7, #4
 8001c98:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c9c:	481c      	ldr	r0, [pc, #112]	@ (8001d10 <TIM7_IRQHandler+0x1ac>)
 8001c9e:	f003 fae5 	bl	800526c <HAL_UART_Transmit>
      bzero(rx_data_lora, LORA_BUF_SIZE);
 8001ca2:	4b1c      	ldr	r3, [pc, #112]	@ (8001d14 <TIM7_IRQHandler+0x1b0>)
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	23f0      	movs	r3, #240	@ 0xf0
 8001ca8:	461a      	mov	r2, r3
 8001caa:	2100      	movs	r1, #0
 8001cac:	f005 ffd8 	bl	8007c60 <memset>
      printf("Done Sending\r\n");
 8001cb0:	4819      	ldr	r0, [pc, #100]	@ (8001d18 <TIM7_IRQHandler+0x1b4>)
 8001cb2:	f005 fed5 	bl	8007a60 <puts>
 8001cb6:	e00e      	b.n	8001cd6 <TIM7_IRQHandler+0x172>
    }
      
    
  }
  else{
    printf("None found\n\r");
 8001cb8:	4818      	ldr	r0, [pc, #96]	@ (8001d1c <TIM7_IRQHandler+0x1b8>)
 8001cba:	f005 fe69 	bl	8007990 <iprintf>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001cc4:	4809      	ldr	r0, [pc, #36]	@ (8001cec <TIM7_IRQHandler+0x188>)
 8001cc6:	f001 f9b7 	bl	8003038 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001cd0:	4806      	ldr	r0, [pc, #24]	@ (8001cec <TIM7_IRQHandler+0x188>)
 8001cd2:	f001 f9b1 	bl	8003038 <HAL_GPIO_WritePin>
  }
  HAL_IWDG_Refresh(&hiwdg);
 8001cd6:	4812      	ldr	r0, [pc, #72]	@ (8001d20 <TIM7_IRQHandler+0x1bc>)
 8001cd8:	f001 fa31 	bl	800313e <HAL_IWDG_Refresh>

  /* USER CODE END TIM7_IRQn 1 */
}
 8001cdc:	bf00      	nop
 8001cde:	3744      	adds	r7, #68	@ 0x44
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ce4:	200002c0 	.word	0x200002c0
 8001ce8:	0800b3e8 	.word	0x0800b3e8
 8001cec:	48000400 	.word	0x48000400
 8001cf0:	20000684 	.word	0x20000684
 8001cf4:	2000030c 	.word	0x2000030c
 8001cf8:	0800b400 	.word	0x0800b400
 8001cfc:	200007b0 	.word	0x200007b0
 8001d00:	0800b408 	.word	0x0800b408
 8001d04:	0800b44c 	.word	0x0800b44c
 8001d08:	0800b41c 	.word	0x0800b41c
 8001d0c:	0800b420 	.word	0x0800b420
 8001d10:	2000041c 	.word	0x2000041c
 8001d14:	20000594 	.word	0x20000594
 8001d18:	0800b42c 	.word	0x0800b42c
 8001d1c:	0800b43c 	.word	0x0800b43c
 8001d20:	20000264 	.word	0x20000264

08001d24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  return 1;
 8001d28:	2301      	movs	r3, #1
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <_kill>:

int _kill(int pid, int sig)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d3e:	f006 f807 	bl	8007d50 <__errno>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2216      	movs	r2, #22
 8001d46:	601a      	str	r2, [r3, #0]
  return -1;
 8001d48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <_exit>:

void _exit (int status)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f7ff ffe7 	bl	8001d34 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d66:	bf00      	nop
 8001d68:	e7fd      	b.n	8001d66 <_exit+0x12>

08001d6a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b086      	sub	sp, #24
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	60f8      	str	r0, [r7, #12]
 8001d72:	60b9      	str	r1, [r7, #8]
 8001d74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d76:	2300      	movs	r3, #0
 8001d78:	617b      	str	r3, [r7, #20]
 8001d7a:	e00a      	b.n	8001d92 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d7c:	f3af 8000 	nop.w
 8001d80:	4601      	mov	r1, r0
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	1c5a      	adds	r2, r3, #1
 8001d86:	60ba      	str	r2, [r7, #8]
 8001d88:	b2ca      	uxtb	r2, r1
 8001d8a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	617b      	str	r3, [r7, #20]
 8001d92:	697a      	ldr	r2, [r7, #20]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	dbf0      	blt.n	8001d7c <_read+0x12>
  }

  return len;
 8001d9a:	687b      	ldr	r3, [r7, #4]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3718      	adds	r7, #24
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001db0:	2300      	movs	r3, #0
 8001db2:	617b      	str	r3, [r7, #20]
 8001db4:	e009      	b.n	8001dca <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	1c5a      	adds	r2, r3, #1
 8001dba:	60ba      	str	r2, [r7, #8]
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff f910 	bl	8000fe4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	617b      	str	r3, [r7, #20]
 8001dca:	697a      	ldr	r2, [r7, #20]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	dbf1      	blt.n	8001db6 <_write+0x12>
  }
  return len;
 8001dd2:	687b      	ldr	r3, [r7, #4]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3718      	adds	r7, #24
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <_close>:

int _close(int file)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001de4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e04:	605a      	str	r2, [r3, #4]
  return 0;
 8001e06:	2300      	movs	r3, #0
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <_isatty>:

int _isatty(int file)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e1c:	2301      	movs	r3, #1
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr

08001e2a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	b085      	sub	sp, #20
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	60f8      	str	r0, [r7, #12]
 8001e32:	60b9      	str	r1, [r7, #8]
 8001e34:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3714      	adds	r7, #20
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e4c:	4a14      	ldr	r2, [pc, #80]	@ (8001ea0 <_sbrk+0x5c>)
 8001e4e:	4b15      	ldr	r3, [pc, #84]	@ (8001ea4 <_sbrk+0x60>)
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e58:	4b13      	ldr	r3, [pc, #76]	@ (8001ea8 <_sbrk+0x64>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d102      	bne.n	8001e66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e60:	4b11      	ldr	r3, [pc, #68]	@ (8001ea8 <_sbrk+0x64>)
 8001e62:	4a12      	ldr	r2, [pc, #72]	@ (8001eac <_sbrk+0x68>)
 8001e64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e66:	4b10      	ldr	r3, [pc, #64]	@ (8001ea8 <_sbrk+0x64>)
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d207      	bcs.n	8001e84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e74:	f005 ff6c 	bl	8007d50 <__errno>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	220c      	movs	r2, #12
 8001e7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e82:	e009      	b.n	8001e98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e84:	4b08      	ldr	r3, [pc, #32]	@ (8001ea8 <_sbrk+0x64>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e8a:	4b07      	ldr	r3, [pc, #28]	@ (8001ea8 <_sbrk+0x64>)
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4413      	add	r3, r2
 8001e92:	4a05      	ldr	r2, [pc, #20]	@ (8001ea8 <_sbrk+0x64>)
 8001e94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e96:	68fb      	ldr	r3, [r7, #12]
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3718      	adds	r7, #24
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	20018000 	.word	0x20018000
 8001ea4:	00000400 	.word	0x00000400
 8001ea8:	200007e8 	.word	0x200007e8
 8001eac:	20000940 	.word	0x20000940

08001eb0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001eb4:	4b06      	ldr	r3, [pc, #24]	@ (8001ed0 <SystemInit+0x20>)
 8001eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001eba:	4a05      	ldr	r2, [pc, #20]	@ (8001ed0 <SystemInit+0x20>)
 8001ebc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ec0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001ec4:	bf00      	nop
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	e000ed00 	.word	0xe000ed00

08001ed4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ed4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f0c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ed8:	f7ff ffea 	bl	8001eb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001edc:	480c      	ldr	r0, [pc, #48]	@ (8001f10 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ede:	490d      	ldr	r1, [pc, #52]	@ (8001f14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ee0:	4a0d      	ldr	r2, [pc, #52]	@ (8001f18 <LoopForever+0xe>)
  movs r3, #0
 8001ee2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ee4:	e002      	b.n	8001eec <LoopCopyDataInit>

08001ee6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ee6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ee8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eea:	3304      	adds	r3, #4

08001eec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ef0:	d3f9      	bcc.n	8001ee6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ef2:	4a0a      	ldr	r2, [pc, #40]	@ (8001f1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ef4:	4c0a      	ldr	r4, [pc, #40]	@ (8001f20 <LoopForever+0x16>)
  movs r3, #0
 8001ef6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ef8:	e001      	b.n	8001efe <LoopFillZerobss>

08001efa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001efa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001efc:	3204      	adds	r2, #4

08001efe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001efe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f00:	d3fb      	bcc.n	8001efa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f02:	f005 ff2b 	bl	8007d5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f06:	f7ff f87f 	bl	8001008 <main>

08001f0a <LoopForever>:

LoopForever:
    b LoopForever
 8001f0a:	e7fe      	b.n	8001f0a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001f0c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001f10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f14:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001f18:	0801ab78 	.word	0x0801ab78
  ldr r2, =_sbss
 8001f1c:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001f20:	2000093c 	.word	0x2000093c

08001f24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f24:	e7fe      	b.n	8001f24 <ADC1_2_IRQHandler>

08001f26 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b082      	sub	sp, #8
 8001f2a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f30:	2003      	movs	r0, #3
 8001f32:	f000 f961 	bl	80021f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f36:	200f      	movs	r0, #15
 8001f38:	f000 f80e 	bl	8001f58 <HAL_InitTick>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d002      	beq.n	8001f48 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	71fb      	strb	r3, [r7, #7]
 8001f46:	e001      	b.n	8001f4c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f48:	f7ff fc00 	bl	800174c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f4c:	79fb      	ldrb	r3, [r7, #7]
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
	...

08001f58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f60:	2300      	movs	r3, #0
 8001f62:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001f64:	4b17      	ldr	r3, [pc, #92]	@ (8001fc4 <HAL_InitTick+0x6c>)
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d023      	beq.n	8001fb4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001f6c:	4b16      	ldr	r3, [pc, #88]	@ (8001fc8 <HAL_InitTick+0x70>)
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	4b14      	ldr	r3, [pc, #80]	@ (8001fc4 <HAL_InitTick+0x6c>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	4619      	mov	r1, r3
 8001f76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f82:	4618      	mov	r0, r3
 8001f84:	f000 f96d 	bl	8002262 <HAL_SYSTICK_Config>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d10f      	bne.n	8001fae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2b0f      	cmp	r3, #15
 8001f92:	d809      	bhi.n	8001fa8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f94:	2200      	movs	r2, #0
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	f04f 30ff 	mov.w	r0, #4294967295
 8001f9c:	f000 f937 	bl	800220e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fa0:	4a0a      	ldr	r2, [pc, #40]	@ (8001fcc <HAL_InitTick+0x74>)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6013      	str	r3, [r2, #0]
 8001fa6:	e007      	b.n	8001fb8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	73fb      	strb	r3, [r7, #15]
 8001fac:	e004      	b.n	8001fb8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	73fb      	strb	r3, [r7, #15]
 8001fb2:	e001      	b.n	8001fb8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	20000020 	.word	0x20000020
 8001fc8:	20000018 	.word	0x20000018
 8001fcc:	2000001c 	.word	0x2000001c

08001fd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001fd4:	4b06      	ldr	r3, [pc, #24]	@ (8001ff0 <HAL_IncTick+0x20>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	461a      	mov	r2, r3
 8001fda:	4b06      	ldr	r3, [pc, #24]	@ (8001ff4 <HAL_IncTick+0x24>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4413      	add	r3, r2
 8001fe0:	4a04      	ldr	r2, [pc, #16]	@ (8001ff4 <HAL_IncTick+0x24>)
 8001fe2:	6013      	str	r3, [r2, #0]
}
 8001fe4:	bf00      	nop
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	20000020 	.word	0x20000020
 8001ff4:	200007ec 	.word	0x200007ec

08001ff8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  return uwTick;
 8001ffc:	4b03      	ldr	r3, [pc, #12]	@ (800200c <HAL_GetTick+0x14>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
}
 8002000:	4618      	mov	r0, r3
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	200007ec 	.word	0x200007ec

08002010 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002018:	f7ff ffee 	bl	8001ff8 <HAL_GetTick>
 800201c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002028:	d005      	beq.n	8002036 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800202a:	4b0a      	ldr	r3, [pc, #40]	@ (8002054 <HAL_Delay+0x44>)
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	461a      	mov	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	4413      	add	r3, r2
 8002034:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002036:	bf00      	nop
 8002038:	f7ff ffde 	bl	8001ff8 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	429a      	cmp	r2, r3
 8002046:	d8f7      	bhi.n	8002038 <HAL_Delay+0x28>
  {
  }
}
 8002048:	bf00      	nop
 800204a:	bf00      	nop
 800204c:	3710      	adds	r7, #16
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	20000020 	.word	0x20000020

08002058 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002058:	b480      	push	{r7}
 800205a:	b085      	sub	sp, #20
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f003 0307 	and.w	r3, r3, #7
 8002066:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002068:	4b0c      	ldr	r3, [pc, #48]	@ (800209c <__NVIC_SetPriorityGrouping+0x44>)
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800206e:	68ba      	ldr	r2, [r7, #8]
 8002070:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002074:	4013      	ands	r3, r2
 8002076:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002080:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002084:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002088:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800208a:	4a04      	ldr	r2, [pc, #16]	@ (800209c <__NVIC_SetPriorityGrouping+0x44>)
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	60d3      	str	r3, [r2, #12]
}
 8002090:	bf00      	nop
 8002092:	3714      	adds	r7, #20
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	e000ed00 	.word	0xe000ed00

080020a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020a4:	4b04      	ldr	r3, [pc, #16]	@ (80020b8 <__NVIC_GetPriorityGrouping+0x18>)
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	0a1b      	lsrs	r3, r3, #8
 80020aa:	f003 0307 	and.w	r3, r3, #7
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr
 80020b8:	e000ed00 	.word	0xe000ed00

080020bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	4603      	mov	r3, r0
 80020c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	db0b      	blt.n	80020e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020ce:	79fb      	ldrb	r3, [r7, #7]
 80020d0:	f003 021f 	and.w	r2, r3, #31
 80020d4:	4907      	ldr	r1, [pc, #28]	@ (80020f4 <__NVIC_EnableIRQ+0x38>)
 80020d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020da:	095b      	lsrs	r3, r3, #5
 80020dc:	2001      	movs	r0, #1
 80020de:	fa00 f202 	lsl.w	r2, r0, r2
 80020e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020e6:	bf00      	nop
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	e000e100 	.word	0xe000e100

080020f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	4603      	mov	r3, r0
 8002100:	6039      	str	r1, [r7, #0]
 8002102:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002108:	2b00      	cmp	r3, #0
 800210a:	db0a      	blt.n	8002122 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	b2da      	uxtb	r2, r3
 8002110:	490c      	ldr	r1, [pc, #48]	@ (8002144 <__NVIC_SetPriority+0x4c>)
 8002112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002116:	0112      	lsls	r2, r2, #4
 8002118:	b2d2      	uxtb	r2, r2
 800211a:	440b      	add	r3, r1
 800211c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002120:	e00a      	b.n	8002138 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	b2da      	uxtb	r2, r3
 8002126:	4908      	ldr	r1, [pc, #32]	@ (8002148 <__NVIC_SetPriority+0x50>)
 8002128:	79fb      	ldrb	r3, [r7, #7]
 800212a:	f003 030f 	and.w	r3, r3, #15
 800212e:	3b04      	subs	r3, #4
 8002130:	0112      	lsls	r2, r2, #4
 8002132:	b2d2      	uxtb	r2, r2
 8002134:	440b      	add	r3, r1
 8002136:	761a      	strb	r2, [r3, #24]
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	e000e100 	.word	0xe000e100
 8002148:	e000ed00 	.word	0xe000ed00

0800214c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800214c:	b480      	push	{r7}
 800214e:	b089      	sub	sp, #36	@ 0x24
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f003 0307 	and.w	r3, r3, #7
 800215e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	f1c3 0307 	rsb	r3, r3, #7
 8002166:	2b04      	cmp	r3, #4
 8002168:	bf28      	it	cs
 800216a:	2304      	movcs	r3, #4
 800216c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	3304      	adds	r3, #4
 8002172:	2b06      	cmp	r3, #6
 8002174:	d902      	bls.n	800217c <NVIC_EncodePriority+0x30>
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	3b03      	subs	r3, #3
 800217a:	e000      	b.n	800217e <NVIC_EncodePriority+0x32>
 800217c:	2300      	movs	r3, #0
 800217e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002180:	f04f 32ff 	mov.w	r2, #4294967295
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	43da      	mvns	r2, r3
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	401a      	ands	r2, r3
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002194:	f04f 31ff 	mov.w	r1, #4294967295
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	fa01 f303 	lsl.w	r3, r1, r3
 800219e:	43d9      	mvns	r1, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a4:	4313      	orrs	r3, r2
         );
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3724      	adds	r7, #36	@ 0x24
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
	...

080021b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	3b01      	subs	r3, #1
 80021c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021c4:	d301      	bcc.n	80021ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021c6:	2301      	movs	r3, #1
 80021c8:	e00f      	b.n	80021ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021ca:	4a0a      	ldr	r2, [pc, #40]	@ (80021f4 <SysTick_Config+0x40>)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	3b01      	subs	r3, #1
 80021d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021d2:	210f      	movs	r1, #15
 80021d4:	f04f 30ff 	mov.w	r0, #4294967295
 80021d8:	f7ff ff8e 	bl	80020f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021dc:	4b05      	ldr	r3, [pc, #20]	@ (80021f4 <SysTick_Config+0x40>)
 80021de:	2200      	movs	r2, #0
 80021e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021e2:	4b04      	ldr	r3, [pc, #16]	@ (80021f4 <SysTick_Config+0x40>)
 80021e4:	2207      	movs	r2, #7
 80021e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	e000e010 	.word	0xe000e010

080021f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f7ff ff29 	bl	8002058 <__NVIC_SetPriorityGrouping>
}
 8002206:	bf00      	nop
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b086      	sub	sp, #24
 8002212:	af00      	add	r7, sp, #0
 8002214:	4603      	mov	r3, r0
 8002216:	60b9      	str	r1, [r7, #8]
 8002218:	607a      	str	r2, [r7, #4]
 800221a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800221c:	2300      	movs	r3, #0
 800221e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002220:	f7ff ff3e 	bl	80020a0 <__NVIC_GetPriorityGrouping>
 8002224:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	68b9      	ldr	r1, [r7, #8]
 800222a:	6978      	ldr	r0, [r7, #20]
 800222c:	f7ff ff8e 	bl	800214c <NVIC_EncodePriority>
 8002230:	4602      	mov	r2, r0
 8002232:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002236:	4611      	mov	r1, r2
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff ff5d 	bl	80020f8 <__NVIC_SetPriority>
}
 800223e:	bf00      	nop
 8002240:	3718      	adds	r7, #24
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b082      	sub	sp, #8
 800224a:	af00      	add	r7, sp, #0
 800224c:	4603      	mov	r3, r0
 800224e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff ff31 	bl	80020bc <__NVIC_EnableIRQ>
}
 800225a:	bf00      	nop
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	b082      	sub	sp, #8
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f7ff ffa2 	bl	80021b4 <SysTick_Config>
 8002270:	4603      	mov	r3, r0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800227a:	b580      	push	{r7, lr}
 800227c:	b082      	sub	sp, #8
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d101      	bne.n	800228c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e014      	b.n	80022b6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	791b      	ldrb	r3, [r3, #4]
 8002290:	b2db      	uxtb	r3, r3
 8002292:	2b00      	cmp	r3, #0
 8002294:	d105      	bne.n	80022a2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f7ff fa79 	bl	8001794 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2202      	movs	r2, #2
 80022a6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2201      	movs	r2, #1
 80022b2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
	...

080022c0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
 80022cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80022ce:	2300      	movs	r3, #0
 80022d0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	795b      	ldrb	r3, [r3, #5]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d101      	bne.n	80022de <HAL_DAC_Start_DMA+0x1e>
 80022da:	2302      	movs	r3, #2
 80022dc:	e0ab      	b.n	8002436 <HAL_DAC_Start_DMA+0x176>
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2201      	movs	r2, #1
 80022e2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2202      	movs	r2, #2
 80022e8:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d12f      	bne.n	8002350 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	4a52      	ldr	r2, [pc, #328]	@ (8002440 <HAL_DAC_Start_DMA+0x180>)
 80022f6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	4a51      	ldr	r2, [pc, #324]	@ (8002444 <HAL_DAC_Start_DMA+0x184>)
 80022fe:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	4a50      	ldr	r2, [pc, #320]	@ (8002448 <HAL_DAC_Start_DMA+0x188>)
 8002306:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002316:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002318:	6a3b      	ldr	r3, [r7, #32]
 800231a:	2b08      	cmp	r3, #8
 800231c:	d013      	beq.n	8002346 <HAL_DAC_Start_DMA+0x86>
 800231e:	6a3b      	ldr	r3, [r7, #32]
 8002320:	2b08      	cmp	r3, #8
 8002322:	d845      	bhi.n	80023b0 <HAL_DAC_Start_DMA+0xf0>
 8002324:	6a3b      	ldr	r3, [r7, #32]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d003      	beq.n	8002332 <HAL_DAC_Start_DMA+0x72>
 800232a:	6a3b      	ldr	r3, [r7, #32]
 800232c:	2b04      	cmp	r3, #4
 800232e:	d005      	beq.n	800233c <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002330:	e03e      	b.n	80023b0 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	3308      	adds	r3, #8
 8002338:	613b      	str	r3, [r7, #16]
        break;
 800233a:	e03c      	b.n	80023b6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	330c      	adds	r3, #12
 8002342:	613b      	str	r3, [r7, #16]
        break;
 8002344:	e037      	b.n	80023b6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	3310      	adds	r3, #16
 800234c:	613b      	str	r3, [r7, #16]
        break;
 800234e:	e032      	b.n	80023b6 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	4a3d      	ldr	r2, [pc, #244]	@ (800244c <HAL_DAC_Start_DMA+0x18c>)
 8002356:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	4a3c      	ldr	r2, [pc, #240]	@ (8002450 <HAL_DAC_Start_DMA+0x190>)
 800235e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	4a3b      	ldr	r2, [pc, #236]	@ (8002454 <HAL_DAC_Start_DMA+0x194>)
 8002366:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002376:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002378:	6a3b      	ldr	r3, [r7, #32]
 800237a:	2b08      	cmp	r3, #8
 800237c:	d013      	beq.n	80023a6 <HAL_DAC_Start_DMA+0xe6>
 800237e:	6a3b      	ldr	r3, [r7, #32]
 8002380:	2b08      	cmp	r3, #8
 8002382:	d817      	bhi.n	80023b4 <HAL_DAC_Start_DMA+0xf4>
 8002384:	6a3b      	ldr	r3, [r7, #32]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <HAL_DAC_Start_DMA+0xd2>
 800238a:	6a3b      	ldr	r3, [r7, #32]
 800238c:	2b04      	cmp	r3, #4
 800238e:	d005      	beq.n	800239c <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002390:	e010      	b.n	80023b4 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	3314      	adds	r3, #20
 8002398:	613b      	str	r3, [r7, #16]
        break;
 800239a:	e00c      	b.n	80023b6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	3318      	adds	r3, #24
 80023a2:	613b      	str	r3, [r7, #16]
        break;
 80023a4:	e007      	b.n	80023b6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	331c      	adds	r3, #28
 80023ac:	613b      	str	r3, [r7, #16]
        break;
 80023ae:	e002      	b.n	80023b6 <HAL_DAC_Start_DMA+0xf6>
        break;
 80023b0:	bf00      	nop
 80023b2:	e000      	b.n	80023b6 <HAL_DAC_Start_DMA+0xf6>
        break;
 80023b4:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d111      	bne.n	80023e0 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80023ca:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6898      	ldr	r0, [r3, #8]
 80023d0:	6879      	ldr	r1, [r7, #4]
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	f000 fac7 	bl	8002968 <HAL_DMA_Start_IT>
 80023da:	4603      	mov	r3, r0
 80023dc:	75fb      	strb	r3, [r7, #23]
 80023de:	e010      	b.n	8002402 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80023ee:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	68d8      	ldr	r0, [r3, #12]
 80023f4:	6879      	ldr	r1, [r7, #4]
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	f000 fab5 	bl	8002968 <HAL_DMA_Start_IT>
 80023fe:	4603      	mov	r3, r0
 8002400:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2200      	movs	r2, #0
 8002406:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002408:	7dfb      	ldrb	r3, [r7, #23]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d10c      	bne.n	8002428 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6819      	ldr	r1, [r3, #0]
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	f003 0310 	and.w	r3, r3, #16
 800241a:	2201      	movs	r2, #1
 800241c:	409a      	lsls	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	430a      	orrs	r2, r1
 8002424:	601a      	str	r2, [r3, #0]
 8002426:	e005      	b.n	8002434 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	691b      	ldr	r3, [r3, #16]
 800242c:	f043 0204 	orr.w	r2, r3, #4
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002434:	7dfb      	ldrb	r3, [r7, #23]
}
 8002436:	4618      	mov	r0, r3
 8002438:	3718      	adds	r7, #24
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	080026e3 	.word	0x080026e3
 8002444:	08002705 	.word	0x08002705
 8002448:	08002721 	.word	0x08002721
 800244c:	0800278b 	.word	0x0800278b
 8002450:	080027ad 	.word	0x080027ad
 8002454:	080027c9 	.word	0x080027c9

08002458 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b088      	sub	sp, #32
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80024a0:	2300      	movs	r3, #0
 80024a2:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	795b      	ldrb	r3, [r3, #5]
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d101      	bne.n	80024b0 <HAL_DAC_ConfigChannel+0x1c>
 80024ac:	2302      	movs	r3, #2
 80024ae:	e114      	b.n	80026da <HAL_DAC_ConfigChannel+0x246>
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2201      	movs	r2, #1
 80024b4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2202      	movs	r2, #2
 80024ba:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2b04      	cmp	r3, #4
 80024c2:	f040 8081 	bne.w	80025c8 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80024c6:	f7ff fd97 	bl	8001ff8 <HAL_GetTick>
 80024ca:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d140      	bne.n	8002554 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80024d2:	e018      	b.n	8002506 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80024d4:	f7ff fd90 	bl	8001ff8 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d911      	bls.n	8002506 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d00a      	beq.n	8002506 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	f043 0208 	orr.w	r2, r3, #8
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2203      	movs	r2, #3
 8002500:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e0e9      	b.n	80026da <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800250c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1df      	bne.n	80024d4 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8002514:	2001      	movs	r0, #1
 8002516:	f7ff fd7b 	bl	8002010 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68ba      	ldr	r2, [r7, #8]
 8002520:	6992      	ldr	r2, [r2, #24]
 8002522:	641a      	str	r2, [r3, #64]	@ 0x40
 8002524:	e023      	b.n	800256e <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002526:	f7ff fd67 	bl	8001ff8 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b01      	cmp	r3, #1
 8002532:	d90f      	bls.n	8002554 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800253a:	2b00      	cmp	r3, #0
 800253c:	da0a      	bge.n	8002554 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	f043 0208 	orr.w	r2, r3, #8
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2203      	movs	r2, #3
 800254e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e0c2      	b.n	80026da <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800255a:	2b00      	cmp	r3, #0
 800255c:	dbe3      	blt.n	8002526 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 800255e:	2001      	movs	r0, #1
 8002560:	f7ff fd56 	bl	8002010 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	68ba      	ldr	r2, [r7, #8]
 800256a:	6992      	ldr	r2, [r2, #24]
 800256c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f003 0310 	and.w	r3, r3, #16
 800257a:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800257e:	fa01 f303 	lsl.w	r3, r1, r3
 8002582:	43db      	mvns	r3, r3
 8002584:	ea02 0103 	and.w	r1, r2, r3
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	69da      	ldr	r2, [r3, #28]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f003 0310 	and.w	r3, r3, #16
 8002592:	409a      	lsls	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	430a      	orrs	r2, r1
 800259a:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f003 0310 	and.w	r3, r3, #16
 80025a8:	21ff      	movs	r1, #255	@ 0xff
 80025aa:	fa01 f303 	lsl.w	r3, r1, r3
 80025ae:	43db      	mvns	r3, r3
 80025b0:	ea02 0103 	and.w	r1, r2, r3
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	6a1a      	ldr	r2, [r3, #32]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f003 0310 	and.w	r3, r3, #16
 80025be:	409a      	lsls	r2, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	430a      	orrs	r2, r1
 80025c6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d11d      	bne.n	800260c <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025d6:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f003 0310 	and.w	r3, r3, #16
 80025de:	221f      	movs	r2, #31
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	43db      	mvns	r3, r3
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	4013      	ands	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	695b      	ldr	r3, [r3, #20]
 80025f0:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f003 0310 	and.w	r3, r3, #16
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	fa02 f303 	lsl.w	r3, r2, r3
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	4313      	orrs	r3, r2
 8002602:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002612:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f003 0310 	and.w	r3, r3, #16
 800261a:	2207      	movs	r2, #7
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	43db      	mvns	r3, r3
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	4013      	ands	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	431a      	orrs	r2, r3
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	4313      	orrs	r3, r2
 8002638:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f003 0310 	and.w	r3, r3, #16
 8002640:	697a      	ldr	r2, [r7, #20]
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	4313      	orrs	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	6819      	ldr	r1, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f003 0310 	and.w	r3, r3, #16
 8002660:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	43da      	mvns	r2, r3
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	400a      	ands	r2, r1
 8002670:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f003 0310 	and.w	r3, r3, #16
 8002680:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	43db      	mvns	r3, r3
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	4013      	ands	r3, r2
 800268e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f003 0310 	and.w	r3, r3, #16
 800269c:	697a      	ldr	r2, [r7, #20]
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6819      	ldr	r1, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f003 0310 	and.w	r3, r3, #16
 80026bc:	22c0      	movs	r2, #192	@ 0xc0
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	43da      	mvns	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	400a      	ands	r2, r1
 80026ca:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2201      	movs	r2, #1
 80026d0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2200      	movs	r2, #0
 80026d6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3720      	adds	r7, #32
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b084      	sub	sp, #16
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ee:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80026f0:	68f8      	ldr	r0, [r7, #12]
 80026f2:	f7ff feb1 	bl	8002458 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2201      	movs	r2, #1
 80026fa:	711a      	strb	r2, [r3, #4]
}
 80026fc:	bf00      	nop
 80026fe:	3710      	adds	r7, #16
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002710:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002712:	68f8      	ldr	r0, [r7, #12]
 8002714:	f7ff feaa 	bl	800246c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002718:	bf00      	nop
 800271a:	3710      	adds	r7, #16
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800272c:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	f043 0204 	orr.w	r2, r3, #4
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800273a:	68f8      	ldr	r0, [r7, #12]
 800273c:	f7ff fea0 	bl	8002480 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2201      	movs	r2, #1
 8002744:	711a      	strb	r2, [r3, #4]
}
 8002746:	bf00      	nop
 8002748:	3710      	adds	r7, #16
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800274e:	b480      	push	{r7}
 8002750:	b083      	sub	sp, #12
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002756:	bf00      	nop
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr

08002762 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002762:	b480      	push	{r7}
 8002764:	b083      	sub	sp, #12
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800276a:	bf00      	nop
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr

08002776 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002776:	b480      	push	{r7}
 8002778:	b083      	sub	sp, #12
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800277e:	bf00      	nop
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr

0800278a <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b084      	sub	sp, #16
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002796:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f7ff ffd8 	bl	800274e <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2201      	movs	r2, #1
 80027a2:	711a      	strb	r2, [r3, #4]
}
 80027a4:	bf00      	nop
 80027a6:	3710      	adds	r7, #16
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027b8:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	f7ff ffd1 	bl	8002762 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80027c0:	bf00      	nop
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027d4:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	f043 0204 	orr.w	r2, r3, #4
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	f7ff ffc7 	bl	8002776 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2201      	movs	r2, #1
 80027ec:	711a      	strb	r2, [r3, #4]
}
 80027ee:	bf00      	nop
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
	...

080027f8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b085      	sub	sp, #20
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e098      	b.n	800293c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	461a      	mov	r2, r3
 8002810:	4b4d      	ldr	r3, [pc, #308]	@ (8002948 <HAL_DMA_Init+0x150>)
 8002812:	429a      	cmp	r2, r3
 8002814:	d80f      	bhi.n	8002836 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	461a      	mov	r2, r3
 800281c:	4b4b      	ldr	r3, [pc, #300]	@ (800294c <HAL_DMA_Init+0x154>)
 800281e:	4413      	add	r3, r2
 8002820:	4a4b      	ldr	r2, [pc, #300]	@ (8002950 <HAL_DMA_Init+0x158>)
 8002822:	fba2 2303 	umull	r2, r3, r2, r3
 8002826:	091b      	lsrs	r3, r3, #4
 8002828:	009a      	lsls	r2, r3, #2
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a48      	ldr	r2, [pc, #288]	@ (8002954 <HAL_DMA_Init+0x15c>)
 8002832:	641a      	str	r2, [r3, #64]	@ 0x40
 8002834:	e00e      	b.n	8002854 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	461a      	mov	r2, r3
 800283c:	4b46      	ldr	r3, [pc, #280]	@ (8002958 <HAL_DMA_Init+0x160>)
 800283e:	4413      	add	r3, r2
 8002840:	4a43      	ldr	r2, [pc, #268]	@ (8002950 <HAL_DMA_Init+0x158>)
 8002842:	fba2 2303 	umull	r2, r3, r2, r3
 8002846:	091b      	lsrs	r3, r3, #4
 8002848:	009a      	lsls	r2, r3, #2
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a42      	ldr	r2, [pc, #264]	@ (800295c <HAL_DMA_Init+0x164>)
 8002852:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2202      	movs	r2, #2
 8002858:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800286a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800286e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002878:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002884:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002890:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a1b      	ldr	r3, [r3, #32]
 8002896:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002898:	68fa      	ldr	r2, [r7, #12]
 800289a:	4313      	orrs	r3, r2
 800289c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80028ae:	d039      	beq.n	8002924 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b4:	4a27      	ldr	r2, [pc, #156]	@ (8002954 <HAL_DMA_Init+0x15c>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d11a      	bne.n	80028f0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80028ba:	4b29      	ldr	r3, [pc, #164]	@ (8002960 <HAL_DMA_Init+0x168>)
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028c2:	f003 031c 	and.w	r3, r3, #28
 80028c6:	210f      	movs	r1, #15
 80028c8:	fa01 f303 	lsl.w	r3, r1, r3
 80028cc:	43db      	mvns	r3, r3
 80028ce:	4924      	ldr	r1, [pc, #144]	@ (8002960 <HAL_DMA_Init+0x168>)
 80028d0:	4013      	ands	r3, r2
 80028d2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80028d4:	4b22      	ldr	r3, [pc, #136]	@ (8002960 <HAL_DMA_Init+0x168>)
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6859      	ldr	r1, [r3, #4]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028e0:	f003 031c 	and.w	r3, r3, #28
 80028e4:	fa01 f303 	lsl.w	r3, r1, r3
 80028e8:	491d      	ldr	r1, [pc, #116]	@ (8002960 <HAL_DMA_Init+0x168>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	600b      	str	r3, [r1, #0]
 80028ee:	e019      	b.n	8002924 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80028f0:	4b1c      	ldr	r3, [pc, #112]	@ (8002964 <HAL_DMA_Init+0x16c>)
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f8:	f003 031c 	and.w	r3, r3, #28
 80028fc:	210f      	movs	r1, #15
 80028fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002902:	43db      	mvns	r3, r3
 8002904:	4917      	ldr	r1, [pc, #92]	@ (8002964 <HAL_DMA_Init+0x16c>)
 8002906:	4013      	ands	r3, r2
 8002908:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800290a:	4b16      	ldr	r3, [pc, #88]	@ (8002964 <HAL_DMA_Init+0x16c>)
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6859      	ldr	r1, [r3, #4]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002916:	f003 031c 	and.w	r3, r3, #28
 800291a:	fa01 f303 	lsl.w	r3, r1, r3
 800291e:	4911      	ldr	r1, [pc, #68]	@ (8002964 <HAL_DMA_Init+0x16c>)
 8002920:	4313      	orrs	r3, r2
 8002922:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2201      	movs	r2, #1
 800292e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800293a:	2300      	movs	r3, #0
}
 800293c:	4618      	mov	r0, r3
 800293e:	3714      	adds	r7, #20
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr
 8002948:	40020407 	.word	0x40020407
 800294c:	bffdfff8 	.word	0xbffdfff8
 8002950:	cccccccd 	.word	0xcccccccd
 8002954:	40020000 	.word	0x40020000
 8002958:	bffdfbf8 	.word	0xbffdfbf8
 800295c:	40020400 	.word	0x40020400
 8002960:	400200a8 	.word	0x400200a8
 8002964:	400204a8 	.word	0x400204a8

08002968 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
 8002974:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002976:	2300      	movs	r3, #0
 8002978:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002980:	2b01      	cmp	r3, #1
 8002982:	d101      	bne.n	8002988 <HAL_DMA_Start_IT+0x20>
 8002984:	2302      	movs	r3, #2
 8002986:	e04b      	b.n	8002a20 <HAL_DMA_Start_IT+0xb8>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002996:	b2db      	uxtb	r3, r3
 8002998:	2b01      	cmp	r3, #1
 800299a:	d13a      	bne.n	8002a12 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2202      	movs	r2, #2
 80029a0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f022 0201 	bic.w	r2, r2, #1
 80029b8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	68b9      	ldr	r1, [r7, #8]
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	f000 f95f 	bl	8002c84 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d008      	beq.n	80029e0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f042 020e 	orr.w	r2, r2, #14
 80029dc:	601a      	str	r2, [r3, #0]
 80029de:	e00f      	b.n	8002a00 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f022 0204 	bic.w	r2, r2, #4
 80029ee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f042 020a 	orr.w	r2, r2, #10
 80029fe:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f042 0201 	orr.w	r2, r2, #1
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	e005      	b.n	8002a1e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002a1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3718      	adds	r7, #24
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a30:	2300      	movs	r3, #0
 8002a32:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d008      	beq.n	8002a52 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2204      	movs	r2, #4
 8002a44:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e022      	b.n	8002a98 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f022 020e 	bic.w	r2, r2, #14
 8002a60:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f022 0201 	bic.w	r2, r2, #1
 8002a70:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a76:	f003 021c 	and.w	r2, r3, #28
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a7e:	2101      	movs	r1, #1
 8002a80:	fa01 f202 	lsl.w	r2, r1, r2
 8002a84:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002a96:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3714      	adds	r7, #20
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002aac:	2300      	movs	r3, #0
 8002aae:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d005      	beq.n	8002ac8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2204      	movs	r2, #4
 8002ac0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	73fb      	strb	r3, [r7, #15]
 8002ac6:	e029      	b.n	8002b1c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f022 020e 	bic.w	r2, r2, #14
 8002ad6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f022 0201 	bic.w	r2, r2, #1
 8002ae6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aec:	f003 021c 	and.w	r2, r3, #28
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af4:	2101      	movs	r1, #1
 8002af6:	fa01 f202 	lsl.w	r2, r1, r2
 8002afa:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d003      	beq.n	8002b1c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	4798      	blx	r3
    }
  }
  return status;
 8002b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3710      	adds	r7, #16
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b084      	sub	sp, #16
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b42:	f003 031c 	and.w	r3, r3, #28
 8002b46:	2204      	movs	r2, #4
 8002b48:	409a      	lsls	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d026      	beq.n	8002ba0 <HAL_DMA_IRQHandler+0x7a>
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	f003 0304 	and.w	r3, r3, #4
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d021      	beq.n	8002ba0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0320 	and.w	r3, r3, #32
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d107      	bne.n	8002b7a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f022 0204 	bic.w	r2, r2, #4
 8002b78:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b7e:	f003 021c 	and.w	r2, r3, #28
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b86:	2104      	movs	r1, #4
 8002b88:	fa01 f202 	lsl.w	r2, r1, r2
 8002b8c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d071      	beq.n	8002c7a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002b9e:	e06c      	b.n	8002c7a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ba4:	f003 031c 	and.w	r3, r3, #28
 8002ba8:	2202      	movs	r2, #2
 8002baa:	409a      	lsls	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d02e      	beq.n	8002c12 <HAL_DMA_IRQHandler+0xec>
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d029      	beq.n	8002c12 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0320 	and.w	r3, r3, #32
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10b      	bne.n	8002be4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f022 020a 	bic.w	r2, r2, #10
 8002bda:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002be8:	f003 021c 	and.w	r2, r3, #28
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf0:	2102      	movs	r1, #2
 8002bf2:	fa01 f202 	lsl.w	r2, r1, r2
 8002bf6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d038      	beq.n	8002c7a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002c10:	e033      	b.n	8002c7a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c16:	f003 031c 	and.w	r3, r3, #28
 8002c1a:	2208      	movs	r2, #8
 8002c1c:	409a      	lsls	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	4013      	ands	r3, r2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d02a      	beq.n	8002c7c <HAL_DMA_IRQHandler+0x156>
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	f003 0308 	and.w	r3, r3, #8
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d025      	beq.n	8002c7c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f022 020e 	bic.w	r2, r2, #14
 8002c3e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c44:	f003 021c 	and.w	r2, r3, #28
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c4c:	2101      	movs	r1, #1
 8002c4e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c52:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d004      	beq.n	8002c7c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002c7a:	bf00      	nop
 8002c7c:	bf00      	nop
}
 8002c7e:	3710      	adds	r7, #16
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	607a      	str	r2, [r7, #4]
 8002c90:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c96:	f003 021c 	and.w	r2, r3, #28
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ca4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	683a      	ldr	r2, [r7, #0]
 8002cac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	2b10      	cmp	r3, #16
 8002cb4:	d108      	bne.n	8002cc8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68ba      	ldr	r2, [r7, #8]
 8002cc4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002cc6:	e007      	b.n	8002cd8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68ba      	ldr	r2, [r7, #8]
 8002cce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	60da      	str	r2, [r3, #12]
}
 8002cd8:	bf00      	nop
 8002cda:	3714      	adds	r7, #20
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b087      	sub	sp, #28
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cf2:	e17f      	b.n	8002ff4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8002d00:	4013      	ands	r3, r2
 8002d02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f000 8171 	beq.w	8002fee <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f003 0303 	and.w	r3, r3, #3
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d005      	beq.n	8002d24 <HAL_GPIO_Init+0x40>
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f003 0303 	and.w	r3, r3, #3
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d130      	bne.n	8002d86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	2203      	movs	r2, #3
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	43db      	mvns	r3, r3
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	68da      	ldr	r2, [r3, #12]
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	693a      	ldr	r2, [r7, #16]
 8002d52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d62:	43db      	mvns	r3, r3
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	4013      	ands	r3, r2
 8002d68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	091b      	lsrs	r3, r3, #4
 8002d70:	f003 0201 	and.w	r2, r3, #1
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f003 0303 	and.w	r3, r3, #3
 8002d8e:	2b03      	cmp	r3, #3
 8002d90:	d118      	bne.n	8002dc4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002d98:	2201      	movs	r2, #1
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	43db      	mvns	r3, r3
 8002da2:	693a      	ldr	r2, [r7, #16]
 8002da4:	4013      	ands	r3, r2
 8002da6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	08db      	lsrs	r3, r3, #3
 8002dae:	f003 0201 	and.w	r2, r3, #1
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	693a      	ldr	r2, [r7, #16]
 8002dc2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f003 0303 	and.w	r3, r3, #3
 8002dcc:	2b03      	cmp	r3, #3
 8002dce:	d017      	beq.n	8002e00 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	2203      	movs	r2, #3
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	43db      	mvns	r3, r3
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	4013      	ands	r3, r2
 8002de6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	689a      	ldr	r2, [r3, #8]
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f003 0303 	and.w	r3, r3, #3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d123      	bne.n	8002e54 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	08da      	lsrs	r2, r3, #3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	3208      	adds	r2, #8
 8002e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e18:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	f003 0307 	and.w	r3, r3, #7
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	220f      	movs	r2, #15
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	43db      	mvns	r3, r3
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	691a      	ldr	r2, [r3, #16]
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	f003 0307 	and.w	r3, r3, #7
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	08da      	lsrs	r2, r3, #3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	3208      	adds	r2, #8
 8002e4e:	6939      	ldr	r1, [r7, #16]
 8002e50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	2203      	movs	r2, #3
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	43db      	mvns	r3, r3
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f003 0203 	and.w	r2, r3, #3
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7c:	693a      	ldr	r2, [r7, #16]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f000 80ac 	beq.w	8002fee <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e96:	4b5f      	ldr	r3, [pc, #380]	@ (8003014 <HAL_GPIO_Init+0x330>)
 8002e98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e9a:	4a5e      	ldr	r2, [pc, #376]	@ (8003014 <HAL_GPIO_Init+0x330>)
 8002e9c:	f043 0301 	orr.w	r3, r3, #1
 8002ea0:	6613      	str	r3, [r2, #96]	@ 0x60
 8002ea2:	4b5c      	ldr	r3, [pc, #368]	@ (8003014 <HAL_GPIO_Init+0x330>)
 8002ea4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	60bb      	str	r3, [r7, #8]
 8002eac:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002eae:	4a5a      	ldr	r2, [pc, #360]	@ (8003018 <HAL_GPIO_Init+0x334>)
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	089b      	lsrs	r3, r3, #2
 8002eb4:	3302      	adds	r3, #2
 8002eb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eba:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	f003 0303 	and.w	r3, r3, #3
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	220f      	movs	r2, #15
 8002ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eca:	43db      	mvns	r3, r3
 8002ecc:	693a      	ldr	r2, [r7, #16]
 8002ece:	4013      	ands	r3, r2
 8002ed0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002ed8:	d025      	beq.n	8002f26 <HAL_GPIO_Init+0x242>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a4f      	ldr	r2, [pc, #316]	@ (800301c <HAL_GPIO_Init+0x338>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d01f      	beq.n	8002f22 <HAL_GPIO_Init+0x23e>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a4e      	ldr	r2, [pc, #312]	@ (8003020 <HAL_GPIO_Init+0x33c>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d019      	beq.n	8002f1e <HAL_GPIO_Init+0x23a>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a4d      	ldr	r2, [pc, #308]	@ (8003024 <HAL_GPIO_Init+0x340>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d013      	beq.n	8002f1a <HAL_GPIO_Init+0x236>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a4c      	ldr	r2, [pc, #304]	@ (8003028 <HAL_GPIO_Init+0x344>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d00d      	beq.n	8002f16 <HAL_GPIO_Init+0x232>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a4b      	ldr	r2, [pc, #300]	@ (800302c <HAL_GPIO_Init+0x348>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d007      	beq.n	8002f12 <HAL_GPIO_Init+0x22e>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a4a      	ldr	r2, [pc, #296]	@ (8003030 <HAL_GPIO_Init+0x34c>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d101      	bne.n	8002f0e <HAL_GPIO_Init+0x22a>
 8002f0a:	2306      	movs	r3, #6
 8002f0c:	e00c      	b.n	8002f28 <HAL_GPIO_Init+0x244>
 8002f0e:	2307      	movs	r3, #7
 8002f10:	e00a      	b.n	8002f28 <HAL_GPIO_Init+0x244>
 8002f12:	2305      	movs	r3, #5
 8002f14:	e008      	b.n	8002f28 <HAL_GPIO_Init+0x244>
 8002f16:	2304      	movs	r3, #4
 8002f18:	e006      	b.n	8002f28 <HAL_GPIO_Init+0x244>
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e004      	b.n	8002f28 <HAL_GPIO_Init+0x244>
 8002f1e:	2302      	movs	r3, #2
 8002f20:	e002      	b.n	8002f28 <HAL_GPIO_Init+0x244>
 8002f22:	2301      	movs	r3, #1
 8002f24:	e000      	b.n	8002f28 <HAL_GPIO_Init+0x244>
 8002f26:	2300      	movs	r3, #0
 8002f28:	697a      	ldr	r2, [r7, #20]
 8002f2a:	f002 0203 	and.w	r2, r2, #3
 8002f2e:	0092      	lsls	r2, r2, #2
 8002f30:	4093      	lsls	r3, r2
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f38:	4937      	ldr	r1, [pc, #220]	@ (8003018 <HAL_GPIO_Init+0x334>)
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	089b      	lsrs	r3, r3, #2
 8002f3e:	3302      	adds	r3, #2
 8002f40:	693a      	ldr	r2, [r7, #16]
 8002f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f46:	4b3b      	ldr	r3, [pc, #236]	@ (8003034 <HAL_GPIO_Init+0x350>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	43db      	mvns	r3, r3
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	4013      	ands	r3, r2
 8002f54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d003      	beq.n	8002f6a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002f62:	693a      	ldr	r2, [r7, #16]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f6a:	4a32      	ldr	r2, [pc, #200]	@ (8003034 <HAL_GPIO_Init+0x350>)
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002f70:	4b30      	ldr	r3, [pc, #192]	@ (8003034 <HAL_GPIO_Init+0x350>)
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d003      	beq.n	8002f94 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002f8c:	693a      	ldr	r2, [r7, #16]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f94:	4a27      	ldr	r2, [pc, #156]	@ (8003034 <HAL_GPIO_Init+0x350>)
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002f9a:	4b26      	ldr	r3, [pc, #152]	@ (8003034 <HAL_GPIO_Init+0x350>)
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	43db      	mvns	r3, r3
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d003      	beq.n	8002fbe <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002fb6:	693a      	ldr	r2, [r7, #16]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002fbe:	4a1d      	ldr	r2, [pc, #116]	@ (8003034 <HAL_GPIO_Init+0x350>)
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002fc4:	4b1b      	ldr	r3, [pc, #108]	@ (8003034 <HAL_GPIO_Init+0x350>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	43db      	mvns	r3, r3
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d003      	beq.n	8002fe8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002fe0:	693a      	ldr	r2, [r7, #16]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002fe8:	4a12      	ldr	r2, [pc, #72]	@ (8003034 <HAL_GPIO_Init+0x350>)
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	f47f ae78 	bne.w	8002cf4 <HAL_GPIO_Init+0x10>
  }
}
 8003004:	bf00      	nop
 8003006:	bf00      	nop
 8003008:	371c      	adds	r7, #28
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	40021000 	.word	0x40021000
 8003018:	40010000 	.word	0x40010000
 800301c:	48000400 	.word	0x48000400
 8003020:	48000800 	.word	0x48000800
 8003024:	48000c00 	.word	0x48000c00
 8003028:	48001000 	.word	0x48001000
 800302c:	48001400 	.word	0x48001400
 8003030:	48001800 	.word	0x48001800
 8003034:	40010400 	.word	0x40010400

08003038 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	460b      	mov	r3, r1
 8003042:	807b      	strh	r3, [r7, #2]
 8003044:	4613      	mov	r3, r2
 8003046:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003048:	787b      	ldrb	r3, [r7, #1]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d003      	beq.n	8003056 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800304e:	887a      	ldrh	r2, [r7, #2]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003054:	e002      	b.n	800305c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003056:	887a      	ldrh	r2, [r7, #2]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003068:	b480      	push	{r7}
 800306a:	b085      	sub	sp, #20
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	460b      	mov	r3, r1
 8003072:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	695b      	ldr	r3, [r3, #20]
 8003078:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800307a:	887a      	ldrh	r2, [r7, #2]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	4013      	ands	r3, r2
 8003080:	041a      	lsls	r2, r3, #16
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	43d9      	mvns	r1, r3
 8003086:	887b      	ldrh	r3, [r7, #2]
 8003088:	400b      	ands	r3, r1
 800308a:	431a      	orrs	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	619a      	str	r2, [r3, #24]
}
 8003090:	bf00      	nop
 8003092:	3714      	adds	r7, #20
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e043      	b.n	8003136 <HAL_IWDG_Init+0x9a>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 80030b6:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f245 5255 	movw	r2, #21845	@ 0x5555
 80030c0:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	6852      	ldr	r2, [r2, #4]
 80030ca:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	6892      	ldr	r2, [r2, #8]
 80030d4:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80030d6:	f7fe ff8f 	bl	8001ff8 <HAL_GetTick>
 80030da:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80030dc:	e011      	b.n	8003102 <HAL_IWDG_Init+0x66>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80030de:	f7fe ff8b 	bl	8001ff8 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	f641 0201 	movw	r2, #6145	@ 0x1801
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d908      	bls.n	8003102 <HAL_IWDG_Init+0x66>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	f003 0307 	and.w	r3, r3, #7
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <HAL_IWDG_Init+0x66>
      {
        return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e019      	b.n	8003136 <HAL_IWDG_Init+0x9a>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	f003 0307 	and.w	r3, r3, #7
 800310c:	2b00      	cmp	r3, #0
 800310e:	d1e6      	bne.n	80030de <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	691a      	ldr	r2, [r3, #16]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	429a      	cmp	r2, r3
 800311c:	d005      	beq.n	800312a <HAL_IWDG_Init+0x8e>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	68d2      	ldr	r2, [r2, #12]
 8003126:	611a      	str	r2, [r3, #16]
 8003128:	e004      	b.n	8003134 <HAL_IWDG_Init+0x98>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8003132:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800313e:	b480      	push	{r7}
 8003140:	b083      	sub	sp, #12
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800314e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	370c      	adds	r7, #12
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
	...

08003160 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003164:	4b04      	ldr	r3, [pc, #16]	@ (8003178 <HAL_PWREx_GetVoltageRange+0x18>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800316c:	4618      	mov	r0, r3
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	40007000 	.word	0x40007000

0800317c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800317c:	b480      	push	{r7}
 800317e:	b085      	sub	sp, #20
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800318a:	d130      	bne.n	80031ee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800318c:	4b23      	ldr	r3, [pc, #140]	@ (800321c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003194:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003198:	d038      	beq.n	800320c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800319a:	4b20      	ldr	r3, [pc, #128]	@ (800321c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80031a2:	4a1e      	ldr	r2, [pc, #120]	@ (800321c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031a4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80031a8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80031aa:	4b1d      	ldr	r3, [pc, #116]	@ (8003220 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2232      	movs	r2, #50	@ 0x32
 80031b0:	fb02 f303 	mul.w	r3, r2, r3
 80031b4:	4a1b      	ldr	r2, [pc, #108]	@ (8003224 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80031b6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ba:	0c9b      	lsrs	r3, r3, #18
 80031bc:	3301      	adds	r3, #1
 80031be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031c0:	e002      	b.n	80031c8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	3b01      	subs	r3, #1
 80031c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031c8:	4b14      	ldr	r3, [pc, #80]	@ (800321c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031d4:	d102      	bne.n	80031dc <HAL_PWREx_ControlVoltageScaling+0x60>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d1f2      	bne.n	80031c2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80031dc:	4b0f      	ldr	r3, [pc, #60]	@ (800321c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031de:	695b      	ldr	r3, [r3, #20]
 80031e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031e8:	d110      	bne.n	800320c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e00f      	b.n	800320e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80031ee:	4b0b      	ldr	r3, [pc, #44]	@ (800321c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80031f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031fa:	d007      	beq.n	800320c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80031fc:	4b07      	ldr	r3, [pc, #28]	@ (800321c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003204:	4a05      	ldr	r2, [pc, #20]	@ (800321c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003206:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800320a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3714      	adds	r7, #20
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	40007000 	.word	0x40007000
 8003220:	20000018 	.word	0x20000018
 8003224:	431bde83 	.word	0x431bde83

08003228 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b088      	sub	sp, #32
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d101      	bne.n	800323a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e3ca      	b.n	80039d0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800323a:	4b97      	ldr	r3, [pc, #604]	@ (8003498 <HAL_RCC_OscConfig+0x270>)
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f003 030c 	and.w	r3, r3, #12
 8003242:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003244:	4b94      	ldr	r3, [pc, #592]	@ (8003498 <HAL_RCC_OscConfig+0x270>)
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	f003 0303 	and.w	r3, r3, #3
 800324c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0310 	and.w	r3, r3, #16
 8003256:	2b00      	cmp	r3, #0
 8003258:	f000 80e4 	beq.w	8003424 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d007      	beq.n	8003272 <HAL_RCC_OscConfig+0x4a>
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	2b0c      	cmp	r3, #12
 8003266:	f040 808b 	bne.w	8003380 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	2b01      	cmp	r3, #1
 800326e:	f040 8087 	bne.w	8003380 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003272:	4b89      	ldr	r3, [pc, #548]	@ (8003498 <HAL_RCC_OscConfig+0x270>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d005      	beq.n	800328a <HAL_RCC_OscConfig+0x62>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e3a2      	b.n	80039d0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a1a      	ldr	r2, [r3, #32]
 800328e:	4b82      	ldr	r3, [pc, #520]	@ (8003498 <HAL_RCC_OscConfig+0x270>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0308 	and.w	r3, r3, #8
 8003296:	2b00      	cmp	r3, #0
 8003298:	d004      	beq.n	80032a4 <HAL_RCC_OscConfig+0x7c>
 800329a:	4b7f      	ldr	r3, [pc, #508]	@ (8003498 <HAL_RCC_OscConfig+0x270>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032a2:	e005      	b.n	80032b0 <HAL_RCC_OscConfig+0x88>
 80032a4:	4b7c      	ldr	r3, [pc, #496]	@ (8003498 <HAL_RCC_OscConfig+0x270>)
 80032a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032aa:	091b      	lsrs	r3, r3, #4
 80032ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d223      	bcs.n	80032fc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a1b      	ldr	r3, [r3, #32]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f000 fd55 	bl	8003d68 <RCC_SetFlashLatencyFromMSIRange>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d001      	beq.n	80032c8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e383      	b.n	80039d0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032c8:	4b73      	ldr	r3, [pc, #460]	@ (8003498 <HAL_RCC_OscConfig+0x270>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a72      	ldr	r2, [pc, #456]	@ (8003498 <HAL_RCC_OscConfig+0x270>)
 80032ce:	f043 0308 	orr.w	r3, r3, #8
 80032d2:	6013      	str	r3, [r2, #0]
 80032d4:	4b70      	ldr	r3, [pc, #448]	@ (8003498 <HAL_RCC_OscConfig+0x270>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a1b      	ldr	r3, [r3, #32]
 80032e0:	496d      	ldr	r1, [pc, #436]	@ (8003498 <HAL_RCC_OscConfig+0x270>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032e6:	4b6c      	ldr	r3, [pc, #432]	@ (8003498 <HAL_RCC_OscConfig+0x270>)
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	69db      	ldr	r3, [r3, #28]
 80032f2:	021b      	lsls	r3, r3, #8
 80032f4:	4968      	ldr	r1, [pc, #416]	@ (8003498 <HAL_RCC_OscConfig+0x270>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	604b      	str	r3, [r1, #4]
 80032fa:	e025      	b.n	8003348 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032fc:	4b66      	ldr	r3, [pc, #408]	@ (8003498 <HAL_RCC_OscConfig+0x270>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a65      	ldr	r2, [pc, #404]	@ (8003498 <HAL_RCC_OscConfig+0x270>)
 8003302:	f043 0308 	orr.w	r3, r3, #8
 8003306:	6013      	str	r3, [r2, #0]
 8003308:	4b63      	ldr	r3, [pc, #396]	@ (8003498 <HAL_RCC_OscConfig+0x270>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a1b      	ldr	r3, [r3, #32]
 8003314:	4960      	ldr	r1, [pc, #384]	@ (8003498 <HAL_RCC_OscConfig+0x270>)
 8003316:	4313      	orrs	r3, r2
 8003318:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800331a:	4b5f      	ldr	r3, [pc, #380]	@ (8003498 <HAL_RCC_OscConfig+0x270>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	69db      	ldr	r3, [r3, #28]
 8003326:	021b      	lsls	r3, r3, #8
 8003328:	495b      	ldr	r1, [pc, #364]	@ (8003498 <HAL_RCC_OscConfig+0x270>)
 800332a:	4313      	orrs	r3, r2
 800332c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d109      	bne.n	8003348 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a1b      	ldr	r3, [r3, #32]
 8003338:	4618      	mov	r0, r3
 800333a:	f000 fd15 	bl	8003d68 <RCC_SetFlashLatencyFromMSIRange>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d001      	beq.n	8003348 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e343      	b.n	80039d0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003348:	f000 fc4a 	bl	8003be0 <HAL_RCC_GetSysClockFreq>
 800334c:	4602      	mov	r2, r0
 800334e:	4b52      	ldr	r3, [pc, #328]	@ (8003498 <HAL_RCC_OscConfig+0x270>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	091b      	lsrs	r3, r3, #4
 8003354:	f003 030f 	and.w	r3, r3, #15
 8003358:	4950      	ldr	r1, [pc, #320]	@ (800349c <HAL_RCC_OscConfig+0x274>)
 800335a:	5ccb      	ldrb	r3, [r1, r3]
 800335c:	f003 031f 	and.w	r3, r3, #31
 8003360:	fa22 f303 	lsr.w	r3, r2, r3
 8003364:	4a4e      	ldr	r2, [pc, #312]	@ (80034a0 <HAL_RCC_OscConfig+0x278>)
 8003366:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003368:	4b4e      	ldr	r3, [pc, #312]	@ (80034a4 <HAL_RCC_OscConfig+0x27c>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4618      	mov	r0, r3
 800336e:	f7fe fdf3 	bl	8001f58 <HAL_InitTick>
 8003372:	4603      	mov	r3, r0
 8003374:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003376:	7bfb      	ldrb	r3, [r7, #15]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d052      	beq.n	8003422 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800337c:	7bfb      	ldrb	r3, [r7, #15]
 800337e:	e327      	b.n	80039d0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d032      	beq.n	80033ee <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003388:	4b43      	ldr	r3, [pc, #268]	@ (8003498 <HAL_RCC_OscConfig+0x270>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a42      	ldr	r2, [pc, #264]	@ (8003498 <HAL_RCC_OscConfig+0x270>)
 800338e:	f043 0301 	orr.w	r3, r3, #1
 8003392:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003394:	f7fe fe30 	bl	8001ff8 <HAL_GetTick>
 8003398:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800339a:	e008      	b.n	80033ae <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800339c:	f7fe fe2c 	bl	8001ff8 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e310      	b.n	80039d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033ae:	4b3a      	ldr	r3, [pc, #232]	@ (8003498 <HAL_RCC_OscConfig+0x270>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d0f0      	beq.n	800339c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033ba:	4b37      	ldr	r3, [pc, #220]	@ (8003498 <HAL_RCC_OscConfig+0x270>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a36      	ldr	r2, [pc, #216]	@ (8003498 <HAL_RCC_OscConfig+0x270>)
 80033c0:	f043 0308 	orr.w	r3, r3, #8
 80033c4:	6013      	str	r3, [r2, #0]
 80033c6:	4b34      	ldr	r3, [pc, #208]	@ (8003498 <HAL_RCC_OscConfig+0x270>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a1b      	ldr	r3, [r3, #32]
 80033d2:	4931      	ldr	r1, [pc, #196]	@ (8003498 <HAL_RCC_OscConfig+0x270>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033d8:	4b2f      	ldr	r3, [pc, #188]	@ (8003498 <HAL_RCC_OscConfig+0x270>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	69db      	ldr	r3, [r3, #28]
 80033e4:	021b      	lsls	r3, r3, #8
 80033e6:	492c      	ldr	r1, [pc, #176]	@ (8003498 <HAL_RCC_OscConfig+0x270>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	604b      	str	r3, [r1, #4]
 80033ec:	e01a      	b.n	8003424 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80033ee:	4b2a      	ldr	r3, [pc, #168]	@ (8003498 <HAL_RCC_OscConfig+0x270>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a29      	ldr	r2, [pc, #164]	@ (8003498 <HAL_RCC_OscConfig+0x270>)
 80033f4:	f023 0301 	bic.w	r3, r3, #1
 80033f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80033fa:	f7fe fdfd 	bl	8001ff8 <HAL_GetTick>
 80033fe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003400:	e008      	b.n	8003414 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003402:	f7fe fdf9 	bl	8001ff8 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	2b02      	cmp	r3, #2
 800340e:	d901      	bls.n	8003414 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e2dd      	b.n	80039d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003414:	4b20      	ldr	r3, [pc, #128]	@ (8003498 <HAL_RCC_OscConfig+0x270>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1f0      	bne.n	8003402 <HAL_RCC_OscConfig+0x1da>
 8003420:	e000      	b.n	8003424 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003422:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0301 	and.w	r3, r3, #1
 800342c:	2b00      	cmp	r3, #0
 800342e:	d074      	beq.n	800351a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	2b08      	cmp	r3, #8
 8003434:	d005      	beq.n	8003442 <HAL_RCC_OscConfig+0x21a>
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	2b0c      	cmp	r3, #12
 800343a:	d10e      	bne.n	800345a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	2b03      	cmp	r3, #3
 8003440:	d10b      	bne.n	800345a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003442:	4b15      	ldr	r3, [pc, #84]	@ (8003498 <HAL_RCC_OscConfig+0x270>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d064      	beq.n	8003518 <HAL_RCC_OscConfig+0x2f0>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d160      	bne.n	8003518 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e2ba      	b.n	80039d0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003462:	d106      	bne.n	8003472 <HAL_RCC_OscConfig+0x24a>
 8003464:	4b0c      	ldr	r3, [pc, #48]	@ (8003498 <HAL_RCC_OscConfig+0x270>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a0b      	ldr	r2, [pc, #44]	@ (8003498 <HAL_RCC_OscConfig+0x270>)
 800346a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800346e:	6013      	str	r3, [r2, #0]
 8003470:	e026      	b.n	80034c0 <HAL_RCC_OscConfig+0x298>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800347a:	d115      	bne.n	80034a8 <HAL_RCC_OscConfig+0x280>
 800347c:	4b06      	ldr	r3, [pc, #24]	@ (8003498 <HAL_RCC_OscConfig+0x270>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a05      	ldr	r2, [pc, #20]	@ (8003498 <HAL_RCC_OscConfig+0x270>)
 8003482:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003486:	6013      	str	r3, [r2, #0]
 8003488:	4b03      	ldr	r3, [pc, #12]	@ (8003498 <HAL_RCC_OscConfig+0x270>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a02      	ldr	r2, [pc, #8]	@ (8003498 <HAL_RCC_OscConfig+0x270>)
 800348e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003492:	6013      	str	r3, [r2, #0]
 8003494:	e014      	b.n	80034c0 <HAL_RCC_OscConfig+0x298>
 8003496:	bf00      	nop
 8003498:	40021000 	.word	0x40021000
 800349c:	080146ec 	.word	0x080146ec
 80034a0:	20000018 	.word	0x20000018
 80034a4:	2000001c 	.word	0x2000001c
 80034a8:	4ba0      	ldr	r3, [pc, #640]	@ (800372c <HAL_RCC_OscConfig+0x504>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a9f      	ldr	r2, [pc, #636]	@ (800372c <HAL_RCC_OscConfig+0x504>)
 80034ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034b2:	6013      	str	r3, [r2, #0]
 80034b4:	4b9d      	ldr	r3, [pc, #628]	@ (800372c <HAL_RCC_OscConfig+0x504>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a9c      	ldr	r2, [pc, #624]	@ (800372c <HAL_RCC_OscConfig+0x504>)
 80034ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d013      	beq.n	80034f0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c8:	f7fe fd96 	bl	8001ff8 <HAL_GetTick>
 80034cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034ce:	e008      	b.n	80034e2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034d0:	f7fe fd92 	bl	8001ff8 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b64      	cmp	r3, #100	@ 0x64
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e276      	b.n	80039d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034e2:	4b92      	ldr	r3, [pc, #584]	@ (800372c <HAL_RCC_OscConfig+0x504>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d0f0      	beq.n	80034d0 <HAL_RCC_OscConfig+0x2a8>
 80034ee:	e014      	b.n	800351a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f0:	f7fe fd82 	bl	8001ff8 <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034f6:	e008      	b.n	800350a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034f8:	f7fe fd7e 	bl	8001ff8 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b64      	cmp	r3, #100	@ 0x64
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e262      	b.n	80039d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800350a:	4b88      	ldr	r3, [pc, #544]	@ (800372c <HAL_RCC_OscConfig+0x504>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1f0      	bne.n	80034f8 <HAL_RCC_OscConfig+0x2d0>
 8003516:	e000      	b.n	800351a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003518:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d060      	beq.n	80035e8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	2b04      	cmp	r3, #4
 800352a:	d005      	beq.n	8003538 <HAL_RCC_OscConfig+0x310>
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	2b0c      	cmp	r3, #12
 8003530:	d119      	bne.n	8003566 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	2b02      	cmp	r3, #2
 8003536:	d116      	bne.n	8003566 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003538:	4b7c      	ldr	r3, [pc, #496]	@ (800372c <HAL_RCC_OscConfig+0x504>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003540:	2b00      	cmp	r3, #0
 8003542:	d005      	beq.n	8003550 <HAL_RCC_OscConfig+0x328>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d101      	bne.n	8003550 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e23f      	b.n	80039d0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003550:	4b76      	ldr	r3, [pc, #472]	@ (800372c <HAL_RCC_OscConfig+0x504>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	061b      	lsls	r3, r3, #24
 800355e:	4973      	ldr	r1, [pc, #460]	@ (800372c <HAL_RCC_OscConfig+0x504>)
 8003560:	4313      	orrs	r3, r2
 8003562:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003564:	e040      	b.n	80035e8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d023      	beq.n	80035b6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800356e:	4b6f      	ldr	r3, [pc, #444]	@ (800372c <HAL_RCC_OscConfig+0x504>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a6e      	ldr	r2, [pc, #440]	@ (800372c <HAL_RCC_OscConfig+0x504>)
 8003574:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003578:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800357a:	f7fe fd3d 	bl	8001ff8 <HAL_GetTick>
 800357e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003580:	e008      	b.n	8003594 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003582:	f7fe fd39 	bl	8001ff8 <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	2b02      	cmp	r3, #2
 800358e:	d901      	bls.n	8003594 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e21d      	b.n	80039d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003594:	4b65      	ldr	r3, [pc, #404]	@ (800372c <HAL_RCC_OscConfig+0x504>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800359c:	2b00      	cmp	r3, #0
 800359e:	d0f0      	beq.n	8003582 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035a0:	4b62      	ldr	r3, [pc, #392]	@ (800372c <HAL_RCC_OscConfig+0x504>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	061b      	lsls	r3, r3, #24
 80035ae:	495f      	ldr	r1, [pc, #380]	@ (800372c <HAL_RCC_OscConfig+0x504>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	604b      	str	r3, [r1, #4]
 80035b4:	e018      	b.n	80035e8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035b6:	4b5d      	ldr	r3, [pc, #372]	@ (800372c <HAL_RCC_OscConfig+0x504>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a5c      	ldr	r2, [pc, #368]	@ (800372c <HAL_RCC_OscConfig+0x504>)
 80035bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80035c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c2:	f7fe fd19 	bl	8001ff8 <HAL_GetTick>
 80035c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035c8:	e008      	b.n	80035dc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035ca:	f7fe fd15 	bl	8001ff8 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d901      	bls.n	80035dc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e1f9      	b.n	80039d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035dc:	4b53      	ldr	r3, [pc, #332]	@ (800372c <HAL_RCC_OscConfig+0x504>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1f0      	bne.n	80035ca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0308 	and.w	r3, r3, #8
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d03c      	beq.n	800366e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	695b      	ldr	r3, [r3, #20]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d01c      	beq.n	8003636 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035fc:	4b4b      	ldr	r3, [pc, #300]	@ (800372c <HAL_RCC_OscConfig+0x504>)
 80035fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003602:	4a4a      	ldr	r2, [pc, #296]	@ (800372c <HAL_RCC_OscConfig+0x504>)
 8003604:	f043 0301 	orr.w	r3, r3, #1
 8003608:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800360c:	f7fe fcf4 	bl	8001ff8 <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003612:	e008      	b.n	8003626 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003614:	f7fe fcf0 	bl	8001ff8 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b02      	cmp	r3, #2
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e1d4      	b.n	80039d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003626:	4b41      	ldr	r3, [pc, #260]	@ (800372c <HAL_RCC_OscConfig+0x504>)
 8003628:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800362c:	f003 0302 	and.w	r3, r3, #2
 8003630:	2b00      	cmp	r3, #0
 8003632:	d0ef      	beq.n	8003614 <HAL_RCC_OscConfig+0x3ec>
 8003634:	e01b      	b.n	800366e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003636:	4b3d      	ldr	r3, [pc, #244]	@ (800372c <HAL_RCC_OscConfig+0x504>)
 8003638:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800363c:	4a3b      	ldr	r2, [pc, #236]	@ (800372c <HAL_RCC_OscConfig+0x504>)
 800363e:	f023 0301 	bic.w	r3, r3, #1
 8003642:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003646:	f7fe fcd7 	bl	8001ff8 <HAL_GetTick>
 800364a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800364c:	e008      	b.n	8003660 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800364e:	f7fe fcd3 	bl	8001ff8 <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	2b02      	cmp	r3, #2
 800365a:	d901      	bls.n	8003660 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e1b7      	b.n	80039d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003660:	4b32      	ldr	r3, [pc, #200]	@ (800372c <HAL_RCC_OscConfig+0x504>)
 8003662:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1ef      	bne.n	800364e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0304 	and.w	r3, r3, #4
 8003676:	2b00      	cmp	r3, #0
 8003678:	f000 80a6 	beq.w	80037c8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800367c:	2300      	movs	r3, #0
 800367e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003680:	4b2a      	ldr	r3, [pc, #168]	@ (800372c <HAL_RCC_OscConfig+0x504>)
 8003682:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003684:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d10d      	bne.n	80036a8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800368c:	4b27      	ldr	r3, [pc, #156]	@ (800372c <HAL_RCC_OscConfig+0x504>)
 800368e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003690:	4a26      	ldr	r2, [pc, #152]	@ (800372c <HAL_RCC_OscConfig+0x504>)
 8003692:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003696:	6593      	str	r3, [r2, #88]	@ 0x58
 8003698:	4b24      	ldr	r3, [pc, #144]	@ (800372c <HAL_RCC_OscConfig+0x504>)
 800369a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800369c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036a0:	60bb      	str	r3, [r7, #8]
 80036a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036a4:	2301      	movs	r3, #1
 80036a6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036a8:	4b21      	ldr	r3, [pc, #132]	@ (8003730 <HAL_RCC_OscConfig+0x508>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d118      	bne.n	80036e6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036b4:	4b1e      	ldr	r3, [pc, #120]	@ (8003730 <HAL_RCC_OscConfig+0x508>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a1d      	ldr	r2, [pc, #116]	@ (8003730 <HAL_RCC_OscConfig+0x508>)
 80036ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036c0:	f7fe fc9a 	bl	8001ff8 <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036c6:	e008      	b.n	80036da <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036c8:	f7fe fc96 	bl	8001ff8 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e17a      	b.n	80039d0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036da:	4b15      	ldr	r3, [pc, #84]	@ (8003730 <HAL_RCC_OscConfig+0x508>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d0f0      	beq.n	80036c8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d108      	bne.n	8003700 <HAL_RCC_OscConfig+0x4d8>
 80036ee:	4b0f      	ldr	r3, [pc, #60]	@ (800372c <HAL_RCC_OscConfig+0x504>)
 80036f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036f4:	4a0d      	ldr	r2, [pc, #52]	@ (800372c <HAL_RCC_OscConfig+0x504>)
 80036f6:	f043 0301 	orr.w	r3, r3, #1
 80036fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80036fe:	e029      	b.n	8003754 <HAL_RCC_OscConfig+0x52c>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	2b05      	cmp	r3, #5
 8003706:	d115      	bne.n	8003734 <HAL_RCC_OscConfig+0x50c>
 8003708:	4b08      	ldr	r3, [pc, #32]	@ (800372c <HAL_RCC_OscConfig+0x504>)
 800370a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800370e:	4a07      	ldr	r2, [pc, #28]	@ (800372c <HAL_RCC_OscConfig+0x504>)
 8003710:	f043 0304 	orr.w	r3, r3, #4
 8003714:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003718:	4b04      	ldr	r3, [pc, #16]	@ (800372c <HAL_RCC_OscConfig+0x504>)
 800371a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800371e:	4a03      	ldr	r2, [pc, #12]	@ (800372c <HAL_RCC_OscConfig+0x504>)
 8003720:	f043 0301 	orr.w	r3, r3, #1
 8003724:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003728:	e014      	b.n	8003754 <HAL_RCC_OscConfig+0x52c>
 800372a:	bf00      	nop
 800372c:	40021000 	.word	0x40021000
 8003730:	40007000 	.word	0x40007000
 8003734:	4b9c      	ldr	r3, [pc, #624]	@ (80039a8 <HAL_RCC_OscConfig+0x780>)
 8003736:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800373a:	4a9b      	ldr	r2, [pc, #620]	@ (80039a8 <HAL_RCC_OscConfig+0x780>)
 800373c:	f023 0301 	bic.w	r3, r3, #1
 8003740:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003744:	4b98      	ldr	r3, [pc, #608]	@ (80039a8 <HAL_RCC_OscConfig+0x780>)
 8003746:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800374a:	4a97      	ldr	r2, [pc, #604]	@ (80039a8 <HAL_RCC_OscConfig+0x780>)
 800374c:	f023 0304 	bic.w	r3, r3, #4
 8003750:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d016      	beq.n	800378a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800375c:	f7fe fc4c 	bl	8001ff8 <HAL_GetTick>
 8003760:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003762:	e00a      	b.n	800377a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003764:	f7fe fc48 	bl	8001ff8 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003772:	4293      	cmp	r3, r2
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e12a      	b.n	80039d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800377a:	4b8b      	ldr	r3, [pc, #556]	@ (80039a8 <HAL_RCC_OscConfig+0x780>)
 800377c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	2b00      	cmp	r3, #0
 8003786:	d0ed      	beq.n	8003764 <HAL_RCC_OscConfig+0x53c>
 8003788:	e015      	b.n	80037b6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800378a:	f7fe fc35 	bl	8001ff8 <HAL_GetTick>
 800378e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003790:	e00a      	b.n	80037a8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003792:	f7fe fc31 	bl	8001ff8 <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d901      	bls.n	80037a8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e113      	b.n	80039d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037a8:	4b7f      	ldr	r3, [pc, #508]	@ (80039a8 <HAL_RCC_OscConfig+0x780>)
 80037aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d1ed      	bne.n	8003792 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037b6:	7ffb      	ldrb	r3, [r7, #31]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d105      	bne.n	80037c8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037bc:	4b7a      	ldr	r3, [pc, #488]	@ (80039a8 <HAL_RCC_OscConfig+0x780>)
 80037be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037c0:	4a79      	ldr	r2, [pc, #484]	@ (80039a8 <HAL_RCC_OscConfig+0x780>)
 80037c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037c6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	f000 80fe 	beq.w	80039ce <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	f040 80d0 	bne.w	800397c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80037dc:	4b72      	ldr	r3, [pc, #456]	@ (80039a8 <HAL_RCC_OscConfig+0x780>)
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	f003 0203 	and.w	r2, r3, #3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d130      	bne.n	8003852 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037fa:	3b01      	subs	r3, #1
 80037fc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80037fe:	429a      	cmp	r2, r3
 8003800:	d127      	bne.n	8003852 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800380c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800380e:	429a      	cmp	r2, r3
 8003810:	d11f      	bne.n	8003852 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800381c:	2a07      	cmp	r2, #7
 800381e:	bf14      	ite	ne
 8003820:	2201      	movne	r2, #1
 8003822:	2200      	moveq	r2, #0
 8003824:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003826:	4293      	cmp	r3, r2
 8003828:	d113      	bne.n	8003852 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003834:	085b      	lsrs	r3, r3, #1
 8003836:	3b01      	subs	r3, #1
 8003838:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800383a:	429a      	cmp	r2, r3
 800383c:	d109      	bne.n	8003852 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003848:	085b      	lsrs	r3, r3, #1
 800384a:	3b01      	subs	r3, #1
 800384c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800384e:	429a      	cmp	r2, r3
 8003850:	d06e      	beq.n	8003930 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	2b0c      	cmp	r3, #12
 8003856:	d069      	beq.n	800392c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003858:	4b53      	ldr	r3, [pc, #332]	@ (80039a8 <HAL_RCC_OscConfig+0x780>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d105      	bne.n	8003870 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003864:	4b50      	ldr	r3, [pc, #320]	@ (80039a8 <HAL_RCC_OscConfig+0x780>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e0ad      	b.n	80039d0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003874:	4b4c      	ldr	r3, [pc, #304]	@ (80039a8 <HAL_RCC_OscConfig+0x780>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a4b      	ldr	r2, [pc, #300]	@ (80039a8 <HAL_RCC_OscConfig+0x780>)
 800387a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800387e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003880:	f7fe fbba 	bl	8001ff8 <HAL_GetTick>
 8003884:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003886:	e008      	b.n	800389a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003888:	f7fe fbb6 	bl	8001ff8 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b02      	cmp	r3, #2
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e09a      	b.n	80039d0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800389a:	4b43      	ldr	r3, [pc, #268]	@ (80039a8 <HAL_RCC_OscConfig+0x780>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d1f0      	bne.n	8003888 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038a6:	4b40      	ldr	r3, [pc, #256]	@ (80039a8 <HAL_RCC_OscConfig+0x780>)
 80038a8:	68da      	ldr	r2, [r3, #12]
 80038aa:	4b40      	ldr	r3, [pc, #256]	@ (80039ac <HAL_RCC_OscConfig+0x784>)
 80038ac:	4013      	ands	r3, r2
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80038b6:	3a01      	subs	r2, #1
 80038b8:	0112      	lsls	r2, r2, #4
 80038ba:	4311      	orrs	r1, r2
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80038c0:	0212      	lsls	r2, r2, #8
 80038c2:	4311      	orrs	r1, r2
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80038c8:	0852      	lsrs	r2, r2, #1
 80038ca:	3a01      	subs	r2, #1
 80038cc:	0552      	lsls	r2, r2, #21
 80038ce:	4311      	orrs	r1, r2
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80038d4:	0852      	lsrs	r2, r2, #1
 80038d6:	3a01      	subs	r2, #1
 80038d8:	0652      	lsls	r2, r2, #25
 80038da:	4311      	orrs	r1, r2
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80038e0:	0912      	lsrs	r2, r2, #4
 80038e2:	0452      	lsls	r2, r2, #17
 80038e4:	430a      	orrs	r2, r1
 80038e6:	4930      	ldr	r1, [pc, #192]	@ (80039a8 <HAL_RCC_OscConfig+0x780>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80038ec:	4b2e      	ldr	r3, [pc, #184]	@ (80039a8 <HAL_RCC_OscConfig+0x780>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a2d      	ldr	r2, [pc, #180]	@ (80039a8 <HAL_RCC_OscConfig+0x780>)
 80038f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038f6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038f8:	4b2b      	ldr	r3, [pc, #172]	@ (80039a8 <HAL_RCC_OscConfig+0x780>)
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	4a2a      	ldr	r2, [pc, #168]	@ (80039a8 <HAL_RCC_OscConfig+0x780>)
 80038fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003902:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003904:	f7fe fb78 	bl	8001ff8 <HAL_GetTick>
 8003908:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800390a:	e008      	b.n	800391e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800390c:	f7fe fb74 	bl	8001ff8 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b02      	cmp	r3, #2
 8003918:	d901      	bls.n	800391e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e058      	b.n	80039d0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800391e:	4b22      	ldr	r3, [pc, #136]	@ (80039a8 <HAL_RCC_OscConfig+0x780>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d0f0      	beq.n	800390c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800392a:	e050      	b.n	80039ce <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e04f      	b.n	80039d0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003930:	4b1d      	ldr	r3, [pc, #116]	@ (80039a8 <HAL_RCC_OscConfig+0x780>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d148      	bne.n	80039ce <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800393c:	4b1a      	ldr	r3, [pc, #104]	@ (80039a8 <HAL_RCC_OscConfig+0x780>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a19      	ldr	r2, [pc, #100]	@ (80039a8 <HAL_RCC_OscConfig+0x780>)
 8003942:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003946:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003948:	4b17      	ldr	r3, [pc, #92]	@ (80039a8 <HAL_RCC_OscConfig+0x780>)
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	4a16      	ldr	r2, [pc, #88]	@ (80039a8 <HAL_RCC_OscConfig+0x780>)
 800394e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003952:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003954:	f7fe fb50 	bl	8001ff8 <HAL_GetTick>
 8003958:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800395a:	e008      	b.n	800396e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800395c:	f7fe fb4c 	bl	8001ff8 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b02      	cmp	r3, #2
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e030      	b.n	80039d0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800396e:	4b0e      	ldr	r3, [pc, #56]	@ (80039a8 <HAL_RCC_OscConfig+0x780>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d0f0      	beq.n	800395c <HAL_RCC_OscConfig+0x734>
 800397a:	e028      	b.n	80039ce <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	2b0c      	cmp	r3, #12
 8003980:	d023      	beq.n	80039ca <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003982:	4b09      	ldr	r3, [pc, #36]	@ (80039a8 <HAL_RCC_OscConfig+0x780>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a08      	ldr	r2, [pc, #32]	@ (80039a8 <HAL_RCC_OscConfig+0x780>)
 8003988:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800398c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800398e:	f7fe fb33 	bl	8001ff8 <HAL_GetTick>
 8003992:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003994:	e00c      	b.n	80039b0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003996:	f7fe fb2f 	bl	8001ff8 <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d905      	bls.n	80039b0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e013      	b.n	80039d0 <HAL_RCC_OscConfig+0x7a8>
 80039a8:	40021000 	.word	0x40021000
 80039ac:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039b0:	4b09      	ldr	r3, [pc, #36]	@ (80039d8 <HAL_RCC_OscConfig+0x7b0>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1ec      	bne.n	8003996 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80039bc:	4b06      	ldr	r3, [pc, #24]	@ (80039d8 <HAL_RCC_OscConfig+0x7b0>)
 80039be:	68da      	ldr	r2, [r3, #12]
 80039c0:	4905      	ldr	r1, [pc, #20]	@ (80039d8 <HAL_RCC_OscConfig+0x7b0>)
 80039c2:	4b06      	ldr	r3, [pc, #24]	@ (80039dc <HAL_RCC_OscConfig+0x7b4>)
 80039c4:	4013      	ands	r3, r2
 80039c6:	60cb      	str	r3, [r1, #12]
 80039c8:	e001      	b.n	80039ce <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e000      	b.n	80039d0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3720      	adds	r7, #32
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	40021000 	.word	0x40021000
 80039dc:	feeefffc 	.word	0xfeeefffc

080039e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d101      	bne.n	80039f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e0e7      	b.n	8003bc4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039f4:	4b75      	ldr	r3, [pc, #468]	@ (8003bcc <HAL_RCC_ClockConfig+0x1ec>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0307 	and.w	r3, r3, #7
 80039fc:	683a      	ldr	r2, [r7, #0]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d910      	bls.n	8003a24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a02:	4b72      	ldr	r3, [pc, #456]	@ (8003bcc <HAL_RCC_ClockConfig+0x1ec>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f023 0207 	bic.w	r2, r3, #7
 8003a0a:	4970      	ldr	r1, [pc, #448]	@ (8003bcc <HAL_RCC_ClockConfig+0x1ec>)
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a12:	4b6e      	ldr	r3, [pc, #440]	@ (8003bcc <HAL_RCC_ClockConfig+0x1ec>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0307 	and.w	r3, r3, #7
 8003a1a:	683a      	ldr	r2, [r7, #0]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d001      	beq.n	8003a24 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e0cf      	b.n	8003bc4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d010      	beq.n	8003a52 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689a      	ldr	r2, [r3, #8]
 8003a34:	4b66      	ldr	r3, [pc, #408]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d908      	bls.n	8003a52 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a40:	4b63      	ldr	r3, [pc, #396]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	4960      	ldr	r1, [pc, #384]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d04c      	beq.n	8003af8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	2b03      	cmp	r3, #3
 8003a64:	d107      	bne.n	8003a76 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a66:	4b5a      	ldr	r3, [pc, #360]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d121      	bne.n	8003ab6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e0a6      	b.n	8003bc4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d107      	bne.n	8003a8e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a7e:	4b54      	ldr	r3, [pc, #336]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d115      	bne.n	8003ab6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e09a      	b.n	8003bc4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d107      	bne.n	8003aa6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a96:	4b4e      	ldr	r3, [pc, #312]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d109      	bne.n	8003ab6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e08e      	b.n	8003bc4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003aa6:	4b4a      	ldr	r3, [pc, #296]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d101      	bne.n	8003ab6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e086      	b.n	8003bc4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ab6:	4b46      	ldr	r3, [pc, #280]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f023 0203 	bic.w	r2, r3, #3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	4943      	ldr	r1, [pc, #268]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ac8:	f7fe fa96 	bl	8001ff8 <HAL_GetTick>
 8003acc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ace:	e00a      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ad0:	f7fe fa92 	bl	8001ff8 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e06e      	b.n	8003bc4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ae6:	4b3a      	ldr	r3, [pc, #232]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f003 020c 	and.w	r2, r3, #12
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d1eb      	bne.n	8003ad0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d010      	beq.n	8003b26 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	689a      	ldr	r2, [r3, #8]
 8003b08:	4b31      	ldr	r3, [pc, #196]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d208      	bcs.n	8003b26 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b14:	4b2e      	ldr	r3, [pc, #184]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	492b      	ldr	r1, [pc, #172]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b26:	4b29      	ldr	r3, [pc, #164]	@ (8003bcc <HAL_RCC_ClockConfig+0x1ec>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0307 	and.w	r3, r3, #7
 8003b2e:	683a      	ldr	r2, [r7, #0]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d210      	bcs.n	8003b56 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b34:	4b25      	ldr	r3, [pc, #148]	@ (8003bcc <HAL_RCC_ClockConfig+0x1ec>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f023 0207 	bic.w	r2, r3, #7
 8003b3c:	4923      	ldr	r1, [pc, #140]	@ (8003bcc <HAL_RCC_ClockConfig+0x1ec>)
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b44:	4b21      	ldr	r3, [pc, #132]	@ (8003bcc <HAL_RCC_ClockConfig+0x1ec>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0307 	and.w	r3, r3, #7
 8003b4c:	683a      	ldr	r2, [r7, #0]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d001      	beq.n	8003b56 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e036      	b.n	8003bc4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0304 	and.w	r3, r3, #4
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d008      	beq.n	8003b74 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b62:	4b1b      	ldr	r3, [pc, #108]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	4918      	ldr	r1, [pc, #96]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0308 	and.w	r3, r3, #8
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d009      	beq.n	8003b94 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b80:	4b13      	ldr	r3, [pc, #76]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	00db      	lsls	r3, r3, #3
 8003b8e:	4910      	ldr	r1, [pc, #64]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b94:	f000 f824 	bl	8003be0 <HAL_RCC_GetSysClockFreq>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	091b      	lsrs	r3, r3, #4
 8003ba0:	f003 030f 	and.w	r3, r3, #15
 8003ba4:	490b      	ldr	r1, [pc, #44]	@ (8003bd4 <HAL_RCC_ClockConfig+0x1f4>)
 8003ba6:	5ccb      	ldrb	r3, [r1, r3]
 8003ba8:	f003 031f 	and.w	r3, r3, #31
 8003bac:	fa22 f303 	lsr.w	r3, r2, r3
 8003bb0:	4a09      	ldr	r2, [pc, #36]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1f8>)
 8003bb2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003bb4:	4b09      	ldr	r3, [pc, #36]	@ (8003bdc <HAL_RCC_ClockConfig+0x1fc>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f7fe f9cd 	bl	8001f58 <HAL_InitTick>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	72fb      	strb	r3, [r7, #11]

  return status;
 8003bc2:	7afb      	ldrb	r3, [r7, #11]
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3710      	adds	r7, #16
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	40022000 	.word	0x40022000
 8003bd0:	40021000 	.word	0x40021000
 8003bd4:	080146ec 	.word	0x080146ec
 8003bd8:	20000018 	.word	0x20000018
 8003bdc:	2000001c 	.word	0x2000001c

08003be0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b089      	sub	sp, #36	@ 0x24
 8003be4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003be6:	2300      	movs	r3, #0
 8003be8:	61fb      	str	r3, [r7, #28]
 8003bea:	2300      	movs	r3, #0
 8003bec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bee:	4b3e      	ldr	r3, [pc, #248]	@ (8003ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f003 030c 	and.w	r3, r3, #12
 8003bf6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bf8:	4b3b      	ldr	r3, [pc, #236]	@ (8003ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	f003 0303 	and.w	r3, r3, #3
 8003c00:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d005      	beq.n	8003c14 <HAL_RCC_GetSysClockFreq+0x34>
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	2b0c      	cmp	r3, #12
 8003c0c:	d121      	bne.n	8003c52 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d11e      	bne.n	8003c52 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003c14:	4b34      	ldr	r3, [pc, #208]	@ (8003ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0308 	and.w	r3, r3, #8
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d107      	bne.n	8003c30 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003c20:	4b31      	ldr	r3, [pc, #196]	@ (8003ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c26:	0a1b      	lsrs	r3, r3, #8
 8003c28:	f003 030f 	and.w	r3, r3, #15
 8003c2c:	61fb      	str	r3, [r7, #28]
 8003c2e:	e005      	b.n	8003c3c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003c30:	4b2d      	ldr	r3, [pc, #180]	@ (8003ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	091b      	lsrs	r3, r3, #4
 8003c36:	f003 030f 	and.w	r3, r3, #15
 8003c3a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003c3c:	4a2b      	ldr	r2, [pc, #172]	@ (8003cec <HAL_RCC_GetSysClockFreq+0x10c>)
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c44:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d10d      	bne.n	8003c68 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c50:	e00a      	b.n	8003c68 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	2b04      	cmp	r3, #4
 8003c56:	d102      	bne.n	8003c5e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c58:	4b25      	ldr	r3, [pc, #148]	@ (8003cf0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c5a:	61bb      	str	r3, [r7, #24]
 8003c5c:	e004      	b.n	8003c68 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	2b08      	cmp	r3, #8
 8003c62:	d101      	bne.n	8003c68 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c64:	4b23      	ldr	r3, [pc, #140]	@ (8003cf4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003c66:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	2b0c      	cmp	r3, #12
 8003c6c:	d134      	bne.n	8003cd8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c6e:	4b1e      	ldr	r3, [pc, #120]	@ (8003ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	f003 0303 	and.w	r3, r3, #3
 8003c76:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d003      	beq.n	8003c86 <HAL_RCC_GetSysClockFreq+0xa6>
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	2b03      	cmp	r3, #3
 8003c82:	d003      	beq.n	8003c8c <HAL_RCC_GetSysClockFreq+0xac>
 8003c84:	e005      	b.n	8003c92 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003c86:	4b1a      	ldr	r3, [pc, #104]	@ (8003cf0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c88:	617b      	str	r3, [r7, #20]
      break;
 8003c8a:	e005      	b.n	8003c98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003c8c:	4b19      	ldr	r3, [pc, #100]	@ (8003cf4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003c8e:	617b      	str	r3, [r7, #20]
      break;
 8003c90:	e002      	b.n	8003c98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	617b      	str	r3, [r7, #20]
      break;
 8003c96:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c98:	4b13      	ldr	r3, [pc, #76]	@ (8003ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	091b      	lsrs	r3, r3, #4
 8003c9e:	f003 0307 	and.w	r3, r3, #7
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003ca6:	4b10      	ldr	r3, [pc, #64]	@ (8003ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	0a1b      	lsrs	r3, r3, #8
 8003cac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003cb0:	697a      	ldr	r2, [r7, #20]
 8003cb2:	fb03 f202 	mul.w	r2, r3, r2
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cbc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8003ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	0e5b      	lsrs	r3, r3, #25
 8003cc4:	f003 0303 	and.w	r3, r3, #3
 8003cc8:	3301      	adds	r3, #1
 8003cca:	005b      	lsls	r3, r3, #1
 8003ccc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003cd8:	69bb      	ldr	r3, [r7, #24]
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3724      	adds	r7, #36	@ 0x24
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	40021000 	.word	0x40021000
 8003cec:	08014704 	.word	0x08014704
 8003cf0:	00f42400 	.word	0x00f42400
 8003cf4:	007a1200 	.word	0x007a1200

08003cf8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cfc:	4b03      	ldr	r3, [pc, #12]	@ (8003d0c <HAL_RCC_GetHCLKFreq+0x14>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	20000018 	.word	0x20000018

08003d10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003d14:	f7ff fff0 	bl	8003cf8 <HAL_RCC_GetHCLKFreq>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	4b06      	ldr	r3, [pc, #24]	@ (8003d34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	0a1b      	lsrs	r3, r3, #8
 8003d20:	f003 0307 	and.w	r3, r3, #7
 8003d24:	4904      	ldr	r1, [pc, #16]	@ (8003d38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d26:	5ccb      	ldrb	r3, [r1, r3]
 8003d28:	f003 031f 	and.w	r3, r3, #31
 8003d2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	40021000 	.word	0x40021000
 8003d38:	080146fc 	.word	0x080146fc

08003d3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003d40:	f7ff ffda 	bl	8003cf8 <HAL_RCC_GetHCLKFreq>
 8003d44:	4602      	mov	r2, r0
 8003d46:	4b06      	ldr	r3, [pc, #24]	@ (8003d60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	0adb      	lsrs	r3, r3, #11
 8003d4c:	f003 0307 	and.w	r3, r3, #7
 8003d50:	4904      	ldr	r1, [pc, #16]	@ (8003d64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d52:	5ccb      	ldrb	r3, [r1, r3]
 8003d54:	f003 031f 	and.w	r3, r3, #31
 8003d58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	40021000 	.word	0x40021000
 8003d64:	080146fc 	.word	0x080146fc

08003d68 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b086      	sub	sp, #24
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003d70:	2300      	movs	r3, #0
 8003d72:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003d74:	4b2a      	ldr	r3, [pc, #168]	@ (8003e20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d003      	beq.n	8003d88 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003d80:	f7ff f9ee 	bl	8003160 <HAL_PWREx_GetVoltageRange>
 8003d84:	6178      	str	r0, [r7, #20]
 8003d86:	e014      	b.n	8003db2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d88:	4b25      	ldr	r3, [pc, #148]	@ (8003e20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d8c:	4a24      	ldr	r2, [pc, #144]	@ (8003e20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d92:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d94:	4b22      	ldr	r3, [pc, #136]	@ (8003e20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d9c:	60fb      	str	r3, [r7, #12]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003da0:	f7ff f9de 	bl	8003160 <HAL_PWREx_GetVoltageRange>
 8003da4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003da6:	4b1e      	ldr	r3, [pc, #120]	@ (8003e20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003da8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003daa:	4a1d      	ldr	r2, [pc, #116]	@ (8003e20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003dac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003db0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003db8:	d10b      	bne.n	8003dd2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2b80      	cmp	r3, #128	@ 0x80
 8003dbe:	d919      	bls.n	8003df4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2ba0      	cmp	r3, #160	@ 0xa0
 8003dc4:	d902      	bls.n	8003dcc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003dc6:	2302      	movs	r3, #2
 8003dc8:	613b      	str	r3, [r7, #16]
 8003dca:	e013      	b.n	8003df4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003dcc:	2301      	movs	r3, #1
 8003dce:	613b      	str	r3, [r7, #16]
 8003dd0:	e010      	b.n	8003df4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2b80      	cmp	r3, #128	@ 0x80
 8003dd6:	d902      	bls.n	8003dde <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003dd8:	2303      	movs	r3, #3
 8003dda:	613b      	str	r3, [r7, #16]
 8003ddc:	e00a      	b.n	8003df4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2b80      	cmp	r3, #128	@ 0x80
 8003de2:	d102      	bne.n	8003dea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003de4:	2302      	movs	r3, #2
 8003de6:	613b      	str	r3, [r7, #16]
 8003de8:	e004      	b.n	8003df4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2b70      	cmp	r3, #112	@ 0x70
 8003dee:	d101      	bne.n	8003df4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003df0:	2301      	movs	r3, #1
 8003df2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003df4:	4b0b      	ldr	r3, [pc, #44]	@ (8003e24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f023 0207 	bic.w	r2, r3, #7
 8003dfc:	4909      	ldr	r1, [pc, #36]	@ (8003e24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003e04:	4b07      	ldr	r3, [pc, #28]	@ (8003e24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0307 	and.w	r3, r3, #7
 8003e0c:	693a      	ldr	r2, [r7, #16]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d001      	beq.n	8003e16 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e000      	b.n	8003e18 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3718      	adds	r7, #24
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	40021000 	.word	0x40021000
 8003e24:	40022000 	.word	0x40022000

08003e28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e30:	2300      	movs	r3, #0
 8003e32:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e34:	2300      	movs	r3, #0
 8003e36:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d041      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e48:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003e4c:	d02a      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003e4e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003e52:	d824      	bhi.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003e54:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003e58:	d008      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003e5a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003e5e:	d81e      	bhi.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00a      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003e64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e68:	d010      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003e6a:	e018      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e6c:	4b86      	ldr	r3, [pc, #536]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	4a85      	ldr	r2, [pc, #532]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e76:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e78:	e015      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	3304      	adds	r3, #4
 8003e7e:	2100      	movs	r1, #0
 8003e80:	4618      	mov	r0, r3
 8003e82:	f000 fabb 	bl	80043fc <RCCEx_PLLSAI1_Config>
 8003e86:	4603      	mov	r3, r0
 8003e88:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e8a:	e00c      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	3320      	adds	r3, #32
 8003e90:	2100      	movs	r1, #0
 8003e92:	4618      	mov	r0, r3
 8003e94:	f000 fba6 	bl	80045e4 <RCCEx_PLLSAI2_Config>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e9c:	e003      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	74fb      	strb	r3, [r7, #19]
      break;
 8003ea2:	e000      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003ea4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ea6:	7cfb      	ldrb	r3, [r7, #19]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d10b      	bne.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003eac:	4b76      	ldr	r3, [pc, #472]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eb2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003eba:	4973      	ldr	r1, [pc, #460]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003ec2:	e001      	b.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ec4:	7cfb      	ldrb	r3, [r7, #19]
 8003ec6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d041      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ed8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003edc:	d02a      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003ede:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003ee2:	d824      	bhi.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003ee4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003ee8:	d008      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003eea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003eee:	d81e      	bhi.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00a      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003ef4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ef8:	d010      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003efa:	e018      	b.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003efc:	4b62      	ldr	r3, [pc, #392]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	4a61      	ldr	r2, [pc, #388]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f06:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f08:	e015      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	3304      	adds	r3, #4
 8003f0e:	2100      	movs	r1, #0
 8003f10:	4618      	mov	r0, r3
 8003f12:	f000 fa73 	bl	80043fc <RCCEx_PLLSAI1_Config>
 8003f16:	4603      	mov	r3, r0
 8003f18:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f1a:	e00c      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	3320      	adds	r3, #32
 8003f20:	2100      	movs	r1, #0
 8003f22:	4618      	mov	r0, r3
 8003f24:	f000 fb5e 	bl	80045e4 <RCCEx_PLLSAI2_Config>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f2c:	e003      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	74fb      	strb	r3, [r7, #19]
      break;
 8003f32:	e000      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003f34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f36:	7cfb      	ldrb	r3, [r7, #19]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d10b      	bne.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f3c:	4b52      	ldr	r3, [pc, #328]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f42:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f4a:	494f      	ldr	r1, [pc, #316]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003f52:	e001      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f54:	7cfb      	ldrb	r3, [r7, #19]
 8003f56:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f000 80a0 	beq.w	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f66:	2300      	movs	r3, #0
 8003f68:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f6a:	4b47      	ldr	r3, [pc, #284]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d101      	bne.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003f76:	2301      	movs	r3, #1
 8003f78:	e000      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d00d      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f80:	4b41      	ldr	r3, [pc, #260]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f84:	4a40      	ldr	r2, [pc, #256]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f8c:	4b3e      	ldr	r3, [pc, #248]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f94:	60bb      	str	r3, [r7, #8]
 8003f96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f9c:	4b3b      	ldr	r3, [pc, #236]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a3a      	ldr	r2, [pc, #232]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003fa2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fa6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fa8:	f7fe f826 	bl	8001ff8 <HAL_GetTick>
 8003fac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003fae:	e009      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fb0:	f7fe f822 	bl	8001ff8 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d902      	bls.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	74fb      	strb	r3, [r7, #19]
        break;
 8003fc2:	e005      	b.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003fc4:	4b31      	ldr	r3, [pc, #196]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d0ef      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003fd0:	7cfb      	ldrb	r3, [r7, #19]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d15c      	bne.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003fd6:	4b2c      	ldr	r3, [pc, #176]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fdc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fe0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d01f      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d019      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ff4:	4b24      	ldr	r3, [pc, #144]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ffa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ffe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004000:	4b21      	ldr	r3, [pc, #132]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004002:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004006:	4a20      	ldr	r2, [pc, #128]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004008:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800400c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004010:	4b1d      	ldr	r3, [pc, #116]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004012:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004016:	4a1c      	ldr	r2, [pc, #112]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004018:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800401c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004020:	4a19      	ldr	r2, [pc, #100]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	f003 0301 	and.w	r3, r3, #1
 800402e:	2b00      	cmp	r3, #0
 8004030:	d016      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004032:	f7fd ffe1 	bl	8001ff8 <HAL_GetTick>
 8004036:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004038:	e00b      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800403a:	f7fd ffdd 	bl	8001ff8 <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004048:	4293      	cmp	r3, r2
 800404a:	d902      	bls.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	74fb      	strb	r3, [r7, #19]
            break;
 8004050:	e006      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004052:	4b0d      	ldr	r3, [pc, #52]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004054:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004058:	f003 0302 	and.w	r3, r3, #2
 800405c:	2b00      	cmp	r3, #0
 800405e:	d0ec      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004060:	7cfb      	ldrb	r3, [r7, #19]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d10c      	bne.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004066:	4b08      	ldr	r3, [pc, #32]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004068:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800406c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004076:	4904      	ldr	r1, [pc, #16]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004078:	4313      	orrs	r3, r2
 800407a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800407e:	e009      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004080:	7cfb      	ldrb	r3, [r7, #19]
 8004082:	74bb      	strb	r3, [r7, #18]
 8004084:	e006      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004086:	bf00      	nop
 8004088:	40021000 	.word	0x40021000
 800408c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004090:	7cfb      	ldrb	r3, [r7, #19]
 8004092:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004094:	7c7b      	ldrb	r3, [r7, #17]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d105      	bne.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800409a:	4b9e      	ldr	r3, [pc, #632]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800409c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800409e:	4a9d      	ldr	r2, [pc, #628]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040a4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00a      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040b2:	4b98      	ldr	r3, [pc, #608]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040b8:	f023 0203 	bic.w	r2, r3, #3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040c0:	4994      	ldr	r1, [pc, #592]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0302 	and.w	r3, r3, #2
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d00a      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040d4:	4b8f      	ldr	r3, [pc, #572]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040da:	f023 020c 	bic.w	r2, r3, #12
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040e2:	498c      	ldr	r1, [pc, #560]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0304 	and.w	r3, r3, #4
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00a      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80040f6:	4b87      	ldr	r3, [pc, #540]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040fc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004104:	4983      	ldr	r1, [pc, #524]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004106:	4313      	orrs	r3, r2
 8004108:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0308 	and.w	r3, r3, #8
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00a      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004118:	4b7e      	ldr	r3, [pc, #504]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800411a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800411e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004126:	497b      	ldr	r1, [pc, #492]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004128:	4313      	orrs	r3, r2
 800412a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0310 	and.w	r3, r3, #16
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00a      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800413a:	4b76      	ldr	r3, [pc, #472]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800413c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004140:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004148:	4972      	ldr	r1, [pc, #456]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800414a:	4313      	orrs	r3, r2
 800414c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0320 	and.w	r3, r3, #32
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00a      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800415c:	4b6d      	ldr	r3, [pc, #436]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800415e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004162:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800416a:	496a      	ldr	r1, [pc, #424]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800416c:	4313      	orrs	r3, r2
 800416e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00a      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800417e:	4b65      	ldr	r3, [pc, #404]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004180:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004184:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800418c:	4961      	ldr	r1, [pc, #388]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800418e:	4313      	orrs	r3, r2
 8004190:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00a      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041a0:	4b5c      	ldr	r3, [pc, #368]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041a6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041ae:	4959      	ldr	r1, [pc, #356]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00a      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041c2:	4b54      	ldr	r3, [pc, #336]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041c8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041d0:	4950      	ldr	r1, [pc, #320]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d00a      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041e4:	4b4b      	ldr	r3, [pc, #300]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041ea:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041f2:	4948      	ldr	r1, [pc, #288]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00a      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004206:	4b43      	ldr	r3, [pc, #268]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004208:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800420c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004214:	493f      	ldr	r1, [pc, #252]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004216:	4313      	orrs	r3, r2
 8004218:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d028      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004228:	4b3a      	ldr	r3, [pc, #232]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800422a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800422e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004236:	4937      	ldr	r1, [pc, #220]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004238:	4313      	orrs	r3, r2
 800423a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004242:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004246:	d106      	bne.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004248:	4b32      	ldr	r3, [pc, #200]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	4a31      	ldr	r2, [pc, #196]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800424e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004252:	60d3      	str	r3, [r2, #12]
 8004254:	e011      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800425a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800425e:	d10c      	bne.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	3304      	adds	r3, #4
 8004264:	2101      	movs	r1, #1
 8004266:	4618      	mov	r0, r3
 8004268:	f000 f8c8 	bl	80043fc <RCCEx_PLLSAI1_Config>
 800426c:	4603      	mov	r3, r0
 800426e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004270:	7cfb      	ldrb	r3, [r7, #19]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d001      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004276:	7cfb      	ldrb	r3, [r7, #19]
 8004278:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d028      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004286:	4b23      	ldr	r3, [pc, #140]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004288:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800428c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004294:	491f      	ldr	r1, [pc, #124]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004296:	4313      	orrs	r3, r2
 8004298:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80042a4:	d106      	bne.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042a6:	4b1b      	ldr	r3, [pc, #108]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	4a1a      	ldr	r2, [pc, #104]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042b0:	60d3      	str	r3, [r2, #12]
 80042b2:	e011      	b.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80042bc:	d10c      	bne.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	3304      	adds	r3, #4
 80042c2:	2101      	movs	r1, #1
 80042c4:	4618      	mov	r0, r3
 80042c6:	f000 f899 	bl	80043fc <RCCEx_PLLSAI1_Config>
 80042ca:	4603      	mov	r3, r0
 80042cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042ce:	7cfb      	ldrb	r3, [r7, #19]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d001      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80042d4:	7cfb      	ldrb	r3, [r7, #19]
 80042d6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d02b      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80042e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042ea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042f2:	4908      	ldr	r1, [pc, #32]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004302:	d109      	bne.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004304:	4b03      	ldr	r3, [pc, #12]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	4a02      	ldr	r2, [pc, #8]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800430a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800430e:	60d3      	str	r3, [r2, #12]
 8004310:	e014      	b.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004312:	bf00      	nop
 8004314:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800431c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004320:	d10c      	bne.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	3304      	adds	r3, #4
 8004326:	2101      	movs	r1, #1
 8004328:	4618      	mov	r0, r3
 800432a:	f000 f867 	bl	80043fc <RCCEx_PLLSAI1_Config>
 800432e:	4603      	mov	r3, r0
 8004330:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004332:	7cfb      	ldrb	r3, [r7, #19]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d001      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004338:	7cfb      	ldrb	r3, [r7, #19]
 800433a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d02f      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004348:	4b2b      	ldr	r3, [pc, #172]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800434a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800434e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004356:	4928      	ldr	r1, [pc, #160]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004358:	4313      	orrs	r3, r2
 800435a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004362:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004366:	d10d      	bne.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	3304      	adds	r3, #4
 800436c:	2102      	movs	r1, #2
 800436e:	4618      	mov	r0, r3
 8004370:	f000 f844 	bl	80043fc <RCCEx_PLLSAI1_Config>
 8004374:	4603      	mov	r3, r0
 8004376:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004378:	7cfb      	ldrb	r3, [r7, #19]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d014      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800437e:	7cfb      	ldrb	r3, [r7, #19]
 8004380:	74bb      	strb	r3, [r7, #18]
 8004382:	e011      	b.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004388:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800438c:	d10c      	bne.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	3320      	adds	r3, #32
 8004392:	2102      	movs	r1, #2
 8004394:	4618      	mov	r0, r3
 8004396:	f000 f925 	bl	80045e4 <RCCEx_PLLSAI2_Config>
 800439a:	4603      	mov	r3, r0
 800439c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800439e:	7cfb      	ldrb	r3, [r7, #19]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d001      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80043a4:	7cfb      	ldrb	r3, [r7, #19]
 80043a6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00a      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80043b4:	4b10      	ldr	r3, [pc, #64]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043ba:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80043c2:	490d      	ldr	r1, [pc, #52]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00b      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80043d6:	4b08      	ldr	r3, [pc, #32]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043dc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043e6:	4904      	ldr	r1, [pc, #16]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80043ee:	7cbb      	ldrb	r3, [r7, #18]
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3718      	adds	r7, #24
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	40021000 	.word	0x40021000

080043fc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004406:	2300      	movs	r3, #0
 8004408:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800440a:	4b75      	ldr	r3, [pc, #468]	@ (80045e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	f003 0303 	and.w	r3, r3, #3
 8004412:	2b00      	cmp	r3, #0
 8004414:	d018      	beq.n	8004448 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004416:	4b72      	ldr	r3, [pc, #456]	@ (80045e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	f003 0203 	and.w	r2, r3, #3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	429a      	cmp	r2, r3
 8004424:	d10d      	bne.n	8004442 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
       ||
 800442a:	2b00      	cmp	r3, #0
 800442c:	d009      	beq.n	8004442 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800442e:	4b6c      	ldr	r3, [pc, #432]	@ (80045e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	091b      	lsrs	r3, r3, #4
 8004434:	f003 0307 	and.w	r3, r3, #7
 8004438:	1c5a      	adds	r2, r3, #1
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685b      	ldr	r3, [r3, #4]
       ||
 800443e:	429a      	cmp	r2, r3
 8004440:	d047      	beq.n	80044d2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	73fb      	strb	r3, [r7, #15]
 8004446:	e044      	b.n	80044d2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2b03      	cmp	r3, #3
 800444e:	d018      	beq.n	8004482 <RCCEx_PLLSAI1_Config+0x86>
 8004450:	2b03      	cmp	r3, #3
 8004452:	d825      	bhi.n	80044a0 <RCCEx_PLLSAI1_Config+0xa4>
 8004454:	2b01      	cmp	r3, #1
 8004456:	d002      	beq.n	800445e <RCCEx_PLLSAI1_Config+0x62>
 8004458:	2b02      	cmp	r3, #2
 800445a:	d009      	beq.n	8004470 <RCCEx_PLLSAI1_Config+0x74>
 800445c:	e020      	b.n	80044a0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800445e:	4b60      	ldr	r3, [pc, #384]	@ (80045e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	2b00      	cmp	r3, #0
 8004468:	d11d      	bne.n	80044a6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800446e:	e01a      	b.n	80044a6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004470:	4b5b      	ldr	r3, [pc, #364]	@ (80045e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004478:	2b00      	cmp	r3, #0
 800447a:	d116      	bne.n	80044aa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004480:	e013      	b.n	80044aa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004482:	4b57      	ldr	r3, [pc, #348]	@ (80045e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d10f      	bne.n	80044ae <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800448e:	4b54      	ldr	r3, [pc, #336]	@ (80045e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d109      	bne.n	80044ae <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800449e:	e006      	b.n	80044ae <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	73fb      	strb	r3, [r7, #15]
      break;
 80044a4:	e004      	b.n	80044b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044a6:	bf00      	nop
 80044a8:	e002      	b.n	80044b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044aa:	bf00      	nop
 80044ac:	e000      	b.n	80044b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80044b0:	7bfb      	ldrb	r3, [r7, #15]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d10d      	bne.n	80044d2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80044b6:	4b4a      	ldr	r3, [pc, #296]	@ (80045e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6819      	ldr	r1, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	3b01      	subs	r3, #1
 80044c8:	011b      	lsls	r3, r3, #4
 80044ca:	430b      	orrs	r3, r1
 80044cc:	4944      	ldr	r1, [pc, #272]	@ (80045e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80044d2:	7bfb      	ldrb	r3, [r7, #15]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d17d      	bne.n	80045d4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80044d8:	4b41      	ldr	r3, [pc, #260]	@ (80045e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a40      	ldr	r2, [pc, #256]	@ (80045e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044de:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80044e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044e4:	f7fd fd88 	bl	8001ff8 <HAL_GetTick>
 80044e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80044ea:	e009      	b.n	8004500 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044ec:	f7fd fd84 	bl	8001ff8 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d902      	bls.n	8004500 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	73fb      	strb	r3, [r7, #15]
        break;
 80044fe:	e005      	b.n	800450c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004500:	4b37      	ldr	r3, [pc, #220]	@ (80045e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1ef      	bne.n	80044ec <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800450c:	7bfb      	ldrb	r3, [r7, #15]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d160      	bne.n	80045d4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d111      	bne.n	800453c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004518:	4b31      	ldr	r3, [pc, #196]	@ (80045e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004520:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	6892      	ldr	r2, [r2, #8]
 8004528:	0211      	lsls	r1, r2, #8
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	68d2      	ldr	r2, [r2, #12]
 800452e:	0912      	lsrs	r2, r2, #4
 8004530:	0452      	lsls	r2, r2, #17
 8004532:	430a      	orrs	r2, r1
 8004534:	492a      	ldr	r1, [pc, #168]	@ (80045e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004536:	4313      	orrs	r3, r2
 8004538:	610b      	str	r3, [r1, #16]
 800453a:	e027      	b.n	800458c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	2b01      	cmp	r3, #1
 8004540:	d112      	bne.n	8004568 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004542:	4b27      	ldr	r3, [pc, #156]	@ (80045e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800454a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	6892      	ldr	r2, [r2, #8]
 8004552:	0211      	lsls	r1, r2, #8
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	6912      	ldr	r2, [r2, #16]
 8004558:	0852      	lsrs	r2, r2, #1
 800455a:	3a01      	subs	r2, #1
 800455c:	0552      	lsls	r2, r2, #21
 800455e:	430a      	orrs	r2, r1
 8004560:	491f      	ldr	r1, [pc, #124]	@ (80045e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004562:	4313      	orrs	r3, r2
 8004564:	610b      	str	r3, [r1, #16]
 8004566:	e011      	b.n	800458c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004568:	4b1d      	ldr	r3, [pc, #116]	@ (80045e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004570:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	6892      	ldr	r2, [r2, #8]
 8004578:	0211      	lsls	r1, r2, #8
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	6952      	ldr	r2, [r2, #20]
 800457e:	0852      	lsrs	r2, r2, #1
 8004580:	3a01      	subs	r2, #1
 8004582:	0652      	lsls	r2, r2, #25
 8004584:	430a      	orrs	r2, r1
 8004586:	4916      	ldr	r1, [pc, #88]	@ (80045e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004588:	4313      	orrs	r3, r2
 800458a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800458c:	4b14      	ldr	r3, [pc, #80]	@ (80045e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a13      	ldr	r2, [pc, #76]	@ (80045e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004592:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004596:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004598:	f7fd fd2e 	bl	8001ff8 <HAL_GetTick>
 800459c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800459e:	e009      	b.n	80045b4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045a0:	f7fd fd2a 	bl	8001ff8 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d902      	bls.n	80045b4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	73fb      	strb	r3, [r7, #15]
          break;
 80045b2:	e005      	b.n	80045c0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045b4:	4b0a      	ldr	r3, [pc, #40]	@ (80045e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d0ef      	beq.n	80045a0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80045c0:	7bfb      	ldrb	r3, [r7, #15]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d106      	bne.n	80045d4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80045c6:	4b06      	ldr	r3, [pc, #24]	@ (80045e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045c8:	691a      	ldr	r2, [r3, #16]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	4904      	ldr	r1, [pc, #16]	@ (80045e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80045d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3710      	adds	r7, #16
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	40021000 	.word	0x40021000

080045e4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045ee:	2300      	movs	r3, #0
 80045f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80045f2:	4b6a      	ldr	r3, [pc, #424]	@ (800479c <RCCEx_PLLSAI2_Config+0x1b8>)
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	f003 0303 	and.w	r3, r3, #3
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d018      	beq.n	8004630 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80045fe:	4b67      	ldr	r3, [pc, #412]	@ (800479c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	f003 0203 	and.w	r2, r3, #3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	429a      	cmp	r2, r3
 800460c:	d10d      	bne.n	800462a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
       ||
 8004612:	2b00      	cmp	r3, #0
 8004614:	d009      	beq.n	800462a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004616:	4b61      	ldr	r3, [pc, #388]	@ (800479c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	091b      	lsrs	r3, r3, #4
 800461c:	f003 0307 	and.w	r3, r3, #7
 8004620:	1c5a      	adds	r2, r3, #1
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
       ||
 8004626:	429a      	cmp	r2, r3
 8004628:	d047      	beq.n	80046ba <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	73fb      	strb	r3, [r7, #15]
 800462e:	e044      	b.n	80046ba <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2b03      	cmp	r3, #3
 8004636:	d018      	beq.n	800466a <RCCEx_PLLSAI2_Config+0x86>
 8004638:	2b03      	cmp	r3, #3
 800463a:	d825      	bhi.n	8004688 <RCCEx_PLLSAI2_Config+0xa4>
 800463c:	2b01      	cmp	r3, #1
 800463e:	d002      	beq.n	8004646 <RCCEx_PLLSAI2_Config+0x62>
 8004640:	2b02      	cmp	r3, #2
 8004642:	d009      	beq.n	8004658 <RCCEx_PLLSAI2_Config+0x74>
 8004644:	e020      	b.n	8004688 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004646:	4b55      	ldr	r3, [pc, #340]	@ (800479c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0302 	and.w	r3, r3, #2
 800464e:	2b00      	cmp	r3, #0
 8004650:	d11d      	bne.n	800468e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004656:	e01a      	b.n	800468e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004658:	4b50      	ldr	r3, [pc, #320]	@ (800479c <RCCEx_PLLSAI2_Config+0x1b8>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004660:	2b00      	cmp	r3, #0
 8004662:	d116      	bne.n	8004692 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004668:	e013      	b.n	8004692 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800466a:	4b4c      	ldr	r3, [pc, #304]	@ (800479c <RCCEx_PLLSAI2_Config+0x1b8>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d10f      	bne.n	8004696 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004676:	4b49      	ldr	r3, [pc, #292]	@ (800479c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d109      	bne.n	8004696 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004686:	e006      	b.n	8004696 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	73fb      	strb	r3, [r7, #15]
      break;
 800468c:	e004      	b.n	8004698 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800468e:	bf00      	nop
 8004690:	e002      	b.n	8004698 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004692:	bf00      	nop
 8004694:	e000      	b.n	8004698 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004696:	bf00      	nop
    }

    if(status == HAL_OK)
 8004698:	7bfb      	ldrb	r3, [r7, #15]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d10d      	bne.n	80046ba <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800469e:	4b3f      	ldr	r3, [pc, #252]	@ (800479c <RCCEx_PLLSAI2_Config+0x1b8>)
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6819      	ldr	r1, [r3, #0]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	3b01      	subs	r3, #1
 80046b0:	011b      	lsls	r3, r3, #4
 80046b2:	430b      	orrs	r3, r1
 80046b4:	4939      	ldr	r1, [pc, #228]	@ (800479c <RCCEx_PLLSAI2_Config+0x1b8>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80046ba:	7bfb      	ldrb	r3, [r7, #15]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d167      	bne.n	8004790 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80046c0:	4b36      	ldr	r3, [pc, #216]	@ (800479c <RCCEx_PLLSAI2_Config+0x1b8>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a35      	ldr	r2, [pc, #212]	@ (800479c <RCCEx_PLLSAI2_Config+0x1b8>)
 80046c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046cc:	f7fd fc94 	bl	8001ff8 <HAL_GetTick>
 80046d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80046d2:	e009      	b.n	80046e8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80046d4:	f7fd fc90 	bl	8001ff8 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d902      	bls.n	80046e8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	73fb      	strb	r3, [r7, #15]
        break;
 80046e6:	e005      	b.n	80046f4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80046e8:	4b2c      	ldr	r3, [pc, #176]	@ (800479c <RCCEx_PLLSAI2_Config+0x1b8>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d1ef      	bne.n	80046d4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80046f4:	7bfb      	ldrb	r3, [r7, #15]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d14a      	bne.n	8004790 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d111      	bne.n	8004724 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004700:	4b26      	ldr	r3, [pc, #152]	@ (800479c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004702:	695b      	ldr	r3, [r3, #20]
 8004704:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004708:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	6892      	ldr	r2, [r2, #8]
 8004710:	0211      	lsls	r1, r2, #8
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	68d2      	ldr	r2, [r2, #12]
 8004716:	0912      	lsrs	r2, r2, #4
 8004718:	0452      	lsls	r2, r2, #17
 800471a:	430a      	orrs	r2, r1
 800471c:	491f      	ldr	r1, [pc, #124]	@ (800479c <RCCEx_PLLSAI2_Config+0x1b8>)
 800471e:	4313      	orrs	r3, r2
 8004720:	614b      	str	r3, [r1, #20]
 8004722:	e011      	b.n	8004748 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004724:	4b1d      	ldr	r3, [pc, #116]	@ (800479c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004726:	695b      	ldr	r3, [r3, #20]
 8004728:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800472c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	6892      	ldr	r2, [r2, #8]
 8004734:	0211      	lsls	r1, r2, #8
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	6912      	ldr	r2, [r2, #16]
 800473a:	0852      	lsrs	r2, r2, #1
 800473c:	3a01      	subs	r2, #1
 800473e:	0652      	lsls	r2, r2, #25
 8004740:	430a      	orrs	r2, r1
 8004742:	4916      	ldr	r1, [pc, #88]	@ (800479c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004744:	4313      	orrs	r3, r2
 8004746:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004748:	4b14      	ldr	r3, [pc, #80]	@ (800479c <RCCEx_PLLSAI2_Config+0x1b8>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a13      	ldr	r2, [pc, #76]	@ (800479c <RCCEx_PLLSAI2_Config+0x1b8>)
 800474e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004752:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004754:	f7fd fc50 	bl	8001ff8 <HAL_GetTick>
 8004758:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800475a:	e009      	b.n	8004770 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800475c:	f7fd fc4c 	bl	8001ff8 <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	2b02      	cmp	r3, #2
 8004768:	d902      	bls.n	8004770 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	73fb      	strb	r3, [r7, #15]
          break;
 800476e:	e005      	b.n	800477c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004770:	4b0a      	ldr	r3, [pc, #40]	@ (800479c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d0ef      	beq.n	800475c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800477c:	7bfb      	ldrb	r3, [r7, #15]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d106      	bne.n	8004790 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004782:	4b06      	ldr	r3, [pc, #24]	@ (800479c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004784:	695a      	ldr	r2, [r3, #20]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	4904      	ldr	r1, [pc, #16]	@ (800479c <RCCEx_PLLSAI2_Config+0x1b8>)
 800478c:	4313      	orrs	r3, r2
 800478e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004790:	7bfb      	ldrb	r3, [r7, #15]
}
 8004792:	4618      	mov	r0, r3
 8004794:	3710      	adds	r7, #16
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	40021000 	.word	0x40021000

080047a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b082      	sub	sp, #8
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d101      	bne.n	80047b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e049      	b.n	8004846 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d106      	bne.n	80047cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f7fd f850 	bl	800186c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2202      	movs	r2, #2
 80047d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	3304      	adds	r3, #4
 80047dc:	4619      	mov	r1, r3
 80047de:	4610      	mov	r0, r2
 80047e0:	f000 fb10 	bl	8004e04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3708      	adds	r7, #8
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
	...

08004850 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800485e:	b2db      	uxtb	r3, r3
 8004860:	2b01      	cmp	r3, #1
 8004862:	d001      	beq.n	8004868 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e047      	b.n	80048f8 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2202      	movs	r2, #2
 800486c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a23      	ldr	r2, [pc, #140]	@ (8004904 <HAL_TIM_Base_Start+0xb4>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d01d      	beq.n	80048b6 <HAL_TIM_Base_Start+0x66>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004882:	d018      	beq.n	80048b6 <HAL_TIM_Base_Start+0x66>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a1f      	ldr	r2, [pc, #124]	@ (8004908 <HAL_TIM_Base_Start+0xb8>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d013      	beq.n	80048b6 <HAL_TIM_Base_Start+0x66>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a1e      	ldr	r2, [pc, #120]	@ (800490c <HAL_TIM_Base_Start+0xbc>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d00e      	beq.n	80048b6 <HAL_TIM_Base_Start+0x66>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a1c      	ldr	r2, [pc, #112]	@ (8004910 <HAL_TIM_Base_Start+0xc0>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d009      	beq.n	80048b6 <HAL_TIM_Base_Start+0x66>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a1b      	ldr	r2, [pc, #108]	@ (8004914 <HAL_TIM_Base_Start+0xc4>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d004      	beq.n	80048b6 <HAL_TIM_Base_Start+0x66>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a19      	ldr	r2, [pc, #100]	@ (8004918 <HAL_TIM_Base_Start+0xc8>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d115      	bne.n	80048e2 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	689a      	ldr	r2, [r3, #8]
 80048bc:	4b17      	ldr	r3, [pc, #92]	@ (800491c <HAL_TIM_Base_Start+0xcc>)
 80048be:	4013      	ands	r3, r2
 80048c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2b06      	cmp	r3, #6
 80048c6:	d015      	beq.n	80048f4 <HAL_TIM_Base_Start+0xa4>
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048ce:	d011      	beq.n	80048f4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f042 0201 	orr.w	r2, r2, #1
 80048de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048e0:	e008      	b.n	80048f4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f042 0201 	orr.w	r2, r2, #1
 80048f0:	601a      	str	r2, [r3, #0]
 80048f2:	e000      	b.n	80048f6 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048f4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80048f6:	2300      	movs	r3, #0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3714      	adds	r7, #20
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr
 8004904:	40012c00 	.word	0x40012c00
 8004908:	40000400 	.word	0x40000400
 800490c:	40000800 	.word	0x40000800
 8004910:	40000c00 	.word	0x40000c00
 8004914:	40013400 	.word	0x40013400
 8004918:	40014000 	.word	0x40014000
 800491c:	00010007 	.word	0x00010007

08004920 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004920:	b480      	push	{r7}
 8004922:	b085      	sub	sp, #20
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800492e:	b2db      	uxtb	r3, r3
 8004930:	2b01      	cmp	r3, #1
 8004932:	d001      	beq.n	8004938 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e04f      	b.n	80049d8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2202      	movs	r2, #2
 800493c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68da      	ldr	r2, [r3, #12]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f042 0201 	orr.w	r2, r2, #1
 800494e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a23      	ldr	r2, [pc, #140]	@ (80049e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d01d      	beq.n	8004996 <HAL_TIM_Base_Start_IT+0x76>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004962:	d018      	beq.n	8004996 <HAL_TIM_Base_Start_IT+0x76>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a1f      	ldr	r2, [pc, #124]	@ (80049e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d013      	beq.n	8004996 <HAL_TIM_Base_Start_IT+0x76>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a1e      	ldr	r2, [pc, #120]	@ (80049ec <HAL_TIM_Base_Start_IT+0xcc>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d00e      	beq.n	8004996 <HAL_TIM_Base_Start_IT+0x76>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a1c      	ldr	r2, [pc, #112]	@ (80049f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d009      	beq.n	8004996 <HAL_TIM_Base_Start_IT+0x76>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a1b      	ldr	r2, [pc, #108]	@ (80049f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d004      	beq.n	8004996 <HAL_TIM_Base_Start_IT+0x76>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a19      	ldr	r2, [pc, #100]	@ (80049f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d115      	bne.n	80049c2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	689a      	ldr	r2, [r3, #8]
 800499c:	4b17      	ldr	r3, [pc, #92]	@ (80049fc <HAL_TIM_Base_Start_IT+0xdc>)
 800499e:	4013      	ands	r3, r2
 80049a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2b06      	cmp	r3, #6
 80049a6:	d015      	beq.n	80049d4 <HAL_TIM_Base_Start_IT+0xb4>
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049ae:	d011      	beq.n	80049d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f042 0201 	orr.w	r2, r2, #1
 80049be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049c0:	e008      	b.n	80049d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f042 0201 	orr.w	r2, r2, #1
 80049d0:	601a      	str	r2, [r3, #0]
 80049d2:	e000      	b.n	80049d6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049d4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3714      	adds	r7, #20
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr
 80049e4:	40012c00 	.word	0x40012c00
 80049e8:	40000400 	.word	0x40000400
 80049ec:	40000800 	.word	0x40000800
 80049f0:	40000c00 	.word	0x40000c00
 80049f4:	40013400 	.word	0x40013400
 80049f8:	40014000 	.word	0x40014000
 80049fc:	00010007 	.word	0x00010007

08004a00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d020      	beq.n	8004a64 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f003 0302 	and.w	r3, r3, #2
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d01b      	beq.n	8004a64 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f06f 0202 	mvn.w	r2, #2
 8004a34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	699b      	ldr	r3, [r3, #24]
 8004a42:	f003 0303 	and.w	r3, r3, #3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d003      	beq.n	8004a52 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 f9bc 	bl	8004dc8 <HAL_TIM_IC_CaptureCallback>
 8004a50:	e005      	b.n	8004a5e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 f9ae 	bl	8004db4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f000 f9bf 	bl	8004ddc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	f003 0304 	and.w	r3, r3, #4
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d020      	beq.n	8004ab0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f003 0304 	and.w	r3, r3, #4
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d01b      	beq.n	8004ab0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f06f 0204 	mvn.w	r2, #4
 8004a80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2202      	movs	r2, #2
 8004a86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d003      	beq.n	8004a9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 f996 	bl	8004dc8 <HAL_TIM_IC_CaptureCallback>
 8004a9c:	e005      	b.n	8004aaa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 f988 	bl	8004db4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f000 f999 	bl	8004ddc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	f003 0308 	and.w	r3, r3, #8
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d020      	beq.n	8004afc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f003 0308 	and.w	r3, r3, #8
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d01b      	beq.n	8004afc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f06f 0208 	mvn.w	r2, #8
 8004acc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2204      	movs	r2, #4
 8004ad2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	69db      	ldr	r3, [r3, #28]
 8004ada:	f003 0303 	and.w	r3, r3, #3
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d003      	beq.n	8004aea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 f970 	bl	8004dc8 <HAL_TIM_IC_CaptureCallback>
 8004ae8:	e005      	b.n	8004af6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 f962 	bl	8004db4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f000 f973 	bl	8004ddc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	f003 0310 	and.w	r3, r3, #16
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d020      	beq.n	8004b48 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f003 0310 	and.w	r3, r3, #16
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d01b      	beq.n	8004b48 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f06f 0210 	mvn.w	r2, #16
 8004b18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2208      	movs	r2, #8
 8004b1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	69db      	ldr	r3, [r3, #28]
 8004b26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d003      	beq.n	8004b36 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 f94a 	bl	8004dc8 <HAL_TIM_IC_CaptureCallback>
 8004b34:	e005      	b.n	8004b42 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 f93c 	bl	8004db4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 f94d 	bl	8004ddc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	f003 0301 	and.w	r3, r3, #1
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00c      	beq.n	8004b6c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f003 0301 	and.w	r3, r3, #1
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d007      	beq.n	8004b6c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f06f 0201 	mvn.w	r2, #1
 8004b64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 f91a 	bl	8004da0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d104      	bne.n	8004b80 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d00c      	beq.n	8004b9a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d007      	beq.n	8004b9a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004b92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f000 fb07 	bl	80051a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d00c      	beq.n	8004bbe <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d007      	beq.n	8004bbe <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004bb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f000 faff 	bl	80051bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d00c      	beq.n	8004be2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d007      	beq.n	8004be2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004bda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f000 f907 	bl	8004df0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	f003 0320 	and.w	r3, r3, #32
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d00c      	beq.n	8004c06 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f003 0320 	and.w	r3, r3, #32
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d007      	beq.n	8004c06 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f06f 0220 	mvn.w	r2, #32
 8004bfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f000 fac7 	bl	8005194 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c06:	bf00      	nop
 8004c08:	3710      	adds	r7, #16
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c0e:	b580      	push	{r7, lr}
 8004c10:	b084      	sub	sp, #16
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
 8004c16:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d101      	bne.n	8004c2a <HAL_TIM_ConfigClockSource+0x1c>
 8004c26:	2302      	movs	r3, #2
 8004c28:	e0b6      	b.n	8004d98 <HAL_TIM_ConfigClockSource+0x18a>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2202      	movs	r2, #2
 8004c36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c48:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004c4c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c54:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	68ba      	ldr	r2, [r7, #8]
 8004c5c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c66:	d03e      	beq.n	8004ce6 <HAL_TIM_ConfigClockSource+0xd8>
 8004c68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c6c:	f200 8087 	bhi.w	8004d7e <HAL_TIM_ConfigClockSource+0x170>
 8004c70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c74:	f000 8086 	beq.w	8004d84 <HAL_TIM_ConfigClockSource+0x176>
 8004c78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c7c:	d87f      	bhi.n	8004d7e <HAL_TIM_ConfigClockSource+0x170>
 8004c7e:	2b70      	cmp	r3, #112	@ 0x70
 8004c80:	d01a      	beq.n	8004cb8 <HAL_TIM_ConfigClockSource+0xaa>
 8004c82:	2b70      	cmp	r3, #112	@ 0x70
 8004c84:	d87b      	bhi.n	8004d7e <HAL_TIM_ConfigClockSource+0x170>
 8004c86:	2b60      	cmp	r3, #96	@ 0x60
 8004c88:	d050      	beq.n	8004d2c <HAL_TIM_ConfigClockSource+0x11e>
 8004c8a:	2b60      	cmp	r3, #96	@ 0x60
 8004c8c:	d877      	bhi.n	8004d7e <HAL_TIM_ConfigClockSource+0x170>
 8004c8e:	2b50      	cmp	r3, #80	@ 0x50
 8004c90:	d03c      	beq.n	8004d0c <HAL_TIM_ConfigClockSource+0xfe>
 8004c92:	2b50      	cmp	r3, #80	@ 0x50
 8004c94:	d873      	bhi.n	8004d7e <HAL_TIM_ConfigClockSource+0x170>
 8004c96:	2b40      	cmp	r3, #64	@ 0x40
 8004c98:	d058      	beq.n	8004d4c <HAL_TIM_ConfigClockSource+0x13e>
 8004c9a:	2b40      	cmp	r3, #64	@ 0x40
 8004c9c:	d86f      	bhi.n	8004d7e <HAL_TIM_ConfigClockSource+0x170>
 8004c9e:	2b30      	cmp	r3, #48	@ 0x30
 8004ca0:	d064      	beq.n	8004d6c <HAL_TIM_ConfigClockSource+0x15e>
 8004ca2:	2b30      	cmp	r3, #48	@ 0x30
 8004ca4:	d86b      	bhi.n	8004d7e <HAL_TIM_ConfigClockSource+0x170>
 8004ca6:	2b20      	cmp	r3, #32
 8004ca8:	d060      	beq.n	8004d6c <HAL_TIM_ConfigClockSource+0x15e>
 8004caa:	2b20      	cmp	r3, #32
 8004cac:	d867      	bhi.n	8004d7e <HAL_TIM_ConfigClockSource+0x170>
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d05c      	beq.n	8004d6c <HAL_TIM_ConfigClockSource+0x15e>
 8004cb2:	2b10      	cmp	r3, #16
 8004cb4:	d05a      	beq.n	8004d6c <HAL_TIM_ConfigClockSource+0x15e>
 8004cb6:	e062      	b.n	8004d7e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004cc8:	f000 f9bc 	bl	8005044 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004cda:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68ba      	ldr	r2, [r7, #8]
 8004ce2:	609a      	str	r2, [r3, #8]
      break;
 8004ce4:	e04f      	b.n	8004d86 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004cf6:	f000 f9a5 	bl	8005044 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	689a      	ldr	r2, [r3, #8]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d08:	609a      	str	r2, [r3, #8]
      break;
 8004d0a:	e03c      	b.n	8004d86 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d18:	461a      	mov	r2, r3
 8004d1a:	f000 f919 	bl	8004f50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2150      	movs	r1, #80	@ 0x50
 8004d24:	4618      	mov	r0, r3
 8004d26:	f000 f972 	bl	800500e <TIM_ITRx_SetConfig>
      break;
 8004d2a:	e02c      	b.n	8004d86 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d38:	461a      	mov	r2, r3
 8004d3a:	f000 f938 	bl	8004fae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2160      	movs	r1, #96	@ 0x60
 8004d44:	4618      	mov	r0, r3
 8004d46:	f000 f962 	bl	800500e <TIM_ITRx_SetConfig>
      break;
 8004d4a:	e01c      	b.n	8004d86 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d58:	461a      	mov	r2, r3
 8004d5a:	f000 f8f9 	bl	8004f50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2140      	movs	r1, #64	@ 0x40
 8004d64:	4618      	mov	r0, r3
 8004d66:	f000 f952 	bl	800500e <TIM_ITRx_SetConfig>
      break;
 8004d6a:	e00c      	b.n	8004d86 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4619      	mov	r1, r3
 8004d76:	4610      	mov	r0, r2
 8004d78:	f000 f949 	bl	800500e <TIM_ITRx_SetConfig>
      break;
 8004d7c:	e003      	b.n	8004d86 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	73fb      	strb	r3, [r7, #15]
      break;
 8004d82:	e000      	b.n	8004d86 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004d84:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3710      	adds	r7, #16
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004da8:	bf00      	nop
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004dbc:	bf00      	nop
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004dd0:	bf00      	nop
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004de4:	bf00      	nop
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004df8:	bf00      	nop
 8004dfa:	370c      	adds	r7, #12
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b085      	sub	sp, #20
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a46      	ldr	r2, [pc, #280]	@ (8004f30 <TIM_Base_SetConfig+0x12c>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d013      	beq.n	8004e44 <TIM_Base_SetConfig+0x40>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e22:	d00f      	beq.n	8004e44 <TIM_Base_SetConfig+0x40>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4a43      	ldr	r2, [pc, #268]	@ (8004f34 <TIM_Base_SetConfig+0x130>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d00b      	beq.n	8004e44 <TIM_Base_SetConfig+0x40>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a42      	ldr	r2, [pc, #264]	@ (8004f38 <TIM_Base_SetConfig+0x134>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d007      	beq.n	8004e44 <TIM_Base_SetConfig+0x40>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4a41      	ldr	r2, [pc, #260]	@ (8004f3c <TIM_Base_SetConfig+0x138>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d003      	beq.n	8004e44 <TIM_Base_SetConfig+0x40>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4a40      	ldr	r2, [pc, #256]	@ (8004f40 <TIM_Base_SetConfig+0x13c>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d108      	bne.n	8004e56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	68fa      	ldr	r2, [r7, #12]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a35      	ldr	r2, [pc, #212]	@ (8004f30 <TIM_Base_SetConfig+0x12c>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d01f      	beq.n	8004e9e <TIM_Base_SetConfig+0x9a>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e64:	d01b      	beq.n	8004e9e <TIM_Base_SetConfig+0x9a>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a32      	ldr	r2, [pc, #200]	@ (8004f34 <TIM_Base_SetConfig+0x130>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d017      	beq.n	8004e9e <TIM_Base_SetConfig+0x9a>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a31      	ldr	r2, [pc, #196]	@ (8004f38 <TIM_Base_SetConfig+0x134>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d013      	beq.n	8004e9e <TIM_Base_SetConfig+0x9a>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a30      	ldr	r2, [pc, #192]	@ (8004f3c <TIM_Base_SetConfig+0x138>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d00f      	beq.n	8004e9e <TIM_Base_SetConfig+0x9a>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a2f      	ldr	r2, [pc, #188]	@ (8004f40 <TIM_Base_SetConfig+0x13c>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d00b      	beq.n	8004e9e <TIM_Base_SetConfig+0x9a>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a2e      	ldr	r2, [pc, #184]	@ (8004f44 <TIM_Base_SetConfig+0x140>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d007      	beq.n	8004e9e <TIM_Base_SetConfig+0x9a>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a2d      	ldr	r2, [pc, #180]	@ (8004f48 <TIM_Base_SetConfig+0x144>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d003      	beq.n	8004e9e <TIM_Base_SetConfig+0x9a>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a2c      	ldr	r2, [pc, #176]	@ (8004f4c <TIM_Base_SetConfig+0x148>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d108      	bne.n	8004eb0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ea4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	695b      	ldr	r3, [r3, #20]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	689a      	ldr	r2, [r3, #8]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a16      	ldr	r2, [pc, #88]	@ (8004f30 <TIM_Base_SetConfig+0x12c>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d00f      	beq.n	8004efc <TIM_Base_SetConfig+0xf8>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a18      	ldr	r2, [pc, #96]	@ (8004f40 <TIM_Base_SetConfig+0x13c>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d00b      	beq.n	8004efc <TIM_Base_SetConfig+0xf8>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a17      	ldr	r2, [pc, #92]	@ (8004f44 <TIM_Base_SetConfig+0x140>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d007      	beq.n	8004efc <TIM_Base_SetConfig+0xf8>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a16      	ldr	r2, [pc, #88]	@ (8004f48 <TIM_Base_SetConfig+0x144>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d003      	beq.n	8004efc <TIM_Base_SetConfig+0xf8>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4a15      	ldr	r2, [pc, #84]	@ (8004f4c <TIM_Base_SetConfig+0x148>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d103      	bne.n	8004f04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	691a      	ldr	r2, [r3, #16]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	f003 0301 	and.w	r3, r3, #1
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d105      	bne.n	8004f22 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	f023 0201 	bic.w	r2, r3, #1
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	611a      	str	r2, [r3, #16]
  }
}
 8004f22:	bf00      	nop
 8004f24:	3714      	adds	r7, #20
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr
 8004f2e:	bf00      	nop
 8004f30:	40012c00 	.word	0x40012c00
 8004f34:	40000400 	.word	0x40000400
 8004f38:	40000800 	.word	0x40000800
 8004f3c:	40000c00 	.word	0x40000c00
 8004f40:	40013400 	.word	0x40013400
 8004f44:	40014000 	.word	0x40014000
 8004f48:	40014400 	.word	0x40014400
 8004f4c:	40014800 	.word	0x40014800

08004f50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b087      	sub	sp, #28
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6a1b      	ldr	r3, [r3, #32]
 8004f60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	f023 0201 	bic.w	r2, r3, #1
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	699b      	ldr	r3, [r3, #24]
 8004f72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	011b      	lsls	r3, r3, #4
 8004f80:	693a      	ldr	r2, [r7, #16]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	f023 030a 	bic.w	r3, r3, #10
 8004f8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f8e:	697a      	ldr	r2, [r7, #20]
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	693a      	ldr	r2, [r7, #16]
 8004f9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	697a      	ldr	r2, [r7, #20]
 8004fa0:	621a      	str	r2, [r3, #32]
}
 8004fa2:	bf00      	nop
 8004fa4:	371c      	adds	r7, #28
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr

08004fae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fae:	b480      	push	{r7}
 8004fb0:	b087      	sub	sp, #28
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	60f8      	str	r0, [r7, #12]
 8004fb6:	60b9      	str	r1, [r7, #8]
 8004fb8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6a1b      	ldr	r3, [r3, #32]
 8004fbe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6a1b      	ldr	r3, [r3, #32]
 8004fc4:	f023 0210 	bic.w	r2, r3, #16
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	699b      	ldr	r3, [r3, #24]
 8004fd0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004fd8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	031b      	lsls	r3, r3, #12
 8004fde:	693a      	ldr	r2, [r7, #16]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004fea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	011b      	lsls	r3, r3, #4
 8004ff0:	697a      	ldr	r2, [r7, #20]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	693a      	ldr	r2, [r7, #16]
 8004ffa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	697a      	ldr	r2, [r7, #20]
 8005000:	621a      	str	r2, [r3, #32]
}
 8005002:	bf00      	nop
 8005004:	371c      	adds	r7, #28
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr

0800500e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800500e:	b480      	push	{r7}
 8005010:	b085      	sub	sp, #20
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
 8005016:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005024:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005026:	683a      	ldr	r2, [r7, #0]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	4313      	orrs	r3, r2
 800502c:	f043 0307 	orr.w	r3, r3, #7
 8005030:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	609a      	str	r2, [r3, #8]
}
 8005038:	bf00      	nop
 800503a:	3714      	adds	r7, #20
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005044:	b480      	push	{r7}
 8005046:	b087      	sub	sp, #28
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	607a      	str	r2, [r7, #4]
 8005050:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800505e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	021a      	lsls	r2, r3, #8
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	431a      	orrs	r2, r3
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	4313      	orrs	r3, r2
 800506c:	697a      	ldr	r2, [r7, #20]
 800506e:	4313      	orrs	r3, r2
 8005070:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	697a      	ldr	r2, [r7, #20]
 8005076:	609a      	str	r2, [r3, #8]
}
 8005078:	bf00      	nop
 800507a:	371c      	adds	r7, #28
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005084:	b480      	push	{r7}
 8005086:	b085      	sub	sp, #20
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005094:	2b01      	cmp	r3, #1
 8005096:	d101      	bne.n	800509c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005098:	2302      	movs	r3, #2
 800509a:	e068      	b.n	800516e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2202      	movs	r2, #2
 80050a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a2e      	ldr	r2, [pc, #184]	@ (800517c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d004      	beq.n	80050d0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a2d      	ldr	r2, [pc, #180]	@ (8005180 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d108      	bne.n	80050e2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80050d6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	4313      	orrs	r3, r2
 80050e0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050e8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a1e      	ldr	r2, [pc, #120]	@ (800517c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d01d      	beq.n	8005142 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800510e:	d018      	beq.n	8005142 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a1b      	ldr	r2, [pc, #108]	@ (8005184 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d013      	beq.n	8005142 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a1a      	ldr	r2, [pc, #104]	@ (8005188 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d00e      	beq.n	8005142 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a18      	ldr	r2, [pc, #96]	@ (800518c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d009      	beq.n	8005142 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a13      	ldr	r2, [pc, #76]	@ (8005180 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d004      	beq.n	8005142 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a14      	ldr	r2, [pc, #80]	@ (8005190 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d10c      	bne.n	800515c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005148:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	68ba      	ldr	r2, [r7, #8]
 8005150:	4313      	orrs	r3, r2
 8005152:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	68ba      	ldr	r2, [r7, #8]
 800515a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800516c:	2300      	movs	r3, #0
}
 800516e:	4618      	mov	r0, r3
 8005170:	3714      	adds	r7, #20
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	40012c00 	.word	0x40012c00
 8005180:	40013400 	.word	0x40013400
 8005184:	40000400 	.word	0x40000400
 8005188:	40000800 	.word	0x40000800
 800518c:	40000c00 	.word	0x40000c00
 8005190:	40014000 	.word	0x40014000

08005194 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800519c:	bf00      	nop
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051b0:	bf00      	nop
 80051b2:	370c      	adds	r7, #12
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80051c4:	bf00      	nop
 80051c6:	370c      	adds	r7, #12
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d101      	bne.n	80051e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e040      	b.n	8005264 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d106      	bne.n	80051f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f7fc fb72 	bl	80018dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2224      	movs	r2, #36	@ 0x24
 80051fc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f022 0201 	bic.w	r2, r2, #1
 800520c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005212:	2b00      	cmp	r3, #0
 8005214:	d002      	beq.n	800521c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 ffa4 	bl	8006164 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f000 fce9 	bl	8005bf4 <UART_SetConfig>
 8005222:	4603      	mov	r3, r0
 8005224:	2b01      	cmp	r3, #1
 8005226:	d101      	bne.n	800522c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e01b      	b.n	8005264 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	685a      	ldr	r2, [r3, #4]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800523a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	689a      	ldr	r2, [r3, #8]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800524a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f042 0201 	orr.w	r2, r2, #1
 800525a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f001 f823 	bl	80062a8 <UART_CheckIdleState>
 8005262:	4603      	mov	r3, r0
}
 8005264:	4618      	mov	r0, r3
 8005266:	3708      	adds	r7, #8
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b08a      	sub	sp, #40	@ 0x28
 8005270:	af02      	add	r7, sp, #8
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	603b      	str	r3, [r7, #0]
 8005278:	4613      	mov	r3, r2
 800527a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005280:	2b20      	cmp	r3, #32
 8005282:	d177      	bne.n	8005374 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d002      	beq.n	8005290 <HAL_UART_Transmit+0x24>
 800528a:	88fb      	ldrh	r3, [r7, #6]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d101      	bne.n	8005294 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e070      	b.n	8005376 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2200      	movs	r2, #0
 8005298:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2221      	movs	r2, #33	@ 0x21
 80052a0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052a2:	f7fc fea9 	bl	8001ff8 <HAL_GetTick>
 80052a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	88fa      	ldrh	r2, [r7, #6]
 80052ac:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	88fa      	ldrh	r2, [r7, #6]
 80052b4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052c0:	d108      	bne.n	80052d4 <HAL_UART_Transmit+0x68>
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d104      	bne.n	80052d4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80052ca:	2300      	movs	r3, #0
 80052cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	61bb      	str	r3, [r7, #24]
 80052d2:	e003      	b.n	80052dc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052d8:	2300      	movs	r3, #0
 80052da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80052dc:	e02f      	b.n	800533e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	9300      	str	r3, [sp, #0]
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	2200      	movs	r2, #0
 80052e6:	2180      	movs	r1, #128	@ 0x80
 80052e8:	68f8      	ldr	r0, [r7, #12]
 80052ea:	f001 f885 	bl	80063f8 <UART_WaitOnFlagUntilTimeout>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d004      	beq.n	80052fe <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2220      	movs	r2, #32
 80052f8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e03b      	b.n	8005376 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d10b      	bne.n	800531c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	881a      	ldrh	r2, [r3, #0]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005310:	b292      	uxth	r2, r2
 8005312:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	3302      	adds	r3, #2
 8005318:	61bb      	str	r3, [r7, #24]
 800531a:	e007      	b.n	800532c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	781a      	ldrb	r2, [r3, #0]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	3301      	adds	r3, #1
 800532a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005332:	b29b      	uxth	r3, r3
 8005334:	3b01      	subs	r3, #1
 8005336:	b29a      	uxth	r2, r3
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005344:	b29b      	uxth	r3, r3
 8005346:	2b00      	cmp	r3, #0
 8005348:	d1c9      	bne.n	80052de <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	9300      	str	r3, [sp, #0]
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	2200      	movs	r2, #0
 8005352:	2140      	movs	r1, #64	@ 0x40
 8005354:	68f8      	ldr	r0, [r7, #12]
 8005356:	f001 f84f 	bl	80063f8 <UART_WaitOnFlagUntilTimeout>
 800535a:	4603      	mov	r3, r0
 800535c:	2b00      	cmp	r3, #0
 800535e:	d004      	beq.n	800536a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2220      	movs	r2, #32
 8005364:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	e005      	b.n	8005376 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2220      	movs	r2, #32
 800536e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005370:	2300      	movs	r3, #0
 8005372:	e000      	b.n	8005376 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005374:	2302      	movs	r3, #2
  }
}
 8005376:	4618      	mov	r0, r3
 8005378:	3720      	adds	r7, #32
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}

0800537e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800537e:	b580      	push	{r7, lr}
 8005380:	b08a      	sub	sp, #40	@ 0x28
 8005382:	af02      	add	r7, sp, #8
 8005384:	60f8      	str	r0, [r7, #12]
 8005386:	60b9      	str	r1, [r7, #8]
 8005388:	603b      	str	r3, [r7, #0]
 800538a:	4613      	mov	r3, r2
 800538c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005394:	2b20      	cmp	r3, #32
 8005396:	f040 80b6 	bne.w	8005506 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d002      	beq.n	80053a6 <HAL_UART_Receive+0x28>
 80053a0:	88fb      	ldrh	r3, [r7, #6]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d101      	bne.n	80053aa <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e0ae      	b.n	8005508 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2222      	movs	r2, #34	@ 0x22
 80053b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2200      	movs	r2, #0
 80053be:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80053c0:	f7fc fe1a 	bl	8001ff8 <HAL_GetTick>
 80053c4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	88fa      	ldrh	r2, [r7, #6]
 80053ca:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	88fa      	ldrh	r2, [r7, #6]
 80053d2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053de:	d10e      	bne.n	80053fe <HAL_UART_Receive+0x80>
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d105      	bne.n	80053f4 <HAL_UART_Receive+0x76>
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80053ee:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80053f2:	e02d      	b.n	8005450 <HAL_UART_Receive+0xd2>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	22ff      	movs	r2, #255	@ 0xff
 80053f8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80053fc:	e028      	b.n	8005450 <HAL_UART_Receive+0xd2>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d10d      	bne.n	8005422 <HAL_UART_Receive+0xa4>
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	691b      	ldr	r3, [r3, #16]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d104      	bne.n	8005418 <HAL_UART_Receive+0x9a>
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	22ff      	movs	r2, #255	@ 0xff
 8005412:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005416:	e01b      	b.n	8005450 <HAL_UART_Receive+0xd2>
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	227f      	movs	r2, #127	@ 0x7f
 800541c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005420:	e016      	b.n	8005450 <HAL_UART_Receive+0xd2>
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800542a:	d10d      	bne.n	8005448 <HAL_UART_Receive+0xca>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d104      	bne.n	800543e <HAL_UART_Receive+0xc0>
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	227f      	movs	r2, #127	@ 0x7f
 8005438:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800543c:	e008      	b.n	8005450 <HAL_UART_Receive+0xd2>
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	223f      	movs	r2, #63	@ 0x3f
 8005442:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005446:	e003      	b.n	8005450 <HAL_UART_Receive+0xd2>
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2200      	movs	r2, #0
 800544c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005456:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005460:	d108      	bne.n	8005474 <HAL_UART_Receive+0xf6>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d104      	bne.n	8005474 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800546a:	2300      	movs	r3, #0
 800546c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	61bb      	str	r3, [r7, #24]
 8005472:	e003      	b.n	800547c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005478:	2300      	movs	r3, #0
 800547a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800547c:	e037      	b.n	80054ee <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	9300      	str	r3, [sp, #0]
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	2200      	movs	r2, #0
 8005486:	2120      	movs	r1, #32
 8005488:	68f8      	ldr	r0, [r7, #12]
 800548a:	f000 ffb5 	bl	80063f8 <UART_WaitOnFlagUntilTimeout>
 800548e:	4603      	mov	r3, r0
 8005490:	2b00      	cmp	r3, #0
 8005492:	d005      	beq.n	80054a0 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2220      	movs	r2, #32
 8005498:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 800549c:	2303      	movs	r3, #3
 800549e:	e033      	b.n	8005508 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d10c      	bne.n	80054c0 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80054ac:	b29a      	uxth	r2, r3
 80054ae:	8a7b      	ldrh	r3, [r7, #18]
 80054b0:	4013      	ands	r3, r2
 80054b2:	b29a      	uxth	r2, r3
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80054b8:	69bb      	ldr	r3, [r7, #24]
 80054ba:	3302      	adds	r3, #2
 80054bc:	61bb      	str	r3, [r7, #24]
 80054be:	e00d      	b.n	80054dc <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	b2da      	uxtb	r2, r3
 80054ca:	8a7b      	ldrh	r3, [r7, #18]
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	4013      	ands	r3, r2
 80054d0:	b2da      	uxtb	r2, r3
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	3301      	adds	r3, #1
 80054da:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	3b01      	subs	r3, #1
 80054e6:	b29a      	uxth	r2, r3
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d1c1      	bne.n	800547e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2220      	movs	r2, #32
 80054fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8005502:	2300      	movs	r3, #0
 8005504:	e000      	b.n	8005508 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8005506:	2302      	movs	r3, #2
  }
}
 8005508:	4618      	mov	r0, r3
 800550a:	3720      	adds	r7, #32
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b08a      	sub	sp, #40	@ 0x28
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	4613      	mov	r3, r2
 800551c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005524:	2b20      	cmp	r3, #32
 8005526:	d137      	bne.n	8005598 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d002      	beq.n	8005534 <HAL_UART_Receive_IT+0x24>
 800552e:	88fb      	ldrh	r3, [r7, #6]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d101      	bne.n	8005538 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e030      	b.n	800559a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2200      	movs	r2, #0
 800553c:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a18      	ldr	r2, [pc, #96]	@ (80055a4 <HAL_UART_Receive_IT+0x94>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d01f      	beq.n	8005588 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005552:	2b00      	cmp	r3, #0
 8005554:	d018      	beq.n	8005588 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	e853 3f00 	ldrex	r3, [r3]
 8005562:	613b      	str	r3, [r7, #16]
   return(result);
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800556a:	627b      	str	r3, [r7, #36]	@ 0x24
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	461a      	mov	r2, r3
 8005572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005574:	623b      	str	r3, [r7, #32]
 8005576:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005578:	69f9      	ldr	r1, [r7, #28]
 800557a:	6a3a      	ldr	r2, [r7, #32]
 800557c:	e841 2300 	strex	r3, r2, [r1]
 8005580:	61bb      	str	r3, [r7, #24]
   return(result);
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d1e6      	bne.n	8005556 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005588:	88fb      	ldrh	r3, [r7, #6]
 800558a:	461a      	mov	r2, r3
 800558c:	68b9      	ldr	r1, [r7, #8]
 800558e:	68f8      	ldr	r0, [r7, #12]
 8005590:	f000 ffa0 	bl	80064d4 <UART_Start_Receive_IT>
 8005594:	4603      	mov	r3, r0
 8005596:	e000      	b.n	800559a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005598:	2302      	movs	r3, #2
  }
}
 800559a:	4618      	mov	r0, r3
 800559c:	3728      	adds	r7, #40	@ 0x28
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	40008000 	.word	0x40008000

080055a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b0ba      	sub	sp, #232	@ 0xe8
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	69db      	ldr	r3, [r3, #28]
 80055b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80055ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80055d2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80055d6:	4013      	ands	r3, r2
 80055d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80055dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d115      	bne.n	8005610 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80055e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055e8:	f003 0320 	and.w	r3, r3, #32
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00f      	beq.n	8005610 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80055f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055f4:	f003 0320 	and.w	r3, r3, #32
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d009      	beq.n	8005610 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005600:	2b00      	cmp	r3, #0
 8005602:	f000 82ca 	beq.w	8005b9a <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	4798      	blx	r3
      }
      return;
 800560e:	e2c4      	b.n	8005b9a <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005610:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005614:	2b00      	cmp	r3, #0
 8005616:	f000 8117 	beq.w	8005848 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800561a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800561e:	f003 0301 	and.w	r3, r3, #1
 8005622:	2b00      	cmp	r3, #0
 8005624:	d106      	bne.n	8005634 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005626:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800562a:	4b85      	ldr	r3, [pc, #532]	@ (8005840 <HAL_UART_IRQHandler+0x298>)
 800562c:	4013      	ands	r3, r2
 800562e:	2b00      	cmp	r3, #0
 8005630:	f000 810a 	beq.w	8005848 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005638:	f003 0301 	and.w	r3, r3, #1
 800563c:	2b00      	cmp	r3, #0
 800563e:	d011      	beq.n	8005664 <HAL_UART_IRQHandler+0xbc>
 8005640:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005644:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005648:	2b00      	cmp	r3, #0
 800564a:	d00b      	beq.n	8005664 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2201      	movs	r2, #1
 8005652:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800565a:	f043 0201 	orr.w	r2, r3, #1
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005668:	f003 0302 	and.w	r3, r3, #2
 800566c:	2b00      	cmp	r3, #0
 800566e:	d011      	beq.n	8005694 <HAL_UART_IRQHandler+0xec>
 8005670:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005674:	f003 0301 	and.w	r3, r3, #1
 8005678:	2b00      	cmp	r3, #0
 800567a:	d00b      	beq.n	8005694 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2202      	movs	r2, #2
 8005682:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800568a:	f043 0204 	orr.w	r2, r3, #4
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005694:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005698:	f003 0304 	and.w	r3, r3, #4
 800569c:	2b00      	cmp	r3, #0
 800569e:	d011      	beq.n	80056c4 <HAL_UART_IRQHandler+0x11c>
 80056a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056a4:	f003 0301 	and.w	r3, r3, #1
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d00b      	beq.n	80056c4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2204      	movs	r2, #4
 80056b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056ba:	f043 0202 	orr.w	r2, r3, #2
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80056c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056c8:	f003 0308 	and.w	r3, r3, #8
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d017      	beq.n	8005700 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80056d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056d4:	f003 0320 	and.w	r3, r3, #32
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d105      	bne.n	80056e8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80056dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056e0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d00b      	beq.n	8005700 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2208      	movs	r2, #8
 80056ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056f6:	f043 0208 	orr.w	r2, r3, #8
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005704:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005708:	2b00      	cmp	r3, #0
 800570a:	d012      	beq.n	8005732 <HAL_UART_IRQHandler+0x18a>
 800570c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005710:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005714:	2b00      	cmp	r3, #0
 8005716:	d00c      	beq.n	8005732 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005720:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005728:	f043 0220 	orr.w	r2, r3, #32
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005738:	2b00      	cmp	r3, #0
 800573a:	f000 8230 	beq.w	8005b9e <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800573e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005742:	f003 0320 	and.w	r3, r3, #32
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00d      	beq.n	8005766 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800574a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800574e:	f003 0320 	and.w	r3, r3, #32
 8005752:	2b00      	cmp	r3, #0
 8005754:	d007      	beq.n	8005766 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800575a:	2b00      	cmp	r3, #0
 800575c:	d003      	beq.n	8005766 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800576c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800577a:	2b40      	cmp	r3, #64	@ 0x40
 800577c:	d005      	beq.n	800578a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800577e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005782:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005786:	2b00      	cmp	r3, #0
 8005788:	d04f      	beq.n	800582a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 ff68 	bl	8006660 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800579a:	2b40      	cmp	r3, #64	@ 0x40
 800579c:	d141      	bne.n	8005822 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	3308      	adds	r3, #8
 80057a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80057ac:	e853 3f00 	ldrex	r3, [r3]
 80057b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80057b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80057b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	3308      	adds	r3, #8
 80057c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80057ca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80057ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80057d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80057da:	e841 2300 	strex	r3, r2, [r1]
 80057de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80057e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d1d9      	bne.n	800579e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d013      	beq.n	800581a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057f6:	4a13      	ldr	r2, [pc, #76]	@ (8005844 <HAL_UART_IRQHandler+0x29c>)
 80057f8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057fe:	4618      	mov	r0, r3
 8005800:	f7fd f950 	bl	8002aa4 <HAL_DMA_Abort_IT>
 8005804:	4603      	mov	r3, r0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d017      	beq.n	800583a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800580e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005814:	4610      	mov	r0, r2
 8005816:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005818:	e00f      	b.n	800583a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 f9d4 	bl	8005bc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005820:	e00b      	b.n	800583a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 f9d0 	bl	8005bc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005828:	e007      	b.n	800583a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 f9cc 	bl	8005bc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005838:	e1b1      	b.n	8005b9e <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800583a:	bf00      	nop
    return;
 800583c:	e1af      	b.n	8005b9e <HAL_UART_IRQHandler+0x5f6>
 800583e:	bf00      	nop
 8005840:	04000120 	.word	0x04000120
 8005844:	08006729 	.word	0x08006729

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800584c:	2b01      	cmp	r3, #1
 800584e:	f040 816a 	bne.w	8005b26 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005856:	f003 0310 	and.w	r3, r3, #16
 800585a:	2b00      	cmp	r3, #0
 800585c:	f000 8163 	beq.w	8005b26 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005864:	f003 0310 	and.w	r3, r3, #16
 8005868:	2b00      	cmp	r3, #0
 800586a:	f000 815c 	beq.w	8005b26 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	2210      	movs	r2, #16
 8005874:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005880:	2b40      	cmp	r3, #64	@ 0x40
 8005882:	f040 80d4 	bne.w	8005a2e <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005892:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005896:	2b00      	cmp	r3, #0
 8005898:	f000 80ad 	beq.w	80059f6 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80058a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80058a6:	429a      	cmp	r2, r3
 80058a8:	f080 80a5 	bcs.w	80059f6 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80058b2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 0320 	and.w	r3, r3, #32
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	f040 8086 	bne.w	80059d4 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80058d4:	e853 3f00 	ldrex	r3, [r3]
 80058d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80058dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80058e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	461a      	mov	r2, r3
 80058ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80058f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80058f6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80058fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005902:	e841 2300 	strex	r3, r2, [r1]
 8005906:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800590a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800590e:	2b00      	cmp	r3, #0
 8005910:	d1da      	bne.n	80058c8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	3308      	adds	r3, #8
 8005918:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800591a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800591c:	e853 3f00 	ldrex	r3, [r3]
 8005920:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005922:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005924:	f023 0301 	bic.w	r3, r3, #1
 8005928:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	3308      	adds	r3, #8
 8005932:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005936:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800593a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800593c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800593e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005942:	e841 2300 	strex	r3, r2, [r1]
 8005946:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005948:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800594a:	2b00      	cmp	r3, #0
 800594c:	d1e1      	bne.n	8005912 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	3308      	adds	r3, #8
 8005954:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005956:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005958:	e853 3f00 	ldrex	r3, [r3]
 800595c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800595e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005960:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005964:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	3308      	adds	r3, #8
 800596e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005972:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005974:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005976:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005978:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800597a:	e841 2300 	strex	r3, r2, [r1]
 800597e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005980:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005982:	2b00      	cmp	r3, #0
 8005984:	d1e3      	bne.n	800594e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2220      	movs	r2, #32
 800598a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800599c:	e853 3f00 	ldrex	r3, [r3]
 80059a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80059a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059a4:	f023 0310 	bic.w	r3, r3, #16
 80059a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	461a      	mov	r2, r3
 80059b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80059b6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80059b8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80059bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80059be:	e841 2300 	strex	r3, r2, [r1]
 80059c2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80059c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d1e4      	bne.n	8005994 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059ce:	4618      	mov	r0, r3
 80059d0:	f7fd f82a 	bl	8002a28 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2202      	movs	r2, #2
 80059d8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	1ad3      	subs	r3, r2, r3
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	4619      	mov	r1, r3
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 f8f4 	bl	8005bdc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80059f4:	e0d5      	b.n	8005ba2 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80059fc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005a00:	429a      	cmp	r2, r3
 8005a02:	f040 80ce 	bne.w	8005ba2 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 0320 	and.w	r3, r3, #32
 8005a12:	2b20      	cmp	r3, #32
 8005a14:	f040 80c5 	bne.w	8005ba2 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2202      	movs	r2, #2
 8005a1c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005a24:	4619      	mov	r1, r3
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 f8d8 	bl	8005bdc <HAL_UARTEx_RxEventCallback>
      return;
 8005a2c:	e0b9      	b.n	8005ba2 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	f000 80ab 	beq.w	8005ba6 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8005a50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	f000 80a6 	beq.w	8005ba6 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a62:	e853 3f00 	ldrex	r3, [r3]
 8005a66:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005a68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a6a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a6e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	461a      	mov	r2, r3
 8005a78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005a7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a7e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a80:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a84:	e841 2300 	strex	r3, r2, [r1]
 8005a88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005a8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d1e4      	bne.n	8005a5a <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	3308      	adds	r3, #8
 8005a96:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a9a:	e853 3f00 	ldrex	r3, [r3]
 8005a9e:	623b      	str	r3, [r7, #32]
   return(result);
 8005aa0:	6a3b      	ldr	r3, [r7, #32]
 8005aa2:	f023 0301 	bic.w	r3, r3, #1
 8005aa6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	3308      	adds	r3, #8
 8005ab0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005ab4:	633a      	str	r2, [r7, #48]	@ 0x30
 8005ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005aba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005abc:	e841 2300 	strex	r3, r2, [r1]
 8005ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d1e3      	bne.n	8005a90 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2220      	movs	r2, #32
 8005acc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	e853 3f00 	ldrex	r3, [r3]
 8005ae8:	60fb      	str	r3, [r7, #12]
   return(result);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f023 0310 	bic.w	r3, r3, #16
 8005af0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	461a      	mov	r2, r3
 8005afa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005afe:	61fb      	str	r3, [r7, #28]
 8005b00:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b02:	69b9      	ldr	r1, [r7, #24]
 8005b04:	69fa      	ldr	r2, [r7, #28]
 8005b06:	e841 2300 	strex	r3, r2, [r1]
 8005b0a:	617b      	str	r3, [r7, #20]
   return(result);
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d1e4      	bne.n	8005adc <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2202      	movs	r2, #2
 8005b16:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 f85c 	bl	8005bdc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005b24:	e03f      	b.n	8005ba6 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00e      	beq.n	8005b50 <HAL_UART_IRQHandler+0x5a8>
 8005b32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d008      	beq.n	8005b50 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005b46:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f000 ffe9 	bl	8006b20 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b4e:	e02d      	b.n	8005bac <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005b50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d00e      	beq.n	8005b7a <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005b5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d008      	beq.n	8005b7a <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d01c      	beq.n	8005baa <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	4798      	blx	r3
    }
    return;
 8005b78:	e017      	b.n	8005baa <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d012      	beq.n	8005bac <HAL_UART_IRQHandler+0x604>
 8005b86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d00c      	beq.n	8005bac <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 fdde 	bl	8006754 <UART_EndTransmit_IT>
    return;
 8005b98:	e008      	b.n	8005bac <HAL_UART_IRQHandler+0x604>
      return;
 8005b9a:	bf00      	nop
 8005b9c:	e006      	b.n	8005bac <HAL_UART_IRQHandler+0x604>
    return;
 8005b9e:	bf00      	nop
 8005ba0:	e004      	b.n	8005bac <HAL_UART_IRQHandler+0x604>
      return;
 8005ba2:	bf00      	nop
 8005ba4:	e002      	b.n	8005bac <HAL_UART_IRQHandler+0x604>
      return;
 8005ba6:	bf00      	nop
 8005ba8:	e000      	b.n	8005bac <HAL_UART_IRQHandler+0x604>
    return;
 8005baa:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005bac:	37e8      	adds	r7, #232	@ 0xe8
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop

08005bb4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005bbc:	bf00      	nop
 8005bbe:	370c      	adds	r7, #12
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005bd0:	bf00      	nop
 8005bd2:	370c      	adds	r7, #12
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	460b      	mov	r3, r1
 8005be6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005be8:	bf00      	nop
 8005bea:	370c      	adds	r7, #12
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr

08005bf4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bf8:	b08a      	sub	sp, #40	@ 0x28
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	689a      	ldr	r2, [r3, #8]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	691b      	ldr	r3, [r3, #16]
 8005c0c:	431a      	orrs	r2, r3
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	695b      	ldr	r3, [r3, #20]
 8005c12:	431a      	orrs	r2, r3
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	69db      	ldr	r3, [r3, #28]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	4ba4      	ldr	r3, [pc, #656]	@ (8005eb4 <UART_SetConfig+0x2c0>)
 8005c24:	4013      	ands	r3, r2
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	6812      	ldr	r2, [r2, #0]
 8005c2a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005c2c:	430b      	orrs	r3, r1
 8005c2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	68da      	ldr	r2, [r3, #12]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	430a      	orrs	r2, r1
 8005c44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	699b      	ldr	r3, [r3, #24]
 8005c4a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a99      	ldr	r2, [pc, #612]	@ (8005eb8 <UART_SetConfig+0x2c4>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d004      	beq.n	8005c60 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6a1b      	ldr	r3, [r3, #32]
 8005c5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c70:	430a      	orrs	r2, r1
 8005c72:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a90      	ldr	r2, [pc, #576]	@ (8005ebc <UART_SetConfig+0x2c8>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d126      	bne.n	8005ccc <UART_SetConfig+0xd8>
 8005c7e:	4b90      	ldr	r3, [pc, #576]	@ (8005ec0 <UART_SetConfig+0x2cc>)
 8005c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c84:	f003 0303 	and.w	r3, r3, #3
 8005c88:	2b03      	cmp	r3, #3
 8005c8a:	d81b      	bhi.n	8005cc4 <UART_SetConfig+0xd0>
 8005c8c:	a201      	add	r2, pc, #4	@ (adr r2, 8005c94 <UART_SetConfig+0xa0>)
 8005c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c92:	bf00      	nop
 8005c94:	08005ca5 	.word	0x08005ca5
 8005c98:	08005cb5 	.word	0x08005cb5
 8005c9c:	08005cad 	.word	0x08005cad
 8005ca0:	08005cbd 	.word	0x08005cbd
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005caa:	e116      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005cac:	2302      	movs	r3, #2
 8005cae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cb2:	e112      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005cb4:	2304      	movs	r3, #4
 8005cb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cba:	e10e      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005cbc:	2308      	movs	r3, #8
 8005cbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cc2:	e10a      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005cc4:	2310      	movs	r3, #16
 8005cc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cca:	e106      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a7c      	ldr	r2, [pc, #496]	@ (8005ec4 <UART_SetConfig+0x2d0>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d138      	bne.n	8005d48 <UART_SetConfig+0x154>
 8005cd6:	4b7a      	ldr	r3, [pc, #488]	@ (8005ec0 <UART_SetConfig+0x2cc>)
 8005cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cdc:	f003 030c 	and.w	r3, r3, #12
 8005ce0:	2b0c      	cmp	r3, #12
 8005ce2:	d82d      	bhi.n	8005d40 <UART_SetConfig+0x14c>
 8005ce4:	a201      	add	r2, pc, #4	@ (adr r2, 8005cec <UART_SetConfig+0xf8>)
 8005ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cea:	bf00      	nop
 8005cec:	08005d21 	.word	0x08005d21
 8005cf0:	08005d41 	.word	0x08005d41
 8005cf4:	08005d41 	.word	0x08005d41
 8005cf8:	08005d41 	.word	0x08005d41
 8005cfc:	08005d31 	.word	0x08005d31
 8005d00:	08005d41 	.word	0x08005d41
 8005d04:	08005d41 	.word	0x08005d41
 8005d08:	08005d41 	.word	0x08005d41
 8005d0c:	08005d29 	.word	0x08005d29
 8005d10:	08005d41 	.word	0x08005d41
 8005d14:	08005d41 	.word	0x08005d41
 8005d18:	08005d41 	.word	0x08005d41
 8005d1c:	08005d39 	.word	0x08005d39
 8005d20:	2300      	movs	r3, #0
 8005d22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d26:	e0d8      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005d28:	2302      	movs	r3, #2
 8005d2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d2e:	e0d4      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005d30:	2304      	movs	r3, #4
 8005d32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d36:	e0d0      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005d38:	2308      	movs	r3, #8
 8005d3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d3e:	e0cc      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005d40:	2310      	movs	r3, #16
 8005d42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d46:	e0c8      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a5e      	ldr	r2, [pc, #376]	@ (8005ec8 <UART_SetConfig+0x2d4>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d125      	bne.n	8005d9e <UART_SetConfig+0x1aa>
 8005d52:	4b5b      	ldr	r3, [pc, #364]	@ (8005ec0 <UART_SetConfig+0x2cc>)
 8005d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d58:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005d5c:	2b30      	cmp	r3, #48	@ 0x30
 8005d5e:	d016      	beq.n	8005d8e <UART_SetConfig+0x19a>
 8005d60:	2b30      	cmp	r3, #48	@ 0x30
 8005d62:	d818      	bhi.n	8005d96 <UART_SetConfig+0x1a2>
 8005d64:	2b20      	cmp	r3, #32
 8005d66:	d00a      	beq.n	8005d7e <UART_SetConfig+0x18a>
 8005d68:	2b20      	cmp	r3, #32
 8005d6a:	d814      	bhi.n	8005d96 <UART_SetConfig+0x1a2>
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d002      	beq.n	8005d76 <UART_SetConfig+0x182>
 8005d70:	2b10      	cmp	r3, #16
 8005d72:	d008      	beq.n	8005d86 <UART_SetConfig+0x192>
 8005d74:	e00f      	b.n	8005d96 <UART_SetConfig+0x1a2>
 8005d76:	2300      	movs	r3, #0
 8005d78:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d7c:	e0ad      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005d7e:	2302      	movs	r3, #2
 8005d80:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d84:	e0a9      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005d86:	2304      	movs	r3, #4
 8005d88:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d8c:	e0a5      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005d8e:	2308      	movs	r3, #8
 8005d90:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d94:	e0a1      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005d96:	2310      	movs	r3, #16
 8005d98:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d9c:	e09d      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a4a      	ldr	r2, [pc, #296]	@ (8005ecc <UART_SetConfig+0x2d8>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d125      	bne.n	8005df4 <UART_SetConfig+0x200>
 8005da8:	4b45      	ldr	r3, [pc, #276]	@ (8005ec0 <UART_SetConfig+0x2cc>)
 8005daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dae:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005db2:	2bc0      	cmp	r3, #192	@ 0xc0
 8005db4:	d016      	beq.n	8005de4 <UART_SetConfig+0x1f0>
 8005db6:	2bc0      	cmp	r3, #192	@ 0xc0
 8005db8:	d818      	bhi.n	8005dec <UART_SetConfig+0x1f8>
 8005dba:	2b80      	cmp	r3, #128	@ 0x80
 8005dbc:	d00a      	beq.n	8005dd4 <UART_SetConfig+0x1e0>
 8005dbe:	2b80      	cmp	r3, #128	@ 0x80
 8005dc0:	d814      	bhi.n	8005dec <UART_SetConfig+0x1f8>
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d002      	beq.n	8005dcc <UART_SetConfig+0x1d8>
 8005dc6:	2b40      	cmp	r3, #64	@ 0x40
 8005dc8:	d008      	beq.n	8005ddc <UART_SetConfig+0x1e8>
 8005dca:	e00f      	b.n	8005dec <UART_SetConfig+0x1f8>
 8005dcc:	2300      	movs	r3, #0
 8005dce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dd2:	e082      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005dd4:	2302      	movs	r3, #2
 8005dd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dda:	e07e      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005ddc:	2304      	movs	r3, #4
 8005dde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005de2:	e07a      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005de4:	2308      	movs	r3, #8
 8005de6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dea:	e076      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005dec:	2310      	movs	r3, #16
 8005dee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005df2:	e072      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a35      	ldr	r2, [pc, #212]	@ (8005ed0 <UART_SetConfig+0x2dc>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d12a      	bne.n	8005e54 <UART_SetConfig+0x260>
 8005dfe:	4b30      	ldr	r3, [pc, #192]	@ (8005ec0 <UART_SetConfig+0x2cc>)
 8005e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e04:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e08:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e0c:	d01a      	beq.n	8005e44 <UART_SetConfig+0x250>
 8005e0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e12:	d81b      	bhi.n	8005e4c <UART_SetConfig+0x258>
 8005e14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e18:	d00c      	beq.n	8005e34 <UART_SetConfig+0x240>
 8005e1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e1e:	d815      	bhi.n	8005e4c <UART_SetConfig+0x258>
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d003      	beq.n	8005e2c <UART_SetConfig+0x238>
 8005e24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e28:	d008      	beq.n	8005e3c <UART_SetConfig+0x248>
 8005e2a:	e00f      	b.n	8005e4c <UART_SetConfig+0x258>
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e32:	e052      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005e34:	2302      	movs	r3, #2
 8005e36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e3a:	e04e      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005e3c:	2304      	movs	r3, #4
 8005e3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e42:	e04a      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005e44:	2308      	movs	r3, #8
 8005e46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e4a:	e046      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005e4c:	2310      	movs	r3, #16
 8005e4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e52:	e042      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a17      	ldr	r2, [pc, #92]	@ (8005eb8 <UART_SetConfig+0x2c4>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d13a      	bne.n	8005ed4 <UART_SetConfig+0x2e0>
 8005e5e:	4b18      	ldr	r3, [pc, #96]	@ (8005ec0 <UART_SetConfig+0x2cc>)
 8005e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e64:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005e68:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005e6c:	d01a      	beq.n	8005ea4 <UART_SetConfig+0x2b0>
 8005e6e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005e72:	d81b      	bhi.n	8005eac <UART_SetConfig+0x2b8>
 8005e74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e78:	d00c      	beq.n	8005e94 <UART_SetConfig+0x2a0>
 8005e7a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e7e:	d815      	bhi.n	8005eac <UART_SetConfig+0x2b8>
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d003      	beq.n	8005e8c <UART_SetConfig+0x298>
 8005e84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e88:	d008      	beq.n	8005e9c <UART_SetConfig+0x2a8>
 8005e8a:	e00f      	b.n	8005eac <UART_SetConfig+0x2b8>
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e92:	e022      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005e94:	2302      	movs	r3, #2
 8005e96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e9a:	e01e      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005e9c:	2304      	movs	r3, #4
 8005e9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ea2:	e01a      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005ea4:	2308      	movs	r3, #8
 8005ea6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005eaa:	e016      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005eac:	2310      	movs	r3, #16
 8005eae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005eb2:	e012      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005eb4:	efff69f3 	.word	0xefff69f3
 8005eb8:	40008000 	.word	0x40008000
 8005ebc:	40013800 	.word	0x40013800
 8005ec0:	40021000 	.word	0x40021000
 8005ec4:	40004400 	.word	0x40004400
 8005ec8:	40004800 	.word	0x40004800
 8005ecc:	40004c00 	.word	0x40004c00
 8005ed0:	40005000 	.word	0x40005000
 8005ed4:	2310      	movs	r3, #16
 8005ed6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a9f      	ldr	r2, [pc, #636]	@ (800615c <UART_SetConfig+0x568>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d17a      	bne.n	8005fda <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005ee4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005ee8:	2b08      	cmp	r3, #8
 8005eea:	d824      	bhi.n	8005f36 <UART_SetConfig+0x342>
 8005eec:	a201      	add	r2, pc, #4	@ (adr r2, 8005ef4 <UART_SetConfig+0x300>)
 8005eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef2:	bf00      	nop
 8005ef4:	08005f19 	.word	0x08005f19
 8005ef8:	08005f37 	.word	0x08005f37
 8005efc:	08005f21 	.word	0x08005f21
 8005f00:	08005f37 	.word	0x08005f37
 8005f04:	08005f27 	.word	0x08005f27
 8005f08:	08005f37 	.word	0x08005f37
 8005f0c:	08005f37 	.word	0x08005f37
 8005f10:	08005f37 	.word	0x08005f37
 8005f14:	08005f2f 	.word	0x08005f2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f18:	f7fd fefa 	bl	8003d10 <HAL_RCC_GetPCLK1Freq>
 8005f1c:	61f8      	str	r0, [r7, #28]
        break;
 8005f1e:	e010      	b.n	8005f42 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f20:	4b8f      	ldr	r3, [pc, #572]	@ (8006160 <UART_SetConfig+0x56c>)
 8005f22:	61fb      	str	r3, [r7, #28]
        break;
 8005f24:	e00d      	b.n	8005f42 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f26:	f7fd fe5b 	bl	8003be0 <HAL_RCC_GetSysClockFreq>
 8005f2a:	61f8      	str	r0, [r7, #28]
        break;
 8005f2c:	e009      	b.n	8005f42 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f32:	61fb      	str	r3, [r7, #28]
        break;
 8005f34:	e005      	b.n	8005f42 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005f36:	2300      	movs	r3, #0
 8005f38:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005f40:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	f000 80fb 	beq.w	8006140 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	685a      	ldr	r2, [r3, #4]
 8005f4e:	4613      	mov	r3, r2
 8005f50:	005b      	lsls	r3, r3, #1
 8005f52:	4413      	add	r3, r2
 8005f54:	69fa      	ldr	r2, [r7, #28]
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d305      	bcc.n	8005f66 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005f60:	69fa      	ldr	r2, [r7, #28]
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d903      	bls.n	8005f6e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005f6c:	e0e8      	b.n	8006140 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	2200      	movs	r2, #0
 8005f72:	461c      	mov	r4, r3
 8005f74:	4615      	mov	r5, r2
 8005f76:	f04f 0200 	mov.w	r2, #0
 8005f7a:	f04f 0300 	mov.w	r3, #0
 8005f7e:	022b      	lsls	r3, r5, #8
 8005f80:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005f84:	0222      	lsls	r2, r4, #8
 8005f86:	68f9      	ldr	r1, [r7, #12]
 8005f88:	6849      	ldr	r1, [r1, #4]
 8005f8a:	0849      	lsrs	r1, r1, #1
 8005f8c:	2000      	movs	r0, #0
 8005f8e:	4688      	mov	r8, r1
 8005f90:	4681      	mov	r9, r0
 8005f92:	eb12 0a08 	adds.w	sl, r2, r8
 8005f96:	eb43 0b09 	adc.w	fp, r3, r9
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	603b      	str	r3, [r7, #0]
 8005fa2:	607a      	str	r2, [r7, #4]
 8005fa4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fa8:	4650      	mov	r0, sl
 8005faa:	4659      	mov	r1, fp
 8005fac:	f7fa fe6c 	bl	8000c88 <__aeabi_uldivmod>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	4613      	mov	r3, r2
 8005fb6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005fbe:	d308      	bcc.n	8005fd2 <UART_SetConfig+0x3de>
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005fc6:	d204      	bcs.n	8005fd2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	69ba      	ldr	r2, [r7, #24]
 8005fce:	60da      	str	r2, [r3, #12]
 8005fd0:	e0b6      	b.n	8006140 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005fd8:	e0b2      	b.n	8006140 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	69db      	ldr	r3, [r3, #28]
 8005fde:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fe2:	d15e      	bne.n	80060a2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005fe4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005fe8:	2b08      	cmp	r3, #8
 8005fea:	d828      	bhi.n	800603e <UART_SetConfig+0x44a>
 8005fec:	a201      	add	r2, pc, #4	@ (adr r2, 8005ff4 <UART_SetConfig+0x400>)
 8005fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff2:	bf00      	nop
 8005ff4:	08006019 	.word	0x08006019
 8005ff8:	08006021 	.word	0x08006021
 8005ffc:	08006029 	.word	0x08006029
 8006000:	0800603f 	.word	0x0800603f
 8006004:	0800602f 	.word	0x0800602f
 8006008:	0800603f 	.word	0x0800603f
 800600c:	0800603f 	.word	0x0800603f
 8006010:	0800603f 	.word	0x0800603f
 8006014:	08006037 	.word	0x08006037
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006018:	f7fd fe7a 	bl	8003d10 <HAL_RCC_GetPCLK1Freq>
 800601c:	61f8      	str	r0, [r7, #28]
        break;
 800601e:	e014      	b.n	800604a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006020:	f7fd fe8c 	bl	8003d3c <HAL_RCC_GetPCLK2Freq>
 8006024:	61f8      	str	r0, [r7, #28]
        break;
 8006026:	e010      	b.n	800604a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006028:	4b4d      	ldr	r3, [pc, #308]	@ (8006160 <UART_SetConfig+0x56c>)
 800602a:	61fb      	str	r3, [r7, #28]
        break;
 800602c:	e00d      	b.n	800604a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800602e:	f7fd fdd7 	bl	8003be0 <HAL_RCC_GetSysClockFreq>
 8006032:	61f8      	str	r0, [r7, #28]
        break;
 8006034:	e009      	b.n	800604a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006036:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800603a:	61fb      	str	r3, [r7, #28]
        break;
 800603c:	e005      	b.n	800604a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800603e:	2300      	movs	r3, #0
 8006040:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006048:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d077      	beq.n	8006140 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	005a      	lsls	r2, r3, #1
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	085b      	lsrs	r3, r3, #1
 800605a:	441a      	add	r2, r3
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	fbb2 f3f3 	udiv	r3, r2, r3
 8006064:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	2b0f      	cmp	r3, #15
 800606a:	d916      	bls.n	800609a <UART_SetConfig+0x4a6>
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006072:	d212      	bcs.n	800609a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	b29b      	uxth	r3, r3
 8006078:	f023 030f 	bic.w	r3, r3, #15
 800607c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	085b      	lsrs	r3, r3, #1
 8006082:	b29b      	uxth	r3, r3
 8006084:	f003 0307 	and.w	r3, r3, #7
 8006088:	b29a      	uxth	r2, r3
 800608a:	8afb      	ldrh	r3, [r7, #22]
 800608c:	4313      	orrs	r3, r2
 800608e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	8afa      	ldrh	r2, [r7, #22]
 8006096:	60da      	str	r2, [r3, #12]
 8006098:	e052      	b.n	8006140 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80060a0:	e04e      	b.n	8006140 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80060a2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80060a6:	2b08      	cmp	r3, #8
 80060a8:	d827      	bhi.n	80060fa <UART_SetConfig+0x506>
 80060aa:	a201      	add	r2, pc, #4	@ (adr r2, 80060b0 <UART_SetConfig+0x4bc>)
 80060ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b0:	080060d5 	.word	0x080060d5
 80060b4:	080060dd 	.word	0x080060dd
 80060b8:	080060e5 	.word	0x080060e5
 80060bc:	080060fb 	.word	0x080060fb
 80060c0:	080060eb 	.word	0x080060eb
 80060c4:	080060fb 	.word	0x080060fb
 80060c8:	080060fb 	.word	0x080060fb
 80060cc:	080060fb 	.word	0x080060fb
 80060d0:	080060f3 	.word	0x080060f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060d4:	f7fd fe1c 	bl	8003d10 <HAL_RCC_GetPCLK1Freq>
 80060d8:	61f8      	str	r0, [r7, #28]
        break;
 80060da:	e014      	b.n	8006106 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060dc:	f7fd fe2e 	bl	8003d3c <HAL_RCC_GetPCLK2Freq>
 80060e0:	61f8      	str	r0, [r7, #28]
        break;
 80060e2:	e010      	b.n	8006106 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060e4:	4b1e      	ldr	r3, [pc, #120]	@ (8006160 <UART_SetConfig+0x56c>)
 80060e6:	61fb      	str	r3, [r7, #28]
        break;
 80060e8:	e00d      	b.n	8006106 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060ea:	f7fd fd79 	bl	8003be0 <HAL_RCC_GetSysClockFreq>
 80060ee:	61f8      	str	r0, [r7, #28]
        break;
 80060f0:	e009      	b.n	8006106 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80060f6:	61fb      	str	r3, [r7, #28]
        break;
 80060f8:	e005      	b.n	8006106 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80060fa:	2300      	movs	r3, #0
 80060fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006104:	bf00      	nop
    }

    if (pclk != 0U)
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d019      	beq.n	8006140 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	085a      	lsrs	r2, r3, #1
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	441a      	add	r2, r3
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	fbb2 f3f3 	udiv	r3, r2, r3
 800611e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	2b0f      	cmp	r3, #15
 8006124:	d909      	bls.n	800613a <UART_SetConfig+0x546>
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800612c:	d205      	bcs.n	800613a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800612e:	69bb      	ldr	r3, [r7, #24]
 8006130:	b29a      	uxth	r2, r3
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	60da      	str	r2, [r3, #12]
 8006138:	e002      	b.n	8006140 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2200      	movs	r2, #0
 8006144:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2200      	movs	r2, #0
 800614a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800614c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006150:	4618      	mov	r0, r3
 8006152:	3728      	adds	r7, #40	@ 0x28
 8006154:	46bd      	mov	sp, r7
 8006156:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800615a:	bf00      	nop
 800615c:	40008000 	.word	0x40008000
 8006160:	00f42400 	.word	0x00f42400

08006164 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006164:	b480      	push	{r7}
 8006166:	b083      	sub	sp, #12
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006170:	f003 0308 	and.w	r3, r3, #8
 8006174:	2b00      	cmp	r3, #0
 8006176:	d00a      	beq.n	800618e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	430a      	orrs	r2, r1
 800618c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006192:	f003 0301 	and.w	r3, r3, #1
 8006196:	2b00      	cmp	r3, #0
 8006198:	d00a      	beq.n	80061b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	430a      	orrs	r2, r1
 80061ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061b4:	f003 0302 	and.w	r3, r3, #2
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d00a      	beq.n	80061d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	430a      	orrs	r2, r1
 80061d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061d6:	f003 0304 	and.w	r3, r3, #4
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d00a      	beq.n	80061f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	430a      	orrs	r2, r1
 80061f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f8:	f003 0310 	and.w	r3, r3, #16
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00a      	beq.n	8006216 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	430a      	orrs	r2, r1
 8006214:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800621a:	f003 0320 	and.w	r3, r3, #32
 800621e:	2b00      	cmp	r3, #0
 8006220:	d00a      	beq.n	8006238 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	430a      	orrs	r2, r1
 8006236:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800623c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006240:	2b00      	cmp	r3, #0
 8006242:	d01a      	beq.n	800627a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	430a      	orrs	r2, r1
 8006258:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800625e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006262:	d10a      	bne.n	800627a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	430a      	orrs	r2, r1
 8006278:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800627e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006282:	2b00      	cmp	r3, #0
 8006284:	d00a      	beq.n	800629c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	430a      	orrs	r2, r1
 800629a:	605a      	str	r2, [r3, #4]
  }
}
 800629c:	bf00      	nop
 800629e:	370c      	adds	r7, #12
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b098      	sub	sp, #96	@ 0x60
 80062ac:	af02      	add	r7, sp, #8
 80062ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80062b8:	f7fb fe9e 	bl	8001ff8 <HAL_GetTick>
 80062bc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f003 0308 	and.w	r3, r3, #8
 80062c8:	2b08      	cmp	r3, #8
 80062ca:	d12e      	bne.n	800632a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062cc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80062d0:	9300      	str	r3, [sp, #0]
 80062d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062d4:	2200      	movs	r2, #0
 80062d6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 f88c 	bl	80063f8 <UART_WaitOnFlagUntilTimeout>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d021      	beq.n	800632a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ee:	e853 3f00 	ldrex	r3, [r3]
 80062f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80062f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	461a      	mov	r2, r3
 8006302:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006304:	647b      	str	r3, [r7, #68]	@ 0x44
 8006306:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006308:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800630a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800630c:	e841 2300 	strex	r3, r2, [r1]
 8006310:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006312:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006314:	2b00      	cmp	r3, #0
 8006316:	d1e6      	bne.n	80062e6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2220      	movs	r2, #32
 800631c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006326:	2303      	movs	r3, #3
 8006328:	e062      	b.n	80063f0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 0304 	and.w	r3, r3, #4
 8006334:	2b04      	cmp	r3, #4
 8006336:	d149      	bne.n	80063cc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006338:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800633c:	9300      	str	r3, [sp, #0]
 800633e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006340:	2200      	movs	r2, #0
 8006342:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f000 f856 	bl	80063f8 <UART_WaitOnFlagUntilTimeout>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d03c      	beq.n	80063cc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800635a:	e853 3f00 	ldrex	r3, [r3]
 800635e:	623b      	str	r3, [r7, #32]
   return(result);
 8006360:	6a3b      	ldr	r3, [r7, #32]
 8006362:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006366:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	461a      	mov	r2, r3
 800636e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006370:	633b      	str	r3, [r7, #48]	@ 0x30
 8006372:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006374:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006376:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006378:	e841 2300 	strex	r3, r2, [r1]
 800637c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800637e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006380:	2b00      	cmp	r3, #0
 8006382:	d1e6      	bne.n	8006352 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	3308      	adds	r3, #8
 800638a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	e853 3f00 	ldrex	r3, [r3]
 8006392:	60fb      	str	r3, [r7, #12]
   return(result);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f023 0301 	bic.w	r3, r3, #1
 800639a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	3308      	adds	r3, #8
 80063a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80063a4:	61fa      	str	r2, [r7, #28]
 80063a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a8:	69b9      	ldr	r1, [r7, #24]
 80063aa:	69fa      	ldr	r2, [r7, #28]
 80063ac:	e841 2300 	strex	r3, r2, [r1]
 80063b0:	617b      	str	r3, [r7, #20]
   return(result);
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d1e5      	bne.n	8006384 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2220      	movs	r2, #32
 80063bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063c8:	2303      	movs	r3, #3
 80063ca:	e011      	b.n	80063f0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2220      	movs	r2, #32
 80063d0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2220      	movs	r2, #32
 80063d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80063ee:	2300      	movs	r3, #0
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3758      	adds	r7, #88	@ 0x58
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	603b      	str	r3, [r7, #0]
 8006404:	4613      	mov	r3, r2
 8006406:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006408:	e04f      	b.n	80064aa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800640a:	69bb      	ldr	r3, [r7, #24]
 800640c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006410:	d04b      	beq.n	80064aa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006412:	f7fb fdf1 	bl	8001ff8 <HAL_GetTick>
 8006416:	4602      	mov	r2, r0
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	1ad3      	subs	r3, r2, r3
 800641c:	69ba      	ldr	r2, [r7, #24]
 800641e:	429a      	cmp	r2, r3
 8006420:	d302      	bcc.n	8006428 <UART_WaitOnFlagUntilTimeout+0x30>
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d101      	bne.n	800642c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006428:	2303      	movs	r3, #3
 800642a:	e04e      	b.n	80064ca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 0304 	and.w	r3, r3, #4
 8006436:	2b00      	cmp	r3, #0
 8006438:	d037      	beq.n	80064aa <UART_WaitOnFlagUntilTimeout+0xb2>
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	2b80      	cmp	r3, #128	@ 0x80
 800643e:	d034      	beq.n	80064aa <UART_WaitOnFlagUntilTimeout+0xb2>
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	2b40      	cmp	r3, #64	@ 0x40
 8006444:	d031      	beq.n	80064aa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	69db      	ldr	r3, [r3, #28]
 800644c:	f003 0308 	and.w	r3, r3, #8
 8006450:	2b08      	cmp	r3, #8
 8006452:	d110      	bne.n	8006476 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	2208      	movs	r2, #8
 800645a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800645c:	68f8      	ldr	r0, [r7, #12]
 800645e:	f000 f8ff 	bl	8006660 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2208      	movs	r2, #8
 8006466:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2200      	movs	r2, #0
 800646e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	e029      	b.n	80064ca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	69db      	ldr	r3, [r3, #28]
 800647c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006480:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006484:	d111      	bne.n	80064aa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800648e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006490:	68f8      	ldr	r0, [r7, #12]
 8006492:	f000 f8e5 	bl	8006660 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2220      	movs	r2, #32
 800649a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2200      	movs	r2, #0
 80064a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80064a6:	2303      	movs	r3, #3
 80064a8:	e00f      	b.n	80064ca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	69da      	ldr	r2, [r3, #28]
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	4013      	ands	r3, r2
 80064b4:	68ba      	ldr	r2, [r7, #8]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	bf0c      	ite	eq
 80064ba:	2301      	moveq	r3, #1
 80064bc:	2300      	movne	r3, #0
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	461a      	mov	r2, r3
 80064c2:	79fb      	ldrb	r3, [r7, #7]
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d0a0      	beq.n	800640a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064c8:	2300      	movs	r3, #0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3710      	adds	r7, #16
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
	...

080064d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b097      	sub	sp, #92	@ 0x5c
 80064d8:	af00      	add	r7, sp, #0
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	60b9      	str	r1, [r7, #8]
 80064de:	4613      	mov	r3, r2
 80064e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	68ba      	ldr	r2, [r7, #8]
 80064e6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	88fa      	ldrh	r2, [r7, #6]
 80064ec:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	88fa      	ldrh	r2, [r7, #6]
 80064f4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2200      	movs	r2, #0
 80064fc:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006506:	d10e      	bne.n	8006526 <UART_Start_Receive_IT+0x52>
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d105      	bne.n	800651c <UART_Start_Receive_IT+0x48>
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006516:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800651a:	e02d      	b.n	8006578 <UART_Start_Receive_IT+0xa4>
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	22ff      	movs	r2, #255	@ 0xff
 8006520:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006524:	e028      	b.n	8006578 <UART_Start_Receive_IT+0xa4>
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d10d      	bne.n	800654a <UART_Start_Receive_IT+0x76>
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d104      	bne.n	8006540 <UART_Start_Receive_IT+0x6c>
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	22ff      	movs	r2, #255	@ 0xff
 800653a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800653e:	e01b      	b.n	8006578 <UART_Start_Receive_IT+0xa4>
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	227f      	movs	r2, #127	@ 0x7f
 8006544:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006548:	e016      	b.n	8006578 <UART_Start_Receive_IT+0xa4>
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006552:	d10d      	bne.n	8006570 <UART_Start_Receive_IT+0x9c>
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	691b      	ldr	r3, [r3, #16]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d104      	bne.n	8006566 <UART_Start_Receive_IT+0x92>
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	227f      	movs	r2, #127	@ 0x7f
 8006560:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006564:	e008      	b.n	8006578 <UART_Start_Receive_IT+0xa4>
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	223f      	movs	r2, #63	@ 0x3f
 800656a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800656e:	e003      	b.n	8006578 <UART_Start_Receive_IT+0xa4>
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2200      	movs	r2, #0
 8006574:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2200      	movs	r2, #0
 800657c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2222      	movs	r2, #34	@ 0x22
 8006584:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	3308      	adds	r3, #8
 800658e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006590:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006592:	e853 3f00 	ldrex	r3, [r3]
 8006596:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800659a:	f043 0301 	orr.w	r3, r3, #1
 800659e:	657b      	str	r3, [r7, #84]	@ 0x54
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	3308      	adds	r3, #8
 80065a6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80065a8:	64ba      	str	r2, [r7, #72]	@ 0x48
 80065aa:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ac:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80065ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80065b0:	e841 2300 	strex	r3, r2, [r1]
 80065b4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80065b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d1e5      	bne.n	8006588 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065c4:	d107      	bne.n	80065d6 <UART_Start_Receive_IT+0x102>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	691b      	ldr	r3, [r3, #16]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d103      	bne.n	80065d6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	4a21      	ldr	r2, [pc, #132]	@ (8006658 <UART_Start_Receive_IT+0x184>)
 80065d2:	669a      	str	r2, [r3, #104]	@ 0x68
 80065d4:	e002      	b.n	80065dc <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	4a20      	ldr	r2, [pc, #128]	@ (800665c <UART_Start_Receive_IT+0x188>)
 80065da:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	691b      	ldr	r3, [r3, #16]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d019      	beq.n	8006618 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065ec:	e853 3f00 	ldrex	r3, [r3]
 80065f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80065f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065f4:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80065f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	461a      	mov	r2, r3
 8006600:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006602:	637b      	str	r3, [r7, #52]	@ 0x34
 8006604:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006606:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006608:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800660a:	e841 2300 	strex	r3, r2, [r1]
 800660e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006612:	2b00      	cmp	r3, #0
 8006614:	d1e6      	bne.n	80065e4 <UART_Start_Receive_IT+0x110>
 8006616:	e018      	b.n	800664a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	e853 3f00 	ldrex	r3, [r3]
 8006624:	613b      	str	r3, [r7, #16]
   return(result);
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	f043 0320 	orr.w	r3, r3, #32
 800662c:	653b      	str	r3, [r7, #80]	@ 0x50
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	461a      	mov	r2, r3
 8006634:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006636:	623b      	str	r3, [r7, #32]
 8006638:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663a:	69f9      	ldr	r1, [r7, #28]
 800663c:	6a3a      	ldr	r2, [r7, #32]
 800663e:	e841 2300 	strex	r3, r2, [r1]
 8006642:	61bb      	str	r3, [r7, #24]
   return(result);
 8006644:	69bb      	ldr	r3, [r7, #24]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d1e6      	bne.n	8006618 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800664a:	2300      	movs	r3, #0
}
 800664c:	4618      	mov	r0, r3
 800664e:	375c      	adds	r7, #92	@ 0x5c
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr
 8006658:	08006965 	.word	0x08006965
 800665c:	080067a9 	.word	0x080067a9

08006660 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006660:	b480      	push	{r7}
 8006662:	b095      	sub	sp, #84	@ 0x54
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800666e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006670:	e853 3f00 	ldrex	r3, [r3]
 8006674:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006678:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800667c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	461a      	mov	r2, r3
 8006684:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006686:	643b      	str	r3, [r7, #64]	@ 0x40
 8006688:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800668a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800668c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800668e:	e841 2300 	strex	r3, r2, [r1]
 8006692:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006696:	2b00      	cmp	r3, #0
 8006698:	d1e6      	bne.n	8006668 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	3308      	adds	r3, #8
 80066a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a2:	6a3b      	ldr	r3, [r7, #32]
 80066a4:	e853 3f00 	ldrex	r3, [r3]
 80066a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80066aa:	69fb      	ldr	r3, [r7, #28]
 80066ac:	f023 0301 	bic.w	r3, r3, #1
 80066b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	3308      	adds	r3, #8
 80066b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80066ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80066bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80066c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80066c2:	e841 2300 	strex	r3, r2, [r1]
 80066c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80066c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d1e5      	bne.n	800669a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d118      	bne.n	8006708 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	e853 3f00 	ldrex	r3, [r3]
 80066e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	f023 0310 	bic.w	r3, r3, #16
 80066ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	461a      	mov	r2, r3
 80066f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066f4:	61bb      	str	r3, [r7, #24]
 80066f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f8:	6979      	ldr	r1, [r7, #20]
 80066fa:	69ba      	ldr	r2, [r7, #24]
 80066fc:	e841 2300 	strex	r3, r2, [r1]
 8006700:	613b      	str	r3, [r7, #16]
   return(result);
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d1e6      	bne.n	80066d6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2220      	movs	r2, #32
 800670c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800671c:	bf00      	nop
 800671e:	3754      	adds	r7, #84	@ 0x54
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b084      	sub	sp, #16
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006734:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2200      	movs	r2, #0
 800673a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2200      	movs	r2, #0
 8006742:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006746:	68f8      	ldr	r0, [r7, #12]
 8006748:	f7ff fa3e 	bl	8005bc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800674c:	bf00      	nop
 800674e:	3710      	adds	r7, #16
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}

08006754 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b088      	sub	sp, #32
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	e853 3f00 	ldrex	r3, [r3]
 8006768:	60bb      	str	r3, [r7, #8]
   return(result);
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006770:	61fb      	str	r3, [r7, #28]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	461a      	mov	r2, r3
 8006778:	69fb      	ldr	r3, [r7, #28]
 800677a:	61bb      	str	r3, [r7, #24]
 800677c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800677e:	6979      	ldr	r1, [r7, #20]
 8006780:	69ba      	ldr	r2, [r7, #24]
 8006782:	e841 2300 	strex	r3, r2, [r1]
 8006786:	613b      	str	r3, [r7, #16]
   return(result);
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d1e6      	bne.n	800675c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2220      	movs	r2, #32
 8006792:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f7ff fa0a 	bl	8005bb4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067a0:	bf00      	nop
 80067a2:	3720      	adds	r7, #32
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b09c      	sub	sp, #112	@ 0x70
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80067b6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067c0:	2b22      	cmp	r3, #34	@ 0x22
 80067c2:	f040 80be 	bne.w	8006942 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80067cc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80067d0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80067d4:	b2d9      	uxtb	r1, r3
 80067d6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80067da:	b2da      	uxtb	r2, r3
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067e0:	400a      	ands	r2, r1
 80067e2:	b2d2      	uxtb	r2, r2
 80067e4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067ea:	1c5a      	adds	r2, r3, #1
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	3b01      	subs	r3, #1
 80067fa:	b29a      	uxth	r2, r3
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006808:	b29b      	uxth	r3, r3
 800680a:	2b00      	cmp	r3, #0
 800680c:	f040 80a3 	bne.w	8006956 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006816:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006818:	e853 3f00 	ldrex	r3, [r3]
 800681c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800681e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006820:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006824:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	461a      	mov	r2, r3
 800682c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800682e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006830:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006832:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006834:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006836:	e841 2300 	strex	r3, r2, [r1]
 800683a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800683c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800683e:	2b00      	cmp	r3, #0
 8006840:	d1e6      	bne.n	8006810 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	3308      	adds	r3, #8
 8006848:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800684a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800684c:	e853 3f00 	ldrex	r3, [r3]
 8006850:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006852:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006854:	f023 0301 	bic.w	r3, r3, #1
 8006858:	667b      	str	r3, [r7, #100]	@ 0x64
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	3308      	adds	r3, #8
 8006860:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006862:	647a      	str	r2, [r7, #68]	@ 0x44
 8006864:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006866:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006868:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800686a:	e841 2300 	strex	r3, r2, [r1]
 800686e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006870:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006872:	2b00      	cmp	r3, #0
 8006874:	d1e5      	bne.n	8006842 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2220      	movs	r2, #32
 800687a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2200      	movs	r2, #0
 8006888:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a34      	ldr	r2, [pc, #208]	@ (8006960 <UART_RxISR_8BIT+0x1b8>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d01f      	beq.n	80068d4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d018      	beq.n	80068d4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068aa:	e853 3f00 	ldrex	r3, [r3]
 80068ae:	623b      	str	r3, [r7, #32]
   return(result);
 80068b0:	6a3b      	ldr	r3, [r7, #32]
 80068b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80068b6:	663b      	str	r3, [r7, #96]	@ 0x60
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	461a      	mov	r2, r3
 80068be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80068c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80068c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80068c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068c8:	e841 2300 	strex	r3, r2, [r1]
 80068cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80068ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d1e6      	bne.n	80068a2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d12e      	bne.n	800693a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	e853 3f00 	ldrex	r3, [r3]
 80068ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f023 0310 	bic.w	r3, r3, #16
 80068f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	461a      	mov	r2, r3
 80068fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006900:	61fb      	str	r3, [r7, #28]
 8006902:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006904:	69b9      	ldr	r1, [r7, #24]
 8006906:	69fa      	ldr	r2, [r7, #28]
 8006908:	e841 2300 	strex	r3, r2, [r1]
 800690c:	617b      	str	r3, [r7, #20]
   return(result);
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d1e6      	bne.n	80068e2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	69db      	ldr	r3, [r3, #28]
 800691a:	f003 0310 	and.w	r3, r3, #16
 800691e:	2b10      	cmp	r3, #16
 8006920:	d103      	bne.n	800692a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	2210      	movs	r2, #16
 8006928:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006930:	4619      	mov	r1, r3
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f7ff f952 	bl	8005bdc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006938:	e00d      	b.n	8006956 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f7fa fe7a 	bl	8001634 <HAL_UART_RxCpltCallback>
}
 8006940:	e009      	b.n	8006956 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	8b1b      	ldrh	r3, [r3, #24]
 8006948:	b29a      	uxth	r2, r3
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f042 0208 	orr.w	r2, r2, #8
 8006952:	b292      	uxth	r2, r2
 8006954:	831a      	strh	r2, [r3, #24]
}
 8006956:	bf00      	nop
 8006958:	3770      	adds	r7, #112	@ 0x70
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
 800695e:	bf00      	nop
 8006960:	40008000 	.word	0x40008000

08006964 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b09c      	sub	sp, #112	@ 0x70
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006972:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800697c:	2b22      	cmp	r3, #34	@ 0x22
 800697e:	f040 80be 	bne.w	8006afe <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006988:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006990:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006992:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006996:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800699a:	4013      	ands	r3, r2
 800699c:	b29a      	uxth	r2, r3
 800699e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80069a0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069a6:	1c9a      	adds	r2, r3, #2
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	3b01      	subs	r3, #1
 80069b6:	b29a      	uxth	r2, r3
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	f040 80a3 	bne.w	8006b12 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069d4:	e853 3f00 	ldrex	r3, [r3]
 80069d8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80069da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80069e0:	667b      	str	r3, [r7, #100]	@ 0x64
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	461a      	mov	r2, r3
 80069e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80069ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80069ec:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ee:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80069f0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80069f2:	e841 2300 	strex	r3, r2, [r1]
 80069f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80069f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d1e6      	bne.n	80069cc <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	3308      	adds	r3, #8
 8006a04:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a08:	e853 3f00 	ldrex	r3, [r3]
 8006a0c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a10:	f023 0301 	bic.w	r3, r3, #1
 8006a14:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	3308      	adds	r3, #8
 8006a1c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006a1e:	643a      	str	r2, [r7, #64]	@ 0x40
 8006a20:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a22:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006a24:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006a26:	e841 2300 	strex	r3, r2, [r1]
 8006a2a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006a2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d1e5      	bne.n	80069fe <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2220      	movs	r2, #32
 8006a36:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a34      	ldr	r2, [pc, #208]	@ (8006b1c <UART_RxISR_16BIT+0x1b8>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d01f      	beq.n	8006a90 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d018      	beq.n	8006a90 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a64:	6a3b      	ldr	r3, [r7, #32]
 8006a66:	e853 3f00 	ldrex	r3, [r3]
 8006a6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006a72:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	461a      	mov	r2, r3
 8006a7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a7e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a84:	e841 2300 	strex	r3, r2, [r1]
 8006a88:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d1e6      	bne.n	8006a5e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d12e      	bne.n	8006af6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	e853 3f00 	ldrex	r3, [r3]
 8006aaa:	60bb      	str	r3, [r7, #8]
   return(result);
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	f023 0310 	bic.w	r3, r3, #16
 8006ab2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	461a      	mov	r2, r3
 8006aba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006abc:	61bb      	str	r3, [r7, #24]
 8006abe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac0:	6979      	ldr	r1, [r7, #20]
 8006ac2:	69ba      	ldr	r2, [r7, #24]
 8006ac4:	e841 2300 	strex	r3, r2, [r1]
 8006ac8:	613b      	str	r3, [r7, #16]
   return(result);
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d1e6      	bne.n	8006a9e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	69db      	ldr	r3, [r3, #28]
 8006ad6:	f003 0310 	and.w	r3, r3, #16
 8006ada:	2b10      	cmp	r3, #16
 8006adc:	d103      	bne.n	8006ae6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	2210      	movs	r2, #16
 8006ae4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006aec:	4619      	mov	r1, r3
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f7ff f874 	bl	8005bdc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006af4:	e00d      	b.n	8006b12 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f7fa fd9c 	bl	8001634 <HAL_UART_RxCpltCallback>
}
 8006afc:	e009      	b.n	8006b12 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	8b1b      	ldrh	r3, [r3, #24]
 8006b04:	b29a      	uxth	r2, r3
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f042 0208 	orr.w	r2, r2, #8
 8006b0e:	b292      	uxth	r2, r2
 8006b10:	831a      	strh	r2, [r3, #24]
}
 8006b12:	bf00      	nop
 8006b14:	3770      	adds	r7, #112	@ 0x70
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	40008000 	.word	0x40008000

08006b20 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b083      	sub	sp, #12
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006b28:	bf00      	nop
 8006b2a:	370c      	adds	r7, #12
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr

08006b34 <__cvt>:
 8006b34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b38:	ec57 6b10 	vmov	r6, r7, d0
 8006b3c:	2f00      	cmp	r7, #0
 8006b3e:	460c      	mov	r4, r1
 8006b40:	4619      	mov	r1, r3
 8006b42:	463b      	mov	r3, r7
 8006b44:	bfbb      	ittet	lt
 8006b46:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006b4a:	461f      	movlt	r7, r3
 8006b4c:	2300      	movge	r3, #0
 8006b4e:	232d      	movlt	r3, #45	@ 0x2d
 8006b50:	700b      	strb	r3, [r1, #0]
 8006b52:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006b54:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006b58:	4691      	mov	r9, r2
 8006b5a:	f023 0820 	bic.w	r8, r3, #32
 8006b5e:	bfbc      	itt	lt
 8006b60:	4632      	movlt	r2, r6
 8006b62:	4616      	movlt	r6, r2
 8006b64:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006b68:	d005      	beq.n	8006b76 <__cvt+0x42>
 8006b6a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006b6e:	d100      	bne.n	8006b72 <__cvt+0x3e>
 8006b70:	3401      	adds	r4, #1
 8006b72:	2102      	movs	r1, #2
 8006b74:	e000      	b.n	8006b78 <__cvt+0x44>
 8006b76:	2103      	movs	r1, #3
 8006b78:	ab03      	add	r3, sp, #12
 8006b7a:	9301      	str	r3, [sp, #4]
 8006b7c:	ab02      	add	r3, sp, #8
 8006b7e:	9300      	str	r3, [sp, #0]
 8006b80:	ec47 6b10 	vmov	d0, r6, r7
 8006b84:	4653      	mov	r3, sl
 8006b86:	4622      	mov	r2, r4
 8006b88:	f001 f9ae 	bl	8007ee8 <_dtoa_r>
 8006b8c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006b90:	4605      	mov	r5, r0
 8006b92:	d119      	bne.n	8006bc8 <__cvt+0x94>
 8006b94:	f019 0f01 	tst.w	r9, #1
 8006b98:	d00e      	beq.n	8006bb8 <__cvt+0x84>
 8006b9a:	eb00 0904 	add.w	r9, r0, r4
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	4630      	mov	r0, r6
 8006ba4:	4639      	mov	r1, r7
 8006ba6:	f7f9 ff8f 	bl	8000ac8 <__aeabi_dcmpeq>
 8006baa:	b108      	cbz	r0, 8006bb0 <__cvt+0x7c>
 8006bac:	f8cd 900c 	str.w	r9, [sp, #12]
 8006bb0:	2230      	movs	r2, #48	@ 0x30
 8006bb2:	9b03      	ldr	r3, [sp, #12]
 8006bb4:	454b      	cmp	r3, r9
 8006bb6:	d31e      	bcc.n	8006bf6 <__cvt+0xc2>
 8006bb8:	9b03      	ldr	r3, [sp, #12]
 8006bba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006bbc:	1b5b      	subs	r3, r3, r5
 8006bbe:	4628      	mov	r0, r5
 8006bc0:	6013      	str	r3, [r2, #0]
 8006bc2:	b004      	add	sp, #16
 8006bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bc8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006bcc:	eb00 0904 	add.w	r9, r0, r4
 8006bd0:	d1e5      	bne.n	8006b9e <__cvt+0x6a>
 8006bd2:	7803      	ldrb	r3, [r0, #0]
 8006bd4:	2b30      	cmp	r3, #48	@ 0x30
 8006bd6:	d10a      	bne.n	8006bee <__cvt+0xba>
 8006bd8:	2200      	movs	r2, #0
 8006bda:	2300      	movs	r3, #0
 8006bdc:	4630      	mov	r0, r6
 8006bde:	4639      	mov	r1, r7
 8006be0:	f7f9 ff72 	bl	8000ac8 <__aeabi_dcmpeq>
 8006be4:	b918      	cbnz	r0, 8006bee <__cvt+0xba>
 8006be6:	f1c4 0401 	rsb	r4, r4, #1
 8006bea:	f8ca 4000 	str.w	r4, [sl]
 8006bee:	f8da 3000 	ldr.w	r3, [sl]
 8006bf2:	4499      	add	r9, r3
 8006bf4:	e7d3      	b.n	8006b9e <__cvt+0x6a>
 8006bf6:	1c59      	adds	r1, r3, #1
 8006bf8:	9103      	str	r1, [sp, #12]
 8006bfa:	701a      	strb	r2, [r3, #0]
 8006bfc:	e7d9      	b.n	8006bb2 <__cvt+0x7e>

08006bfe <__exponent>:
 8006bfe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c00:	2900      	cmp	r1, #0
 8006c02:	bfba      	itte	lt
 8006c04:	4249      	neglt	r1, r1
 8006c06:	232d      	movlt	r3, #45	@ 0x2d
 8006c08:	232b      	movge	r3, #43	@ 0x2b
 8006c0a:	2909      	cmp	r1, #9
 8006c0c:	7002      	strb	r2, [r0, #0]
 8006c0e:	7043      	strb	r3, [r0, #1]
 8006c10:	dd29      	ble.n	8006c66 <__exponent+0x68>
 8006c12:	f10d 0307 	add.w	r3, sp, #7
 8006c16:	461d      	mov	r5, r3
 8006c18:	270a      	movs	r7, #10
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	fbb1 f6f7 	udiv	r6, r1, r7
 8006c20:	fb07 1416 	mls	r4, r7, r6, r1
 8006c24:	3430      	adds	r4, #48	@ 0x30
 8006c26:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006c2a:	460c      	mov	r4, r1
 8006c2c:	2c63      	cmp	r4, #99	@ 0x63
 8006c2e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006c32:	4631      	mov	r1, r6
 8006c34:	dcf1      	bgt.n	8006c1a <__exponent+0x1c>
 8006c36:	3130      	adds	r1, #48	@ 0x30
 8006c38:	1e94      	subs	r4, r2, #2
 8006c3a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006c3e:	1c41      	adds	r1, r0, #1
 8006c40:	4623      	mov	r3, r4
 8006c42:	42ab      	cmp	r3, r5
 8006c44:	d30a      	bcc.n	8006c5c <__exponent+0x5e>
 8006c46:	f10d 0309 	add.w	r3, sp, #9
 8006c4a:	1a9b      	subs	r3, r3, r2
 8006c4c:	42ac      	cmp	r4, r5
 8006c4e:	bf88      	it	hi
 8006c50:	2300      	movhi	r3, #0
 8006c52:	3302      	adds	r3, #2
 8006c54:	4403      	add	r3, r0
 8006c56:	1a18      	subs	r0, r3, r0
 8006c58:	b003      	add	sp, #12
 8006c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c5c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006c60:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006c64:	e7ed      	b.n	8006c42 <__exponent+0x44>
 8006c66:	2330      	movs	r3, #48	@ 0x30
 8006c68:	3130      	adds	r1, #48	@ 0x30
 8006c6a:	7083      	strb	r3, [r0, #2]
 8006c6c:	70c1      	strb	r1, [r0, #3]
 8006c6e:	1d03      	adds	r3, r0, #4
 8006c70:	e7f1      	b.n	8006c56 <__exponent+0x58>
	...

08006c74 <_printf_float>:
 8006c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c78:	b08d      	sub	sp, #52	@ 0x34
 8006c7a:	460c      	mov	r4, r1
 8006c7c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006c80:	4616      	mov	r6, r2
 8006c82:	461f      	mov	r7, r3
 8006c84:	4605      	mov	r5, r0
 8006c86:	f001 f819 	bl	8007cbc <_localeconv_r>
 8006c8a:	6803      	ldr	r3, [r0, #0]
 8006c8c:	9304      	str	r3, [sp, #16]
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f7f9 faee 	bl	8000270 <strlen>
 8006c94:	2300      	movs	r3, #0
 8006c96:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c98:	f8d8 3000 	ldr.w	r3, [r8]
 8006c9c:	9005      	str	r0, [sp, #20]
 8006c9e:	3307      	adds	r3, #7
 8006ca0:	f023 0307 	bic.w	r3, r3, #7
 8006ca4:	f103 0208 	add.w	r2, r3, #8
 8006ca8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006cac:	f8d4 b000 	ldr.w	fp, [r4]
 8006cb0:	f8c8 2000 	str.w	r2, [r8]
 8006cb4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006cb8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006cbc:	9307      	str	r3, [sp, #28]
 8006cbe:	f8cd 8018 	str.w	r8, [sp, #24]
 8006cc2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006cc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006cca:	4b9c      	ldr	r3, [pc, #624]	@ (8006f3c <_printf_float+0x2c8>)
 8006ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8006cd0:	f7f9 ff2c 	bl	8000b2c <__aeabi_dcmpun>
 8006cd4:	bb70      	cbnz	r0, 8006d34 <_printf_float+0xc0>
 8006cd6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006cda:	4b98      	ldr	r3, [pc, #608]	@ (8006f3c <_printf_float+0x2c8>)
 8006cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8006ce0:	f7f9 ff06 	bl	8000af0 <__aeabi_dcmple>
 8006ce4:	bb30      	cbnz	r0, 8006d34 <_printf_float+0xc0>
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	2300      	movs	r3, #0
 8006cea:	4640      	mov	r0, r8
 8006cec:	4649      	mov	r1, r9
 8006cee:	f7f9 fef5 	bl	8000adc <__aeabi_dcmplt>
 8006cf2:	b110      	cbz	r0, 8006cfa <_printf_float+0x86>
 8006cf4:	232d      	movs	r3, #45	@ 0x2d
 8006cf6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006cfa:	4a91      	ldr	r2, [pc, #580]	@ (8006f40 <_printf_float+0x2cc>)
 8006cfc:	4b91      	ldr	r3, [pc, #580]	@ (8006f44 <_printf_float+0x2d0>)
 8006cfe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006d02:	bf94      	ite	ls
 8006d04:	4690      	movls	r8, r2
 8006d06:	4698      	movhi	r8, r3
 8006d08:	2303      	movs	r3, #3
 8006d0a:	6123      	str	r3, [r4, #16]
 8006d0c:	f02b 0304 	bic.w	r3, fp, #4
 8006d10:	6023      	str	r3, [r4, #0]
 8006d12:	f04f 0900 	mov.w	r9, #0
 8006d16:	9700      	str	r7, [sp, #0]
 8006d18:	4633      	mov	r3, r6
 8006d1a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006d1c:	4621      	mov	r1, r4
 8006d1e:	4628      	mov	r0, r5
 8006d20:	f000 f9d2 	bl	80070c8 <_printf_common>
 8006d24:	3001      	adds	r0, #1
 8006d26:	f040 808d 	bne.w	8006e44 <_printf_float+0x1d0>
 8006d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8006d2e:	b00d      	add	sp, #52	@ 0x34
 8006d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d34:	4642      	mov	r2, r8
 8006d36:	464b      	mov	r3, r9
 8006d38:	4640      	mov	r0, r8
 8006d3a:	4649      	mov	r1, r9
 8006d3c:	f7f9 fef6 	bl	8000b2c <__aeabi_dcmpun>
 8006d40:	b140      	cbz	r0, 8006d54 <_printf_float+0xe0>
 8006d42:	464b      	mov	r3, r9
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	bfbc      	itt	lt
 8006d48:	232d      	movlt	r3, #45	@ 0x2d
 8006d4a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006d4e:	4a7e      	ldr	r2, [pc, #504]	@ (8006f48 <_printf_float+0x2d4>)
 8006d50:	4b7e      	ldr	r3, [pc, #504]	@ (8006f4c <_printf_float+0x2d8>)
 8006d52:	e7d4      	b.n	8006cfe <_printf_float+0x8a>
 8006d54:	6863      	ldr	r3, [r4, #4]
 8006d56:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006d5a:	9206      	str	r2, [sp, #24]
 8006d5c:	1c5a      	adds	r2, r3, #1
 8006d5e:	d13b      	bne.n	8006dd8 <_printf_float+0x164>
 8006d60:	2306      	movs	r3, #6
 8006d62:	6063      	str	r3, [r4, #4]
 8006d64:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006d68:	2300      	movs	r3, #0
 8006d6a:	6022      	str	r2, [r4, #0]
 8006d6c:	9303      	str	r3, [sp, #12]
 8006d6e:	ab0a      	add	r3, sp, #40	@ 0x28
 8006d70:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006d74:	ab09      	add	r3, sp, #36	@ 0x24
 8006d76:	9300      	str	r3, [sp, #0]
 8006d78:	6861      	ldr	r1, [r4, #4]
 8006d7a:	ec49 8b10 	vmov	d0, r8, r9
 8006d7e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006d82:	4628      	mov	r0, r5
 8006d84:	f7ff fed6 	bl	8006b34 <__cvt>
 8006d88:	9b06      	ldr	r3, [sp, #24]
 8006d8a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006d8c:	2b47      	cmp	r3, #71	@ 0x47
 8006d8e:	4680      	mov	r8, r0
 8006d90:	d129      	bne.n	8006de6 <_printf_float+0x172>
 8006d92:	1cc8      	adds	r0, r1, #3
 8006d94:	db02      	blt.n	8006d9c <_printf_float+0x128>
 8006d96:	6863      	ldr	r3, [r4, #4]
 8006d98:	4299      	cmp	r1, r3
 8006d9a:	dd41      	ble.n	8006e20 <_printf_float+0x1ac>
 8006d9c:	f1aa 0a02 	sub.w	sl, sl, #2
 8006da0:	fa5f fa8a 	uxtb.w	sl, sl
 8006da4:	3901      	subs	r1, #1
 8006da6:	4652      	mov	r2, sl
 8006da8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006dac:	9109      	str	r1, [sp, #36]	@ 0x24
 8006dae:	f7ff ff26 	bl	8006bfe <__exponent>
 8006db2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006db4:	1813      	adds	r3, r2, r0
 8006db6:	2a01      	cmp	r2, #1
 8006db8:	4681      	mov	r9, r0
 8006dba:	6123      	str	r3, [r4, #16]
 8006dbc:	dc02      	bgt.n	8006dc4 <_printf_float+0x150>
 8006dbe:	6822      	ldr	r2, [r4, #0]
 8006dc0:	07d2      	lsls	r2, r2, #31
 8006dc2:	d501      	bpl.n	8006dc8 <_printf_float+0x154>
 8006dc4:	3301      	adds	r3, #1
 8006dc6:	6123      	str	r3, [r4, #16]
 8006dc8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d0a2      	beq.n	8006d16 <_printf_float+0xa2>
 8006dd0:	232d      	movs	r3, #45	@ 0x2d
 8006dd2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006dd6:	e79e      	b.n	8006d16 <_printf_float+0xa2>
 8006dd8:	9a06      	ldr	r2, [sp, #24]
 8006dda:	2a47      	cmp	r2, #71	@ 0x47
 8006ddc:	d1c2      	bne.n	8006d64 <_printf_float+0xf0>
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d1c0      	bne.n	8006d64 <_printf_float+0xf0>
 8006de2:	2301      	movs	r3, #1
 8006de4:	e7bd      	b.n	8006d62 <_printf_float+0xee>
 8006de6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006dea:	d9db      	bls.n	8006da4 <_printf_float+0x130>
 8006dec:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006df0:	d118      	bne.n	8006e24 <_printf_float+0x1b0>
 8006df2:	2900      	cmp	r1, #0
 8006df4:	6863      	ldr	r3, [r4, #4]
 8006df6:	dd0b      	ble.n	8006e10 <_printf_float+0x19c>
 8006df8:	6121      	str	r1, [r4, #16]
 8006dfa:	b913      	cbnz	r3, 8006e02 <_printf_float+0x18e>
 8006dfc:	6822      	ldr	r2, [r4, #0]
 8006dfe:	07d0      	lsls	r0, r2, #31
 8006e00:	d502      	bpl.n	8006e08 <_printf_float+0x194>
 8006e02:	3301      	adds	r3, #1
 8006e04:	440b      	add	r3, r1
 8006e06:	6123      	str	r3, [r4, #16]
 8006e08:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006e0a:	f04f 0900 	mov.w	r9, #0
 8006e0e:	e7db      	b.n	8006dc8 <_printf_float+0x154>
 8006e10:	b913      	cbnz	r3, 8006e18 <_printf_float+0x1a4>
 8006e12:	6822      	ldr	r2, [r4, #0]
 8006e14:	07d2      	lsls	r2, r2, #31
 8006e16:	d501      	bpl.n	8006e1c <_printf_float+0x1a8>
 8006e18:	3302      	adds	r3, #2
 8006e1a:	e7f4      	b.n	8006e06 <_printf_float+0x192>
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	e7f2      	b.n	8006e06 <_printf_float+0x192>
 8006e20:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006e24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e26:	4299      	cmp	r1, r3
 8006e28:	db05      	blt.n	8006e36 <_printf_float+0x1c2>
 8006e2a:	6823      	ldr	r3, [r4, #0]
 8006e2c:	6121      	str	r1, [r4, #16]
 8006e2e:	07d8      	lsls	r0, r3, #31
 8006e30:	d5ea      	bpl.n	8006e08 <_printf_float+0x194>
 8006e32:	1c4b      	adds	r3, r1, #1
 8006e34:	e7e7      	b.n	8006e06 <_printf_float+0x192>
 8006e36:	2900      	cmp	r1, #0
 8006e38:	bfd4      	ite	le
 8006e3a:	f1c1 0202 	rsble	r2, r1, #2
 8006e3e:	2201      	movgt	r2, #1
 8006e40:	4413      	add	r3, r2
 8006e42:	e7e0      	b.n	8006e06 <_printf_float+0x192>
 8006e44:	6823      	ldr	r3, [r4, #0]
 8006e46:	055a      	lsls	r2, r3, #21
 8006e48:	d407      	bmi.n	8006e5a <_printf_float+0x1e6>
 8006e4a:	6923      	ldr	r3, [r4, #16]
 8006e4c:	4642      	mov	r2, r8
 8006e4e:	4631      	mov	r1, r6
 8006e50:	4628      	mov	r0, r5
 8006e52:	47b8      	blx	r7
 8006e54:	3001      	adds	r0, #1
 8006e56:	d12b      	bne.n	8006eb0 <_printf_float+0x23c>
 8006e58:	e767      	b.n	8006d2a <_printf_float+0xb6>
 8006e5a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006e5e:	f240 80dd 	bls.w	800701c <_printf_float+0x3a8>
 8006e62:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006e66:	2200      	movs	r2, #0
 8006e68:	2300      	movs	r3, #0
 8006e6a:	f7f9 fe2d 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e6e:	2800      	cmp	r0, #0
 8006e70:	d033      	beq.n	8006eda <_printf_float+0x266>
 8006e72:	4a37      	ldr	r2, [pc, #220]	@ (8006f50 <_printf_float+0x2dc>)
 8006e74:	2301      	movs	r3, #1
 8006e76:	4631      	mov	r1, r6
 8006e78:	4628      	mov	r0, r5
 8006e7a:	47b8      	blx	r7
 8006e7c:	3001      	adds	r0, #1
 8006e7e:	f43f af54 	beq.w	8006d2a <_printf_float+0xb6>
 8006e82:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006e86:	4543      	cmp	r3, r8
 8006e88:	db02      	blt.n	8006e90 <_printf_float+0x21c>
 8006e8a:	6823      	ldr	r3, [r4, #0]
 8006e8c:	07d8      	lsls	r0, r3, #31
 8006e8e:	d50f      	bpl.n	8006eb0 <_printf_float+0x23c>
 8006e90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e94:	4631      	mov	r1, r6
 8006e96:	4628      	mov	r0, r5
 8006e98:	47b8      	blx	r7
 8006e9a:	3001      	adds	r0, #1
 8006e9c:	f43f af45 	beq.w	8006d2a <_printf_float+0xb6>
 8006ea0:	f04f 0900 	mov.w	r9, #0
 8006ea4:	f108 38ff 	add.w	r8, r8, #4294967295
 8006ea8:	f104 0a1a 	add.w	sl, r4, #26
 8006eac:	45c8      	cmp	r8, r9
 8006eae:	dc09      	bgt.n	8006ec4 <_printf_float+0x250>
 8006eb0:	6823      	ldr	r3, [r4, #0]
 8006eb2:	079b      	lsls	r3, r3, #30
 8006eb4:	f100 8103 	bmi.w	80070be <_printf_float+0x44a>
 8006eb8:	68e0      	ldr	r0, [r4, #12]
 8006eba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ebc:	4298      	cmp	r0, r3
 8006ebe:	bfb8      	it	lt
 8006ec0:	4618      	movlt	r0, r3
 8006ec2:	e734      	b.n	8006d2e <_printf_float+0xba>
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	4652      	mov	r2, sl
 8006ec8:	4631      	mov	r1, r6
 8006eca:	4628      	mov	r0, r5
 8006ecc:	47b8      	blx	r7
 8006ece:	3001      	adds	r0, #1
 8006ed0:	f43f af2b 	beq.w	8006d2a <_printf_float+0xb6>
 8006ed4:	f109 0901 	add.w	r9, r9, #1
 8006ed8:	e7e8      	b.n	8006eac <_printf_float+0x238>
 8006eda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	dc39      	bgt.n	8006f54 <_printf_float+0x2e0>
 8006ee0:	4a1b      	ldr	r2, [pc, #108]	@ (8006f50 <_printf_float+0x2dc>)
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	4631      	mov	r1, r6
 8006ee6:	4628      	mov	r0, r5
 8006ee8:	47b8      	blx	r7
 8006eea:	3001      	adds	r0, #1
 8006eec:	f43f af1d 	beq.w	8006d2a <_printf_float+0xb6>
 8006ef0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006ef4:	ea59 0303 	orrs.w	r3, r9, r3
 8006ef8:	d102      	bne.n	8006f00 <_printf_float+0x28c>
 8006efa:	6823      	ldr	r3, [r4, #0]
 8006efc:	07d9      	lsls	r1, r3, #31
 8006efe:	d5d7      	bpl.n	8006eb0 <_printf_float+0x23c>
 8006f00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f04:	4631      	mov	r1, r6
 8006f06:	4628      	mov	r0, r5
 8006f08:	47b8      	blx	r7
 8006f0a:	3001      	adds	r0, #1
 8006f0c:	f43f af0d 	beq.w	8006d2a <_printf_float+0xb6>
 8006f10:	f04f 0a00 	mov.w	sl, #0
 8006f14:	f104 0b1a 	add.w	fp, r4, #26
 8006f18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f1a:	425b      	negs	r3, r3
 8006f1c:	4553      	cmp	r3, sl
 8006f1e:	dc01      	bgt.n	8006f24 <_printf_float+0x2b0>
 8006f20:	464b      	mov	r3, r9
 8006f22:	e793      	b.n	8006e4c <_printf_float+0x1d8>
 8006f24:	2301      	movs	r3, #1
 8006f26:	465a      	mov	r2, fp
 8006f28:	4631      	mov	r1, r6
 8006f2a:	4628      	mov	r0, r5
 8006f2c:	47b8      	blx	r7
 8006f2e:	3001      	adds	r0, #1
 8006f30:	f43f aefb 	beq.w	8006d2a <_printf_float+0xb6>
 8006f34:	f10a 0a01 	add.w	sl, sl, #1
 8006f38:	e7ee      	b.n	8006f18 <_printf_float+0x2a4>
 8006f3a:	bf00      	nop
 8006f3c:	7fefffff 	.word	0x7fefffff
 8006f40:	0801a738 	.word	0x0801a738
 8006f44:	0801a73c 	.word	0x0801a73c
 8006f48:	0801a740 	.word	0x0801a740
 8006f4c:	0801a744 	.word	0x0801a744
 8006f50:	0801a748 	.word	0x0801a748
 8006f54:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006f56:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006f5a:	4553      	cmp	r3, sl
 8006f5c:	bfa8      	it	ge
 8006f5e:	4653      	movge	r3, sl
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	4699      	mov	r9, r3
 8006f64:	dc36      	bgt.n	8006fd4 <_printf_float+0x360>
 8006f66:	f04f 0b00 	mov.w	fp, #0
 8006f6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f6e:	f104 021a 	add.w	r2, r4, #26
 8006f72:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006f74:	9306      	str	r3, [sp, #24]
 8006f76:	eba3 0309 	sub.w	r3, r3, r9
 8006f7a:	455b      	cmp	r3, fp
 8006f7c:	dc31      	bgt.n	8006fe2 <_printf_float+0x36e>
 8006f7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f80:	459a      	cmp	sl, r3
 8006f82:	dc3a      	bgt.n	8006ffa <_printf_float+0x386>
 8006f84:	6823      	ldr	r3, [r4, #0]
 8006f86:	07da      	lsls	r2, r3, #31
 8006f88:	d437      	bmi.n	8006ffa <_printf_float+0x386>
 8006f8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f8c:	ebaa 0903 	sub.w	r9, sl, r3
 8006f90:	9b06      	ldr	r3, [sp, #24]
 8006f92:	ebaa 0303 	sub.w	r3, sl, r3
 8006f96:	4599      	cmp	r9, r3
 8006f98:	bfa8      	it	ge
 8006f9a:	4699      	movge	r9, r3
 8006f9c:	f1b9 0f00 	cmp.w	r9, #0
 8006fa0:	dc33      	bgt.n	800700a <_printf_float+0x396>
 8006fa2:	f04f 0800 	mov.w	r8, #0
 8006fa6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006faa:	f104 0b1a 	add.w	fp, r4, #26
 8006fae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fb0:	ebaa 0303 	sub.w	r3, sl, r3
 8006fb4:	eba3 0309 	sub.w	r3, r3, r9
 8006fb8:	4543      	cmp	r3, r8
 8006fba:	f77f af79 	ble.w	8006eb0 <_printf_float+0x23c>
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	465a      	mov	r2, fp
 8006fc2:	4631      	mov	r1, r6
 8006fc4:	4628      	mov	r0, r5
 8006fc6:	47b8      	blx	r7
 8006fc8:	3001      	adds	r0, #1
 8006fca:	f43f aeae 	beq.w	8006d2a <_printf_float+0xb6>
 8006fce:	f108 0801 	add.w	r8, r8, #1
 8006fd2:	e7ec      	b.n	8006fae <_printf_float+0x33a>
 8006fd4:	4642      	mov	r2, r8
 8006fd6:	4631      	mov	r1, r6
 8006fd8:	4628      	mov	r0, r5
 8006fda:	47b8      	blx	r7
 8006fdc:	3001      	adds	r0, #1
 8006fde:	d1c2      	bne.n	8006f66 <_printf_float+0x2f2>
 8006fe0:	e6a3      	b.n	8006d2a <_printf_float+0xb6>
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	4631      	mov	r1, r6
 8006fe6:	4628      	mov	r0, r5
 8006fe8:	9206      	str	r2, [sp, #24]
 8006fea:	47b8      	blx	r7
 8006fec:	3001      	adds	r0, #1
 8006fee:	f43f ae9c 	beq.w	8006d2a <_printf_float+0xb6>
 8006ff2:	9a06      	ldr	r2, [sp, #24]
 8006ff4:	f10b 0b01 	add.w	fp, fp, #1
 8006ff8:	e7bb      	b.n	8006f72 <_printf_float+0x2fe>
 8006ffa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ffe:	4631      	mov	r1, r6
 8007000:	4628      	mov	r0, r5
 8007002:	47b8      	blx	r7
 8007004:	3001      	adds	r0, #1
 8007006:	d1c0      	bne.n	8006f8a <_printf_float+0x316>
 8007008:	e68f      	b.n	8006d2a <_printf_float+0xb6>
 800700a:	9a06      	ldr	r2, [sp, #24]
 800700c:	464b      	mov	r3, r9
 800700e:	4442      	add	r2, r8
 8007010:	4631      	mov	r1, r6
 8007012:	4628      	mov	r0, r5
 8007014:	47b8      	blx	r7
 8007016:	3001      	adds	r0, #1
 8007018:	d1c3      	bne.n	8006fa2 <_printf_float+0x32e>
 800701a:	e686      	b.n	8006d2a <_printf_float+0xb6>
 800701c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007020:	f1ba 0f01 	cmp.w	sl, #1
 8007024:	dc01      	bgt.n	800702a <_printf_float+0x3b6>
 8007026:	07db      	lsls	r3, r3, #31
 8007028:	d536      	bpl.n	8007098 <_printf_float+0x424>
 800702a:	2301      	movs	r3, #1
 800702c:	4642      	mov	r2, r8
 800702e:	4631      	mov	r1, r6
 8007030:	4628      	mov	r0, r5
 8007032:	47b8      	blx	r7
 8007034:	3001      	adds	r0, #1
 8007036:	f43f ae78 	beq.w	8006d2a <_printf_float+0xb6>
 800703a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800703e:	4631      	mov	r1, r6
 8007040:	4628      	mov	r0, r5
 8007042:	47b8      	blx	r7
 8007044:	3001      	adds	r0, #1
 8007046:	f43f ae70 	beq.w	8006d2a <_printf_float+0xb6>
 800704a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800704e:	2200      	movs	r2, #0
 8007050:	2300      	movs	r3, #0
 8007052:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007056:	f7f9 fd37 	bl	8000ac8 <__aeabi_dcmpeq>
 800705a:	b9c0      	cbnz	r0, 800708e <_printf_float+0x41a>
 800705c:	4653      	mov	r3, sl
 800705e:	f108 0201 	add.w	r2, r8, #1
 8007062:	4631      	mov	r1, r6
 8007064:	4628      	mov	r0, r5
 8007066:	47b8      	blx	r7
 8007068:	3001      	adds	r0, #1
 800706a:	d10c      	bne.n	8007086 <_printf_float+0x412>
 800706c:	e65d      	b.n	8006d2a <_printf_float+0xb6>
 800706e:	2301      	movs	r3, #1
 8007070:	465a      	mov	r2, fp
 8007072:	4631      	mov	r1, r6
 8007074:	4628      	mov	r0, r5
 8007076:	47b8      	blx	r7
 8007078:	3001      	adds	r0, #1
 800707a:	f43f ae56 	beq.w	8006d2a <_printf_float+0xb6>
 800707e:	f108 0801 	add.w	r8, r8, #1
 8007082:	45d0      	cmp	r8, sl
 8007084:	dbf3      	blt.n	800706e <_printf_float+0x3fa>
 8007086:	464b      	mov	r3, r9
 8007088:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800708c:	e6df      	b.n	8006e4e <_printf_float+0x1da>
 800708e:	f04f 0800 	mov.w	r8, #0
 8007092:	f104 0b1a 	add.w	fp, r4, #26
 8007096:	e7f4      	b.n	8007082 <_printf_float+0x40e>
 8007098:	2301      	movs	r3, #1
 800709a:	4642      	mov	r2, r8
 800709c:	e7e1      	b.n	8007062 <_printf_float+0x3ee>
 800709e:	2301      	movs	r3, #1
 80070a0:	464a      	mov	r2, r9
 80070a2:	4631      	mov	r1, r6
 80070a4:	4628      	mov	r0, r5
 80070a6:	47b8      	blx	r7
 80070a8:	3001      	adds	r0, #1
 80070aa:	f43f ae3e 	beq.w	8006d2a <_printf_float+0xb6>
 80070ae:	f108 0801 	add.w	r8, r8, #1
 80070b2:	68e3      	ldr	r3, [r4, #12]
 80070b4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80070b6:	1a5b      	subs	r3, r3, r1
 80070b8:	4543      	cmp	r3, r8
 80070ba:	dcf0      	bgt.n	800709e <_printf_float+0x42a>
 80070bc:	e6fc      	b.n	8006eb8 <_printf_float+0x244>
 80070be:	f04f 0800 	mov.w	r8, #0
 80070c2:	f104 0919 	add.w	r9, r4, #25
 80070c6:	e7f4      	b.n	80070b2 <_printf_float+0x43e>

080070c8 <_printf_common>:
 80070c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070cc:	4616      	mov	r6, r2
 80070ce:	4698      	mov	r8, r3
 80070d0:	688a      	ldr	r2, [r1, #8]
 80070d2:	690b      	ldr	r3, [r1, #16]
 80070d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80070d8:	4293      	cmp	r3, r2
 80070da:	bfb8      	it	lt
 80070dc:	4613      	movlt	r3, r2
 80070de:	6033      	str	r3, [r6, #0]
 80070e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80070e4:	4607      	mov	r7, r0
 80070e6:	460c      	mov	r4, r1
 80070e8:	b10a      	cbz	r2, 80070ee <_printf_common+0x26>
 80070ea:	3301      	adds	r3, #1
 80070ec:	6033      	str	r3, [r6, #0]
 80070ee:	6823      	ldr	r3, [r4, #0]
 80070f0:	0699      	lsls	r1, r3, #26
 80070f2:	bf42      	ittt	mi
 80070f4:	6833      	ldrmi	r3, [r6, #0]
 80070f6:	3302      	addmi	r3, #2
 80070f8:	6033      	strmi	r3, [r6, #0]
 80070fa:	6825      	ldr	r5, [r4, #0]
 80070fc:	f015 0506 	ands.w	r5, r5, #6
 8007100:	d106      	bne.n	8007110 <_printf_common+0x48>
 8007102:	f104 0a19 	add.w	sl, r4, #25
 8007106:	68e3      	ldr	r3, [r4, #12]
 8007108:	6832      	ldr	r2, [r6, #0]
 800710a:	1a9b      	subs	r3, r3, r2
 800710c:	42ab      	cmp	r3, r5
 800710e:	dc26      	bgt.n	800715e <_printf_common+0x96>
 8007110:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007114:	6822      	ldr	r2, [r4, #0]
 8007116:	3b00      	subs	r3, #0
 8007118:	bf18      	it	ne
 800711a:	2301      	movne	r3, #1
 800711c:	0692      	lsls	r2, r2, #26
 800711e:	d42b      	bmi.n	8007178 <_printf_common+0xb0>
 8007120:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007124:	4641      	mov	r1, r8
 8007126:	4638      	mov	r0, r7
 8007128:	47c8      	blx	r9
 800712a:	3001      	adds	r0, #1
 800712c:	d01e      	beq.n	800716c <_printf_common+0xa4>
 800712e:	6823      	ldr	r3, [r4, #0]
 8007130:	6922      	ldr	r2, [r4, #16]
 8007132:	f003 0306 	and.w	r3, r3, #6
 8007136:	2b04      	cmp	r3, #4
 8007138:	bf02      	ittt	eq
 800713a:	68e5      	ldreq	r5, [r4, #12]
 800713c:	6833      	ldreq	r3, [r6, #0]
 800713e:	1aed      	subeq	r5, r5, r3
 8007140:	68a3      	ldr	r3, [r4, #8]
 8007142:	bf0c      	ite	eq
 8007144:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007148:	2500      	movne	r5, #0
 800714a:	4293      	cmp	r3, r2
 800714c:	bfc4      	itt	gt
 800714e:	1a9b      	subgt	r3, r3, r2
 8007150:	18ed      	addgt	r5, r5, r3
 8007152:	2600      	movs	r6, #0
 8007154:	341a      	adds	r4, #26
 8007156:	42b5      	cmp	r5, r6
 8007158:	d11a      	bne.n	8007190 <_printf_common+0xc8>
 800715a:	2000      	movs	r0, #0
 800715c:	e008      	b.n	8007170 <_printf_common+0xa8>
 800715e:	2301      	movs	r3, #1
 8007160:	4652      	mov	r2, sl
 8007162:	4641      	mov	r1, r8
 8007164:	4638      	mov	r0, r7
 8007166:	47c8      	blx	r9
 8007168:	3001      	adds	r0, #1
 800716a:	d103      	bne.n	8007174 <_printf_common+0xac>
 800716c:	f04f 30ff 	mov.w	r0, #4294967295
 8007170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007174:	3501      	adds	r5, #1
 8007176:	e7c6      	b.n	8007106 <_printf_common+0x3e>
 8007178:	18e1      	adds	r1, r4, r3
 800717a:	1c5a      	adds	r2, r3, #1
 800717c:	2030      	movs	r0, #48	@ 0x30
 800717e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007182:	4422      	add	r2, r4
 8007184:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007188:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800718c:	3302      	adds	r3, #2
 800718e:	e7c7      	b.n	8007120 <_printf_common+0x58>
 8007190:	2301      	movs	r3, #1
 8007192:	4622      	mov	r2, r4
 8007194:	4641      	mov	r1, r8
 8007196:	4638      	mov	r0, r7
 8007198:	47c8      	blx	r9
 800719a:	3001      	adds	r0, #1
 800719c:	d0e6      	beq.n	800716c <_printf_common+0xa4>
 800719e:	3601      	adds	r6, #1
 80071a0:	e7d9      	b.n	8007156 <_printf_common+0x8e>
	...

080071a4 <_printf_i>:
 80071a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071a8:	7e0f      	ldrb	r7, [r1, #24]
 80071aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80071ac:	2f78      	cmp	r7, #120	@ 0x78
 80071ae:	4691      	mov	r9, r2
 80071b0:	4680      	mov	r8, r0
 80071b2:	460c      	mov	r4, r1
 80071b4:	469a      	mov	sl, r3
 80071b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80071ba:	d807      	bhi.n	80071cc <_printf_i+0x28>
 80071bc:	2f62      	cmp	r7, #98	@ 0x62
 80071be:	d80a      	bhi.n	80071d6 <_printf_i+0x32>
 80071c0:	2f00      	cmp	r7, #0
 80071c2:	f000 80d2 	beq.w	800736a <_printf_i+0x1c6>
 80071c6:	2f58      	cmp	r7, #88	@ 0x58
 80071c8:	f000 80b9 	beq.w	800733e <_printf_i+0x19a>
 80071cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80071d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80071d4:	e03a      	b.n	800724c <_printf_i+0xa8>
 80071d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80071da:	2b15      	cmp	r3, #21
 80071dc:	d8f6      	bhi.n	80071cc <_printf_i+0x28>
 80071de:	a101      	add	r1, pc, #4	@ (adr r1, 80071e4 <_printf_i+0x40>)
 80071e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80071e4:	0800723d 	.word	0x0800723d
 80071e8:	08007251 	.word	0x08007251
 80071ec:	080071cd 	.word	0x080071cd
 80071f0:	080071cd 	.word	0x080071cd
 80071f4:	080071cd 	.word	0x080071cd
 80071f8:	080071cd 	.word	0x080071cd
 80071fc:	08007251 	.word	0x08007251
 8007200:	080071cd 	.word	0x080071cd
 8007204:	080071cd 	.word	0x080071cd
 8007208:	080071cd 	.word	0x080071cd
 800720c:	080071cd 	.word	0x080071cd
 8007210:	08007351 	.word	0x08007351
 8007214:	0800727b 	.word	0x0800727b
 8007218:	0800730b 	.word	0x0800730b
 800721c:	080071cd 	.word	0x080071cd
 8007220:	080071cd 	.word	0x080071cd
 8007224:	08007373 	.word	0x08007373
 8007228:	080071cd 	.word	0x080071cd
 800722c:	0800727b 	.word	0x0800727b
 8007230:	080071cd 	.word	0x080071cd
 8007234:	080071cd 	.word	0x080071cd
 8007238:	08007313 	.word	0x08007313
 800723c:	6833      	ldr	r3, [r6, #0]
 800723e:	1d1a      	adds	r2, r3, #4
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	6032      	str	r2, [r6, #0]
 8007244:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007248:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800724c:	2301      	movs	r3, #1
 800724e:	e09d      	b.n	800738c <_printf_i+0x1e8>
 8007250:	6833      	ldr	r3, [r6, #0]
 8007252:	6820      	ldr	r0, [r4, #0]
 8007254:	1d19      	adds	r1, r3, #4
 8007256:	6031      	str	r1, [r6, #0]
 8007258:	0606      	lsls	r6, r0, #24
 800725a:	d501      	bpl.n	8007260 <_printf_i+0xbc>
 800725c:	681d      	ldr	r5, [r3, #0]
 800725e:	e003      	b.n	8007268 <_printf_i+0xc4>
 8007260:	0645      	lsls	r5, r0, #25
 8007262:	d5fb      	bpl.n	800725c <_printf_i+0xb8>
 8007264:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007268:	2d00      	cmp	r5, #0
 800726a:	da03      	bge.n	8007274 <_printf_i+0xd0>
 800726c:	232d      	movs	r3, #45	@ 0x2d
 800726e:	426d      	negs	r5, r5
 8007270:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007274:	4859      	ldr	r0, [pc, #356]	@ (80073dc <_printf_i+0x238>)
 8007276:	230a      	movs	r3, #10
 8007278:	e011      	b.n	800729e <_printf_i+0xfa>
 800727a:	6821      	ldr	r1, [r4, #0]
 800727c:	6833      	ldr	r3, [r6, #0]
 800727e:	0608      	lsls	r0, r1, #24
 8007280:	f853 5b04 	ldr.w	r5, [r3], #4
 8007284:	d402      	bmi.n	800728c <_printf_i+0xe8>
 8007286:	0649      	lsls	r1, r1, #25
 8007288:	bf48      	it	mi
 800728a:	b2ad      	uxthmi	r5, r5
 800728c:	2f6f      	cmp	r7, #111	@ 0x6f
 800728e:	4853      	ldr	r0, [pc, #332]	@ (80073dc <_printf_i+0x238>)
 8007290:	6033      	str	r3, [r6, #0]
 8007292:	bf14      	ite	ne
 8007294:	230a      	movne	r3, #10
 8007296:	2308      	moveq	r3, #8
 8007298:	2100      	movs	r1, #0
 800729a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800729e:	6866      	ldr	r6, [r4, #4]
 80072a0:	60a6      	str	r6, [r4, #8]
 80072a2:	2e00      	cmp	r6, #0
 80072a4:	bfa2      	ittt	ge
 80072a6:	6821      	ldrge	r1, [r4, #0]
 80072a8:	f021 0104 	bicge.w	r1, r1, #4
 80072ac:	6021      	strge	r1, [r4, #0]
 80072ae:	b90d      	cbnz	r5, 80072b4 <_printf_i+0x110>
 80072b0:	2e00      	cmp	r6, #0
 80072b2:	d04b      	beq.n	800734c <_printf_i+0x1a8>
 80072b4:	4616      	mov	r6, r2
 80072b6:	fbb5 f1f3 	udiv	r1, r5, r3
 80072ba:	fb03 5711 	mls	r7, r3, r1, r5
 80072be:	5dc7      	ldrb	r7, [r0, r7]
 80072c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80072c4:	462f      	mov	r7, r5
 80072c6:	42bb      	cmp	r3, r7
 80072c8:	460d      	mov	r5, r1
 80072ca:	d9f4      	bls.n	80072b6 <_printf_i+0x112>
 80072cc:	2b08      	cmp	r3, #8
 80072ce:	d10b      	bne.n	80072e8 <_printf_i+0x144>
 80072d0:	6823      	ldr	r3, [r4, #0]
 80072d2:	07df      	lsls	r7, r3, #31
 80072d4:	d508      	bpl.n	80072e8 <_printf_i+0x144>
 80072d6:	6923      	ldr	r3, [r4, #16]
 80072d8:	6861      	ldr	r1, [r4, #4]
 80072da:	4299      	cmp	r1, r3
 80072dc:	bfde      	ittt	le
 80072de:	2330      	movle	r3, #48	@ 0x30
 80072e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80072e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80072e8:	1b92      	subs	r2, r2, r6
 80072ea:	6122      	str	r2, [r4, #16]
 80072ec:	f8cd a000 	str.w	sl, [sp]
 80072f0:	464b      	mov	r3, r9
 80072f2:	aa03      	add	r2, sp, #12
 80072f4:	4621      	mov	r1, r4
 80072f6:	4640      	mov	r0, r8
 80072f8:	f7ff fee6 	bl	80070c8 <_printf_common>
 80072fc:	3001      	adds	r0, #1
 80072fe:	d14a      	bne.n	8007396 <_printf_i+0x1f2>
 8007300:	f04f 30ff 	mov.w	r0, #4294967295
 8007304:	b004      	add	sp, #16
 8007306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800730a:	6823      	ldr	r3, [r4, #0]
 800730c:	f043 0320 	orr.w	r3, r3, #32
 8007310:	6023      	str	r3, [r4, #0]
 8007312:	4833      	ldr	r0, [pc, #204]	@ (80073e0 <_printf_i+0x23c>)
 8007314:	2778      	movs	r7, #120	@ 0x78
 8007316:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800731a:	6823      	ldr	r3, [r4, #0]
 800731c:	6831      	ldr	r1, [r6, #0]
 800731e:	061f      	lsls	r7, r3, #24
 8007320:	f851 5b04 	ldr.w	r5, [r1], #4
 8007324:	d402      	bmi.n	800732c <_printf_i+0x188>
 8007326:	065f      	lsls	r7, r3, #25
 8007328:	bf48      	it	mi
 800732a:	b2ad      	uxthmi	r5, r5
 800732c:	6031      	str	r1, [r6, #0]
 800732e:	07d9      	lsls	r1, r3, #31
 8007330:	bf44      	itt	mi
 8007332:	f043 0320 	orrmi.w	r3, r3, #32
 8007336:	6023      	strmi	r3, [r4, #0]
 8007338:	b11d      	cbz	r5, 8007342 <_printf_i+0x19e>
 800733a:	2310      	movs	r3, #16
 800733c:	e7ac      	b.n	8007298 <_printf_i+0xf4>
 800733e:	4827      	ldr	r0, [pc, #156]	@ (80073dc <_printf_i+0x238>)
 8007340:	e7e9      	b.n	8007316 <_printf_i+0x172>
 8007342:	6823      	ldr	r3, [r4, #0]
 8007344:	f023 0320 	bic.w	r3, r3, #32
 8007348:	6023      	str	r3, [r4, #0]
 800734a:	e7f6      	b.n	800733a <_printf_i+0x196>
 800734c:	4616      	mov	r6, r2
 800734e:	e7bd      	b.n	80072cc <_printf_i+0x128>
 8007350:	6833      	ldr	r3, [r6, #0]
 8007352:	6825      	ldr	r5, [r4, #0]
 8007354:	6961      	ldr	r1, [r4, #20]
 8007356:	1d18      	adds	r0, r3, #4
 8007358:	6030      	str	r0, [r6, #0]
 800735a:	062e      	lsls	r6, r5, #24
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	d501      	bpl.n	8007364 <_printf_i+0x1c0>
 8007360:	6019      	str	r1, [r3, #0]
 8007362:	e002      	b.n	800736a <_printf_i+0x1c6>
 8007364:	0668      	lsls	r0, r5, #25
 8007366:	d5fb      	bpl.n	8007360 <_printf_i+0x1bc>
 8007368:	8019      	strh	r1, [r3, #0]
 800736a:	2300      	movs	r3, #0
 800736c:	6123      	str	r3, [r4, #16]
 800736e:	4616      	mov	r6, r2
 8007370:	e7bc      	b.n	80072ec <_printf_i+0x148>
 8007372:	6833      	ldr	r3, [r6, #0]
 8007374:	1d1a      	adds	r2, r3, #4
 8007376:	6032      	str	r2, [r6, #0]
 8007378:	681e      	ldr	r6, [r3, #0]
 800737a:	6862      	ldr	r2, [r4, #4]
 800737c:	2100      	movs	r1, #0
 800737e:	4630      	mov	r0, r6
 8007380:	f7f8 ff26 	bl	80001d0 <memchr>
 8007384:	b108      	cbz	r0, 800738a <_printf_i+0x1e6>
 8007386:	1b80      	subs	r0, r0, r6
 8007388:	6060      	str	r0, [r4, #4]
 800738a:	6863      	ldr	r3, [r4, #4]
 800738c:	6123      	str	r3, [r4, #16]
 800738e:	2300      	movs	r3, #0
 8007390:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007394:	e7aa      	b.n	80072ec <_printf_i+0x148>
 8007396:	6923      	ldr	r3, [r4, #16]
 8007398:	4632      	mov	r2, r6
 800739a:	4649      	mov	r1, r9
 800739c:	4640      	mov	r0, r8
 800739e:	47d0      	blx	sl
 80073a0:	3001      	adds	r0, #1
 80073a2:	d0ad      	beq.n	8007300 <_printf_i+0x15c>
 80073a4:	6823      	ldr	r3, [r4, #0]
 80073a6:	079b      	lsls	r3, r3, #30
 80073a8:	d413      	bmi.n	80073d2 <_printf_i+0x22e>
 80073aa:	68e0      	ldr	r0, [r4, #12]
 80073ac:	9b03      	ldr	r3, [sp, #12]
 80073ae:	4298      	cmp	r0, r3
 80073b0:	bfb8      	it	lt
 80073b2:	4618      	movlt	r0, r3
 80073b4:	e7a6      	b.n	8007304 <_printf_i+0x160>
 80073b6:	2301      	movs	r3, #1
 80073b8:	4632      	mov	r2, r6
 80073ba:	4649      	mov	r1, r9
 80073bc:	4640      	mov	r0, r8
 80073be:	47d0      	blx	sl
 80073c0:	3001      	adds	r0, #1
 80073c2:	d09d      	beq.n	8007300 <_printf_i+0x15c>
 80073c4:	3501      	adds	r5, #1
 80073c6:	68e3      	ldr	r3, [r4, #12]
 80073c8:	9903      	ldr	r1, [sp, #12]
 80073ca:	1a5b      	subs	r3, r3, r1
 80073cc:	42ab      	cmp	r3, r5
 80073ce:	dcf2      	bgt.n	80073b6 <_printf_i+0x212>
 80073d0:	e7eb      	b.n	80073aa <_printf_i+0x206>
 80073d2:	2500      	movs	r5, #0
 80073d4:	f104 0619 	add.w	r6, r4, #25
 80073d8:	e7f5      	b.n	80073c6 <_printf_i+0x222>
 80073da:	bf00      	nop
 80073dc:	0801a74a 	.word	0x0801a74a
 80073e0:	0801a75b 	.word	0x0801a75b

080073e4 <_scanf_float>:
 80073e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073e8:	b087      	sub	sp, #28
 80073ea:	4617      	mov	r7, r2
 80073ec:	9303      	str	r3, [sp, #12]
 80073ee:	688b      	ldr	r3, [r1, #8]
 80073f0:	1e5a      	subs	r2, r3, #1
 80073f2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80073f6:	bf81      	itttt	hi
 80073f8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80073fc:	eb03 0b05 	addhi.w	fp, r3, r5
 8007400:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007404:	608b      	strhi	r3, [r1, #8]
 8007406:	680b      	ldr	r3, [r1, #0]
 8007408:	460a      	mov	r2, r1
 800740a:	f04f 0500 	mov.w	r5, #0
 800740e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007412:	f842 3b1c 	str.w	r3, [r2], #28
 8007416:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800741a:	4680      	mov	r8, r0
 800741c:	460c      	mov	r4, r1
 800741e:	bf98      	it	ls
 8007420:	f04f 0b00 	movls.w	fp, #0
 8007424:	9201      	str	r2, [sp, #4]
 8007426:	4616      	mov	r6, r2
 8007428:	46aa      	mov	sl, r5
 800742a:	46a9      	mov	r9, r5
 800742c:	9502      	str	r5, [sp, #8]
 800742e:	68a2      	ldr	r2, [r4, #8]
 8007430:	b152      	cbz	r2, 8007448 <_scanf_float+0x64>
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	781b      	ldrb	r3, [r3, #0]
 8007436:	2b4e      	cmp	r3, #78	@ 0x4e
 8007438:	d864      	bhi.n	8007504 <_scanf_float+0x120>
 800743a:	2b40      	cmp	r3, #64	@ 0x40
 800743c:	d83c      	bhi.n	80074b8 <_scanf_float+0xd4>
 800743e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007442:	b2c8      	uxtb	r0, r1
 8007444:	280e      	cmp	r0, #14
 8007446:	d93a      	bls.n	80074be <_scanf_float+0xda>
 8007448:	f1b9 0f00 	cmp.w	r9, #0
 800744c:	d003      	beq.n	8007456 <_scanf_float+0x72>
 800744e:	6823      	ldr	r3, [r4, #0]
 8007450:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007454:	6023      	str	r3, [r4, #0]
 8007456:	f10a 3aff 	add.w	sl, sl, #4294967295
 800745a:	f1ba 0f01 	cmp.w	sl, #1
 800745e:	f200 8117 	bhi.w	8007690 <_scanf_float+0x2ac>
 8007462:	9b01      	ldr	r3, [sp, #4]
 8007464:	429e      	cmp	r6, r3
 8007466:	f200 8108 	bhi.w	800767a <_scanf_float+0x296>
 800746a:	2001      	movs	r0, #1
 800746c:	b007      	add	sp, #28
 800746e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007472:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007476:	2a0d      	cmp	r2, #13
 8007478:	d8e6      	bhi.n	8007448 <_scanf_float+0x64>
 800747a:	a101      	add	r1, pc, #4	@ (adr r1, 8007480 <_scanf_float+0x9c>)
 800747c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007480:	080075c7 	.word	0x080075c7
 8007484:	08007449 	.word	0x08007449
 8007488:	08007449 	.word	0x08007449
 800748c:	08007449 	.word	0x08007449
 8007490:	08007627 	.word	0x08007627
 8007494:	080075ff 	.word	0x080075ff
 8007498:	08007449 	.word	0x08007449
 800749c:	08007449 	.word	0x08007449
 80074a0:	080075d5 	.word	0x080075d5
 80074a4:	08007449 	.word	0x08007449
 80074a8:	08007449 	.word	0x08007449
 80074ac:	08007449 	.word	0x08007449
 80074b0:	08007449 	.word	0x08007449
 80074b4:	0800758d 	.word	0x0800758d
 80074b8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80074bc:	e7db      	b.n	8007476 <_scanf_float+0x92>
 80074be:	290e      	cmp	r1, #14
 80074c0:	d8c2      	bhi.n	8007448 <_scanf_float+0x64>
 80074c2:	a001      	add	r0, pc, #4	@ (adr r0, 80074c8 <_scanf_float+0xe4>)
 80074c4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80074c8:	0800757d 	.word	0x0800757d
 80074cc:	08007449 	.word	0x08007449
 80074d0:	0800757d 	.word	0x0800757d
 80074d4:	08007613 	.word	0x08007613
 80074d8:	08007449 	.word	0x08007449
 80074dc:	08007525 	.word	0x08007525
 80074e0:	08007563 	.word	0x08007563
 80074e4:	08007563 	.word	0x08007563
 80074e8:	08007563 	.word	0x08007563
 80074ec:	08007563 	.word	0x08007563
 80074f0:	08007563 	.word	0x08007563
 80074f4:	08007563 	.word	0x08007563
 80074f8:	08007563 	.word	0x08007563
 80074fc:	08007563 	.word	0x08007563
 8007500:	08007563 	.word	0x08007563
 8007504:	2b6e      	cmp	r3, #110	@ 0x6e
 8007506:	d809      	bhi.n	800751c <_scanf_float+0x138>
 8007508:	2b60      	cmp	r3, #96	@ 0x60
 800750a:	d8b2      	bhi.n	8007472 <_scanf_float+0x8e>
 800750c:	2b54      	cmp	r3, #84	@ 0x54
 800750e:	d07b      	beq.n	8007608 <_scanf_float+0x224>
 8007510:	2b59      	cmp	r3, #89	@ 0x59
 8007512:	d199      	bne.n	8007448 <_scanf_float+0x64>
 8007514:	2d07      	cmp	r5, #7
 8007516:	d197      	bne.n	8007448 <_scanf_float+0x64>
 8007518:	2508      	movs	r5, #8
 800751a:	e02c      	b.n	8007576 <_scanf_float+0x192>
 800751c:	2b74      	cmp	r3, #116	@ 0x74
 800751e:	d073      	beq.n	8007608 <_scanf_float+0x224>
 8007520:	2b79      	cmp	r3, #121	@ 0x79
 8007522:	e7f6      	b.n	8007512 <_scanf_float+0x12e>
 8007524:	6821      	ldr	r1, [r4, #0]
 8007526:	05c8      	lsls	r0, r1, #23
 8007528:	d51b      	bpl.n	8007562 <_scanf_float+0x17e>
 800752a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800752e:	6021      	str	r1, [r4, #0]
 8007530:	f109 0901 	add.w	r9, r9, #1
 8007534:	f1bb 0f00 	cmp.w	fp, #0
 8007538:	d003      	beq.n	8007542 <_scanf_float+0x15e>
 800753a:	3201      	adds	r2, #1
 800753c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007540:	60a2      	str	r2, [r4, #8]
 8007542:	68a3      	ldr	r3, [r4, #8]
 8007544:	3b01      	subs	r3, #1
 8007546:	60a3      	str	r3, [r4, #8]
 8007548:	6923      	ldr	r3, [r4, #16]
 800754a:	3301      	adds	r3, #1
 800754c:	6123      	str	r3, [r4, #16]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	3b01      	subs	r3, #1
 8007552:	2b00      	cmp	r3, #0
 8007554:	607b      	str	r3, [r7, #4]
 8007556:	f340 8087 	ble.w	8007668 <_scanf_float+0x284>
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	3301      	adds	r3, #1
 800755e:	603b      	str	r3, [r7, #0]
 8007560:	e765      	b.n	800742e <_scanf_float+0x4a>
 8007562:	eb1a 0105 	adds.w	r1, sl, r5
 8007566:	f47f af6f 	bne.w	8007448 <_scanf_float+0x64>
 800756a:	6822      	ldr	r2, [r4, #0]
 800756c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007570:	6022      	str	r2, [r4, #0]
 8007572:	460d      	mov	r5, r1
 8007574:	468a      	mov	sl, r1
 8007576:	f806 3b01 	strb.w	r3, [r6], #1
 800757a:	e7e2      	b.n	8007542 <_scanf_float+0x15e>
 800757c:	6822      	ldr	r2, [r4, #0]
 800757e:	0610      	lsls	r0, r2, #24
 8007580:	f57f af62 	bpl.w	8007448 <_scanf_float+0x64>
 8007584:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007588:	6022      	str	r2, [r4, #0]
 800758a:	e7f4      	b.n	8007576 <_scanf_float+0x192>
 800758c:	f1ba 0f00 	cmp.w	sl, #0
 8007590:	d10e      	bne.n	80075b0 <_scanf_float+0x1cc>
 8007592:	f1b9 0f00 	cmp.w	r9, #0
 8007596:	d10e      	bne.n	80075b6 <_scanf_float+0x1d2>
 8007598:	6822      	ldr	r2, [r4, #0]
 800759a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800759e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80075a2:	d108      	bne.n	80075b6 <_scanf_float+0x1d2>
 80075a4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80075a8:	6022      	str	r2, [r4, #0]
 80075aa:	f04f 0a01 	mov.w	sl, #1
 80075ae:	e7e2      	b.n	8007576 <_scanf_float+0x192>
 80075b0:	f1ba 0f02 	cmp.w	sl, #2
 80075b4:	d055      	beq.n	8007662 <_scanf_float+0x27e>
 80075b6:	2d01      	cmp	r5, #1
 80075b8:	d002      	beq.n	80075c0 <_scanf_float+0x1dc>
 80075ba:	2d04      	cmp	r5, #4
 80075bc:	f47f af44 	bne.w	8007448 <_scanf_float+0x64>
 80075c0:	3501      	adds	r5, #1
 80075c2:	b2ed      	uxtb	r5, r5
 80075c4:	e7d7      	b.n	8007576 <_scanf_float+0x192>
 80075c6:	f1ba 0f01 	cmp.w	sl, #1
 80075ca:	f47f af3d 	bne.w	8007448 <_scanf_float+0x64>
 80075ce:	f04f 0a02 	mov.w	sl, #2
 80075d2:	e7d0      	b.n	8007576 <_scanf_float+0x192>
 80075d4:	b97d      	cbnz	r5, 80075f6 <_scanf_float+0x212>
 80075d6:	f1b9 0f00 	cmp.w	r9, #0
 80075da:	f47f af38 	bne.w	800744e <_scanf_float+0x6a>
 80075de:	6822      	ldr	r2, [r4, #0]
 80075e0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80075e4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80075e8:	f040 8108 	bne.w	80077fc <_scanf_float+0x418>
 80075ec:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80075f0:	6022      	str	r2, [r4, #0]
 80075f2:	2501      	movs	r5, #1
 80075f4:	e7bf      	b.n	8007576 <_scanf_float+0x192>
 80075f6:	2d03      	cmp	r5, #3
 80075f8:	d0e2      	beq.n	80075c0 <_scanf_float+0x1dc>
 80075fa:	2d05      	cmp	r5, #5
 80075fc:	e7de      	b.n	80075bc <_scanf_float+0x1d8>
 80075fe:	2d02      	cmp	r5, #2
 8007600:	f47f af22 	bne.w	8007448 <_scanf_float+0x64>
 8007604:	2503      	movs	r5, #3
 8007606:	e7b6      	b.n	8007576 <_scanf_float+0x192>
 8007608:	2d06      	cmp	r5, #6
 800760a:	f47f af1d 	bne.w	8007448 <_scanf_float+0x64>
 800760e:	2507      	movs	r5, #7
 8007610:	e7b1      	b.n	8007576 <_scanf_float+0x192>
 8007612:	6822      	ldr	r2, [r4, #0]
 8007614:	0591      	lsls	r1, r2, #22
 8007616:	f57f af17 	bpl.w	8007448 <_scanf_float+0x64>
 800761a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800761e:	6022      	str	r2, [r4, #0]
 8007620:	f8cd 9008 	str.w	r9, [sp, #8]
 8007624:	e7a7      	b.n	8007576 <_scanf_float+0x192>
 8007626:	6822      	ldr	r2, [r4, #0]
 8007628:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800762c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007630:	d006      	beq.n	8007640 <_scanf_float+0x25c>
 8007632:	0550      	lsls	r0, r2, #21
 8007634:	f57f af08 	bpl.w	8007448 <_scanf_float+0x64>
 8007638:	f1b9 0f00 	cmp.w	r9, #0
 800763c:	f000 80de 	beq.w	80077fc <_scanf_float+0x418>
 8007640:	0591      	lsls	r1, r2, #22
 8007642:	bf58      	it	pl
 8007644:	9902      	ldrpl	r1, [sp, #8]
 8007646:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800764a:	bf58      	it	pl
 800764c:	eba9 0101 	subpl.w	r1, r9, r1
 8007650:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007654:	bf58      	it	pl
 8007656:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800765a:	6022      	str	r2, [r4, #0]
 800765c:	f04f 0900 	mov.w	r9, #0
 8007660:	e789      	b.n	8007576 <_scanf_float+0x192>
 8007662:	f04f 0a03 	mov.w	sl, #3
 8007666:	e786      	b.n	8007576 <_scanf_float+0x192>
 8007668:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800766c:	4639      	mov	r1, r7
 800766e:	4640      	mov	r0, r8
 8007670:	4798      	blx	r3
 8007672:	2800      	cmp	r0, #0
 8007674:	f43f aedb 	beq.w	800742e <_scanf_float+0x4a>
 8007678:	e6e6      	b.n	8007448 <_scanf_float+0x64>
 800767a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800767e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007682:	463a      	mov	r2, r7
 8007684:	4640      	mov	r0, r8
 8007686:	4798      	blx	r3
 8007688:	6923      	ldr	r3, [r4, #16]
 800768a:	3b01      	subs	r3, #1
 800768c:	6123      	str	r3, [r4, #16]
 800768e:	e6e8      	b.n	8007462 <_scanf_float+0x7e>
 8007690:	1e6b      	subs	r3, r5, #1
 8007692:	2b06      	cmp	r3, #6
 8007694:	d824      	bhi.n	80076e0 <_scanf_float+0x2fc>
 8007696:	2d02      	cmp	r5, #2
 8007698:	d836      	bhi.n	8007708 <_scanf_float+0x324>
 800769a:	9b01      	ldr	r3, [sp, #4]
 800769c:	429e      	cmp	r6, r3
 800769e:	f67f aee4 	bls.w	800746a <_scanf_float+0x86>
 80076a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80076a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80076aa:	463a      	mov	r2, r7
 80076ac:	4640      	mov	r0, r8
 80076ae:	4798      	blx	r3
 80076b0:	6923      	ldr	r3, [r4, #16]
 80076b2:	3b01      	subs	r3, #1
 80076b4:	6123      	str	r3, [r4, #16]
 80076b6:	e7f0      	b.n	800769a <_scanf_float+0x2b6>
 80076b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80076bc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80076c0:	463a      	mov	r2, r7
 80076c2:	4640      	mov	r0, r8
 80076c4:	4798      	blx	r3
 80076c6:	6923      	ldr	r3, [r4, #16]
 80076c8:	3b01      	subs	r3, #1
 80076ca:	6123      	str	r3, [r4, #16]
 80076cc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80076d0:	fa5f fa8a 	uxtb.w	sl, sl
 80076d4:	f1ba 0f02 	cmp.w	sl, #2
 80076d8:	d1ee      	bne.n	80076b8 <_scanf_float+0x2d4>
 80076da:	3d03      	subs	r5, #3
 80076dc:	b2ed      	uxtb	r5, r5
 80076de:	1b76      	subs	r6, r6, r5
 80076e0:	6823      	ldr	r3, [r4, #0]
 80076e2:	05da      	lsls	r2, r3, #23
 80076e4:	d530      	bpl.n	8007748 <_scanf_float+0x364>
 80076e6:	055b      	lsls	r3, r3, #21
 80076e8:	d511      	bpl.n	800770e <_scanf_float+0x32a>
 80076ea:	9b01      	ldr	r3, [sp, #4]
 80076ec:	429e      	cmp	r6, r3
 80076ee:	f67f aebc 	bls.w	800746a <_scanf_float+0x86>
 80076f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80076f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80076fa:	463a      	mov	r2, r7
 80076fc:	4640      	mov	r0, r8
 80076fe:	4798      	blx	r3
 8007700:	6923      	ldr	r3, [r4, #16]
 8007702:	3b01      	subs	r3, #1
 8007704:	6123      	str	r3, [r4, #16]
 8007706:	e7f0      	b.n	80076ea <_scanf_float+0x306>
 8007708:	46aa      	mov	sl, r5
 800770a:	46b3      	mov	fp, r6
 800770c:	e7de      	b.n	80076cc <_scanf_float+0x2e8>
 800770e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007712:	6923      	ldr	r3, [r4, #16]
 8007714:	2965      	cmp	r1, #101	@ 0x65
 8007716:	f103 33ff 	add.w	r3, r3, #4294967295
 800771a:	f106 35ff 	add.w	r5, r6, #4294967295
 800771e:	6123      	str	r3, [r4, #16]
 8007720:	d00c      	beq.n	800773c <_scanf_float+0x358>
 8007722:	2945      	cmp	r1, #69	@ 0x45
 8007724:	d00a      	beq.n	800773c <_scanf_float+0x358>
 8007726:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800772a:	463a      	mov	r2, r7
 800772c:	4640      	mov	r0, r8
 800772e:	4798      	blx	r3
 8007730:	6923      	ldr	r3, [r4, #16]
 8007732:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007736:	3b01      	subs	r3, #1
 8007738:	1eb5      	subs	r5, r6, #2
 800773a:	6123      	str	r3, [r4, #16]
 800773c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007740:	463a      	mov	r2, r7
 8007742:	4640      	mov	r0, r8
 8007744:	4798      	blx	r3
 8007746:	462e      	mov	r6, r5
 8007748:	6822      	ldr	r2, [r4, #0]
 800774a:	f012 0210 	ands.w	r2, r2, #16
 800774e:	d001      	beq.n	8007754 <_scanf_float+0x370>
 8007750:	2000      	movs	r0, #0
 8007752:	e68b      	b.n	800746c <_scanf_float+0x88>
 8007754:	7032      	strb	r2, [r6, #0]
 8007756:	6823      	ldr	r3, [r4, #0]
 8007758:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800775c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007760:	d11c      	bne.n	800779c <_scanf_float+0x3b8>
 8007762:	9b02      	ldr	r3, [sp, #8]
 8007764:	454b      	cmp	r3, r9
 8007766:	eba3 0209 	sub.w	r2, r3, r9
 800776a:	d123      	bne.n	80077b4 <_scanf_float+0x3d0>
 800776c:	9901      	ldr	r1, [sp, #4]
 800776e:	2200      	movs	r2, #0
 8007770:	4640      	mov	r0, r8
 8007772:	f002 fd31 	bl	800a1d8 <_strtod_r>
 8007776:	9b03      	ldr	r3, [sp, #12]
 8007778:	6821      	ldr	r1, [r4, #0]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f011 0f02 	tst.w	r1, #2
 8007780:	ec57 6b10 	vmov	r6, r7, d0
 8007784:	f103 0204 	add.w	r2, r3, #4
 8007788:	d01f      	beq.n	80077ca <_scanf_float+0x3e6>
 800778a:	9903      	ldr	r1, [sp, #12]
 800778c:	600a      	str	r2, [r1, #0]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	e9c3 6700 	strd	r6, r7, [r3]
 8007794:	68e3      	ldr	r3, [r4, #12]
 8007796:	3301      	adds	r3, #1
 8007798:	60e3      	str	r3, [r4, #12]
 800779a:	e7d9      	b.n	8007750 <_scanf_float+0x36c>
 800779c:	9b04      	ldr	r3, [sp, #16]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d0e4      	beq.n	800776c <_scanf_float+0x388>
 80077a2:	9905      	ldr	r1, [sp, #20]
 80077a4:	230a      	movs	r3, #10
 80077a6:	3101      	adds	r1, #1
 80077a8:	4640      	mov	r0, r8
 80077aa:	f002 fd95 	bl	800a2d8 <_strtol_r>
 80077ae:	9b04      	ldr	r3, [sp, #16]
 80077b0:	9e05      	ldr	r6, [sp, #20]
 80077b2:	1ac2      	subs	r2, r0, r3
 80077b4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80077b8:	429e      	cmp	r6, r3
 80077ba:	bf28      	it	cs
 80077bc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80077c0:	4910      	ldr	r1, [pc, #64]	@ (8007804 <_scanf_float+0x420>)
 80077c2:	4630      	mov	r0, r6
 80077c4:	f000 f954 	bl	8007a70 <siprintf>
 80077c8:	e7d0      	b.n	800776c <_scanf_float+0x388>
 80077ca:	f011 0f04 	tst.w	r1, #4
 80077ce:	9903      	ldr	r1, [sp, #12]
 80077d0:	600a      	str	r2, [r1, #0]
 80077d2:	d1dc      	bne.n	800778e <_scanf_float+0x3aa>
 80077d4:	681d      	ldr	r5, [r3, #0]
 80077d6:	4632      	mov	r2, r6
 80077d8:	463b      	mov	r3, r7
 80077da:	4630      	mov	r0, r6
 80077dc:	4639      	mov	r1, r7
 80077de:	f7f9 f9a5 	bl	8000b2c <__aeabi_dcmpun>
 80077e2:	b128      	cbz	r0, 80077f0 <_scanf_float+0x40c>
 80077e4:	4808      	ldr	r0, [pc, #32]	@ (8007808 <_scanf_float+0x424>)
 80077e6:	f000 faef 	bl	8007dc8 <nanf>
 80077ea:	ed85 0a00 	vstr	s0, [r5]
 80077ee:	e7d1      	b.n	8007794 <_scanf_float+0x3b0>
 80077f0:	4630      	mov	r0, r6
 80077f2:	4639      	mov	r1, r7
 80077f4:	f7f9 f9f8 	bl	8000be8 <__aeabi_d2f>
 80077f8:	6028      	str	r0, [r5, #0]
 80077fa:	e7cb      	b.n	8007794 <_scanf_float+0x3b0>
 80077fc:	f04f 0900 	mov.w	r9, #0
 8007800:	e629      	b.n	8007456 <_scanf_float+0x72>
 8007802:	bf00      	nop
 8007804:	0801a76c 	.word	0x0801a76c
 8007808:	0801ab05 	.word	0x0801ab05

0800780c <std>:
 800780c:	2300      	movs	r3, #0
 800780e:	b510      	push	{r4, lr}
 8007810:	4604      	mov	r4, r0
 8007812:	e9c0 3300 	strd	r3, r3, [r0]
 8007816:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800781a:	6083      	str	r3, [r0, #8]
 800781c:	8181      	strh	r1, [r0, #12]
 800781e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007820:	81c2      	strh	r2, [r0, #14]
 8007822:	6183      	str	r3, [r0, #24]
 8007824:	4619      	mov	r1, r3
 8007826:	2208      	movs	r2, #8
 8007828:	305c      	adds	r0, #92	@ 0x5c
 800782a:	f000 fa19 	bl	8007c60 <memset>
 800782e:	4b0d      	ldr	r3, [pc, #52]	@ (8007864 <std+0x58>)
 8007830:	6263      	str	r3, [r4, #36]	@ 0x24
 8007832:	4b0d      	ldr	r3, [pc, #52]	@ (8007868 <std+0x5c>)
 8007834:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007836:	4b0d      	ldr	r3, [pc, #52]	@ (800786c <std+0x60>)
 8007838:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800783a:	4b0d      	ldr	r3, [pc, #52]	@ (8007870 <std+0x64>)
 800783c:	6323      	str	r3, [r4, #48]	@ 0x30
 800783e:	4b0d      	ldr	r3, [pc, #52]	@ (8007874 <std+0x68>)
 8007840:	6224      	str	r4, [r4, #32]
 8007842:	429c      	cmp	r4, r3
 8007844:	d006      	beq.n	8007854 <std+0x48>
 8007846:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800784a:	4294      	cmp	r4, r2
 800784c:	d002      	beq.n	8007854 <std+0x48>
 800784e:	33d0      	adds	r3, #208	@ 0xd0
 8007850:	429c      	cmp	r4, r3
 8007852:	d105      	bne.n	8007860 <std+0x54>
 8007854:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800785c:	f000 baa2 	b.w	8007da4 <__retarget_lock_init_recursive>
 8007860:	bd10      	pop	{r4, pc}
 8007862:	bf00      	nop
 8007864:	08007ab1 	.word	0x08007ab1
 8007868:	08007ad3 	.word	0x08007ad3
 800786c:	08007b0b 	.word	0x08007b0b
 8007870:	08007b2f 	.word	0x08007b2f
 8007874:	200007f0 	.word	0x200007f0

08007878 <stdio_exit_handler>:
 8007878:	4a02      	ldr	r2, [pc, #8]	@ (8007884 <stdio_exit_handler+0xc>)
 800787a:	4903      	ldr	r1, [pc, #12]	@ (8007888 <stdio_exit_handler+0x10>)
 800787c:	4803      	ldr	r0, [pc, #12]	@ (800788c <stdio_exit_handler+0x14>)
 800787e:	f000 b869 	b.w	8007954 <_fwalk_sglue>
 8007882:	bf00      	nop
 8007884:	20000024 	.word	0x20000024
 8007888:	0800a919 	.word	0x0800a919
 800788c:	20000034 	.word	0x20000034

08007890 <cleanup_stdio>:
 8007890:	6841      	ldr	r1, [r0, #4]
 8007892:	4b0c      	ldr	r3, [pc, #48]	@ (80078c4 <cleanup_stdio+0x34>)
 8007894:	4299      	cmp	r1, r3
 8007896:	b510      	push	{r4, lr}
 8007898:	4604      	mov	r4, r0
 800789a:	d001      	beq.n	80078a0 <cleanup_stdio+0x10>
 800789c:	f003 f83c 	bl	800a918 <_fflush_r>
 80078a0:	68a1      	ldr	r1, [r4, #8]
 80078a2:	4b09      	ldr	r3, [pc, #36]	@ (80078c8 <cleanup_stdio+0x38>)
 80078a4:	4299      	cmp	r1, r3
 80078a6:	d002      	beq.n	80078ae <cleanup_stdio+0x1e>
 80078a8:	4620      	mov	r0, r4
 80078aa:	f003 f835 	bl	800a918 <_fflush_r>
 80078ae:	68e1      	ldr	r1, [r4, #12]
 80078b0:	4b06      	ldr	r3, [pc, #24]	@ (80078cc <cleanup_stdio+0x3c>)
 80078b2:	4299      	cmp	r1, r3
 80078b4:	d004      	beq.n	80078c0 <cleanup_stdio+0x30>
 80078b6:	4620      	mov	r0, r4
 80078b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078bc:	f003 b82c 	b.w	800a918 <_fflush_r>
 80078c0:	bd10      	pop	{r4, pc}
 80078c2:	bf00      	nop
 80078c4:	200007f0 	.word	0x200007f0
 80078c8:	20000858 	.word	0x20000858
 80078cc:	200008c0 	.word	0x200008c0

080078d0 <global_stdio_init.part.0>:
 80078d0:	b510      	push	{r4, lr}
 80078d2:	4b0b      	ldr	r3, [pc, #44]	@ (8007900 <global_stdio_init.part.0+0x30>)
 80078d4:	4c0b      	ldr	r4, [pc, #44]	@ (8007904 <global_stdio_init.part.0+0x34>)
 80078d6:	4a0c      	ldr	r2, [pc, #48]	@ (8007908 <global_stdio_init.part.0+0x38>)
 80078d8:	601a      	str	r2, [r3, #0]
 80078da:	4620      	mov	r0, r4
 80078dc:	2200      	movs	r2, #0
 80078de:	2104      	movs	r1, #4
 80078e0:	f7ff ff94 	bl	800780c <std>
 80078e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80078e8:	2201      	movs	r2, #1
 80078ea:	2109      	movs	r1, #9
 80078ec:	f7ff ff8e 	bl	800780c <std>
 80078f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80078f4:	2202      	movs	r2, #2
 80078f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078fa:	2112      	movs	r1, #18
 80078fc:	f7ff bf86 	b.w	800780c <std>
 8007900:	20000928 	.word	0x20000928
 8007904:	200007f0 	.word	0x200007f0
 8007908:	08007879 	.word	0x08007879

0800790c <__sfp_lock_acquire>:
 800790c:	4801      	ldr	r0, [pc, #4]	@ (8007914 <__sfp_lock_acquire+0x8>)
 800790e:	f000 ba4a 	b.w	8007da6 <__retarget_lock_acquire_recursive>
 8007912:	bf00      	nop
 8007914:	20000931 	.word	0x20000931

08007918 <__sfp_lock_release>:
 8007918:	4801      	ldr	r0, [pc, #4]	@ (8007920 <__sfp_lock_release+0x8>)
 800791a:	f000 ba45 	b.w	8007da8 <__retarget_lock_release_recursive>
 800791e:	bf00      	nop
 8007920:	20000931 	.word	0x20000931

08007924 <__sinit>:
 8007924:	b510      	push	{r4, lr}
 8007926:	4604      	mov	r4, r0
 8007928:	f7ff fff0 	bl	800790c <__sfp_lock_acquire>
 800792c:	6a23      	ldr	r3, [r4, #32]
 800792e:	b11b      	cbz	r3, 8007938 <__sinit+0x14>
 8007930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007934:	f7ff bff0 	b.w	8007918 <__sfp_lock_release>
 8007938:	4b04      	ldr	r3, [pc, #16]	@ (800794c <__sinit+0x28>)
 800793a:	6223      	str	r3, [r4, #32]
 800793c:	4b04      	ldr	r3, [pc, #16]	@ (8007950 <__sinit+0x2c>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d1f5      	bne.n	8007930 <__sinit+0xc>
 8007944:	f7ff ffc4 	bl	80078d0 <global_stdio_init.part.0>
 8007948:	e7f2      	b.n	8007930 <__sinit+0xc>
 800794a:	bf00      	nop
 800794c:	08007891 	.word	0x08007891
 8007950:	20000928 	.word	0x20000928

08007954 <_fwalk_sglue>:
 8007954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007958:	4607      	mov	r7, r0
 800795a:	4688      	mov	r8, r1
 800795c:	4614      	mov	r4, r2
 800795e:	2600      	movs	r6, #0
 8007960:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007964:	f1b9 0901 	subs.w	r9, r9, #1
 8007968:	d505      	bpl.n	8007976 <_fwalk_sglue+0x22>
 800796a:	6824      	ldr	r4, [r4, #0]
 800796c:	2c00      	cmp	r4, #0
 800796e:	d1f7      	bne.n	8007960 <_fwalk_sglue+0xc>
 8007970:	4630      	mov	r0, r6
 8007972:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007976:	89ab      	ldrh	r3, [r5, #12]
 8007978:	2b01      	cmp	r3, #1
 800797a:	d907      	bls.n	800798c <_fwalk_sglue+0x38>
 800797c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007980:	3301      	adds	r3, #1
 8007982:	d003      	beq.n	800798c <_fwalk_sglue+0x38>
 8007984:	4629      	mov	r1, r5
 8007986:	4638      	mov	r0, r7
 8007988:	47c0      	blx	r8
 800798a:	4306      	orrs	r6, r0
 800798c:	3568      	adds	r5, #104	@ 0x68
 800798e:	e7e9      	b.n	8007964 <_fwalk_sglue+0x10>

08007990 <iprintf>:
 8007990:	b40f      	push	{r0, r1, r2, r3}
 8007992:	b507      	push	{r0, r1, r2, lr}
 8007994:	4906      	ldr	r1, [pc, #24]	@ (80079b0 <iprintf+0x20>)
 8007996:	ab04      	add	r3, sp, #16
 8007998:	6808      	ldr	r0, [r1, #0]
 800799a:	f853 2b04 	ldr.w	r2, [r3], #4
 800799e:	6881      	ldr	r1, [r0, #8]
 80079a0:	9301      	str	r3, [sp, #4]
 80079a2:	f002 fe1d 	bl	800a5e0 <_vfiprintf_r>
 80079a6:	b003      	add	sp, #12
 80079a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80079ac:	b004      	add	sp, #16
 80079ae:	4770      	bx	lr
 80079b0:	20000030 	.word	0x20000030

080079b4 <_puts_r>:
 80079b4:	6a03      	ldr	r3, [r0, #32]
 80079b6:	b570      	push	{r4, r5, r6, lr}
 80079b8:	6884      	ldr	r4, [r0, #8]
 80079ba:	4605      	mov	r5, r0
 80079bc:	460e      	mov	r6, r1
 80079be:	b90b      	cbnz	r3, 80079c4 <_puts_r+0x10>
 80079c0:	f7ff ffb0 	bl	8007924 <__sinit>
 80079c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80079c6:	07db      	lsls	r3, r3, #31
 80079c8:	d405      	bmi.n	80079d6 <_puts_r+0x22>
 80079ca:	89a3      	ldrh	r3, [r4, #12]
 80079cc:	0598      	lsls	r0, r3, #22
 80079ce:	d402      	bmi.n	80079d6 <_puts_r+0x22>
 80079d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80079d2:	f000 f9e8 	bl	8007da6 <__retarget_lock_acquire_recursive>
 80079d6:	89a3      	ldrh	r3, [r4, #12]
 80079d8:	0719      	lsls	r1, r3, #28
 80079da:	d502      	bpl.n	80079e2 <_puts_r+0x2e>
 80079dc:	6923      	ldr	r3, [r4, #16]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d135      	bne.n	8007a4e <_puts_r+0x9a>
 80079e2:	4621      	mov	r1, r4
 80079e4:	4628      	mov	r0, r5
 80079e6:	f000 f8e5 	bl	8007bb4 <__swsetup_r>
 80079ea:	b380      	cbz	r0, 8007a4e <_puts_r+0x9a>
 80079ec:	f04f 35ff 	mov.w	r5, #4294967295
 80079f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80079f2:	07da      	lsls	r2, r3, #31
 80079f4:	d405      	bmi.n	8007a02 <_puts_r+0x4e>
 80079f6:	89a3      	ldrh	r3, [r4, #12]
 80079f8:	059b      	lsls	r3, r3, #22
 80079fa:	d402      	bmi.n	8007a02 <_puts_r+0x4e>
 80079fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80079fe:	f000 f9d3 	bl	8007da8 <__retarget_lock_release_recursive>
 8007a02:	4628      	mov	r0, r5
 8007a04:	bd70      	pop	{r4, r5, r6, pc}
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	da04      	bge.n	8007a14 <_puts_r+0x60>
 8007a0a:	69a2      	ldr	r2, [r4, #24]
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	dc17      	bgt.n	8007a40 <_puts_r+0x8c>
 8007a10:	290a      	cmp	r1, #10
 8007a12:	d015      	beq.n	8007a40 <_puts_r+0x8c>
 8007a14:	6823      	ldr	r3, [r4, #0]
 8007a16:	1c5a      	adds	r2, r3, #1
 8007a18:	6022      	str	r2, [r4, #0]
 8007a1a:	7019      	strb	r1, [r3, #0]
 8007a1c:	68a3      	ldr	r3, [r4, #8]
 8007a1e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007a22:	3b01      	subs	r3, #1
 8007a24:	60a3      	str	r3, [r4, #8]
 8007a26:	2900      	cmp	r1, #0
 8007a28:	d1ed      	bne.n	8007a06 <_puts_r+0x52>
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	da11      	bge.n	8007a52 <_puts_r+0x9e>
 8007a2e:	4622      	mov	r2, r4
 8007a30:	210a      	movs	r1, #10
 8007a32:	4628      	mov	r0, r5
 8007a34:	f000 f87f 	bl	8007b36 <__swbuf_r>
 8007a38:	3001      	adds	r0, #1
 8007a3a:	d0d7      	beq.n	80079ec <_puts_r+0x38>
 8007a3c:	250a      	movs	r5, #10
 8007a3e:	e7d7      	b.n	80079f0 <_puts_r+0x3c>
 8007a40:	4622      	mov	r2, r4
 8007a42:	4628      	mov	r0, r5
 8007a44:	f000 f877 	bl	8007b36 <__swbuf_r>
 8007a48:	3001      	adds	r0, #1
 8007a4a:	d1e7      	bne.n	8007a1c <_puts_r+0x68>
 8007a4c:	e7ce      	b.n	80079ec <_puts_r+0x38>
 8007a4e:	3e01      	subs	r6, #1
 8007a50:	e7e4      	b.n	8007a1c <_puts_r+0x68>
 8007a52:	6823      	ldr	r3, [r4, #0]
 8007a54:	1c5a      	adds	r2, r3, #1
 8007a56:	6022      	str	r2, [r4, #0]
 8007a58:	220a      	movs	r2, #10
 8007a5a:	701a      	strb	r2, [r3, #0]
 8007a5c:	e7ee      	b.n	8007a3c <_puts_r+0x88>
	...

08007a60 <puts>:
 8007a60:	4b02      	ldr	r3, [pc, #8]	@ (8007a6c <puts+0xc>)
 8007a62:	4601      	mov	r1, r0
 8007a64:	6818      	ldr	r0, [r3, #0]
 8007a66:	f7ff bfa5 	b.w	80079b4 <_puts_r>
 8007a6a:	bf00      	nop
 8007a6c:	20000030 	.word	0x20000030

08007a70 <siprintf>:
 8007a70:	b40e      	push	{r1, r2, r3}
 8007a72:	b500      	push	{lr}
 8007a74:	b09c      	sub	sp, #112	@ 0x70
 8007a76:	ab1d      	add	r3, sp, #116	@ 0x74
 8007a78:	9002      	str	r0, [sp, #8]
 8007a7a:	9006      	str	r0, [sp, #24]
 8007a7c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007a80:	4809      	ldr	r0, [pc, #36]	@ (8007aa8 <siprintf+0x38>)
 8007a82:	9107      	str	r1, [sp, #28]
 8007a84:	9104      	str	r1, [sp, #16]
 8007a86:	4909      	ldr	r1, [pc, #36]	@ (8007aac <siprintf+0x3c>)
 8007a88:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a8c:	9105      	str	r1, [sp, #20]
 8007a8e:	6800      	ldr	r0, [r0, #0]
 8007a90:	9301      	str	r3, [sp, #4]
 8007a92:	a902      	add	r1, sp, #8
 8007a94:	f002 fc7e 	bl	800a394 <_svfiprintf_r>
 8007a98:	9b02      	ldr	r3, [sp, #8]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	701a      	strb	r2, [r3, #0]
 8007a9e:	b01c      	add	sp, #112	@ 0x70
 8007aa0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007aa4:	b003      	add	sp, #12
 8007aa6:	4770      	bx	lr
 8007aa8:	20000030 	.word	0x20000030
 8007aac:	ffff0208 	.word	0xffff0208

08007ab0 <__sread>:
 8007ab0:	b510      	push	{r4, lr}
 8007ab2:	460c      	mov	r4, r1
 8007ab4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ab8:	f000 f926 	bl	8007d08 <_read_r>
 8007abc:	2800      	cmp	r0, #0
 8007abe:	bfab      	itete	ge
 8007ac0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007ac2:	89a3      	ldrhlt	r3, [r4, #12]
 8007ac4:	181b      	addge	r3, r3, r0
 8007ac6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007aca:	bfac      	ite	ge
 8007acc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007ace:	81a3      	strhlt	r3, [r4, #12]
 8007ad0:	bd10      	pop	{r4, pc}

08007ad2 <__swrite>:
 8007ad2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ad6:	461f      	mov	r7, r3
 8007ad8:	898b      	ldrh	r3, [r1, #12]
 8007ada:	05db      	lsls	r3, r3, #23
 8007adc:	4605      	mov	r5, r0
 8007ade:	460c      	mov	r4, r1
 8007ae0:	4616      	mov	r6, r2
 8007ae2:	d505      	bpl.n	8007af0 <__swrite+0x1e>
 8007ae4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ae8:	2302      	movs	r3, #2
 8007aea:	2200      	movs	r2, #0
 8007aec:	f000 f8fa 	bl	8007ce4 <_lseek_r>
 8007af0:	89a3      	ldrh	r3, [r4, #12]
 8007af2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007af6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007afa:	81a3      	strh	r3, [r4, #12]
 8007afc:	4632      	mov	r2, r6
 8007afe:	463b      	mov	r3, r7
 8007b00:	4628      	mov	r0, r5
 8007b02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b06:	f000 b911 	b.w	8007d2c <_write_r>

08007b0a <__sseek>:
 8007b0a:	b510      	push	{r4, lr}
 8007b0c:	460c      	mov	r4, r1
 8007b0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b12:	f000 f8e7 	bl	8007ce4 <_lseek_r>
 8007b16:	1c43      	adds	r3, r0, #1
 8007b18:	89a3      	ldrh	r3, [r4, #12]
 8007b1a:	bf15      	itete	ne
 8007b1c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007b1e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007b22:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007b26:	81a3      	strheq	r3, [r4, #12]
 8007b28:	bf18      	it	ne
 8007b2a:	81a3      	strhne	r3, [r4, #12]
 8007b2c:	bd10      	pop	{r4, pc}

08007b2e <__sclose>:
 8007b2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b32:	f000 b8c7 	b.w	8007cc4 <_close_r>

08007b36 <__swbuf_r>:
 8007b36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b38:	460e      	mov	r6, r1
 8007b3a:	4614      	mov	r4, r2
 8007b3c:	4605      	mov	r5, r0
 8007b3e:	b118      	cbz	r0, 8007b48 <__swbuf_r+0x12>
 8007b40:	6a03      	ldr	r3, [r0, #32]
 8007b42:	b90b      	cbnz	r3, 8007b48 <__swbuf_r+0x12>
 8007b44:	f7ff feee 	bl	8007924 <__sinit>
 8007b48:	69a3      	ldr	r3, [r4, #24]
 8007b4a:	60a3      	str	r3, [r4, #8]
 8007b4c:	89a3      	ldrh	r3, [r4, #12]
 8007b4e:	071a      	lsls	r2, r3, #28
 8007b50:	d501      	bpl.n	8007b56 <__swbuf_r+0x20>
 8007b52:	6923      	ldr	r3, [r4, #16]
 8007b54:	b943      	cbnz	r3, 8007b68 <__swbuf_r+0x32>
 8007b56:	4621      	mov	r1, r4
 8007b58:	4628      	mov	r0, r5
 8007b5a:	f000 f82b 	bl	8007bb4 <__swsetup_r>
 8007b5e:	b118      	cbz	r0, 8007b68 <__swbuf_r+0x32>
 8007b60:	f04f 37ff 	mov.w	r7, #4294967295
 8007b64:	4638      	mov	r0, r7
 8007b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b68:	6823      	ldr	r3, [r4, #0]
 8007b6a:	6922      	ldr	r2, [r4, #16]
 8007b6c:	1a98      	subs	r0, r3, r2
 8007b6e:	6963      	ldr	r3, [r4, #20]
 8007b70:	b2f6      	uxtb	r6, r6
 8007b72:	4283      	cmp	r3, r0
 8007b74:	4637      	mov	r7, r6
 8007b76:	dc05      	bgt.n	8007b84 <__swbuf_r+0x4e>
 8007b78:	4621      	mov	r1, r4
 8007b7a:	4628      	mov	r0, r5
 8007b7c:	f002 fecc 	bl	800a918 <_fflush_r>
 8007b80:	2800      	cmp	r0, #0
 8007b82:	d1ed      	bne.n	8007b60 <__swbuf_r+0x2a>
 8007b84:	68a3      	ldr	r3, [r4, #8]
 8007b86:	3b01      	subs	r3, #1
 8007b88:	60a3      	str	r3, [r4, #8]
 8007b8a:	6823      	ldr	r3, [r4, #0]
 8007b8c:	1c5a      	adds	r2, r3, #1
 8007b8e:	6022      	str	r2, [r4, #0]
 8007b90:	701e      	strb	r6, [r3, #0]
 8007b92:	6962      	ldr	r2, [r4, #20]
 8007b94:	1c43      	adds	r3, r0, #1
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d004      	beq.n	8007ba4 <__swbuf_r+0x6e>
 8007b9a:	89a3      	ldrh	r3, [r4, #12]
 8007b9c:	07db      	lsls	r3, r3, #31
 8007b9e:	d5e1      	bpl.n	8007b64 <__swbuf_r+0x2e>
 8007ba0:	2e0a      	cmp	r6, #10
 8007ba2:	d1df      	bne.n	8007b64 <__swbuf_r+0x2e>
 8007ba4:	4621      	mov	r1, r4
 8007ba6:	4628      	mov	r0, r5
 8007ba8:	f002 feb6 	bl	800a918 <_fflush_r>
 8007bac:	2800      	cmp	r0, #0
 8007bae:	d0d9      	beq.n	8007b64 <__swbuf_r+0x2e>
 8007bb0:	e7d6      	b.n	8007b60 <__swbuf_r+0x2a>
	...

08007bb4 <__swsetup_r>:
 8007bb4:	b538      	push	{r3, r4, r5, lr}
 8007bb6:	4b29      	ldr	r3, [pc, #164]	@ (8007c5c <__swsetup_r+0xa8>)
 8007bb8:	4605      	mov	r5, r0
 8007bba:	6818      	ldr	r0, [r3, #0]
 8007bbc:	460c      	mov	r4, r1
 8007bbe:	b118      	cbz	r0, 8007bc8 <__swsetup_r+0x14>
 8007bc0:	6a03      	ldr	r3, [r0, #32]
 8007bc2:	b90b      	cbnz	r3, 8007bc8 <__swsetup_r+0x14>
 8007bc4:	f7ff feae 	bl	8007924 <__sinit>
 8007bc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bcc:	0719      	lsls	r1, r3, #28
 8007bce:	d422      	bmi.n	8007c16 <__swsetup_r+0x62>
 8007bd0:	06da      	lsls	r2, r3, #27
 8007bd2:	d407      	bmi.n	8007be4 <__swsetup_r+0x30>
 8007bd4:	2209      	movs	r2, #9
 8007bd6:	602a      	str	r2, [r5, #0]
 8007bd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007bdc:	81a3      	strh	r3, [r4, #12]
 8007bde:	f04f 30ff 	mov.w	r0, #4294967295
 8007be2:	e033      	b.n	8007c4c <__swsetup_r+0x98>
 8007be4:	0758      	lsls	r0, r3, #29
 8007be6:	d512      	bpl.n	8007c0e <__swsetup_r+0x5a>
 8007be8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007bea:	b141      	cbz	r1, 8007bfe <__swsetup_r+0x4a>
 8007bec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007bf0:	4299      	cmp	r1, r3
 8007bf2:	d002      	beq.n	8007bfa <__swsetup_r+0x46>
 8007bf4:	4628      	mov	r0, r5
 8007bf6:	f000 ff3b 	bl	8008a70 <_free_r>
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	6363      	str	r3, [r4, #52]	@ 0x34
 8007bfe:	89a3      	ldrh	r3, [r4, #12]
 8007c00:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007c04:	81a3      	strh	r3, [r4, #12]
 8007c06:	2300      	movs	r3, #0
 8007c08:	6063      	str	r3, [r4, #4]
 8007c0a:	6923      	ldr	r3, [r4, #16]
 8007c0c:	6023      	str	r3, [r4, #0]
 8007c0e:	89a3      	ldrh	r3, [r4, #12]
 8007c10:	f043 0308 	orr.w	r3, r3, #8
 8007c14:	81a3      	strh	r3, [r4, #12]
 8007c16:	6923      	ldr	r3, [r4, #16]
 8007c18:	b94b      	cbnz	r3, 8007c2e <__swsetup_r+0x7a>
 8007c1a:	89a3      	ldrh	r3, [r4, #12]
 8007c1c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007c20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c24:	d003      	beq.n	8007c2e <__swsetup_r+0x7a>
 8007c26:	4621      	mov	r1, r4
 8007c28:	4628      	mov	r0, r5
 8007c2a:	f002 fec3 	bl	800a9b4 <__smakebuf_r>
 8007c2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c32:	f013 0201 	ands.w	r2, r3, #1
 8007c36:	d00a      	beq.n	8007c4e <__swsetup_r+0x9a>
 8007c38:	2200      	movs	r2, #0
 8007c3a:	60a2      	str	r2, [r4, #8]
 8007c3c:	6962      	ldr	r2, [r4, #20]
 8007c3e:	4252      	negs	r2, r2
 8007c40:	61a2      	str	r2, [r4, #24]
 8007c42:	6922      	ldr	r2, [r4, #16]
 8007c44:	b942      	cbnz	r2, 8007c58 <__swsetup_r+0xa4>
 8007c46:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007c4a:	d1c5      	bne.n	8007bd8 <__swsetup_r+0x24>
 8007c4c:	bd38      	pop	{r3, r4, r5, pc}
 8007c4e:	0799      	lsls	r1, r3, #30
 8007c50:	bf58      	it	pl
 8007c52:	6962      	ldrpl	r2, [r4, #20]
 8007c54:	60a2      	str	r2, [r4, #8]
 8007c56:	e7f4      	b.n	8007c42 <__swsetup_r+0x8e>
 8007c58:	2000      	movs	r0, #0
 8007c5a:	e7f7      	b.n	8007c4c <__swsetup_r+0x98>
 8007c5c:	20000030 	.word	0x20000030

08007c60 <memset>:
 8007c60:	4402      	add	r2, r0
 8007c62:	4603      	mov	r3, r0
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d100      	bne.n	8007c6a <memset+0xa>
 8007c68:	4770      	bx	lr
 8007c6a:	f803 1b01 	strb.w	r1, [r3], #1
 8007c6e:	e7f9      	b.n	8007c64 <memset+0x4>

08007c70 <strcat>:
 8007c70:	b510      	push	{r4, lr}
 8007c72:	4602      	mov	r2, r0
 8007c74:	7814      	ldrb	r4, [r2, #0]
 8007c76:	4613      	mov	r3, r2
 8007c78:	3201      	adds	r2, #1
 8007c7a:	2c00      	cmp	r4, #0
 8007c7c:	d1fa      	bne.n	8007c74 <strcat+0x4>
 8007c7e:	3b01      	subs	r3, #1
 8007c80:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c84:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007c88:	2a00      	cmp	r2, #0
 8007c8a:	d1f9      	bne.n	8007c80 <strcat+0x10>
 8007c8c:	bd10      	pop	{r4, pc}

08007c8e <strstr>:
 8007c8e:	780a      	ldrb	r2, [r1, #0]
 8007c90:	b570      	push	{r4, r5, r6, lr}
 8007c92:	b96a      	cbnz	r2, 8007cb0 <strstr+0x22>
 8007c94:	bd70      	pop	{r4, r5, r6, pc}
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d109      	bne.n	8007cae <strstr+0x20>
 8007c9a:	460c      	mov	r4, r1
 8007c9c:	4605      	mov	r5, r0
 8007c9e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d0f6      	beq.n	8007c94 <strstr+0x6>
 8007ca6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007caa:	429e      	cmp	r6, r3
 8007cac:	d0f7      	beq.n	8007c9e <strstr+0x10>
 8007cae:	3001      	adds	r0, #1
 8007cb0:	7803      	ldrb	r3, [r0, #0]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d1ef      	bne.n	8007c96 <strstr+0x8>
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	e7ec      	b.n	8007c94 <strstr+0x6>
	...

08007cbc <_localeconv_r>:
 8007cbc:	4800      	ldr	r0, [pc, #0]	@ (8007cc0 <_localeconv_r+0x4>)
 8007cbe:	4770      	bx	lr
 8007cc0:	20000170 	.word	0x20000170

08007cc4 <_close_r>:
 8007cc4:	b538      	push	{r3, r4, r5, lr}
 8007cc6:	4d06      	ldr	r5, [pc, #24]	@ (8007ce0 <_close_r+0x1c>)
 8007cc8:	2300      	movs	r3, #0
 8007cca:	4604      	mov	r4, r0
 8007ccc:	4608      	mov	r0, r1
 8007cce:	602b      	str	r3, [r5, #0]
 8007cd0:	f7fa f884 	bl	8001ddc <_close>
 8007cd4:	1c43      	adds	r3, r0, #1
 8007cd6:	d102      	bne.n	8007cde <_close_r+0x1a>
 8007cd8:	682b      	ldr	r3, [r5, #0]
 8007cda:	b103      	cbz	r3, 8007cde <_close_r+0x1a>
 8007cdc:	6023      	str	r3, [r4, #0]
 8007cde:	bd38      	pop	{r3, r4, r5, pc}
 8007ce0:	2000092c 	.word	0x2000092c

08007ce4 <_lseek_r>:
 8007ce4:	b538      	push	{r3, r4, r5, lr}
 8007ce6:	4d07      	ldr	r5, [pc, #28]	@ (8007d04 <_lseek_r+0x20>)
 8007ce8:	4604      	mov	r4, r0
 8007cea:	4608      	mov	r0, r1
 8007cec:	4611      	mov	r1, r2
 8007cee:	2200      	movs	r2, #0
 8007cf0:	602a      	str	r2, [r5, #0]
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	f7fa f899 	bl	8001e2a <_lseek>
 8007cf8:	1c43      	adds	r3, r0, #1
 8007cfa:	d102      	bne.n	8007d02 <_lseek_r+0x1e>
 8007cfc:	682b      	ldr	r3, [r5, #0]
 8007cfe:	b103      	cbz	r3, 8007d02 <_lseek_r+0x1e>
 8007d00:	6023      	str	r3, [r4, #0]
 8007d02:	bd38      	pop	{r3, r4, r5, pc}
 8007d04:	2000092c 	.word	0x2000092c

08007d08 <_read_r>:
 8007d08:	b538      	push	{r3, r4, r5, lr}
 8007d0a:	4d07      	ldr	r5, [pc, #28]	@ (8007d28 <_read_r+0x20>)
 8007d0c:	4604      	mov	r4, r0
 8007d0e:	4608      	mov	r0, r1
 8007d10:	4611      	mov	r1, r2
 8007d12:	2200      	movs	r2, #0
 8007d14:	602a      	str	r2, [r5, #0]
 8007d16:	461a      	mov	r2, r3
 8007d18:	f7fa f827 	bl	8001d6a <_read>
 8007d1c:	1c43      	adds	r3, r0, #1
 8007d1e:	d102      	bne.n	8007d26 <_read_r+0x1e>
 8007d20:	682b      	ldr	r3, [r5, #0]
 8007d22:	b103      	cbz	r3, 8007d26 <_read_r+0x1e>
 8007d24:	6023      	str	r3, [r4, #0]
 8007d26:	bd38      	pop	{r3, r4, r5, pc}
 8007d28:	2000092c 	.word	0x2000092c

08007d2c <_write_r>:
 8007d2c:	b538      	push	{r3, r4, r5, lr}
 8007d2e:	4d07      	ldr	r5, [pc, #28]	@ (8007d4c <_write_r+0x20>)
 8007d30:	4604      	mov	r4, r0
 8007d32:	4608      	mov	r0, r1
 8007d34:	4611      	mov	r1, r2
 8007d36:	2200      	movs	r2, #0
 8007d38:	602a      	str	r2, [r5, #0]
 8007d3a:	461a      	mov	r2, r3
 8007d3c:	f7fa f832 	bl	8001da4 <_write>
 8007d40:	1c43      	adds	r3, r0, #1
 8007d42:	d102      	bne.n	8007d4a <_write_r+0x1e>
 8007d44:	682b      	ldr	r3, [r5, #0]
 8007d46:	b103      	cbz	r3, 8007d4a <_write_r+0x1e>
 8007d48:	6023      	str	r3, [r4, #0]
 8007d4a:	bd38      	pop	{r3, r4, r5, pc}
 8007d4c:	2000092c 	.word	0x2000092c

08007d50 <__errno>:
 8007d50:	4b01      	ldr	r3, [pc, #4]	@ (8007d58 <__errno+0x8>)
 8007d52:	6818      	ldr	r0, [r3, #0]
 8007d54:	4770      	bx	lr
 8007d56:	bf00      	nop
 8007d58:	20000030 	.word	0x20000030

08007d5c <__libc_init_array>:
 8007d5c:	b570      	push	{r4, r5, r6, lr}
 8007d5e:	4d0d      	ldr	r5, [pc, #52]	@ (8007d94 <__libc_init_array+0x38>)
 8007d60:	4c0d      	ldr	r4, [pc, #52]	@ (8007d98 <__libc_init_array+0x3c>)
 8007d62:	1b64      	subs	r4, r4, r5
 8007d64:	10a4      	asrs	r4, r4, #2
 8007d66:	2600      	movs	r6, #0
 8007d68:	42a6      	cmp	r6, r4
 8007d6a:	d109      	bne.n	8007d80 <__libc_init_array+0x24>
 8007d6c:	4d0b      	ldr	r5, [pc, #44]	@ (8007d9c <__libc_init_array+0x40>)
 8007d6e:	4c0c      	ldr	r4, [pc, #48]	@ (8007da0 <__libc_init_array+0x44>)
 8007d70:	f003 fae0 	bl	800b334 <_init>
 8007d74:	1b64      	subs	r4, r4, r5
 8007d76:	10a4      	asrs	r4, r4, #2
 8007d78:	2600      	movs	r6, #0
 8007d7a:	42a6      	cmp	r6, r4
 8007d7c:	d105      	bne.n	8007d8a <__libc_init_array+0x2e>
 8007d7e:	bd70      	pop	{r4, r5, r6, pc}
 8007d80:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d84:	4798      	blx	r3
 8007d86:	3601      	adds	r6, #1
 8007d88:	e7ee      	b.n	8007d68 <__libc_init_array+0xc>
 8007d8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d8e:	4798      	blx	r3
 8007d90:	3601      	adds	r6, #1
 8007d92:	e7f2      	b.n	8007d7a <__libc_init_array+0x1e>
 8007d94:	0801ab70 	.word	0x0801ab70
 8007d98:	0801ab70 	.word	0x0801ab70
 8007d9c:	0801ab70 	.word	0x0801ab70
 8007da0:	0801ab74 	.word	0x0801ab74

08007da4 <__retarget_lock_init_recursive>:
 8007da4:	4770      	bx	lr

08007da6 <__retarget_lock_acquire_recursive>:
 8007da6:	4770      	bx	lr

08007da8 <__retarget_lock_release_recursive>:
 8007da8:	4770      	bx	lr

08007daa <memcpy>:
 8007daa:	440a      	add	r2, r1
 8007dac:	4291      	cmp	r1, r2
 8007dae:	f100 33ff 	add.w	r3, r0, #4294967295
 8007db2:	d100      	bne.n	8007db6 <memcpy+0xc>
 8007db4:	4770      	bx	lr
 8007db6:	b510      	push	{r4, lr}
 8007db8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007dbc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007dc0:	4291      	cmp	r1, r2
 8007dc2:	d1f9      	bne.n	8007db8 <memcpy+0xe>
 8007dc4:	bd10      	pop	{r4, pc}
	...

08007dc8 <nanf>:
 8007dc8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007dd0 <nanf+0x8>
 8007dcc:	4770      	bx	lr
 8007dce:	bf00      	nop
 8007dd0:	7fc00000 	.word	0x7fc00000

08007dd4 <quorem>:
 8007dd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dd8:	6903      	ldr	r3, [r0, #16]
 8007dda:	690c      	ldr	r4, [r1, #16]
 8007ddc:	42a3      	cmp	r3, r4
 8007dde:	4607      	mov	r7, r0
 8007de0:	db7e      	blt.n	8007ee0 <quorem+0x10c>
 8007de2:	3c01      	subs	r4, #1
 8007de4:	f101 0814 	add.w	r8, r1, #20
 8007de8:	00a3      	lsls	r3, r4, #2
 8007dea:	f100 0514 	add.w	r5, r0, #20
 8007dee:	9300      	str	r3, [sp, #0]
 8007df0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007df4:	9301      	str	r3, [sp, #4]
 8007df6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007dfa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007dfe:	3301      	adds	r3, #1
 8007e00:	429a      	cmp	r2, r3
 8007e02:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007e06:	fbb2 f6f3 	udiv	r6, r2, r3
 8007e0a:	d32e      	bcc.n	8007e6a <quorem+0x96>
 8007e0c:	f04f 0a00 	mov.w	sl, #0
 8007e10:	46c4      	mov	ip, r8
 8007e12:	46ae      	mov	lr, r5
 8007e14:	46d3      	mov	fp, sl
 8007e16:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007e1a:	b298      	uxth	r0, r3
 8007e1c:	fb06 a000 	mla	r0, r6, r0, sl
 8007e20:	0c02      	lsrs	r2, r0, #16
 8007e22:	0c1b      	lsrs	r3, r3, #16
 8007e24:	fb06 2303 	mla	r3, r6, r3, r2
 8007e28:	f8de 2000 	ldr.w	r2, [lr]
 8007e2c:	b280      	uxth	r0, r0
 8007e2e:	b292      	uxth	r2, r2
 8007e30:	1a12      	subs	r2, r2, r0
 8007e32:	445a      	add	r2, fp
 8007e34:	f8de 0000 	ldr.w	r0, [lr]
 8007e38:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007e42:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007e46:	b292      	uxth	r2, r2
 8007e48:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007e4c:	45e1      	cmp	r9, ip
 8007e4e:	f84e 2b04 	str.w	r2, [lr], #4
 8007e52:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007e56:	d2de      	bcs.n	8007e16 <quorem+0x42>
 8007e58:	9b00      	ldr	r3, [sp, #0]
 8007e5a:	58eb      	ldr	r3, [r5, r3]
 8007e5c:	b92b      	cbnz	r3, 8007e6a <quorem+0x96>
 8007e5e:	9b01      	ldr	r3, [sp, #4]
 8007e60:	3b04      	subs	r3, #4
 8007e62:	429d      	cmp	r5, r3
 8007e64:	461a      	mov	r2, r3
 8007e66:	d32f      	bcc.n	8007ec8 <quorem+0xf4>
 8007e68:	613c      	str	r4, [r7, #16]
 8007e6a:	4638      	mov	r0, r7
 8007e6c:	f001 f9c4 	bl	80091f8 <__mcmp>
 8007e70:	2800      	cmp	r0, #0
 8007e72:	db25      	blt.n	8007ec0 <quorem+0xec>
 8007e74:	4629      	mov	r1, r5
 8007e76:	2000      	movs	r0, #0
 8007e78:	f858 2b04 	ldr.w	r2, [r8], #4
 8007e7c:	f8d1 c000 	ldr.w	ip, [r1]
 8007e80:	fa1f fe82 	uxth.w	lr, r2
 8007e84:	fa1f f38c 	uxth.w	r3, ip
 8007e88:	eba3 030e 	sub.w	r3, r3, lr
 8007e8c:	4403      	add	r3, r0
 8007e8e:	0c12      	lsrs	r2, r2, #16
 8007e90:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007e94:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e9e:	45c1      	cmp	r9, r8
 8007ea0:	f841 3b04 	str.w	r3, [r1], #4
 8007ea4:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007ea8:	d2e6      	bcs.n	8007e78 <quorem+0xa4>
 8007eaa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007eae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007eb2:	b922      	cbnz	r2, 8007ebe <quorem+0xea>
 8007eb4:	3b04      	subs	r3, #4
 8007eb6:	429d      	cmp	r5, r3
 8007eb8:	461a      	mov	r2, r3
 8007eba:	d30b      	bcc.n	8007ed4 <quorem+0x100>
 8007ebc:	613c      	str	r4, [r7, #16]
 8007ebe:	3601      	adds	r6, #1
 8007ec0:	4630      	mov	r0, r6
 8007ec2:	b003      	add	sp, #12
 8007ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ec8:	6812      	ldr	r2, [r2, #0]
 8007eca:	3b04      	subs	r3, #4
 8007ecc:	2a00      	cmp	r2, #0
 8007ece:	d1cb      	bne.n	8007e68 <quorem+0x94>
 8007ed0:	3c01      	subs	r4, #1
 8007ed2:	e7c6      	b.n	8007e62 <quorem+0x8e>
 8007ed4:	6812      	ldr	r2, [r2, #0]
 8007ed6:	3b04      	subs	r3, #4
 8007ed8:	2a00      	cmp	r2, #0
 8007eda:	d1ef      	bne.n	8007ebc <quorem+0xe8>
 8007edc:	3c01      	subs	r4, #1
 8007ede:	e7ea      	b.n	8007eb6 <quorem+0xe2>
 8007ee0:	2000      	movs	r0, #0
 8007ee2:	e7ee      	b.n	8007ec2 <quorem+0xee>
 8007ee4:	0000      	movs	r0, r0
	...

08007ee8 <_dtoa_r>:
 8007ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eec:	69c7      	ldr	r7, [r0, #28]
 8007eee:	b099      	sub	sp, #100	@ 0x64
 8007ef0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007ef4:	ec55 4b10 	vmov	r4, r5, d0
 8007ef8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007efa:	9109      	str	r1, [sp, #36]	@ 0x24
 8007efc:	4683      	mov	fp, r0
 8007efe:	920e      	str	r2, [sp, #56]	@ 0x38
 8007f00:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007f02:	b97f      	cbnz	r7, 8007f24 <_dtoa_r+0x3c>
 8007f04:	2010      	movs	r0, #16
 8007f06:	f000 fdfd 	bl	8008b04 <malloc>
 8007f0a:	4602      	mov	r2, r0
 8007f0c:	f8cb 001c 	str.w	r0, [fp, #28]
 8007f10:	b920      	cbnz	r0, 8007f1c <_dtoa_r+0x34>
 8007f12:	4ba7      	ldr	r3, [pc, #668]	@ (80081b0 <_dtoa_r+0x2c8>)
 8007f14:	21ef      	movs	r1, #239	@ 0xef
 8007f16:	48a7      	ldr	r0, [pc, #668]	@ (80081b4 <_dtoa_r+0x2cc>)
 8007f18:	f002 fdee 	bl	800aaf8 <__assert_func>
 8007f1c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007f20:	6007      	str	r7, [r0, #0]
 8007f22:	60c7      	str	r7, [r0, #12]
 8007f24:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007f28:	6819      	ldr	r1, [r3, #0]
 8007f2a:	b159      	cbz	r1, 8007f44 <_dtoa_r+0x5c>
 8007f2c:	685a      	ldr	r2, [r3, #4]
 8007f2e:	604a      	str	r2, [r1, #4]
 8007f30:	2301      	movs	r3, #1
 8007f32:	4093      	lsls	r3, r2
 8007f34:	608b      	str	r3, [r1, #8]
 8007f36:	4658      	mov	r0, fp
 8007f38:	f000 feda 	bl	8008cf0 <_Bfree>
 8007f3c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007f40:	2200      	movs	r2, #0
 8007f42:	601a      	str	r2, [r3, #0]
 8007f44:	1e2b      	subs	r3, r5, #0
 8007f46:	bfb9      	ittee	lt
 8007f48:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007f4c:	9303      	strlt	r3, [sp, #12]
 8007f4e:	2300      	movge	r3, #0
 8007f50:	6033      	strge	r3, [r6, #0]
 8007f52:	9f03      	ldr	r7, [sp, #12]
 8007f54:	4b98      	ldr	r3, [pc, #608]	@ (80081b8 <_dtoa_r+0x2d0>)
 8007f56:	bfbc      	itt	lt
 8007f58:	2201      	movlt	r2, #1
 8007f5a:	6032      	strlt	r2, [r6, #0]
 8007f5c:	43bb      	bics	r3, r7
 8007f5e:	d112      	bne.n	8007f86 <_dtoa_r+0x9e>
 8007f60:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007f62:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007f66:	6013      	str	r3, [r2, #0]
 8007f68:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007f6c:	4323      	orrs	r3, r4
 8007f6e:	f000 854d 	beq.w	8008a0c <_dtoa_r+0xb24>
 8007f72:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007f74:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80081cc <_dtoa_r+0x2e4>
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	f000 854f 	beq.w	8008a1c <_dtoa_r+0xb34>
 8007f7e:	f10a 0303 	add.w	r3, sl, #3
 8007f82:	f000 bd49 	b.w	8008a18 <_dtoa_r+0xb30>
 8007f86:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	ec51 0b17 	vmov	r0, r1, d7
 8007f90:	2300      	movs	r3, #0
 8007f92:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007f96:	f7f8 fd97 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f9a:	4680      	mov	r8, r0
 8007f9c:	b158      	cbz	r0, 8007fb6 <_dtoa_r+0xce>
 8007f9e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	6013      	str	r3, [r2, #0]
 8007fa4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007fa6:	b113      	cbz	r3, 8007fae <_dtoa_r+0xc6>
 8007fa8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007faa:	4b84      	ldr	r3, [pc, #528]	@ (80081bc <_dtoa_r+0x2d4>)
 8007fac:	6013      	str	r3, [r2, #0]
 8007fae:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80081d0 <_dtoa_r+0x2e8>
 8007fb2:	f000 bd33 	b.w	8008a1c <_dtoa_r+0xb34>
 8007fb6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007fba:	aa16      	add	r2, sp, #88	@ 0x58
 8007fbc:	a917      	add	r1, sp, #92	@ 0x5c
 8007fbe:	4658      	mov	r0, fp
 8007fc0:	f001 fa3a 	bl	8009438 <__d2b>
 8007fc4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007fc8:	4681      	mov	r9, r0
 8007fca:	2e00      	cmp	r6, #0
 8007fcc:	d077      	beq.n	80080be <_dtoa_r+0x1d6>
 8007fce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007fd0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007fd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007fd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007fdc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007fe0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007fe4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007fe8:	4619      	mov	r1, r3
 8007fea:	2200      	movs	r2, #0
 8007fec:	4b74      	ldr	r3, [pc, #464]	@ (80081c0 <_dtoa_r+0x2d8>)
 8007fee:	f7f8 f94b 	bl	8000288 <__aeabi_dsub>
 8007ff2:	a369      	add	r3, pc, #420	@ (adr r3, 8008198 <_dtoa_r+0x2b0>)
 8007ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff8:	f7f8 fafe 	bl	80005f8 <__aeabi_dmul>
 8007ffc:	a368      	add	r3, pc, #416	@ (adr r3, 80081a0 <_dtoa_r+0x2b8>)
 8007ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008002:	f7f8 f943 	bl	800028c <__adddf3>
 8008006:	4604      	mov	r4, r0
 8008008:	4630      	mov	r0, r6
 800800a:	460d      	mov	r5, r1
 800800c:	f7f8 fa8a 	bl	8000524 <__aeabi_i2d>
 8008010:	a365      	add	r3, pc, #404	@ (adr r3, 80081a8 <_dtoa_r+0x2c0>)
 8008012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008016:	f7f8 faef 	bl	80005f8 <__aeabi_dmul>
 800801a:	4602      	mov	r2, r0
 800801c:	460b      	mov	r3, r1
 800801e:	4620      	mov	r0, r4
 8008020:	4629      	mov	r1, r5
 8008022:	f7f8 f933 	bl	800028c <__adddf3>
 8008026:	4604      	mov	r4, r0
 8008028:	460d      	mov	r5, r1
 800802a:	f7f8 fd95 	bl	8000b58 <__aeabi_d2iz>
 800802e:	2200      	movs	r2, #0
 8008030:	4607      	mov	r7, r0
 8008032:	2300      	movs	r3, #0
 8008034:	4620      	mov	r0, r4
 8008036:	4629      	mov	r1, r5
 8008038:	f7f8 fd50 	bl	8000adc <__aeabi_dcmplt>
 800803c:	b140      	cbz	r0, 8008050 <_dtoa_r+0x168>
 800803e:	4638      	mov	r0, r7
 8008040:	f7f8 fa70 	bl	8000524 <__aeabi_i2d>
 8008044:	4622      	mov	r2, r4
 8008046:	462b      	mov	r3, r5
 8008048:	f7f8 fd3e 	bl	8000ac8 <__aeabi_dcmpeq>
 800804c:	b900      	cbnz	r0, 8008050 <_dtoa_r+0x168>
 800804e:	3f01      	subs	r7, #1
 8008050:	2f16      	cmp	r7, #22
 8008052:	d851      	bhi.n	80080f8 <_dtoa_r+0x210>
 8008054:	4b5b      	ldr	r3, [pc, #364]	@ (80081c4 <_dtoa_r+0x2dc>)
 8008056:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800805a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800805e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008062:	f7f8 fd3b 	bl	8000adc <__aeabi_dcmplt>
 8008066:	2800      	cmp	r0, #0
 8008068:	d048      	beq.n	80080fc <_dtoa_r+0x214>
 800806a:	3f01      	subs	r7, #1
 800806c:	2300      	movs	r3, #0
 800806e:	9312      	str	r3, [sp, #72]	@ 0x48
 8008070:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008072:	1b9b      	subs	r3, r3, r6
 8008074:	1e5a      	subs	r2, r3, #1
 8008076:	bf44      	itt	mi
 8008078:	f1c3 0801 	rsbmi	r8, r3, #1
 800807c:	2300      	movmi	r3, #0
 800807e:	9208      	str	r2, [sp, #32]
 8008080:	bf54      	ite	pl
 8008082:	f04f 0800 	movpl.w	r8, #0
 8008086:	9308      	strmi	r3, [sp, #32]
 8008088:	2f00      	cmp	r7, #0
 800808a:	db39      	blt.n	8008100 <_dtoa_r+0x218>
 800808c:	9b08      	ldr	r3, [sp, #32]
 800808e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008090:	443b      	add	r3, r7
 8008092:	9308      	str	r3, [sp, #32]
 8008094:	2300      	movs	r3, #0
 8008096:	930a      	str	r3, [sp, #40]	@ 0x28
 8008098:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800809a:	2b09      	cmp	r3, #9
 800809c:	d864      	bhi.n	8008168 <_dtoa_r+0x280>
 800809e:	2b05      	cmp	r3, #5
 80080a0:	bfc4      	itt	gt
 80080a2:	3b04      	subgt	r3, #4
 80080a4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80080a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080a8:	f1a3 0302 	sub.w	r3, r3, #2
 80080ac:	bfcc      	ite	gt
 80080ae:	2400      	movgt	r4, #0
 80080b0:	2401      	movle	r4, #1
 80080b2:	2b03      	cmp	r3, #3
 80080b4:	d863      	bhi.n	800817e <_dtoa_r+0x296>
 80080b6:	e8df f003 	tbb	[pc, r3]
 80080ba:	372a      	.short	0x372a
 80080bc:	5535      	.short	0x5535
 80080be:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80080c2:	441e      	add	r6, r3
 80080c4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80080c8:	2b20      	cmp	r3, #32
 80080ca:	bfc1      	itttt	gt
 80080cc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80080d0:	409f      	lslgt	r7, r3
 80080d2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80080d6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80080da:	bfd6      	itet	le
 80080dc:	f1c3 0320 	rsble	r3, r3, #32
 80080e0:	ea47 0003 	orrgt.w	r0, r7, r3
 80080e4:	fa04 f003 	lslle.w	r0, r4, r3
 80080e8:	f7f8 fa0c 	bl	8000504 <__aeabi_ui2d>
 80080ec:	2201      	movs	r2, #1
 80080ee:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80080f2:	3e01      	subs	r6, #1
 80080f4:	9214      	str	r2, [sp, #80]	@ 0x50
 80080f6:	e777      	b.n	8007fe8 <_dtoa_r+0x100>
 80080f8:	2301      	movs	r3, #1
 80080fa:	e7b8      	b.n	800806e <_dtoa_r+0x186>
 80080fc:	9012      	str	r0, [sp, #72]	@ 0x48
 80080fe:	e7b7      	b.n	8008070 <_dtoa_r+0x188>
 8008100:	427b      	negs	r3, r7
 8008102:	930a      	str	r3, [sp, #40]	@ 0x28
 8008104:	2300      	movs	r3, #0
 8008106:	eba8 0807 	sub.w	r8, r8, r7
 800810a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800810c:	e7c4      	b.n	8008098 <_dtoa_r+0x1b0>
 800810e:	2300      	movs	r3, #0
 8008110:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008112:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008114:	2b00      	cmp	r3, #0
 8008116:	dc35      	bgt.n	8008184 <_dtoa_r+0x29c>
 8008118:	2301      	movs	r3, #1
 800811a:	9300      	str	r3, [sp, #0]
 800811c:	9307      	str	r3, [sp, #28]
 800811e:	461a      	mov	r2, r3
 8008120:	920e      	str	r2, [sp, #56]	@ 0x38
 8008122:	e00b      	b.n	800813c <_dtoa_r+0x254>
 8008124:	2301      	movs	r3, #1
 8008126:	e7f3      	b.n	8008110 <_dtoa_r+0x228>
 8008128:	2300      	movs	r3, #0
 800812a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800812c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800812e:	18fb      	adds	r3, r7, r3
 8008130:	9300      	str	r3, [sp, #0]
 8008132:	3301      	adds	r3, #1
 8008134:	2b01      	cmp	r3, #1
 8008136:	9307      	str	r3, [sp, #28]
 8008138:	bfb8      	it	lt
 800813a:	2301      	movlt	r3, #1
 800813c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008140:	2100      	movs	r1, #0
 8008142:	2204      	movs	r2, #4
 8008144:	f102 0514 	add.w	r5, r2, #20
 8008148:	429d      	cmp	r5, r3
 800814a:	d91f      	bls.n	800818c <_dtoa_r+0x2a4>
 800814c:	6041      	str	r1, [r0, #4]
 800814e:	4658      	mov	r0, fp
 8008150:	f000 fd8e 	bl	8008c70 <_Balloc>
 8008154:	4682      	mov	sl, r0
 8008156:	2800      	cmp	r0, #0
 8008158:	d13c      	bne.n	80081d4 <_dtoa_r+0x2ec>
 800815a:	4b1b      	ldr	r3, [pc, #108]	@ (80081c8 <_dtoa_r+0x2e0>)
 800815c:	4602      	mov	r2, r0
 800815e:	f240 11af 	movw	r1, #431	@ 0x1af
 8008162:	e6d8      	b.n	8007f16 <_dtoa_r+0x2e>
 8008164:	2301      	movs	r3, #1
 8008166:	e7e0      	b.n	800812a <_dtoa_r+0x242>
 8008168:	2401      	movs	r4, #1
 800816a:	2300      	movs	r3, #0
 800816c:	9309      	str	r3, [sp, #36]	@ 0x24
 800816e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008170:	f04f 33ff 	mov.w	r3, #4294967295
 8008174:	9300      	str	r3, [sp, #0]
 8008176:	9307      	str	r3, [sp, #28]
 8008178:	2200      	movs	r2, #0
 800817a:	2312      	movs	r3, #18
 800817c:	e7d0      	b.n	8008120 <_dtoa_r+0x238>
 800817e:	2301      	movs	r3, #1
 8008180:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008182:	e7f5      	b.n	8008170 <_dtoa_r+0x288>
 8008184:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008186:	9300      	str	r3, [sp, #0]
 8008188:	9307      	str	r3, [sp, #28]
 800818a:	e7d7      	b.n	800813c <_dtoa_r+0x254>
 800818c:	3101      	adds	r1, #1
 800818e:	0052      	lsls	r2, r2, #1
 8008190:	e7d8      	b.n	8008144 <_dtoa_r+0x25c>
 8008192:	bf00      	nop
 8008194:	f3af 8000 	nop.w
 8008198:	636f4361 	.word	0x636f4361
 800819c:	3fd287a7 	.word	0x3fd287a7
 80081a0:	8b60c8b3 	.word	0x8b60c8b3
 80081a4:	3fc68a28 	.word	0x3fc68a28
 80081a8:	509f79fb 	.word	0x509f79fb
 80081ac:	3fd34413 	.word	0x3fd34413
 80081b0:	0801a77e 	.word	0x0801a77e
 80081b4:	0801a795 	.word	0x0801a795
 80081b8:	7ff00000 	.word	0x7ff00000
 80081bc:	0801a749 	.word	0x0801a749
 80081c0:	3ff80000 	.word	0x3ff80000
 80081c4:	0801a890 	.word	0x0801a890
 80081c8:	0801a7ed 	.word	0x0801a7ed
 80081cc:	0801a77a 	.word	0x0801a77a
 80081d0:	0801a748 	.word	0x0801a748
 80081d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80081d8:	6018      	str	r0, [r3, #0]
 80081da:	9b07      	ldr	r3, [sp, #28]
 80081dc:	2b0e      	cmp	r3, #14
 80081de:	f200 80a4 	bhi.w	800832a <_dtoa_r+0x442>
 80081e2:	2c00      	cmp	r4, #0
 80081e4:	f000 80a1 	beq.w	800832a <_dtoa_r+0x442>
 80081e8:	2f00      	cmp	r7, #0
 80081ea:	dd33      	ble.n	8008254 <_dtoa_r+0x36c>
 80081ec:	4bad      	ldr	r3, [pc, #692]	@ (80084a4 <_dtoa_r+0x5bc>)
 80081ee:	f007 020f 	and.w	r2, r7, #15
 80081f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80081f6:	ed93 7b00 	vldr	d7, [r3]
 80081fa:	05f8      	lsls	r0, r7, #23
 80081fc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008200:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008204:	d516      	bpl.n	8008234 <_dtoa_r+0x34c>
 8008206:	4ba8      	ldr	r3, [pc, #672]	@ (80084a8 <_dtoa_r+0x5c0>)
 8008208:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800820c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008210:	f7f8 fb1c 	bl	800084c <__aeabi_ddiv>
 8008214:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008218:	f004 040f 	and.w	r4, r4, #15
 800821c:	2603      	movs	r6, #3
 800821e:	4da2      	ldr	r5, [pc, #648]	@ (80084a8 <_dtoa_r+0x5c0>)
 8008220:	b954      	cbnz	r4, 8008238 <_dtoa_r+0x350>
 8008222:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008226:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800822a:	f7f8 fb0f 	bl	800084c <__aeabi_ddiv>
 800822e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008232:	e028      	b.n	8008286 <_dtoa_r+0x39e>
 8008234:	2602      	movs	r6, #2
 8008236:	e7f2      	b.n	800821e <_dtoa_r+0x336>
 8008238:	07e1      	lsls	r1, r4, #31
 800823a:	d508      	bpl.n	800824e <_dtoa_r+0x366>
 800823c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008240:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008244:	f7f8 f9d8 	bl	80005f8 <__aeabi_dmul>
 8008248:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800824c:	3601      	adds	r6, #1
 800824e:	1064      	asrs	r4, r4, #1
 8008250:	3508      	adds	r5, #8
 8008252:	e7e5      	b.n	8008220 <_dtoa_r+0x338>
 8008254:	f000 80d2 	beq.w	80083fc <_dtoa_r+0x514>
 8008258:	427c      	negs	r4, r7
 800825a:	4b92      	ldr	r3, [pc, #584]	@ (80084a4 <_dtoa_r+0x5bc>)
 800825c:	4d92      	ldr	r5, [pc, #584]	@ (80084a8 <_dtoa_r+0x5c0>)
 800825e:	f004 020f 	and.w	r2, r4, #15
 8008262:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800826a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800826e:	f7f8 f9c3 	bl	80005f8 <__aeabi_dmul>
 8008272:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008276:	1124      	asrs	r4, r4, #4
 8008278:	2300      	movs	r3, #0
 800827a:	2602      	movs	r6, #2
 800827c:	2c00      	cmp	r4, #0
 800827e:	f040 80b2 	bne.w	80083e6 <_dtoa_r+0x4fe>
 8008282:	2b00      	cmp	r3, #0
 8008284:	d1d3      	bne.n	800822e <_dtoa_r+0x346>
 8008286:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008288:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800828c:	2b00      	cmp	r3, #0
 800828e:	f000 80b7 	beq.w	8008400 <_dtoa_r+0x518>
 8008292:	4b86      	ldr	r3, [pc, #536]	@ (80084ac <_dtoa_r+0x5c4>)
 8008294:	2200      	movs	r2, #0
 8008296:	4620      	mov	r0, r4
 8008298:	4629      	mov	r1, r5
 800829a:	f7f8 fc1f 	bl	8000adc <__aeabi_dcmplt>
 800829e:	2800      	cmp	r0, #0
 80082a0:	f000 80ae 	beq.w	8008400 <_dtoa_r+0x518>
 80082a4:	9b07      	ldr	r3, [sp, #28]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	f000 80aa 	beq.w	8008400 <_dtoa_r+0x518>
 80082ac:	9b00      	ldr	r3, [sp, #0]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	dd37      	ble.n	8008322 <_dtoa_r+0x43a>
 80082b2:	1e7b      	subs	r3, r7, #1
 80082b4:	9304      	str	r3, [sp, #16]
 80082b6:	4620      	mov	r0, r4
 80082b8:	4b7d      	ldr	r3, [pc, #500]	@ (80084b0 <_dtoa_r+0x5c8>)
 80082ba:	2200      	movs	r2, #0
 80082bc:	4629      	mov	r1, r5
 80082be:	f7f8 f99b 	bl	80005f8 <__aeabi_dmul>
 80082c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082c6:	9c00      	ldr	r4, [sp, #0]
 80082c8:	3601      	adds	r6, #1
 80082ca:	4630      	mov	r0, r6
 80082cc:	f7f8 f92a 	bl	8000524 <__aeabi_i2d>
 80082d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80082d4:	f7f8 f990 	bl	80005f8 <__aeabi_dmul>
 80082d8:	4b76      	ldr	r3, [pc, #472]	@ (80084b4 <_dtoa_r+0x5cc>)
 80082da:	2200      	movs	r2, #0
 80082dc:	f7f7 ffd6 	bl	800028c <__adddf3>
 80082e0:	4605      	mov	r5, r0
 80082e2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80082e6:	2c00      	cmp	r4, #0
 80082e8:	f040 808d 	bne.w	8008406 <_dtoa_r+0x51e>
 80082ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082f0:	4b71      	ldr	r3, [pc, #452]	@ (80084b8 <_dtoa_r+0x5d0>)
 80082f2:	2200      	movs	r2, #0
 80082f4:	f7f7 ffc8 	bl	8000288 <__aeabi_dsub>
 80082f8:	4602      	mov	r2, r0
 80082fa:	460b      	mov	r3, r1
 80082fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008300:	462a      	mov	r2, r5
 8008302:	4633      	mov	r3, r6
 8008304:	f7f8 fc08 	bl	8000b18 <__aeabi_dcmpgt>
 8008308:	2800      	cmp	r0, #0
 800830a:	f040 828b 	bne.w	8008824 <_dtoa_r+0x93c>
 800830e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008312:	462a      	mov	r2, r5
 8008314:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008318:	f7f8 fbe0 	bl	8000adc <__aeabi_dcmplt>
 800831c:	2800      	cmp	r0, #0
 800831e:	f040 8128 	bne.w	8008572 <_dtoa_r+0x68a>
 8008322:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008326:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800832a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800832c:	2b00      	cmp	r3, #0
 800832e:	f2c0 815a 	blt.w	80085e6 <_dtoa_r+0x6fe>
 8008332:	2f0e      	cmp	r7, #14
 8008334:	f300 8157 	bgt.w	80085e6 <_dtoa_r+0x6fe>
 8008338:	4b5a      	ldr	r3, [pc, #360]	@ (80084a4 <_dtoa_r+0x5bc>)
 800833a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800833e:	ed93 7b00 	vldr	d7, [r3]
 8008342:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008344:	2b00      	cmp	r3, #0
 8008346:	ed8d 7b00 	vstr	d7, [sp]
 800834a:	da03      	bge.n	8008354 <_dtoa_r+0x46c>
 800834c:	9b07      	ldr	r3, [sp, #28]
 800834e:	2b00      	cmp	r3, #0
 8008350:	f340 8101 	ble.w	8008556 <_dtoa_r+0x66e>
 8008354:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008358:	4656      	mov	r6, sl
 800835a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800835e:	4620      	mov	r0, r4
 8008360:	4629      	mov	r1, r5
 8008362:	f7f8 fa73 	bl	800084c <__aeabi_ddiv>
 8008366:	f7f8 fbf7 	bl	8000b58 <__aeabi_d2iz>
 800836a:	4680      	mov	r8, r0
 800836c:	f7f8 f8da 	bl	8000524 <__aeabi_i2d>
 8008370:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008374:	f7f8 f940 	bl	80005f8 <__aeabi_dmul>
 8008378:	4602      	mov	r2, r0
 800837a:	460b      	mov	r3, r1
 800837c:	4620      	mov	r0, r4
 800837e:	4629      	mov	r1, r5
 8008380:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008384:	f7f7 ff80 	bl	8000288 <__aeabi_dsub>
 8008388:	f806 4b01 	strb.w	r4, [r6], #1
 800838c:	9d07      	ldr	r5, [sp, #28]
 800838e:	eba6 040a 	sub.w	r4, r6, sl
 8008392:	42a5      	cmp	r5, r4
 8008394:	4602      	mov	r2, r0
 8008396:	460b      	mov	r3, r1
 8008398:	f040 8117 	bne.w	80085ca <_dtoa_r+0x6e2>
 800839c:	f7f7 ff76 	bl	800028c <__adddf3>
 80083a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80083a4:	4604      	mov	r4, r0
 80083a6:	460d      	mov	r5, r1
 80083a8:	f7f8 fbb6 	bl	8000b18 <__aeabi_dcmpgt>
 80083ac:	2800      	cmp	r0, #0
 80083ae:	f040 80f9 	bne.w	80085a4 <_dtoa_r+0x6bc>
 80083b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80083b6:	4620      	mov	r0, r4
 80083b8:	4629      	mov	r1, r5
 80083ba:	f7f8 fb85 	bl	8000ac8 <__aeabi_dcmpeq>
 80083be:	b118      	cbz	r0, 80083c8 <_dtoa_r+0x4e0>
 80083c0:	f018 0f01 	tst.w	r8, #1
 80083c4:	f040 80ee 	bne.w	80085a4 <_dtoa_r+0x6bc>
 80083c8:	4649      	mov	r1, r9
 80083ca:	4658      	mov	r0, fp
 80083cc:	f000 fc90 	bl	8008cf0 <_Bfree>
 80083d0:	2300      	movs	r3, #0
 80083d2:	7033      	strb	r3, [r6, #0]
 80083d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80083d6:	3701      	adds	r7, #1
 80083d8:	601f      	str	r7, [r3, #0]
 80083da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80083dc:	2b00      	cmp	r3, #0
 80083de:	f000 831d 	beq.w	8008a1c <_dtoa_r+0xb34>
 80083e2:	601e      	str	r6, [r3, #0]
 80083e4:	e31a      	b.n	8008a1c <_dtoa_r+0xb34>
 80083e6:	07e2      	lsls	r2, r4, #31
 80083e8:	d505      	bpl.n	80083f6 <_dtoa_r+0x50e>
 80083ea:	e9d5 2300 	ldrd	r2, r3, [r5]
 80083ee:	f7f8 f903 	bl	80005f8 <__aeabi_dmul>
 80083f2:	3601      	adds	r6, #1
 80083f4:	2301      	movs	r3, #1
 80083f6:	1064      	asrs	r4, r4, #1
 80083f8:	3508      	adds	r5, #8
 80083fa:	e73f      	b.n	800827c <_dtoa_r+0x394>
 80083fc:	2602      	movs	r6, #2
 80083fe:	e742      	b.n	8008286 <_dtoa_r+0x39e>
 8008400:	9c07      	ldr	r4, [sp, #28]
 8008402:	9704      	str	r7, [sp, #16]
 8008404:	e761      	b.n	80082ca <_dtoa_r+0x3e2>
 8008406:	4b27      	ldr	r3, [pc, #156]	@ (80084a4 <_dtoa_r+0x5bc>)
 8008408:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800840a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800840e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008412:	4454      	add	r4, sl
 8008414:	2900      	cmp	r1, #0
 8008416:	d053      	beq.n	80084c0 <_dtoa_r+0x5d8>
 8008418:	4928      	ldr	r1, [pc, #160]	@ (80084bc <_dtoa_r+0x5d4>)
 800841a:	2000      	movs	r0, #0
 800841c:	f7f8 fa16 	bl	800084c <__aeabi_ddiv>
 8008420:	4633      	mov	r3, r6
 8008422:	462a      	mov	r2, r5
 8008424:	f7f7 ff30 	bl	8000288 <__aeabi_dsub>
 8008428:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800842c:	4656      	mov	r6, sl
 800842e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008432:	f7f8 fb91 	bl	8000b58 <__aeabi_d2iz>
 8008436:	4605      	mov	r5, r0
 8008438:	f7f8 f874 	bl	8000524 <__aeabi_i2d>
 800843c:	4602      	mov	r2, r0
 800843e:	460b      	mov	r3, r1
 8008440:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008444:	f7f7 ff20 	bl	8000288 <__aeabi_dsub>
 8008448:	3530      	adds	r5, #48	@ 0x30
 800844a:	4602      	mov	r2, r0
 800844c:	460b      	mov	r3, r1
 800844e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008452:	f806 5b01 	strb.w	r5, [r6], #1
 8008456:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800845a:	f7f8 fb3f 	bl	8000adc <__aeabi_dcmplt>
 800845e:	2800      	cmp	r0, #0
 8008460:	d171      	bne.n	8008546 <_dtoa_r+0x65e>
 8008462:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008466:	4911      	ldr	r1, [pc, #68]	@ (80084ac <_dtoa_r+0x5c4>)
 8008468:	2000      	movs	r0, #0
 800846a:	f7f7 ff0d 	bl	8000288 <__aeabi_dsub>
 800846e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008472:	f7f8 fb33 	bl	8000adc <__aeabi_dcmplt>
 8008476:	2800      	cmp	r0, #0
 8008478:	f040 8095 	bne.w	80085a6 <_dtoa_r+0x6be>
 800847c:	42a6      	cmp	r6, r4
 800847e:	f43f af50 	beq.w	8008322 <_dtoa_r+0x43a>
 8008482:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008486:	4b0a      	ldr	r3, [pc, #40]	@ (80084b0 <_dtoa_r+0x5c8>)
 8008488:	2200      	movs	r2, #0
 800848a:	f7f8 f8b5 	bl	80005f8 <__aeabi_dmul>
 800848e:	4b08      	ldr	r3, [pc, #32]	@ (80084b0 <_dtoa_r+0x5c8>)
 8008490:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008494:	2200      	movs	r2, #0
 8008496:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800849a:	f7f8 f8ad 	bl	80005f8 <__aeabi_dmul>
 800849e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084a2:	e7c4      	b.n	800842e <_dtoa_r+0x546>
 80084a4:	0801a890 	.word	0x0801a890
 80084a8:	0801a868 	.word	0x0801a868
 80084ac:	3ff00000 	.word	0x3ff00000
 80084b0:	40240000 	.word	0x40240000
 80084b4:	401c0000 	.word	0x401c0000
 80084b8:	40140000 	.word	0x40140000
 80084bc:	3fe00000 	.word	0x3fe00000
 80084c0:	4631      	mov	r1, r6
 80084c2:	4628      	mov	r0, r5
 80084c4:	f7f8 f898 	bl	80005f8 <__aeabi_dmul>
 80084c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80084cc:	9415      	str	r4, [sp, #84]	@ 0x54
 80084ce:	4656      	mov	r6, sl
 80084d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084d4:	f7f8 fb40 	bl	8000b58 <__aeabi_d2iz>
 80084d8:	4605      	mov	r5, r0
 80084da:	f7f8 f823 	bl	8000524 <__aeabi_i2d>
 80084de:	4602      	mov	r2, r0
 80084e0:	460b      	mov	r3, r1
 80084e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084e6:	f7f7 fecf 	bl	8000288 <__aeabi_dsub>
 80084ea:	3530      	adds	r5, #48	@ 0x30
 80084ec:	f806 5b01 	strb.w	r5, [r6], #1
 80084f0:	4602      	mov	r2, r0
 80084f2:	460b      	mov	r3, r1
 80084f4:	42a6      	cmp	r6, r4
 80084f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80084fa:	f04f 0200 	mov.w	r2, #0
 80084fe:	d124      	bne.n	800854a <_dtoa_r+0x662>
 8008500:	4bac      	ldr	r3, [pc, #688]	@ (80087b4 <_dtoa_r+0x8cc>)
 8008502:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008506:	f7f7 fec1 	bl	800028c <__adddf3>
 800850a:	4602      	mov	r2, r0
 800850c:	460b      	mov	r3, r1
 800850e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008512:	f7f8 fb01 	bl	8000b18 <__aeabi_dcmpgt>
 8008516:	2800      	cmp	r0, #0
 8008518:	d145      	bne.n	80085a6 <_dtoa_r+0x6be>
 800851a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800851e:	49a5      	ldr	r1, [pc, #660]	@ (80087b4 <_dtoa_r+0x8cc>)
 8008520:	2000      	movs	r0, #0
 8008522:	f7f7 feb1 	bl	8000288 <__aeabi_dsub>
 8008526:	4602      	mov	r2, r0
 8008528:	460b      	mov	r3, r1
 800852a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800852e:	f7f8 fad5 	bl	8000adc <__aeabi_dcmplt>
 8008532:	2800      	cmp	r0, #0
 8008534:	f43f aef5 	beq.w	8008322 <_dtoa_r+0x43a>
 8008538:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800853a:	1e73      	subs	r3, r6, #1
 800853c:	9315      	str	r3, [sp, #84]	@ 0x54
 800853e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008542:	2b30      	cmp	r3, #48	@ 0x30
 8008544:	d0f8      	beq.n	8008538 <_dtoa_r+0x650>
 8008546:	9f04      	ldr	r7, [sp, #16]
 8008548:	e73e      	b.n	80083c8 <_dtoa_r+0x4e0>
 800854a:	4b9b      	ldr	r3, [pc, #620]	@ (80087b8 <_dtoa_r+0x8d0>)
 800854c:	f7f8 f854 	bl	80005f8 <__aeabi_dmul>
 8008550:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008554:	e7bc      	b.n	80084d0 <_dtoa_r+0x5e8>
 8008556:	d10c      	bne.n	8008572 <_dtoa_r+0x68a>
 8008558:	4b98      	ldr	r3, [pc, #608]	@ (80087bc <_dtoa_r+0x8d4>)
 800855a:	2200      	movs	r2, #0
 800855c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008560:	f7f8 f84a 	bl	80005f8 <__aeabi_dmul>
 8008564:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008568:	f7f8 facc 	bl	8000b04 <__aeabi_dcmpge>
 800856c:	2800      	cmp	r0, #0
 800856e:	f000 8157 	beq.w	8008820 <_dtoa_r+0x938>
 8008572:	2400      	movs	r4, #0
 8008574:	4625      	mov	r5, r4
 8008576:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008578:	43db      	mvns	r3, r3
 800857a:	9304      	str	r3, [sp, #16]
 800857c:	4656      	mov	r6, sl
 800857e:	2700      	movs	r7, #0
 8008580:	4621      	mov	r1, r4
 8008582:	4658      	mov	r0, fp
 8008584:	f000 fbb4 	bl	8008cf0 <_Bfree>
 8008588:	2d00      	cmp	r5, #0
 800858a:	d0dc      	beq.n	8008546 <_dtoa_r+0x65e>
 800858c:	b12f      	cbz	r7, 800859a <_dtoa_r+0x6b2>
 800858e:	42af      	cmp	r7, r5
 8008590:	d003      	beq.n	800859a <_dtoa_r+0x6b2>
 8008592:	4639      	mov	r1, r7
 8008594:	4658      	mov	r0, fp
 8008596:	f000 fbab 	bl	8008cf0 <_Bfree>
 800859a:	4629      	mov	r1, r5
 800859c:	4658      	mov	r0, fp
 800859e:	f000 fba7 	bl	8008cf0 <_Bfree>
 80085a2:	e7d0      	b.n	8008546 <_dtoa_r+0x65e>
 80085a4:	9704      	str	r7, [sp, #16]
 80085a6:	4633      	mov	r3, r6
 80085a8:	461e      	mov	r6, r3
 80085aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80085ae:	2a39      	cmp	r2, #57	@ 0x39
 80085b0:	d107      	bne.n	80085c2 <_dtoa_r+0x6da>
 80085b2:	459a      	cmp	sl, r3
 80085b4:	d1f8      	bne.n	80085a8 <_dtoa_r+0x6c0>
 80085b6:	9a04      	ldr	r2, [sp, #16]
 80085b8:	3201      	adds	r2, #1
 80085ba:	9204      	str	r2, [sp, #16]
 80085bc:	2230      	movs	r2, #48	@ 0x30
 80085be:	f88a 2000 	strb.w	r2, [sl]
 80085c2:	781a      	ldrb	r2, [r3, #0]
 80085c4:	3201      	adds	r2, #1
 80085c6:	701a      	strb	r2, [r3, #0]
 80085c8:	e7bd      	b.n	8008546 <_dtoa_r+0x65e>
 80085ca:	4b7b      	ldr	r3, [pc, #492]	@ (80087b8 <_dtoa_r+0x8d0>)
 80085cc:	2200      	movs	r2, #0
 80085ce:	f7f8 f813 	bl	80005f8 <__aeabi_dmul>
 80085d2:	2200      	movs	r2, #0
 80085d4:	2300      	movs	r3, #0
 80085d6:	4604      	mov	r4, r0
 80085d8:	460d      	mov	r5, r1
 80085da:	f7f8 fa75 	bl	8000ac8 <__aeabi_dcmpeq>
 80085de:	2800      	cmp	r0, #0
 80085e0:	f43f aebb 	beq.w	800835a <_dtoa_r+0x472>
 80085e4:	e6f0      	b.n	80083c8 <_dtoa_r+0x4e0>
 80085e6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80085e8:	2a00      	cmp	r2, #0
 80085ea:	f000 80db 	beq.w	80087a4 <_dtoa_r+0x8bc>
 80085ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80085f0:	2a01      	cmp	r2, #1
 80085f2:	f300 80bf 	bgt.w	8008774 <_dtoa_r+0x88c>
 80085f6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80085f8:	2a00      	cmp	r2, #0
 80085fa:	f000 80b7 	beq.w	800876c <_dtoa_r+0x884>
 80085fe:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008602:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008604:	4646      	mov	r6, r8
 8008606:	9a08      	ldr	r2, [sp, #32]
 8008608:	2101      	movs	r1, #1
 800860a:	441a      	add	r2, r3
 800860c:	4658      	mov	r0, fp
 800860e:	4498      	add	r8, r3
 8008610:	9208      	str	r2, [sp, #32]
 8008612:	f000 fc6b 	bl	8008eec <__i2b>
 8008616:	4605      	mov	r5, r0
 8008618:	b15e      	cbz	r6, 8008632 <_dtoa_r+0x74a>
 800861a:	9b08      	ldr	r3, [sp, #32]
 800861c:	2b00      	cmp	r3, #0
 800861e:	dd08      	ble.n	8008632 <_dtoa_r+0x74a>
 8008620:	42b3      	cmp	r3, r6
 8008622:	9a08      	ldr	r2, [sp, #32]
 8008624:	bfa8      	it	ge
 8008626:	4633      	movge	r3, r6
 8008628:	eba8 0803 	sub.w	r8, r8, r3
 800862c:	1af6      	subs	r6, r6, r3
 800862e:	1ad3      	subs	r3, r2, r3
 8008630:	9308      	str	r3, [sp, #32]
 8008632:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008634:	b1f3      	cbz	r3, 8008674 <_dtoa_r+0x78c>
 8008636:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008638:	2b00      	cmp	r3, #0
 800863a:	f000 80b7 	beq.w	80087ac <_dtoa_r+0x8c4>
 800863e:	b18c      	cbz	r4, 8008664 <_dtoa_r+0x77c>
 8008640:	4629      	mov	r1, r5
 8008642:	4622      	mov	r2, r4
 8008644:	4658      	mov	r0, fp
 8008646:	f000 fd11 	bl	800906c <__pow5mult>
 800864a:	464a      	mov	r2, r9
 800864c:	4601      	mov	r1, r0
 800864e:	4605      	mov	r5, r0
 8008650:	4658      	mov	r0, fp
 8008652:	f000 fc61 	bl	8008f18 <__multiply>
 8008656:	4649      	mov	r1, r9
 8008658:	9004      	str	r0, [sp, #16]
 800865a:	4658      	mov	r0, fp
 800865c:	f000 fb48 	bl	8008cf0 <_Bfree>
 8008660:	9b04      	ldr	r3, [sp, #16]
 8008662:	4699      	mov	r9, r3
 8008664:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008666:	1b1a      	subs	r2, r3, r4
 8008668:	d004      	beq.n	8008674 <_dtoa_r+0x78c>
 800866a:	4649      	mov	r1, r9
 800866c:	4658      	mov	r0, fp
 800866e:	f000 fcfd 	bl	800906c <__pow5mult>
 8008672:	4681      	mov	r9, r0
 8008674:	2101      	movs	r1, #1
 8008676:	4658      	mov	r0, fp
 8008678:	f000 fc38 	bl	8008eec <__i2b>
 800867c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800867e:	4604      	mov	r4, r0
 8008680:	2b00      	cmp	r3, #0
 8008682:	f000 81cf 	beq.w	8008a24 <_dtoa_r+0xb3c>
 8008686:	461a      	mov	r2, r3
 8008688:	4601      	mov	r1, r0
 800868a:	4658      	mov	r0, fp
 800868c:	f000 fcee 	bl	800906c <__pow5mult>
 8008690:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008692:	2b01      	cmp	r3, #1
 8008694:	4604      	mov	r4, r0
 8008696:	f300 8095 	bgt.w	80087c4 <_dtoa_r+0x8dc>
 800869a:	9b02      	ldr	r3, [sp, #8]
 800869c:	2b00      	cmp	r3, #0
 800869e:	f040 8087 	bne.w	80087b0 <_dtoa_r+0x8c8>
 80086a2:	9b03      	ldr	r3, [sp, #12]
 80086a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	f040 8089 	bne.w	80087c0 <_dtoa_r+0x8d8>
 80086ae:	9b03      	ldr	r3, [sp, #12]
 80086b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80086b4:	0d1b      	lsrs	r3, r3, #20
 80086b6:	051b      	lsls	r3, r3, #20
 80086b8:	b12b      	cbz	r3, 80086c6 <_dtoa_r+0x7de>
 80086ba:	9b08      	ldr	r3, [sp, #32]
 80086bc:	3301      	adds	r3, #1
 80086be:	9308      	str	r3, [sp, #32]
 80086c0:	f108 0801 	add.w	r8, r8, #1
 80086c4:	2301      	movs	r3, #1
 80086c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80086c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	f000 81b0 	beq.w	8008a30 <_dtoa_r+0xb48>
 80086d0:	6923      	ldr	r3, [r4, #16]
 80086d2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80086d6:	6918      	ldr	r0, [r3, #16]
 80086d8:	f000 fbbc 	bl	8008e54 <__hi0bits>
 80086dc:	f1c0 0020 	rsb	r0, r0, #32
 80086e0:	9b08      	ldr	r3, [sp, #32]
 80086e2:	4418      	add	r0, r3
 80086e4:	f010 001f 	ands.w	r0, r0, #31
 80086e8:	d077      	beq.n	80087da <_dtoa_r+0x8f2>
 80086ea:	f1c0 0320 	rsb	r3, r0, #32
 80086ee:	2b04      	cmp	r3, #4
 80086f0:	dd6b      	ble.n	80087ca <_dtoa_r+0x8e2>
 80086f2:	9b08      	ldr	r3, [sp, #32]
 80086f4:	f1c0 001c 	rsb	r0, r0, #28
 80086f8:	4403      	add	r3, r0
 80086fa:	4480      	add	r8, r0
 80086fc:	4406      	add	r6, r0
 80086fe:	9308      	str	r3, [sp, #32]
 8008700:	f1b8 0f00 	cmp.w	r8, #0
 8008704:	dd05      	ble.n	8008712 <_dtoa_r+0x82a>
 8008706:	4649      	mov	r1, r9
 8008708:	4642      	mov	r2, r8
 800870a:	4658      	mov	r0, fp
 800870c:	f000 fd08 	bl	8009120 <__lshift>
 8008710:	4681      	mov	r9, r0
 8008712:	9b08      	ldr	r3, [sp, #32]
 8008714:	2b00      	cmp	r3, #0
 8008716:	dd05      	ble.n	8008724 <_dtoa_r+0x83c>
 8008718:	4621      	mov	r1, r4
 800871a:	461a      	mov	r2, r3
 800871c:	4658      	mov	r0, fp
 800871e:	f000 fcff 	bl	8009120 <__lshift>
 8008722:	4604      	mov	r4, r0
 8008724:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008726:	2b00      	cmp	r3, #0
 8008728:	d059      	beq.n	80087de <_dtoa_r+0x8f6>
 800872a:	4621      	mov	r1, r4
 800872c:	4648      	mov	r0, r9
 800872e:	f000 fd63 	bl	80091f8 <__mcmp>
 8008732:	2800      	cmp	r0, #0
 8008734:	da53      	bge.n	80087de <_dtoa_r+0x8f6>
 8008736:	1e7b      	subs	r3, r7, #1
 8008738:	9304      	str	r3, [sp, #16]
 800873a:	4649      	mov	r1, r9
 800873c:	2300      	movs	r3, #0
 800873e:	220a      	movs	r2, #10
 8008740:	4658      	mov	r0, fp
 8008742:	f000 faf7 	bl	8008d34 <__multadd>
 8008746:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008748:	4681      	mov	r9, r0
 800874a:	2b00      	cmp	r3, #0
 800874c:	f000 8172 	beq.w	8008a34 <_dtoa_r+0xb4c>
 8008750:	2300      	movs	r3, #0
 8008752:	4629      	mov	r1, r5
 8008754:	220a      	movs	r2, #10
 8008756:	4658      	mov	r0, fp
 8008758:	f000 faec 	bl	8008d34 <__multadd>
 800875c:	9b00      	ldr	r3, [sp, #0]
 800875e:	2b00      	cmp	r3, #0
 8008760:	4605      	mov	r5, r0
 8008762:	dc67      	bgt.n	8008834 <_dtoa_r+0x94c>
 8008764:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008766:	2b02      	cmp	r3, #2
 8008768:	dc41      	bgt.n	80087ee <_dtoa_r+0x906>
 800876a:	e063      	b.n	8008834 <_dtoa_r+0x94c>
 800876c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800876e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008772:	e746      	b.n	8008602 <_dtoa_r+0x71a>
 8008774:	9b07      	ldr	r3, [sp, #28]
 8008776:	1e5c      	subs	r4, r3, #1
 8008778:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800877a:	42a3      	cmp	r3, r4
 800877c:	bfbf      	itttt	lt
 800877e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008780:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008782:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008784:	1ae3      	sublt	r3, r4, r3
 8008786:	bfb4      	ite	lt
 8008788:	18d2      	addlt	r2, r2, r3
 800878a:	1b1c      	subge	r4, r3, r4
 800878c:	9b07      	ldr	r3, [sp, #28]
 800878e:	bfbc      	itt	lt
 8008790:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008792:	2400      	movlt	r4, #0
 8008794:	2b00      	cmp	r3, #0
 8008796:	bfb5      	itete	lt
 8008798:	eba8 0603 	sublt.w	r6, r8, r3
 800879c:	9b07      	ldrge	r3, [sp, #28]
 800879e:	2300      	movlt	r3, #0
 80087a0:	4646      	movge	r6, r8
 80087a2:	e730      	b.n	8008606 <_dtoa_r+0x71e>
 80087a4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80087a6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80087a8:	4646      	mov	r6, r8
 80087aa:	e735      	b.n	8008618 <_dtoa_r+0x730>
 80087ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80087ae:	e75c      	b.n	800866a <_dtoa_r+0x782>
 80087b0:	2300      	movs	r3, #0
 80087b2:	e788      	b.n	80086c6 <_dtoa_r+0x7de>
 80087b4:	3fe00000 	.word	0x3fe00000
 80087b8:	40240000 	.word	0x40240000
 80087bc:	40140000 	.word	0x40140000
 80087c0:	9b02      	ldr	r3, [sp, #8]
 80087c2:	e780      	b.n	80086c6 <_dtoa_r+0x7de>
 80087c4:	2300      	movs	r3, #0
 80087c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80087c8:	e782      	b.n	80086d0 <_dtoa_r+0x7e8>
 80087ca:	d099      	beq.n	8008700 <_dtoa_r+0x818>
 80087cc:	9a08      	ldr	r2, [sp, #32]
 80087ce:	331c      	adds	r3, #28
 80087d0:	441a      	add	r2, r3
 80087d2:	4498      	add	r8, r3
 80087d4:	441e      	add	r6, r3
 80087d6:	9208      	str	r2, [sp, #32]
 80087d8:	e792      	b.n	8008700 <_dtoa_r+0x818>
 80087da:	4603      	mov	r3, r0
 80087dc:	e7f6      	b.n	80087cc <_dtoa_r+0x8e4>
 80087de:	9b07      	ldr	r3, [sp, #28]
 80087e0:	9704      	str	r7, [sp, #16]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	dc20      	bgt.n	8008828 <_dtoa_r+0x940>
 80087e6:	9300      	str	r3, [sp, #0]
 80087e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087ea:	2b02      	cmp	r3, #2
 80087ec:	dd1e      	ble.n	800882c <_dtoa_r+0x944>
 80087ee:	9b00      	ldr	r3, [sp, #0]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	f47f aec0 	bne.w	8008576 <_dtoa_r+0x68e>
 80087f6:	4621      	mov	r1, r4
 80087f8:	2205      	movs	r2, #5
 80087fa:	4658      	mov	r0, fp
 80087fc:	f000 fa9a 	bl	8008d34 <__multadd>
 8008800:	4601      	mov	r1, r0
 8008802:	4604      	mov	r4, r0
 8008804:	4648      	mov	r0, r9
 8008806:	f000 fcf7 	bl	80091f8 <__mcmp>
 800880a:	2800      	cmp	r0, #0
 800880c:	f77f aeb3 	ble.w	8008576 <_dtoa_r+0x68e>
 8008810:	4656      	mov	r6, sl
 8008812:	2331      	movs	r3, #49	@ 0x31
 8008814:	f806 3b01 	strb.w	r3, [r6], #1
 8008818:	9b04      	ldr	r3, [sp, #16]
 800881a:	3301      	adds	r3, #1
 800881c:	9304      	str	r3, [sp, #16]
 800881e:	e6ae      	b.n	800857e <_dtoa_r+0x696>
 8008820:	9c07      	ldr	r4, [sp, #28]
 8008822:	9704      	str	r7, [sp, #16]
 8008824:	4625      	mov	r5, r4
 8008826:	e7f3      	b.n	8008810 <_dtoa_r+0x928>
 8008828:	9b07      	ldr	r3, [sp, #28]
 800882a:	9300      	str	r3, [sp, #0]
 800882c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800882e:	2b00      	cmp	r3, #0
 8008830:	f000 8104 	beq.w	8008a3c <_dtoa_r+0xb54>
 8008834:	2e00      	cmp	r6, #0
 8008836:	dd05      	ble.n	8008844 <_dtoa_r+0x95c>
 8008838:	4629      	mov	r1, r5
 800883a:	4632      	mov	r2, r6
 800883c:	4658      	mov	r0, fp
 800883e:	f000 fc6f 	bl	8009120 <__lshift>
 8008842:	4605      	mov	r5, r0
 8008844:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008846:	2b00      	cmp	r3, #0
 8008848:	d05a      	beq.n	8008900 <_dtoa_r+0xa18>
 800884a:	6869      	ldr	r1, [r5, #4]
 800884c:	4658      	mov	r0, fp
 800884e:	f000 fa0f 	bl	8008c70 <_Balloc>
 8008852:	4606      	mov	r6, r0
 8008854:	b928      	cbnz	r0, 8008862 <_dtoa_r+0x97a>
 8008856:	4b84      	ldr	r3, [pc, #528]	@ (8008a68 <_dtoa_r+0xb80>)
 8008858:	4602      	mov	r2, r0
 800885a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800885e:	f7ff bb5a 	b.w	8007f16 <_dtoa_r+0x2e>
 8008862:	692a      	ldr	r2, [r5, #16]
 8008864:	3202      	adds	r2, #2
 8008866:	0092      	lsls	r2, r2, #2
 8008868:	f105 010c 	add.w	r1, r5, #12
 800886c:	300c      	adds	r0, #12
 800886e:	f7ff fa9c 	bl	8007daa <memcpy>
 8008872:	2201      	movs	r2, #1
 8008874:	4631      	mov	r1, r6
 8008876:	4658      	mov	r0, fp
 8008878:	f000 fc52 	bl	8009120 <__lshift>
 800887c:	f10a 0301 	add.w	r3, sl, #1
 8008880:	9307      	str	r3, [sp, #28]
 8008882:	9b00      	ldr	r3, [sp, #0]
 8008884:	4453      	add	r3, sl
 8008886:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008888:	9b02      	ldr	r3, [sp, #8]
 800888a:	f003 0301 	and.w	r3, r3, #1
 800888e:	462f      	mov	r7, r5
 8008890:	930a      	str	r3, [sp, #40]	@ 0x28
 8008892:	4605      	mov	r5, r0
 8008894:	9b07      	ldr	r3, [sp, #28]
 8008896:	4621      	mov	r1, r4
 8008898:	3b01      	subs	r3, #1
 800889a:	4648      	mov	r0, r9
 800889c:	9300      	str	r3, [sp, #0]
 800889e:	f7ff fa99 	bl	8007dd4 <quorem>
 80088a2:	4639      	mov	r1, r7
 80088a4:	9002      	str	r0, [sp, #8]
 80088a6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80088aa:	4648      	mov	r0, r9
 80088ac:	f000 fca4 	bl	80091f8 <__mcmp>
 80088b0:	462a      	mov	r2, r5
 80088b2:	9008      	str	r0, [sp, #32]
 80088b4:	4621      	mov	r1, r4
 80088b6:	4658      	mov	r0, fp
 80088b8:	f000 fcba 	bl	8009230 <__mdiff>
 80088bc:	68c2      	ldr	r2, [r0, #12]
 80088be:	4606      	mov	r6, r0
 80088c0:	bb02      	cbnz	r2, 8008904 <_dtoa_r+0xa1c>
 80088c2:	4601      	mov	r1, r0
 80088c4:	4648      	mov	r0, r9
 80088c6:	f000 fc97 	bl	80091f8 <__mcmp>
 80088ca:	4602      	mov	r2, r0
 80088cc:	4631      	mov	r1, r6
 80088ce:	4658      	mov	r0, fp
 80088d0:	920e      	str	r2, [sp, #56]	@ 0x38
 80088d2:	f000 fa0d 	bl	8008cf0 <_Bfree>
 80088d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088d8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80088da:	9e07      	ldr	r6, [sp, #28]
 80088dc:	ea43 0102 	orr.w	r1, r3, r2
 80088e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80088e2:	4319      	orrs	r1, r3
 80088e4:	d110      	bne.n	8008908 <_dtoa_r+0xa20>
 80088e6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80088ea:	d029      	beq.n	8008940 <_dtoa_r+0xa58>
 80088ec:	9b08      	ldr	r3, [sp, #32]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	dd02      	ble.n	80088f8 <_dtoa_r+0xa10>
 80088f2:	9b02      	ldr	r3, [sp, #8]
 80088f4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80088f8:	9b00      	ldr	r3, [sp, #0]
 80088fa:	f883 8000 	strb.w	r8, [r3]
 80088fe:	e63f      	b.n	8008580 <_dtoa_r+0x698>
 8008900:	4628      	mov	r0, r5
 8008902:	e7bb      	b.n	800887c <_dtoa_r+0x994>
 8008904:	2201      	movs	r2, #1
 8008906:	e7e1      	b.n	80088cc <_dtoa_r+0x9e4>
 8008908:	9b08      	ldr	r3, [sp, #32]
 800890a:	2b00      	cmp	r3, #0
 800890c:	db04      	blt.n	8008918 <_dtoa_r+0xa30>
 800890e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008910:	430b      	orrs	r3, r1
 8008912:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008914:	430b      	orrs	r3, r1
 8008916:	d120      	bne.n	800895a <_dtoa_r+0xa72>
 8008918:	2a00      	cmp	r2, #0
 800891a:	dded      	ble.n	80088f8 <_dtoa_r+0xa10>
 800891c:	4649      	mov	r1, r9
 800891e:	2201      	movs	r2, #1
 8008920:	4658      	mov	r0, fp
 8008922:	f000 fbfd 	bl	8009120 <__lshift>
 8008926:	4621      	mov	r1, r4
 8008928:	4681      	mov	r9, r0
 800892a:	f000 fc65 	bl	80091f8 <__mcmp>
 800892e:	2800      	cmp	r0, #0
 8008930:	dc03      	bgt.n	800893a <_dtoa_r+0xa52>
 8008932:	d1e1      	bne.n	80088f8 <_dtoa_r+0xa10>
 8008934:	f018 0f01 	tst.w	r8, #1
 8008938:	d0de      	beq.n	80088f8 <_dtoa_r+0xa10>
 800893a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800893e:	d1d8      	bne.n	80088f2 <_dtoa_r+0xa0a>
 8008940:	9a00      	ldr	r2, [sp, #0]
 8008942:	2339      	movs	r3, #57	@ 0x39
 8008944:	7013      	strb	r3, [r2, #0]
 8008946:	4633      	mov	r3, r6
 8008948:	461e      	mov	r6, r3
 800894a:	3b01      	subs	r3, #1
 800894c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008950:	2a39      	cmp	r2, #57	@ 0x39
 8008952:	d052      	beq.n	80089fa <_dtoa_r+0xb12>
 8008954:	3201      	adds	r2, #1
 8008956:	701a      	strb	r2, [r3, #0]
 8008958:	e612      	b.n	8008580 <_dtoa_r+0x698>
 800895a:	2a00      	cmp	r2, #0
 800895c:	dd07      	ble.n	800896e <_dtoa_r+0xa86>
 800895e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008962:	d0ed      	beq.n	8008940 <_dtoa_r+0xa58>
 8008964:	9a00      	ldr	r2, [sp, #0]
 8008966:	f108 0301 	add.w	r3, r8, #1
 800896a:	7013      	strb	r3, [r2, #0]
 800896c:	e608      	b.n	8008580 <_dtoa_r+0x698>
 800896e:	9b07      	ldr	r3, [sp, #28]
 8008970:	9a07      	ldr	r2, [sp, #28]
 8008972:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008976:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008978:	4293      	cmp	r3, r2
 800897a:	d028      	beq.n	80089ce <_dtoa_r+0xae6>
 800897c:	4649      	mov	r1, r9
 800897e:	2300      	movs	r3, #0
 8008980:	220a      	movs	r2, #10
 8008982:	4658      	mov	r0, fp
 8008984:	f000 f9d6 	bl	8008d34 <__multadd>
 8008988:	42af      	cmp	r7, r5
 800898a:	4681      	mov	r9, r0
 800898c:	f04f 0300 	mov.w	r3, #0
 8008990:	f04f 020a 	mov.w	r2, #10
 8008994:	4639      	mov	r1, r7
 8008996:	4658      	mov	r0, fp
 8008998:	d107      	bne.n	80089aa <_dtoa_r+0xac2>
 800899a:	f000 f9cb 	bl	8008d34 <__multadd>
 800899e:	4607      	mov	r7, r0
 80089a0:	4605      	mov	r5, r0
 80089a2:	9b07      	ldr	r3, [sp, #28]
 80089a4:	3301      	adds	r3, #1
 80089a6:	9307      	str	r3, [sp, #28]
 80089a8:	e774      	b.n	8008894 <_dtoa_r+0x9ac>
 80089aa:	f000 f9c3 	bl	8008d34 <__multadd>
 80089ae:	4629      	mov	r1, r5
 80089b0:	4607      	mov	r7, r0
 80089b2:	2300      	movs	r3, #0
 80089b4:	220a      	movs	r2, #10
 80089b6:	4658      	mov	r0, fp
 80089b8:	f000 f9bc 	bl	8008d34 <__multadd>
 80089bc:	4605      	mov	r5, r0
 80089be:	e7f0      	b.n	80089a2 <_dtoa_r+0xaba>
 80089c0:	9b00      	ldr	r3, [sp, #0]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	bfcc      	ite	gt
 80089c6:	461e      	movgt	r6, r3
 80089c8:	2601      	movle	r6, #1
 80089ca:	4456      	add	r6, sl
 80089cc:	2700      	movs	r7, #0
 80089ce:	4649      	mov	r1, r9
 80089d0:	2201      	movs	r2, #1
 80089d2:	4658      	mov	r0, fp
 80089d4:	f000 fba4 	bl	8009120 <__lshift>
 80089d8:	4621      	mov	r1, r4
 80089da:	4681      	mov	r9, r0
 80089dc:	f000 fc0c 	bl	80091f8 <__mcmp>
 80089e0:	2800      	cmp	r0, #0
 80089e2:	dcb0      	bgt.n	8008946 <_dtoa_r+0xa5e>
 80089e4:	d102      	bne.n	80089ec <_dtoa_r+0xb04>
 80089e6:	f018 0f01 	tst.w	r8, #1
 80089ea:	d1ac      	bne.n	8008946 <_dtoa_r+0xa5e>
 80089ec:	4633      	mov	r3, r6
 80089ee:	461e      	mov	r6, r3
 80089f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80089f4:	2a30      	cmp	r2, #48	@ 0x30
 80089f6:	d0fa      	beq.n	80089ee <_dtoa_r+0xb06>
 80089f8:	e5c2      	b.n	8008580 <_dtoa_r+0x698>
 80089fa:	459a      	cmp	sl, r3
 80089fc:	d1a4      	bne.n	8008948 <_dtoa_r+0xa60>
 80089fe:	9b04      	ldr	r3, [sp, #16]
 8008a00:	3301      	adds	r3, #1
 8008a02:	9304      	str	r3, [sp, #16]
 8008a04:	2331      	movs	r3, #49	@ 0x31
 8008a06:	f88a 3000 	strb.w	r3, [sl]
 8008a0a:	e5b9      	b.n	8008580 <_dtoa_r+0x698>
 8008a0c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008a0e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008a6c <_dtoa_r+0xb84>
 8008a12:	b11b      	cbz	r3, 8008a1c <_dtoa_r+0xb34>
 8008a14:	f10a 0308 	add.w	r3, sl, #8
 8008a18:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008a1a:	6013      	str	r3, [r2, #0]
 8008a1c:	4650      	mov	r0, sl
 8008a1e:	b019      	add	sp, #100	@ 0x64
 8008a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a26:	2b01      	cmp	r3, #1
 8008a28:	f77f ae37 	ble.w	800869a <_dtoa_r+0x7b2>
 8008a2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a30:	2001      	movs	r0, #1
 8008a32:	e655      	b.n	80086e0 <_dtoa_r+0x7f8>
 8008a34:	9b00      	ldr	r3, [sp, #0]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	f77f aed6 	ble.w	80087e8 <_dtoa_r+0x900>
 8008a3c:	4656      	mov	r6, sl
 8008a3e:	4621      	mov	r1, r4
 8008a40:	4648      	mov	r0, r9
 8008a42:	f7ff f9c7 	bl	8007dd4 <quorem>
 8008a46:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008a4a:	f806 8b01 	strb.w	r8, [r6], #1
 8008a4e:	9b00      	ldr	r3, [sp, #0]
 8008a50:	eba6 020a 	sub.w	r2, r6, sl
 8008a54:	4293      	cmp	r3, r2
 8008a56:	ddb3      	ble.n	80089c0 <_dtoa_r+0xad8>
 8008a58:	4649      	mov	r1, r9
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	220a      	movs	r2, #10
 8008a5e:	4658      	mov	r0, fp
 8008a60:	f000 f968 	bl	8008d34 <__multadd>
 8008a64:	4681      	mov	r9, r0
 8008a66:	e7ea      	b.n	8008a3e <_dtoa_r+0xb56>
 8008a68:	0801a7ed 	.word	0x0801a7ed
 8008a6c:	0801a771 	.word	0x0801a771

08008a70 <_free_r>:
 8008a70:	b538      	push	{r3, r4, r5, lr}
 8008a72:	4605      	mov	r5, r0
 8008a74:	2900      	cmp	r1, #0
 8008a76:	d041      	beq.n	8008afc <_free_r+0x8c>
 8008a78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a7c:	1f0c      	subs	r4, r1, #4
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	bfb8      	it	lt
 8008a82:	18e4      	addlt	r4, r4, r3
 8008a84:	f000 f8e8 	bl	8008c58 <__malloc_lock>
 8008a88:	4a1d      	ldr	r2, [pc, #116]	@ (8008b00 <_free_r+0x90>)
 8008a8a:	6813      	ldr	r3, [r2, #0]
 8008a8c:	b933      	cbnz	r3, 8008a9c <_free_r+0x2c>
 8008a8e:	6063      	str	r3, [r4, #4]
 8008a90:	6014      	str	r4, [r2, #0]
 8008a92:	4628      	mov	r0, r5
 8008a94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a98:	f000 b8e4 	b.w	8008c64 <__malloc_unlock>
 8008a9c:	42a3      	cmp	r3, r4
 8008a9e:	d908      	bls.n	8008ab2 <_free_r+0x42>
 8008aa0:	6820      	ldr	r0, [r4, #0]
 8008aa2:	1821      	adds	r1, r4, r0
 8008aa4:	428b      	cmp	r3, r1
 8008aa6:	bf01      	itttt	eq
 8008aa8:	6819      	ldreq	r1, [r3, #0]
 8008aaa:	685b      	ldreq	r3, [r3, #4]
 8008aac:	1809      	addeq	r1, r1, r0
 8008aae:	6021      	streq	r1, [r4, #0]
 8008ab0:	e7ed      	b.n	8008a8e <_free_r+0x1e>
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	b10b      	cbz	r3, 8008abc <_free_r+0x4c>
 8008ab8:	42a3      	cmp	r3, r4
 8008aba:	d9fa      	bls.n	8008ab2 <_free_r+0x42>
 8008abc:	6811      	ldr	r1, [r2, #0]
 8008abe:	1850      	adds	r0, r2, r1
 8008ac0:	42a0      	cmp	r0, r4
 8008ac2:	d10b      	bne.n	8008adc <_free_r+0x6c>
 8008ac4:	6820      	ldr	r0, [r4, #0]
 8008ac6:	4401      	add	r1, r0
 8008ac8:	1850      	adds	r0, r2, r1
 8008aca:	4283      	cmp	r3, r0
 8008acc:	6011      	str	r1, [r2, #0]
 8008ace:	d1e0      	bne.n	8008a92 <_free_r+0x22>
 8008ad0:	6818      	ldr	r0, [r3, #0]
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	6053      	str	r3, [r2, #4]
 8008ad6:	4408      	add	r0, r1
 8008ad8:	6010      	str	r0, [r2, #0]
 8008ada:	e7da      	b.n	8008a92 <_free_r+0x22>
 8008adc:	d902      	bls.n	8008ae4 <_free_r+0x74>
 8008ade:	230c      	movs	r3, #12
 8008ae0:	602b      	str	r3, [r5, #0]
 8008ae2:	e7d6      	b.n	8008a92 <_free_r+0x22>
 8008ae4:	6820      	ldr	r0, [r4, #0]
 8008ae6:	1821      	adds	r1, r4, r0
 8008ae8:	428b      	cmp	r3, r1
 8008aea:	bf04      	itt	eq
 8008aec:	6819      	ldreq	r1, [r3, #0]
 8008aee:	685b      	ldreq	r3, [r3, #4]
 8008af0:	6063      	str	r3, [r4, #4]
 8008af2:	bf04      	itt	eq
 8008af4:	1809      	addeq	r1, r1, r0
 8008af6:	6021      	streq	r1, [r4, #0]
 8008af8:	6054      	str	r4, [r2, #4]
 8008afa:	e7ca      	b.n	8008a92 <_free_r+0x22>
 8008afc:	bd38      	pop	{r3, r4, r5, pc}
 8008afe:	bf00      	nop
 8008b00:	20000938 	.word	0x20000938

08008b04 <malloc>:
 8008b04:	4b02      	ldr	r3, [pc, #8]	@ (8008b10 <malloc+0xc>)
 8008b06:	4601      	mov	r1, r0
 8008b08:	6818      	ldr	r0, [r3, #0]
 8008b0a:	f000 b825 	b.w	8008b58 <_malloc_r>
 8008b0e:	bf00      	nop
 8008b10:	20000030 	.word	0x20000030

08008b14 <sbrk_aligned>:
 8008b14:	b570      	push	{r4, r5, r6, lr}
 8008b16:	4e0f      	ldr	r6, [pc, #60]	@ (8008b54 <sbrk_aligned+0x40>)
 8008b18:	460c      	mov	r4, r1
 8008b1a:	6831      	ldr	r1, [r6, #0]
 8008b1c:	4605      	mov	r5, r0
 8008b1e:	b911      	cbnz	r1, 8008b26 <sbrk_aligned+0x12>
 8008b20:	f001 ffd2 	bl	800aac8 <_sbrk_r>
 8008b24:	6030      	str	r0, [r6, #0]
 8008b26:	4621      	mov	r1, r4
 8008b28:	4628      	mov	r0, r5
 8008b2a:	f001 ffcd 	bl	800aac8 <_sbrk_r>
 8008b2e:	1c43      	adds	r3, r0, #1
 8008b30:	d103      	bne.n	8008b3a <sbrk_aligned+0x26>
 8008b32:	f04f 34ff 	mov.w	r4, #4294967295
 8008b36:	4620      	mov	r0, r4
 8008b38:	bd70      	pop	{r4, r5, r6, pc}
 8008b3a:	1cc4      	adds	r4, r0, #3
 8008b3c:	f024 0403 	bic.w	r4, r4, #3
 8008b40:	42a0      	cmp	r0, r4
 8008b42:	d0f8      	beq.n	8008b36 <sbrk_aligned+0x22>
 8008b44:	1a21      	subs	r1, r4, r0
 8008b46:	4628      	mov	r0, r5
 8008b48:	f001 ffbe 	bl	800aac8 <_sbrk_r>
 8008b4c:	3001      	adds	r0, #1
 8008b4e:	d1f2      	bne.n	8008b36 <sbrk_aligned+0x22>
 8008b50:	e7ef      	b.n	8008b32 <sbrk_aligned+0x1e>
 8008b52:	bf00      	nop
 8008b54:	20000934 	.word	0x20000934

08008b58 <_malloc_r>:
 8008b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b5c:	1ccd      	adds	r5, r1, #3
 8008b5e:	f025 0503 	bic.w	r5, r5, #3
 8008b62:	3508      	adds	r5, #8
 8008b64:	2d0c      	cmp	r5, #12
 8008b66:	bf38      	it	cc
 8008b68:	250c      	movcc	r5, #12
 8008b6a:	2d00      	cmp	r5, #0
 8008b6c:	4606      	mov	r6, r0
 8008b6e:	db01      	blt.n	8008b74 <_malloc_r+0x1c>
 8008b70:	42a9      	cmp	r1, r5
 8008b72:	d904      	bls.n	8008b7e <_malloc_r+0x26>
 8008b74:	230c      	movs	r3, #12
 8008b76:	6033      	str	r3, [r6, #0]
 8008b78:	2000      	movs	r0, #0
 8008b7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008c54 <_malloc_r+0xfc>
 8008b82:	f000 f869 	bl	8008c58 <__malloc_lock>
 8008b86:	f8d8 3000 	ldr.w	r3, [r8]
 8008b8a:	461c      	mov	r4, r3
 8008b8c:	bb44      	cbnz	r4, 8008be0 <_malloc_r+0x88>
 8008b8e:	4629      	mov	r1, r5
 8008b90:	4630      	mov	r0, r6
 8008b92:	f7ff ffbf 	bl	8008b14 <sbrk_aligned>
 8008b96:	1c43      	adds	r3, r0, #1
 8008b98:	4604      	mov	r4, r0
 8008b9a:	d158      	bne.n	8008c4e <_malloc_r+0xf6>
 8008b9c:	f8d8 4000 	ldr.w	r4, [r8]
 8008ba0:	4627      	mov	r7, r4
 8008ba2:	2f00      	cmp	r7, #0
 8008ba4:	d143      	bne.n	8008c2e <_malloc_r+0xd6>
 8008ba6:	2c00      	cmp	r4, #0
 8008ba8:	d04b      	beq.n	8008c42 <_malloc_r+0xea>
 8008baa:	6823      	ldr	r3, [r4, #0]
 8008bac:	4639      	mov	r1, r7
 8008bae:	4630      	mov	r0, r6
 8008bb0:	eb04 0903 	add.w	r9, r4, r3
 8008bb4:	f001 ff88 	bl	800aac8 <_sbrk_r>
 8008bb8:	4581      	cmp	r9, r0
 8008bba:	d142      	bne.n	8008c42 <_malloc_r+0xea>
 8008bbc:	6821      	ldr	r1, [r4, #0]
 8008bbe:	1a6d      	subs	r5, r5, r1
 8008bc0:	4629      	mov	r1, r5
 8008bc2:	4630      	mov	r0, r6
 8008bc4:	f7ff ffa6 	bl	8008b14 <sbrk_aligned>
 8008bc8:	3001      	adds	r0, #1
 8008bca:	d03a      	beq.n	8008c42 <_malloc_r+0xea>
 8008bcc:	6823      	ldr	r3, [r4, #0]
 8008bce:	442b      	add	r3, r5
 8008bd0:	6023      	str	r3, [r4, #0]
 8008bd2:	f8d8 3000 	ldr.w	r3, [r8]
 8008bd6:	685a      	ldr	r2, [r3, #4]
 8008bd8:	bb62      	cbnz	r2, 8008c34 <_malloc_r+0xdc>
 8008bda:	f8c8 7000 	str.w	r7, [r8]
 8008bde:	e00f      	b.n	8008c00 <_malloc_r+0xa8>
 8008be0:	6822      	ldr	r2, [r4, #0]
 8008be2:	1b52      	subs	r2, r2, r5
 8008be4:	d420      	bmi.n	8008c28 <_malloc_r+0xd0>
 8008be6:	2a0b      	cmp	r2, #11
 8008be8:	d917      	bls.n	8008c1a <_malloc_r+0xc2>
 8008bea:	1961      	adds	r1, r4, r5
 8008bec:	42a3      	cmp	r3, r4
 8008bee:	6025      	str	r5, [r4, #0]
 8008bf0:	bf18      	it	ne
 8008bf2:	6059      	strne	r1, [r3, #4]
 8008bf4:	6863      	ldr	r3, [r4, #4]
 8008bf6:	bf08      	it	eq
 8008bf8:	f8c8 1000 	streq.w	r1, [r8]
 8008bfc:	5162      	str	r2, [r4, r5]
 8008bfe:	604b      	str	r3, [r1, #4]
 8008c00:	4630      	mov	r0, r6
 8008c02:	f000 f82f 	bl	8008c64 <__malloc_unlock>
 8008c06:	f104 000b 	add.w	r0, r4, #11
 8008c0a:	1d23      	adds	r3, r4, #4
 8008c0c:	f020 0007 	bic.w	r0, r0, #7
 8008c10:	1ac2      	subs	r2, r0, r3
 8008c12:	bf1c      	itt	ne
 8008c14:	1a1b      	subne	r3, r3, r0
 8008c16:	50a3      	strne	r3, [r4, r2]
 8008c18:	e7af      	b.n	8008b7a <_malloc_r+0x22>
 8008c1a:	6862      	ldr	r2, [r4, #4]
 8008c1c:	42a3      	cmp	r3, r4
 8008c1e:	bf0c      	ite	eq
 8008c20:	f8c8 2000 	streq.w	r2, [r8]
 8008c24:	605a      	strne	r2, [r3, #4]
 8008c26:	e7eb      	b.n	8008c00 <_malloc_r+0xa8>
 8008c28:	4623      	mov	r3, r4
 8008c2a:	6864      	ldr	r4, [r4, #4]
 8008c2c:	e7ae      	b.n	8008b8c <_malloc_r+0x34>
 8008c2e:	463c      	mov	r4, r7
 8008c30:	687f      	ldr	r7, [r7, #4]
 8008c32:	e7b6      	b.n	8008ba2 <_malloc_r+0x4a>
 8008c34:	461a      	mov	r2, r3
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	42a3      	cmp	r3, r4
 8008c3a:	d1fb      	bne.n	8008c34 <_malloc_r+0xdc>
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	6053      	str	r3, [r2, #4]
 8008c40:	e7de      	b.n	8008c00 <_malloc_r+0xa8>
 8008c42:	230c      	movs	r3, #12
 8008c44:	6033      	str	r3, [r6, #0]
 8008c46:	4630      	mov	r0, r6
 8008c48:	f000 f80c 	bl	8008c64 <__malloc_unlock>
 8008c4c:	e794      	b.n	8008b78 <_malloc_r+0x20>
 8008c4e:	6005      	str	r5, [r0, #0]
 8008c50:	e7d6      	b.n	8008c00 <_malloc_r+0xa8>
 8008c52:	bf00      	nop
 8008c54:	20000938 	.word	0x20000938

08008c58 <__malloc_lock>:
 8008c58:	4801      	ldr	r0, [pc, #4]	@ (8008c60 <__malloc_lock+0x8>)
 8008c5a:	f7ff b8a4 	b.w	8007da6 <__retarget_lock_acquire_recursive>
 8008c5e:	bf00      	nop
 8008c60:	20000930 	.word	0x20000930

08008c64 <__malloc_unlock>:
 8008c64:	4801      	ldr	r0, [pc, #4]	@ (8008c6c <__malloc_unlock+0x8>)
 8008c66:	f7ff b89f 	b.w	8007da8 <__retarget_lock_release_recursive>
 8008c6a:	bf00      	nop
 8008c6c:	20000930 	.word	0x20000930

08008c70 <_Balloc>:
 8008c70:	b570      	push	{r4, r5, r6, lr}
 8008c72:	69c6      	ldr	r6, [r0, #28]
 8008c74:	4604      	mov	r4, r0
 8008c76:	460d      	mov	r5, r1
 8008c78:	b976      	cbnz	r6, 8008c98 <_Balloc+0x28>
 8008c7a:	2010      	movs	r0, #16
 8008c7c:	f7ff ff42 	bl	8008b04 <malloc>
 8008c80:	4602      	mov	r2, r0
 8008c82:	61e0      	str	r0, [r4, #28]
 8008c84:	b920      	cbnz	r0, 8008c90 <_Balloc+0x20>
 8008c86:	4b18      	ldr	r3, [pc, #96]	@ (8008ce8 <_Balloc+0x78>)
 8008c88:	4818      	ldr	r0, [pc, #96]	@ (8008cec <_Balloc+0x7c>)
 8008c8a:	216b      	movs	r1, #107	@ 0x6b
 8008c8c:	f001 ff34 	bl	800aaf8 <__assert_func>
 8008c90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c94:	6006      	str	r6, [r0, #0]
 8008c96:	60c6      	str	r6, [r0, #12]
 8008c98:	69e6      	ldr	r6, [r4, #28]
 8008c9a:	68f3      	ldr	r3, [r6, #12]
 8008c9c:	b183      	cbz	r3, 8008cc0 <_Balloc+0x50>
 8008c9e:	69e3      	ldr	r3, [r4, #28]
 8008ca0:	68db      	ldr	r3, [r3, #12]
 8008ca2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008ca6:	b9b8      	cbnz	r0, 8008cd8 <_Balloc+0x68>
 8008ca8:	2101      	movs	r1, #1
 8008caa:	fa01 f605 	lsl.w	r6, r1, r5
 8008cae:	1d72      	adds	r2, r6, #5
 8008cb0:	0092      	lsls	r2, r2, #2
 8008cb2:	4620      	mov	r0, r4
 8008cb4:	f001 ff3e 	bl	800ab34 <_calloc_r>
 8008cb8:	b160      	cbz	r0, 8008cd4 <_Balloc+0x64>
 8008cba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008cbe:	e00e      	b.n	8008cde <_Balloc+0x6e>
 8008cc0:	2221      	movs	r2, #33	@ 0x21
 8008cc2:	2104      	movs	r1, #4
 8008cc4:	4620      	mov	r0, r4
 8008cc6:	f001 ff35 	bl	800ab34 <_calloc_r>
 8008cca:	69e3      	ldr	r3, [r4, #28]
 8008ccc:	60f0      	str	r0, [r6, #12]
 8008cce:	68db      	ldr	r3, [r3, #12]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d1e4      	bne.n	8008c9e <_Balloc+0x2e>
 8008cd4:	2000      	movs	r0, #0
 8008cd6:	bd70      	pop	{r4, r5, r6, pc}
 8008cd8:	6802      	ldr	r2, [r0, #0]
 8008cda:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008cde:	2300      	movs	r3, #0
 8008ce0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008ce4:	e7f7      	b.n	8008cd6 <_Balloc+0x66>
 8008ce6:	bf00      	nop
 8008ce8:	0801a77e 	.word	0x0801a77e
 8008cec:	0801a7fe 	.word	0x0801a7fe

08008cf0 <_Bfree>:
 8008cf0:	b570      	push	{r4, r5, r6, lr}
 8008cf2:	69c6      	ldr	r6, [r0, #28]
 8008cf4:	4605      	mov	r5, r0
 8008cf6:	460c      	mov	r4, r1
 8008cf8:	b976      	cbnz	r6, 8008d18 <_Bfree+0x28>
 8008cfa:	2010      	movs	r0, #16
 8008cfc:	f7ff ff02 	bl	8008b04 <malloc>
 8008d00:	4602      	mov	r2, r0
 8008d02:	61e8      	str	r0, [r5, #28]
 8008d04:	b920      	cbnz	r0, 8008d10 <_Bfree+0x20>
 8008d06:	4b09      	ldr	r3, [pc, #36]	@ (8008d2c <_Bfree+0x3c>)
 8008d08:	4809      	ldr	r0, [pc, #36]	@ (8008d30 <_Bfree+0x40>)
 8008d0a:	218f      	movs	r1, #143	@ 0x8f
 8008d0c:	f001 fef4 	bl	800aaf8 <__assert_func>
 8008d10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d14:	6006      	str	r6, [r0, #0]
 8008d16:	60c6      	str	r6, [r0, #12]
 8008d18:	b13c      	cbz	r4, 8008d2a <_Bfree+0x3a>
 8008d1a:	69eb      	ldr	r3, [r5, #28]
 8008d1c:	6862      	ldr	r2, [r4, #4]
 8008d1e:	68db      	ldr	r3, [r3, #12]
 8008d20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008d24:	6021      	str	r1, [r4, #0]
 8008d26:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008d2a:	bd70      	pop	{r4, r5, r6, pc}
 8008d2c:	0801a77e 	.word	0x0801a77e
 8008d30:	0801a7fe 	.word	0x0801a7fe

08008d34 <__multadd>:
 8008d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d38:	690d      	ldr	r5, [r1, #16]
 8008d3a:	4607      	mov	r7, r0
 8008d3c:	460c      	mov	r4, r1
 8008d3e:	461e      	mov	r6, r3
 8008d40:	f101 0c14 	add.w	ip, r1, #20
 8008d44:	2000      	movs	r0, #0
 8008d46:	f8dc 3000 	ldr.w	r3, [ip]
 8008d4a:	b299      	uxth	r1, r3
 8008d4c:	fb02 6101 	mla	r1, r2, r1, r6
 8008d50:	0c1e      	lsrs	r6, r3, #16
 8008d52:	0c0b      	lsrs	r3, r1, #16
 8008d54:	fb02 3306 	mla	r3, r2, r6, r3
 8008d58:	b289      	uxth	r1, r1
 8008d5a:	3001      	adds	r0, #1
 8008d5c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008d60:	4285      	cmp	r5, r0
 8008d62:	f84c 1b04 	str.w	r1, [ip], #4
 8008d66:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008d6a:	dcec      	bgt.n	8008d46 <__multadd+0x12>
 8008d6c:	b30e      	cbz	r6, 8008db2 <__multadd+0x7e>
 8008d6e:	68a3      	ldr	r3, [r4, #8]
 8008d70:	42ab      	cmp	r3, r5
 8008d72:	dc19      	bgt.n	8008da8 <__multadd+0x74>
 8008d74:	6861      	ldr	r1, [r4, #4]
 8008d76:	4638      	mov	r0, r7
 8008d78:	3101      	adds	r1, #1
 8008d7a:	f7ff ff79 	bl	8008c70 <_Balloc>
 8008d7e:	4680      	mov	r8, r0
 8008d80:	b928      	cbnz	r0, 8008d8e <__multadd+0x5a>
 8008d82:	4602      	mov	r2, r0
 8008d84:	4b0c      	ldr	r3, [pc, #48]	@ (8008db8 <__multadd+0x84>)
 8008d86:	480d      	ldr	r0, [pc, #52]	@ (8008dbc <__multadd+0x88>)
 8008d88:	21ba      	movs	r1, #186	@ 0xba
 8008d8a:	f001 feb5 	bl	800aaf8 <__assert_func>
 8008d8e:	6922      	ldr	r2, [r4, #16]
 8008d90:	3202      	adds	r2, #2
 8008d92:	f104 010c 	add.w	r1, r4, #12
 8008d96:	0092      	lsls	r2, r2, #2
 8008d98:	300c      	adds	r0, #12
 8008d9a:	f7ff f806 	bl	8007daa <memcpy>
 8008d9e:	4621      	mov	r1, r4
 8008da0:	4638      	mov	r0, r7
 8008da2:	f7ff ffa5 	bl	8008cf0 <_Bfree>
 8008da6:	4644      	mov	r4, r8
 8008da8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008dac:	3501      	adds	r5, #1
 8008dae:	615e      	str	r6, [r3, #20]
 8008db0:	6125      	str	r5, [r4, #16]
 8008db2:	4620      	mov	r0, r4
 8008db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008db8:	0801a7ed 	.word	0x0801a7ed
 8008dbc:	0801a7fe 	.word	0x0801a7fe

08008dc0 <__s2b>:
 8008dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008dc4:	460c      	mov	r4, r1
 8008dc6:	4615      	mov	r5, r2
 8008dc8:	461f      	mov	r7, r3
 8008dca:	2209      	movs	r2, #9
 8008dcc:	3308      	adds	r3, #8
 8008dce:	4606      	mov	r6, r0
 8008dd0:	fb93 f3f2 	sdiv	r3, r3, r2
 8008dd4:	2100      	movs	r1, #0
 8008dd6:	2201      	movs	r2, #1
 8008dd8:	429a      	cmp	r2, r3
 8008dda:	db09      	blt.n	8008df0 <__s2b+0x30>
 8008ddc:	4630      	mov	r0, r6
 8008dde:	f7ff ff47 	bl	8008c70 <_Balloc>
 8008de2:	b940      	cbnz	r0, 8008df6 <__s2b+0x36>
 8008de4:	4602      	mov	r2, r0
 8008de6:	4b19      	ldr	r3, [pc, #100]	@ (8008e4c <__s2b+0x8c>)
 8008de8:	4819      	ldr	r0, [pc, #100]	@ (8008e50 <__s2b+0x90>)
 8008dea:	21d3      	movs	r1, #211	@ 0xd3
 8008dec:	f001 fe84 	bl	800aaf8 <__assert_func>
 8008df0:	0052      	lsls	r2, r2, #1
 8008df2:	3101      	adds	r1, #1
 8008df4:	e7f0      	b.n	8008dd8 <__s2b+0x18>
 8008df6:	9b08      	ldr	r3, [sp, #32]
 8008df8:	6143      	str	r3, [r0, #20]
 8008dfa:	2d09      	cmp	r5, #9
 8008dfc:	f04f 0301 	mov.w	r3, #1
 8008e00:	6103      	str	r3, [r0, #16]
 8008e02:	dd16      	ble.n	8008e32 <__s2b+0x72>
 8008e04:	f104 0909 	add.w	r9, r4, #9
 8008e08:	46c8      	mov	r8, r9
 8008e0a:	442c      	add	r4, r5
 8008e0c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008e10:	4601      	mov	r1, r0
 8008e12:	3b30      	subs	r3, #48	@ 0x30
 8008e14:	220a      	movs	r2, #10
 8008e16:	4630      	mov	r0, r6
 8008e18:	f7ff ff8c 	bl	8008d34 <__multadd>
 8008e1c:	45a0      	cmp	r8, r4
 8008e1e:	d1f5      	bne.n	8008e0c <__s2b+0x4c>
 8008e20:	f1a5 0408 	sub.w	r4, r5, #8
 8008e24:	444c      	add	r4, r9
 8008e26:	1b2d      	subs	r5, r5, r4
 8008e28:	1963      	adds	r3, r4, r5
 8008e2a:	42bb      	cmp	r3, r7
 8008e2c:	db04      	blt.n	8008e38 <__s2b+0x78>
 8008e2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e32:	340a      	adds	r4, #10
 8008e34:	2509      	movs	r5, #9
 8008e36:	e7f6      	b.n	8008e26 <__s2b+0x66>
 8008e38:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008e3c:	4601      	mov	r1, r0
 8008e3e:	3b30      	subs	r3, #48	@ 0x30
 8008e40:	220a      	movs	r2, #10
 8008e42:	4630      	mov	r0, r6
 8008e44:	f7ff ff76 	bl	8008d34 <__multadd>
 8008e48:	e7ee      	b.n	8008e28 <__s2b+0x68>
 8008e4a:	bf00      	nop
 8008e4c:	0801a7ed 	.word	0x0801a7ed
 8008e50:	0801a7fe 	.word	0x0801a7fe

08008e54 <__hi0bits>:
 8008e54:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008e58:	4603      	mov	r3, r0
 8008e5a:	bf36      	itet	cc
 8008e5c:	0403      	lslcc	r3, r0, #16
 8008e5e:	2000      	movcs	r0, #0
 8008e60:	2010      	movcc	r0, #16
 8008e62:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008e66:	bf3c      	itt	cc
 8008e68:	021b      	lslcc	r3, r3, #8
 8008e6a:	3008      	addcc	r0, #8
 8008e6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008e70:	bf3c      	itt	cc
 8008e72:	011b      	lslcc	r3, r3, #4
 8008e74:	3004      	addcc	r0, #4
 8008e76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e7a:	bf3c      	itt	cc
 8008e7c:	009b      	lslcc	r3, r3, #2
 8008e7e:	3002      	addcc	r0, #2
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	db05      	blt.n	8008e90 <__hi0bits+0x3c>
 8008e84:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008e88:	f100 0001 	add.w	r0, r0, #1
 8008e8c:	bf08      	it	eq
 8008e8e:	2020      	moveq	r0, #32
 8008e90:	4770      	bx	lr

08008e92 <__lo0bits>:
 8008e92:	6803      	ldr	r3, [r0, #0]
 8008e94:	4602      	mov	r2, r0
 8008e96:	f013 0007 	ands.w	r0, r3, #7
 8008e9a:	d00b      	beq.n	8008eb4 <__lo0bits+0x22>
 8008e9c:	07d9      	lsls	r1, r3, #31
 8008e9e:	d421      	bmi.n	8008ee4 <__lo0bits+0x52>
 8008ea0:	0798      	lsls	r0, r3, #30
 8008ea2:	bf49      	itett	mi
 8008ea4:	085b      	lsrmi	r3, r3, #1
 8008ea6:	089b      	lsrpl	r3, r3, #2
 8008ea8:	2001      	movmi	r0, #1
 8008eaa:	6013      	strmi	r3, [r2, #0]
 8008eac:	bf5c      	itt	pl
 8008eae:	6013      	strpl	r3, [r2, #0]
 8008eb0:	2002      	movpl	r0, #2
 8008eb2:	4770      	bx	lr
 8008eb4:	b299      	uxth	r1, r3
 8008eb6:	b909      	cbnz	r1, 8008ebc <__lo0bits+0x2a>
 8008eb8:	0c1b      	lsrs	r3, r3, #16
 8008eba:	2010      	movs	r0, #16
 8008ebc:	b2d9      	uxtb	r1, r3
 8008ebe:	b909      	cbnz	r1, 8008ec4 <__lo0bits+0x32>
 8008ec0:	3008      	adds	r0, #8
 8008ec2:	0a1b      	lsrs	r3, r3, #8
 8008ec4:	0719      	lsls	r1, r3, #28
 8008ec6:	bf04      	itt	eq
 8008ec8:	091b      	lsreq	r3, r3, #4
 8008eca:	3004      	addeq	r0, #4
 8008ecc:	0799      	lsls	r1, r3, #30
 8008ece:	bf04      	itt	eq
 8008ed0:	089b      	lsreq	r3, r3, #2
 8008ed2:	3002      	addeq	r0, #2
 8008ed4:	07d9      	lsls	r1, r3, #31
 8008ed6:	d403      	bmi.n	8008ee0 <__lo0bits+0x4e>
 8008ed8:	085b      	lsrs	r3, r3, #1
 8008eda:	f100 0001 	add.w	r0, r0, #1
 8008ede:	d003      	beq.n	8008ee8 <__lo0bits+0x56>
 8008ee0:	6013      	str	r3, [r2, #0]
 8008ee2:	4770      	bx	lr
 8008ee4:	2000      	movs	r0, #0
 8008ee6:	4770      	bx	lr
 8008ee8:	2020      	movs	r0, #32
 8008eea:	4770      	bx	lr

08008eec <__i2b>:
 8008eec:	b510      	push	{r4, lr}
 8008eee:	460c      	mov	r4, r1
 8008ef0:	2101      	movs	r1, #1
 8008ef2:	f7ff febd 	bl	8008c70 <_Balloc>
 8008ef6:	4602      	mov	r2, r0
 8008ef8:	b928      	cbnz	r0, 8008f06 <__i2b+0x1a>
 8008efa:	4b05      	ldr	r3, [pc, #20]	@ (8008f10 <__i2b+0x24>)
 8008efc:	4805      	ldr	r0, [pc, #20]	@ (8008f14 <__i2b+0x28>)
 8008efe:	f240 1145 	movw	r1, #325	@ 0x145
 8008f02:	f001 fdf9 	bl	800aaf8 <__assert_func>
 8008f06:	2301      	movs	r3, #1
 8008f08:	6144      	str	r4, [r0, #20]
 8008f0a:	6103      	str	r3, [r0, #16]
 8008f0c:	bd10      	pop	{r4, pc}
 8008f0e:	bf00      	nop
 8008f10:	0801a7ed 	.word	0x0801a7ed
 8008f14:	0801a7fe 	.word	0x0801a7fe

08008f18 <__multiply>:
 8008f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f1c:	4614      	mov	r4, r2
 8008f1e:	690a      	ldr	r2, [r1, #16]
 8008f20:	6923      	ldr	r3, [r4, #16]
 8008f22:	429a      	cmp	r2, r3
 8008f24:	bfa8      	it	ge
 8008f26:	4623      	movge	r3, r4
 8008f28:	460f      	mov	r7, r1
 8008f2a:	bfa4      	itt	ge
 8008f2c:	460c      	movge	r4, r1
 8008f2e:	461f      	movge	r7, r3
 8008f30:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008f34:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008f38:	68a3      	ldr	r3, [r4, #8]
 8008f3a:	6861      	ldr	r1, [r4, #4]
 8008f3c:	eb0a 0609 	add.w	r6, sl, r9
 8008f40:	42b3      	cmp	r3, r6
 8008f42:	b085      	sub	sp, #20
 8008f44:	bfb8      	it	lt
 8008f46:	3101      	addlt	r1, #1
 8008f48:	f7ff fe92 	bl	8008c70 <_Balloc>
 8008f4c:	b930      	cbnz	r0, 8008f5c <__multiply+0x44>
 8008f4e:	4602      	mov	r2, r0
 8008f50:	4b44      	ldr	r3, [pc, #272]	@ (8009064 <__multiply+0x14c>)
 8008f52:	4845      	ldr	r0, [pc, #276]	@ (8009068 <__multiply+0x150>)
 8008f54:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008f58:	f001 fdce 	bl	800aaf8 <__assert_func>
 8008f5c:	f100 0514 	add.w	r5, r0, #20
 8008f60:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008f64:	462b      	mov	r3, r5
 8008f66:	2200      	movs	r2, #0
 8008f68:	4543      	cmp	r3, r8
 8008f6a:	d321      	bcc.n	8008fb0 <__multiply+0x98>
 8008f6c:	f107 0114 	add.w	r1, r7, #20
 8008f70:	f104 0214 	add.w	r2, r4, #20
 8008f74:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008f78:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008f7c:	9302      	str	r3, [sp, #8]
 8008f7e:	1b13      	subs	r3, r2, r4
 8008f80:	3b15      	subs	r3, #21
 8008f82:	f023 0303 	bic.w	r3, r3, #3
 8008f86:	3304      	adds	r3, #4
 8008f88:	f104 0715 	add.w	r7, r4, #21
 8008f8c:	42ba      	cmp	r2, r7
 8008f8e:	bf38      	it	cc
 8008f90:	2304      	movcc	r3, #4
 8008f92:	9301      	str	r3, [sp, #4]
 8008f94:	9b02      	ldr	r3, [sp, #8]
 8008f96:	9103      	str	r1, [sp, #12]
 8008f98:	428b      	cmp	r3, r1
 8008f9a:	d80c      	bhi.n	8008fb6 <__multiply+0x9e>
 8008f9c:	2e00      	cmp	r6, #0
 8008f9e:	dd03      	ble.n	8008fa8 <__multiply+0x90>
 8008fa0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d05b      	beq.n	8009060 <__multiply+0x148>
 8008fa8:	6106      	str	r6, [r0, #16]
 8008faa:	b005      	add	sp, #20
 8008fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fb0:	f843 2b04 	str.w	r2, [r3], #4
 8008fb4:	e7d8      	b.n	8008f68 <__multiply+0x50>
 8008fb6:	f8b1 a000 	ldrh.w	sl, [r1]
 8008fba:	f1ba 0f00 	cmp.w	sl, #0
 8008fbe:	d024      	beq.n	800900a <__multiply+0xf2>
 8008fc0:	f104 0e14 	add.w	lr, r4, #20
 8008fc4:	46a9      	mov	r9, r5
 8008fc6:	f04f 0c00 	mov.w	ip, #0
 8008fca:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008fce:	f8d9 3000 	ldr.w	r3, [r9]
 8008fd2:	fa1f fb87 	uxth.w	fp, r7
 8008fd6:	b29b      	uxth	r3, r3
 8008fd8:	fb0a 330b 	mla	r3, sl, fp, r3
 8008fdc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008fe0:	f8d9 7000 	ldr.w	r7, [r9]
 8008fe4:	4463      	add	r3, ip
 8008fe6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008fea:	fb0a c70b 	mla	r7, sl, fp, ip
 8008fee:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008ff2:	b29b      	uxth	r3, r3
 8008ff4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008ff8:	4572      	cmp	r2, lr
 8008ffa:	f849 3b04 	str.w	r3, [r9], #4
 8008ffe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009002:	d8e2      	bhi.n	8008fca <__multiply+0xb2>
 8009004:	9b01      	ldr	r3, [sp, #4]
 8009006:	f845 c003 	str.w	ip, [r5, r3]
 800900a:	9b03      	ldr	r3, [sp, #12]
 800900c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009010:	3104      	adds	r1, #4
 8009012:	f1b9 0f00 	cmp.w	r9, #0
 8009016:	d021      	beq.n	800905c <__multiply+0x144>
 8009018:	682b      	ldr	r3, [r5, #0]
 800901a:	f104 0c14 	add.w	ip, r4, #20
 800901e:	46ae      	mov	lr, r5
 8009020:	f04f 0a00 	mov.w	sl, #0
 8009024:	f8bc b000 	ldrh.w	fp, [ip]
 8009028:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800902c:	fb09 770b 	mla	r7, r9, fp, r7
 8009030:	4457      	add	r7, sl
 8009032:	b29b      	uxth	r3, r3
 8009034:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009038:	f84e 3b04 	str.w	r3, [lr], #4
 800903c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009040:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009044:	f8be 3000 	ldrh.w	r3, [lr]
 8009048:	fb09 330a 	mla	r3, r9, sl, r3
 800904c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009050:	4562      	cmp	r2, ip
 8009052:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009056:	d8e5      	bhi.n	8009024 <__multiply+0x10c>
 8009058:	9f01      	ldr	r7, [sp, #4]
 800905a:	51eb      	str	r3, [r5, r7]
 800905c:	3504      	adds	r5, #4
 800905e:	e799      	b.n	8008f94 <__multiply+0x7c>
 8009060:	3e01      	subs	r6, #1
 8009062:	e79b      	b.n	8008f9c <__multiply+0x84>
 8009064:	0801a7ed 	.word	0x0801a7ed
 8009068:	0801a7fe 	.word	0x0801a7fe

0800906c <__pow5mult>:
 800906c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009070:	4615      	mov	r5, r2
 8009072:	f012 0203 	ands.w	r2, r2, #3
 8009076:	4607      	mov	r7, r0
 8009078:	460e      	mov	r6, r1
 800907a:	d007      	beq.n	800908c <__pow5mult+0x20>
 800907c:	4c25      	ldr	r4, [pc, #148]	@ (8009114 <__pow5mult+0xa8>)
 800907e:	3a01      	subs	r2, #1
 8009080:	2300      	movs	r3, #0
 8009082:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009086:	f7ff fe55 	bl	8008d34 <__multadd>
 800908a:	4606      	mov	r6, r0
 800908c:	10ad      	asrs	r5, r5, #2
 800908e:	d03d      	beq.n	800910c <__pow5mult+0xa0>
 8009090:	69fc      	ldr	r4, [r7, #28]
 8009092:	b97c      	cbnz	r4, 80090b4 <__pow5mult+0x48>
 8009094:	2010      	movs	r0, #16
 8009096:	f7ff fd35 	bl	8008b04 <malloc>
 800909a:	4602      	mov	r2, r0
 800909c:	61f8      	str	r0, [r7, #28]
 800909e:	b928      	cbnz	r0, 80090ac <__pow5mult+0x40>
 80090a0:	4b1d      	ldr	r3, [pc, #116]	@ (8009118 <__pow5mult+0xac>)
 80090a2:	481e      	ldr	r0, [pc, #120]	@ (800911c <__pow5mult+0xb0>)
 80090a4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80090a8:	f001 fd26 	bl	800aaf8 <__assert_func>
 80090ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80090b0:	6004      	str	r4, [r0, #0]
 80090b2:	60c4      	str	r4, [r0, #12]
 80090b4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80090b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80090bc:	b94c      	cbnz	r4, 80090d2 <__pow5mult+0x66>
 80090be:	f240 2171 	movw	r1, #625	@ 0x271
 80090c2:	4638      	mov	r0, r7
 80090c4:	f7ff ff12 	bl	8008eec <__i2b>
 80090c8:	2300      	movs	r3, #0
 80090ca:	f8c8 0008 	str.w	r0, [r8, #8]
 80090ce:	4604      	mov	r4, r0
 80090d0:	6003      	str	r3, [r0, #0]
 80090d2:	f04f 0900 	mov.w	r9, #0
 80090d6:	07eb      	lsls	r3, r5, #31
 80090d8:	d50a      	bpl.n	80090f0 <__pow5mult+0x84>
 80090da:	4631      	mov	r1, r6
 80090dc:	4622      	mov	r2, r4
 80090de:	4638      	mov	r0, r7
 80090e0:	f7ff ff1a 	bl	8008f18 <__multiply>
 80090e4:	4631      	mov	r1, r6
 80090e6:	4680      	mov	r8, r0
 80090e8:	4638      	mov	r0, r7
 80090ea:	f7ff fe01 	bl	8008cf0 <_Bfree>
 80090ee:	4646      	mov	r6, r8
 80090f0:	106d      	asrs	r5, r5, #1
 80090f2:	d00b      	beq.n	800910c <__pow5mult+0xa0>
 80090f4:	6820      	ldr	r0, [r4, #0]
 80090f6:	b938      	cbnz	r0, 8009108 <__pow5mult+0x9c>
 80090f8:	4622      	mov	r2, r4
 80090fa:	4621      	mov	r1, r4
 80090fc:	4638      	mov	r0, r7
 80090fe:	f7ff ff0b 	bl	8008f18 <__multiply>
 8009102:	6020      	str	r0, [r4, #0]
 8009104:	f8c0 9000 	str.w	r9, [r0]
 8009108:	4604      	mov	r4, r0
 800910a:	e7e4      	b.n	80090d6 <__pow5mult+0x6a>
 800910c:	4630      	mov	r0, r6
 800910e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009112:	bf00      	nop
 8009114:	0801a858 	.word	0x0801a858
 8009118:	0801a77e 	.word	0x0801a77e
 800911c:	0801a7fe 	.word	0x0801a7fe

08009120 <__lshift>:
 8009120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009124:	460c      	mov	r4, r1
 8009126:	6849      	ldr	r1, [r1, #4]
 8009128:	6923      	ldr	r3, [r4, #16]
 800912a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800912e:	68a3      	ldr	r3, [r4, #8]
 8009130:	4607      	mov	r7, r0
 8009132:	4691      	mov	r9, r2
 8009134:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009138:	f108 0601 	add.w	r6, r8, #1
 800913c:	42b3      	cmp	r3, r6
 800913e:	db0b      	blt.n	8009158 <__lshift+0x38>
 8009140:	4638      	mov	r0, r7
 8009142:	f7ff fd95 	bl	8008c70 <_Balloc>
 8009146:	4605      	mov	r5, r0
 8009148:	b948      	cbnz	r0, 800915e <__lshift+0x3e>
 800914a:	4602      	mov	r2, r0
 800914c:	4b28      	ldr	r3, [pc, #160]	@ (80091f0 <__lshift+0xd0>)
 800914e:	4829      	ldr	r0, [pc, #164]	@ (80091f4 <__lshift+0xd4>)
 8009150:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009154:	f001 fcd0 	bl	800aaf8 <__assert_func>
 8009158:	3101      	adds	r1, #1
 800915a:	005b      	lsls	r3, r3, #1
 800915c:	e7ee      	b.n	800913c <__lshift+0x1c>
 800915e:	2300      	movs	r3, #0
 8009160:	f100 0114 	add.w	r1, r0, #20
 8009164:	f100 0210 	add.w	r2, r0, #16
 8009168:	4618      	mov	r0, r3
 800916a:	4553      	cmp	r3, sl
 800916c:	db33      	blt.n	80091d6 <__lshift+0xb6>
 800916e:	6920      	ldr	r0, [r4, #16]
 8009170:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009174:	f104 0314 	add.w	r3, r4, #20
 8009178:	f019 091f 	ands.w	r9, r9, #31
 800917c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009180:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009184:	d02b      	beq.n	80091de <__lshift+0xbe>
 8009186:	f1c9 0e20 	rsb	lr, r9, #32
 800918a:	468a      	mov	sl, r1
 800918c:	2200      	movs	r2, #0
 800918e:	6818      	ldr	r0, [r3, #0]
 8009190:	fa00 f009 	lsl.w	r0, r0, r9
 8009194:	4310      	orrs	r0, r2
 8009196:	f84a 0b04 	str.w	r0, [sl], #4
 800919a:	f853 2b04 	ldr.w	r2, [r3], #4
 800919e:	459c      	cmp	ip, r3
 80091a0:	fa22 f20e 	lsr.w	r2, r2, lr
 80091a4:	d8f3      	bhi.n	800918e <__lshift+0x6e>
 80091a6:	ebac 0304 	sub.w	r3, ip, r4
 80091aa:	3b15      	subs	r3, #21
 80091ac:	f023 0303 	bic.w	r3, r3, #3
 80091b0:	3304      	adds	r3, #4
 80091b2:	f104 0015 	add.w	r0, r4, #21
 80091b6:	4584      	cmp	ip, r0
 80091b8:	bf38      	it	cc
 80091ba:	2304      	movcc	r3, #4
 80091bc:	50ca      	str	r2, [r1, r3]
 80091be:	b10a      	cbz	r2, 80091c4 <__lshift+0xa4>
 80091c0:	f108 0602 	add.w	r6, r8, #2
 80091c4:	3e01      	subs	r6, #1
 80091c6:	4638      	mov	r0, r7
 80091c8:	612e      	str	r6, [r5, #16]
 80091ca:	4621      	mov	r1, r4
 80091cc:	f7ff fd90 	bl	8008cf0 <_Bfree>
 80091d0:	4628      	mov	r0, r5
 80091d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091d6:	f842 0f04 	str.w	r0, [r2, #4]!
 80091da:	3301      	adds	r3, #1
 80091dc:	e7c5      	b.n	800916a <__lshift+0x4a>
 80091de:	3904      	subs	r1, #4
 80091e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80091e4:	f841 2f04 	str.w	r2, [r1, #4]!
 80091e8:	459c      	cmp	ip, r3
 80091ea:	d8f9      	bhi.n	80091e0 <__lshift+0xc0>
 80091ec:	e7ea      	b.n	80091c4 <__lshift+0xa4>
 80091ee:	bf00      	nop
 80091f0:	0801a7ed 	.word	0x0801a7ed
 80091f4:	0801a7fe 	.word	0x0801a7fe

080091f8 <__mcmp>:
 80091f8:	690a      	ldr	r2, [r1, #16]
 80091fa:	4603      	mov	r3, r0
 80091fc:	6900      	ldr	r0, [r0, #16]
 80091fe:	1a80      	subs	r0, r0, r2
 8009200:	b530      	push	{r4, r5, lr}
 8009202:	d10e      	bne.n	8009222 <__mcmp+0x2a>
 8009204:	3314      	adds	r3, #20
 8009206:	3114      	adds	r1, #20
 8009208:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800920c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009210:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009214:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009218:	4295      	cmp	r5, r2
 800921a:	d003      	beq.n	8009224 <__mcmp+0x2c>
 800921c:	d205      	bcs.n	800922a <__mcmp+0x32>
 800921e:	f04f 30ff 	mov.w	r0, #4294967295
 8009222:	bd30      	pop	{r4, r5, pc}
 8009224:	42a3      	cmp	r3, r4
 8009226:	d3f3      	bcc.n	8009210 <__mcmp+0x18>
 8009228:	e7fb      	b.n	8009222 <__mcmp+0x2a>
 800922a:	2001      	movs	r0, #1
 800922c:	e7f9      	b.n	8009222 <__mcmp+0x2a>
	...

08009230 <__mdiff>:
 8009230:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009234:	4689      	mov	r9, r1
 8009236:	4606      	mov	r6, r0
 8009238:	4611      	mov	r1, r2
 800923a:	4648      	mov	r0, r9
 800923c:	4614      	mov	r4, r2
 800923e:	f7ff ffdb 	bl	80091f8 <__mcmp>
 8009242:	1e05      	subs	r5, r0, #0
 8009244:	d112      	bne.n	800926c <__mdiff+0x3c>
 8009246:	4629      	mov	r1, r5
 8009248:	4630      	mov	r0, r6
 800924a:	f7ff fd11 	bl	8008c70 <_Balloc>
 800924e:	4602      	mov	r2, r0
 8009250:	b928      	cbnz	r0, 800925e <__mdiff+0x2e>
 8009252:	4b3f      	ldr	r3, [pc, #252]	@ (8009350 <__mdiff+0x120>)
 8009254:	f240 2137 	movw	r1, #567	@ 0x237
 8009258:	483e      	ldr	r0, [pc, #248]	@ (8009354 <__mdiff+0x124>)
 800925a:	f001 fc4d 	bl	800aaf8 <__assert_func>
 800925e:	2301      	movs	r3, #1
 8009260:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009264:	4610      	mov	r0, r2
 8009266:	b003      	add	sp, #12
 8009268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800926c:	bfbc      	itt	lt
 800926e:	464b      	movlt	r3, r9
 8009270:	46a1      	movlt	r9, r4
 8009272:	4630      	mov	r0, r6
 8009274:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009278:	bfba      	itte	lt
 800927a:	461c      	movlt	r4, r3
 800927c:	2501      	movlt	r5, #1
 800927e:	2500      	movge	r5, #0
 8009280:	f7ff fcf6 	bl	8008c70 <_Balloc>
 8009284:	4602      	mov	r2, r0
 8009286:	b918      	cbnz	r0, 8009290 <__mdiff+0x60>
 8009288:	4b31      	ldr	r3, [pc, #196]	@ (8009350 <__mdiff+0x120>)
 800928a:	f240 2145 	movw	r1, #581	@ 0x245
 800928e:	e7e3      	b.n	8009258 <__mdiff+0x28>
 8009290:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009294:	6926      	ldr	r6, [r4, #16]
 8009296:	60c5      	str	r5, [r0, #12]
 8009298:	f109 0310 	add.w	r3, r9, #16
 800929c:	f109 0514 	add.w	r5, r9, #20
 80092a0:	f104 0e14 	add.w	lr, r4, #20
 80092a4:	f100 0b14 	add.w	fp, r0, #20
 80092a8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80092ac:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80092b0:	9301      	str	r3, [sp, #4]
 80092b2:	46d9      	mov	r9, fp
 80092b4:	f04f 0c00 	mov.w	ip, #0
 80092b8:	9b01      	ldr	r3, [sp, #4]
 80092ba:	f85e 0b04 	ldr.w	r0, [lr], #4
 80092be:	f853 af04 	ldr.w	sl, [r3, #4]!
 80092c2:	9301      	str	r3, [sp, #4]
 80092c4:	fa1f f38a 	uxth.w	r3, sl
 80092c8:	4619      	mov	r1, r3
 80092ca:	b283      	uxth	r3, r0
 80092cc:	1acb      	subs	r3, r1, r3
 80092ce:	0c00      	lsrs	r0, r0, #16
 80092d0:	4463      	add	r3, ip
 80092d2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80092d6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80092da:	b29b      	uxth	r3, r3
 80092dc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80092e0:	4576      	cmp	r6, lr
 80092e2:	f849 3b04 	str.w	r3, [r9], #4
 80092e6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80092ea:	d8e5      	bhi.n	80092b8 <__mdiff+0x88>
 80092ec:	1b33      	subs	r3, r6, r4
 80092ee:	3b15      	subs	r3, #21
 80092f0:	f023 0303 	bic.w	r3, r3, #3
 80092f4:	3415      	adds	r4, #21
 80092f6:	3304      	adds	r3, #4
 80092f8:	42a6      	cmp	r6, r4
 80092fa:	bf38      	it	cc
 80092fc:	2304      	movcc	r3, #4
 80092fe:	441d      	add	r5, r3
 8009300:	445b      	add	r3, fp
 8009302:	461e      	mov	r6, r3
 8009304:	462c      	mov	r4, r5
 8009306:	4544      	cmp	r4, r8
 8009308:	d30e      	bcc.n	8009328 <__mdiff+0xf8>
 800930a:	f108 0103 	add.w	r1, r8, #3
 800930e:	1b49      	subs	r1, r1, r5
 8009310:	f021 0103 	bic.w	r1, r1, #3
 8009314:	3d03      	subs	r5, #3
 8009316:	45a8      	cmp	r8, r5
 8009318:	bf38      	it	cc
 800931a:	2100      	movcc	r1, #0
 800931c:	440b      	add	r3, r1
 800931e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009322:	b191      	cbz	r1, 800934a <__mdiff+0x11a>
 8009324:	6117      	str	r7, [r2, #16]
 8009326:	e79d      	b.n	8009264 <__mdiff+0x34>
 8009328:	f854 1b04 	ldr.w	r1, [r4], #4
 800932c:	46e6      	mov	lr, ip
 800932e:	0c08      	lsrs	r0, r1, #16
 8009330:	fa1c fc81 	uxtah	ip, ip, r1
 8009334:	4471      	add	r1, lr
 8009336:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800933a:	b289      	uxth	r1, r1
 800933c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009340:	f846 1b04 	str.w	r1, [r6], #4
 8009344:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009348:	e7dd      	b.n	8009306 <__mdiff+0xd6>
 800934a:	3f01      	subs	r7, #1
 800934c:	e7e7      	b.n	800931e <__mdiff+0xee>
 800934e:	bf00      	nop
 8009350:	0801a7ed 	.word	0x0801a7ed
 8009354:	0801a7fe 	.word	0x0801a7fe

08009358 <__ulp>:
 8009358:	b082      	sub	sp, #8
 800935a:	ed8d 0b00 	vstr	d0, [sp]
 800935e:	9a01      	ldr	r2, [sp, #4]
 8009360:	4b0f      	ldr	r3, [pc, #60]	@ (80093a0 <__ulp+0x48>)
 8009362:	4013      	ands	r3, r2
 8009364:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009368:	2b00      	cmp	r3, #0
 800936a:	dc08      	bgt.n	800937e <__ulp+0x26>
 800936c:	425b      	negs	r3, r3
 800936e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009372:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009376:	da04      	bge.n	8009382 <__ulp+0x2a>
 8009378:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800937c:	4113      	asrs	r3, r2
 800937e:	2200      	movs	r2, #0
 8009380:	e008      	b.n	8009394 <__ulp+0x3c>
 8009382:	f1a2 0314 	sub.w	r3, r2, #20
 8009386:	2b1e      	cmp	r3, #30
 8009388:	bfda      	itte	le
 800938a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800938e:	40da      	lsrle	r2, r3
 8009390:	2201      	movgt	r2, #1
 8009392:	2300      	movs	r3, #0
 8009394:	4619      	mov	r1, r3
 8009396:	4610      	mov	r0, r2
 8009398:	ec41 0b10 	vmov	d0, r0, r1
 800939c:	b002      	add	sp, #8
 800939e:	4770      	bx	lr
 80093a0:	7ff00000 	.word	0x7ff00000

080093a4 <__b2d>:
 80093a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093a8:	6906      	ldr	r6, [r0, #16]
 80093aa:	f100 0814 	add.w	r8, r0, #20
 80093ae:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80093b2:	1f37      	subs	r7, r6, #4
 80093b4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80093b8:	4610      	mov	r0, r2
 80093ba:	f7ff fd4b 	bl	8008e54 <__hi0bits>
 80093be:	f1c0 0320 	rsb	r3, r0, #32
 80093c2:	280a      	cmp	r0, #10
 80093c4:	600b      	str	r3, [r1, #0]
 80093c6:	491b      	ldr	r1, [pc, #108]	@ (8009434 <__b2d+0x90>)
 80093c8:	dc15      	bgt.n	80093f6 <__b2d+0x52>
 80093ca:	f1c0 0c0b 	rsb	ip, r0, #11
 80093ce:	fa22 f30c 	lsr.w	r3, r2, ip
 80093d2:	45b8      	cmp	r8, r7
 80093d4:	ea43 0501 	orr.w	r5, r3, r1
 80093d8:	bf34      	ite	cc
 80093da:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80093de:	2300      	movcs	r3, #0
 80093e0:	3015      	adds	r0, #21
 80093e2:	fa02 f000 	lsl.w	r0, r2, r0
 80093e6:	fa23 f30c 	lsr.w	r3, r3, ip
 80093ea:	4303      	orrs	r3, r0
 80093ec:	461c      	mov	r4, r3
 80093ee:	ec45 4b10 	vmov	d0, r4, r5
 80093f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093f6:	45b8      	cmp	r8, r7
 80093f8:	bf3a      	itte	cc
 80093fa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80093fe:	f1a6 0708 	subcc.w	r7, r6, #8
 8009402:	2300      	movcs	r3, #0
 8009404:	380b      	subs	r0, #11
 8009406:	d012      	beq.n	800942e <__b2d+0x8a>
 8009408:	f1c0 0120 	rsb	r1, r0, #32
 800940c:	fa23 f401 	lsr.w	r4, r3, r1
 8009410:	4082      	lsls	r2, r0
 8009412:	4322      	orrs	r2, r4
 8009414:	4547      	cmp	r7, r8
 8009416:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800941a:	bf8c      	ite	hi
 800941c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009420:	2200      	movls	r2, #0
 8009422:	4083      	lsls	r3, r0
 8009424:	40ca      	lsrs	r2, r1
 8009426:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800942a:	4313      	orrs	r3, r2
 800942c:	e7de      	b.n	80093ec <__b2d+0x48>
 800942e:	ea42 0501 	orr.w	r5, r2, r1
 8009432:	e7db      	b.n	80093ec <__b2d+0x48>
 8009434:	3ff00000 	.word	0x3ff00000

08009438 <__d2b>:
 8009438:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800943c:	460f      	mov	r7, r1
 800943e:	2101      	movs	r1, #1
 8009440:	ec59 8b10 	vmov	r8, r9, d0
 8009444:	4616      	mov	r6, r2
 8009446:	f7ff fc13 	bl	8008c70 <_Balloc>
 800944a:	4604      	mov	r4, r0
 800944c:	b930      	cbnz	r0, 800945c <__d2b+0x24>
 800944e:	4602      	mov	r2, r0
 8009450:	4b23      	ldr	r3, [pc, #140]	@ (80094e0 <__d2b+0xa8>)
 8009452:	4824      	ldr	r0, [pc, #144]	@ (80094e4 <__d2b+0xac>)
 8009454:	f240 310f 	movw	r1, #783	@ 0x30f
 8009458:	f001 fb4e 	bl	800aaf8 <__assert_func>
 800945c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009460:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009464:	b10d      	cbz	r5, 800946a <__d2b+0x32>
 8009466:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800946a:	9301      	str	r3, [sp, #4]
 800946c:	f1b8 0300 	subs.w	r3, r8, #0
 8009470:	d023      	beq.n	80094ba <__d2b+0x82>
 8009472:	4668      	mov	r0, sp
 8009474:	9300      	str	r3, [sp, #0]
 8009476:	f7ff fd0c 	bl	8008e92 <__lo0bits>
 800947a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800947e:	b1d0      	cbz	r0, 80094b6 <__d2b+0x7e>
 8009480:	f1c0 0320 	rsb	r3, r0, #32
 8009484:	fa02 f303 	lsl.w	r3, r2, r3
 8009488:	430b      	orrs	r3, r1
 800948a:	40c2      	lsrs	r2, r0
 800948c:	6163      	str	r3, [r4, #20]
 800948e:	9201      	str	r2, [sp, #4]
 8009490:	9b01      	ldr	r3, [sp, #4]
 8009492:	61a3      	str	r3, [r4, #24]
 8009494:	2b00      	cmp	r3, #0
 8009496:	bf0c      	ite	eq
 8009498:	2201      	moveq	r2, #1
 800949a:	2202      	movne	r2, #2
 800949c:	6122      	str	r2, [r4, #16]
 800949e:	b1a5      	cbz	r5, 80094ca <__d2b+0x92>
 80094a0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80094a4:	4405      	add	r5, r0
 80094a6:	603d      	str	r5, [r7, #0]
 80094a8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80094ac:	6030      	str	r0, [r6, #0]
 80094ae:	4620      	mov	r0, r4
 80094b0:	b003      	add	sp, #12
 80094b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80094b6:	6161      	str	r1, [r4, #20]
 80094b8:	e7ea      	b.n	8009490 <__d2b+0x58>
 80094ba:	a801      	add	r0, sp, #4
 80094bc:	f7ff fce9 	bl	8008e92 <__lo0bits>
 80094c0:	9b01      	ldr	r3, [sp, #4]
 80094c2:	6163      	str	r3, [r4, #20]
 80094c4:	3020      	adds	r0, #32
 80094c6:	2201      	movs	r2, #1
 80094c8:	e7e8      	b.n	800949c <__d2b+0x64>
 80094ca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80094ce:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80094d2:	6038      	str	r0, [r7, #0]
 80094d4:	6918      	ldr	r0, [r3, #16]
 80094d6:	f7ff fcbd 	bl	8008e54 <__hi0bits>
 80094da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80094de:	e7e5      	b.n	80094ac <__d2b+0x74>
 80094e0:	0801a7ed 	.word	0x0801a7ed
 80094e4:	0801a7fe 	.word	0x0801a7fe

080094e8 <__ratio>:
 80094e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094ec:	b085      	sub	sp, #20
 80094ee:	e9cd 1000 	strd	r1, r0, [sp]
 80094f2:	a902      	add	r1, sp, #8
 80094f4:	f7ff ff56 	bl	80093a4 <__b2d>
 80094f8:	9800      	ldr	r0, [sp, #0]
 80094fa:	a903      	add	r1, sp, #12
 80094fc:	ec55 4b10 	vmov	r4, r5, d0
 8009500:	f7ff ff50 	bl	80093a4 <__b2d>
 8009504:	9b01      	ldr	r3, [sp, #4]
 8009506:	6919      	ldr	r1, [r3, #16]
 8009508:	9b00      	ldr	r3, [sp, #0]
 800950a:	691b      	ldr	r3, [r3, #16]
 800950c:	1ac9      	subs	r1, r1, r3
 800950e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009512:	1a9b      	subs	r3, r3, r2
 8009514:	ec5b ab10 	vmov	sl, fp, d0
 8009518:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800951c:	2b00      	cmp	r3, #0
 800951e:	bfce      	itee	gt
 8009520:	462a      	movgt	r2, r5
 8009522:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009526:	465a      	movle	r2, fp
 8009528:	462f      	mov	r7, r5
 800952a:	46d9      	mov	r9, fp
 800952c:	bfcc      	ite	gt
 800952e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009532:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009536:	464b      	mov	r3, r9
 8009538:	4652      	mov	r2, sl
 800953a:	4620      	mov	r0, r4
 800953c:	4639      	mov	r1, r7
 800953e:	f7f7 f985 	bl	800084c <__aeabi_ddiv>
 8009542:	ec41 0b10 	vmov	d0, r0, r1
 8009546:	b005      	add	sp, #20
 8009548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800954c <__copybits>:
 800954c:	3901      	subs	r1, #1
 800954e:	b570      	push	{r4, r5, r6, lr}
 8009550:	1149      	asrs	r1, r1, #5
 8009552:	6914      	ldr	r4, [r2, #16]
 8009554:	3101      	adds	r1, #1
 8009556:	f102 0314 	add.w	r3, r2, #20
 800955a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800955e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009562:	1f05      	subs	r5, r0, #4
 8009564:	42a3      	cmp	r3, r4
 8009566:	d30c      	bcc.n	8009582 <__copybits+0x36>
 8009568:	1aa3      	subs	r3, r4, r2
 800956a:	3b11      	subs	r3, #17
 800956c:	f023 0303 	bic.w	r3, r3, #3
 8009570:	3211      	adds	r2, #17
 8009572:	42a2      	cmp	r2, r4
 8009574:	bf88      	it	hi
 8009576:	2300      	movhi	r3, #0
 8009578:	4418      	add	r0, r3
 800957a:	2300      	movs	r3, #0
 800957c:	4288      	cmp	r0, r1
 800957e:	d305      	bcc.n	800958c <__copybits+0x40>
 8009580:	bd70      	pop	{r4, r5, r6, pc}
 8009582:	f853 6b04 	ldr.w	r6, [r3], #4
 8009586:	f845 6f04 	str.w	r6, [r5, #4]!
 800958a:	e7eb      	b.n	8009564 <__copybits+0x18>
 800958c:	f840 3b04 	str.w	r3, [r0], #4
 8009590:	e7f4      	b.n	800957c <__copybits+0x30>

08009592 <__any_on>:
 8009592:	f100 0214 	add.w	r2, r0, #20
 8009596:	6900      	ldr	r0, [r0, #16]
 8009598:	114b      	asrs	r3, r1, #5
 800959a:	4298      	cmp	r0, r3
 800959c:	b510      	push	{r4, lr}
 800959e:	db11      	blt.n	80095c4 <__any_on+0x32>
 80095a0:	dd0a      	ble.n	80095b8 <__any_on+0x26>
 80095a2:	f011 011f 	ands.w	r1, r1, #31
 80095a6:	d007      	beq.n	80095b8 <__any_on+0x26>
 80095a8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80095ac:	fa24 f001 	lsr.w	r0, r4, r1
 80095b0:	fa00 f101 	lsl.w	r1, r0, r1
 80095b4:	428c      	cmp	r4, r1
 80095b6:	d10b      	bne.n	80095d0 <__any_on+0x3e>
 80095b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80095bc:	4293      	cmp	r3, r2
 80095be:	d803      	bhi.n	80095c8 <__any_on+0x36>
 80095c0:	2000      	movs	r0, #0
 80095c2:	bd10      	pop	{r4, pc}
 80095c4:	4603      	mov	r3, r0
 80095c6:	e7f7      	b.n	80095b8 <__any_on+0x26>
 80095c8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80095cc:	2900      	cmp	r1, #0
 80095ce:	d0f5      	beq.n	80095bc <__any_on+0x2a>
 80095d0:	2001      	movs	r0, #1
 80095d2:	e7f6      	b.n	80095c2 <__any_on+0x30>

080095d4 <sulp>:
 80095d4:	b570      	push	{r4, r5, r6, lr}
 80095d6:	4604      	mov	r4, r0
 80095d8:	460d      	mov	r5, r1
 80095da:	ec45 4b10 	vmov	d0, r4, r5
 80095de:	4616      	mov	r6, r2
 80095e0:	f7ff feba 	bl	8009358 <__ulp>
 80095e4:	ec51 0b10 	vmov	r0, r1, d0
 80095e8:	b17e      	cbz	r6, 800960a <sulp+0x36>
 80095ea:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80095ee:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	dd09      	ble.n	800960a <sulp+0x36>
 80095f6:	051b      	lsls	r3, r3, #20
 80095f8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80095fc:	2400      	movs	r4, #0
 80095fe:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009602:	4622      	mov	r2, r4
 8009604:	462b      	mov	r3, r5
 8009606:	f7f6 fff7 	bl	80005f8 <__aeabi_dmul>
 800960a:	ec41 0b10 	vmov	d0, r0, r1
 800960e:	bd70      	pop	{r4, r5, r6, pc}

08009610 <_strtod_l>:
 8009610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009614:	b09f      	sub	sp, #124	@ 0x7c
 8009616:	460c      	mov	r4, r1
 8009618:	9217      	str	r2, [sp, #92]	@ 0x5c
 800961a:	2200      	movs	r2, #0
 800961c:	921a      	str	r2, [sp, #104]	@ 0x68
 800961e:	9005      	str	r0, [sp, #20]
 8009620:	f04f 0a00 	mov.w	sl, #0
 8009624:	f04f 0b00 	mov.w	fp, #0
 8009628:	460a      	mov	r2, r1
 800962a:	9219      	str	r2, [sp, #100]	@ 0x64
 800962c:	7811      	ldrb	r1, [r2, #0]
 800962e:	292b      	cmp	r1, #43	@ 0x2b
 8009630:	d04a      	beq.n	80096c8 <_strtod_l+0xb8>
 8009632:	d838      	bhi.n	80096a6 <_strtod_l+0x96>
 8009634:	290d      	cmp	r1, #13
 8009636:	d832      	bhi.n	800969e <_strtod_l+0x8e>
 8009638:	2908      	cmp	r1, #8
 800963a:	d832      	bhi.n	80096a2 <_strtod_l+0x92>
 800963c:	2900      	cmp	r1, #0
 800963e:	d03b      	beq.n	80096b8 <_strtod_l+0xa8>
 8009640:	2200      	movs	r2, #0
 8009642:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009644:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009646:	782a      	ldrb	r2, [r5, #0]
 8009648:	2a30      	cmp	r2, #48	@ 0x30
 800964a:	f040 80b3 	bne.w	80097b4 <_strtod_l+0x1a4>
 800964e:	786a      	ldrb	r2, [r5, #1]
 8009650:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009654:	2a58      	cmp	r2, #88	@ 0x58
 8009656:	d16e      	bne.n	8009736 <_strtod_l+0x126>
 8009658:	9302      	str	r3, [sp, #8]
 800965a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800965c:	9301      	str	r3, [sp, #4]
 800965e:	ab1a      	add	r3, sp, #104	@ 0x68
 8009660:	9300      	str	r3, [sp, #0]
 8009662:	4a8e      	ldr	r2, [pc, #568]	@ (800989c <_strtod_l+0x28c>)
 8009664:	9805      	ldr	r0, [sp, #20]
 8009666:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009668:	a919      	add	r1, sp, #100	@ 0x64
 800966a:	f001 fadf 	bl	800ac2c <__gethex>
 800966e:	f010 060f 	ands.w	r6, r0, #15
 8009672:	4604      	mov	r4, r0
 8009674:	d005      	beq.n	8009682 <_strtod_l+0x72>
 8009676:	2e06      	cmp	r6, #6
 8009678:	d128      	bne.n	80096cc <_strtod_l+0xbc>
 800967a:	3501      	adds	r5, #1
 800967c:	2300      	movs	r3, #0
 800967e:	9519      	str	r5, [sp, #100]	@ 0x64
 8009680:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009682:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009684:	2b00      	cmp	r3, #0
 8009686:	f040 858e 	bne.w	800a1a6 <_strtod_l+0xb96>
 800968a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800968c:	b1cb      	cbz	r3, 80096c2 <_strtod_l+0xb2>
 800968e:	4652      	mov	r2, sl
 8009690:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009694:	ec43 2b10 	vmov	d0, r2, r3
 8009698:	b01f      	add	sp, #124	@ 0x7c
 800969a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800969e:	2920      	cmp	r1, #32
 80096a0:	d1ce      	bne.n	8009640 <_strtod_l+0x30>
 80096a2:	3201      	adds	r2, #1
 80096a4:	e7c1      	b.n	800962a <_strtod_l+0x1a>
 80096a6:	292d      	cmp	r1, #45	@ 0x2d
 80096a8:	d1ca      	bne.n	8009640 <_strtod_l+0x30>
 80096aa:	2101      	movs	r1, #1
 80096ac:	910b      	str	r1, [sp, #44]	@ 0x2c
 80096ae:	1c51      	adds	r1, r2, #1
 80096b0:	9119      	str	r1, [sp, #100]	@ 0x64
 80096b2:	7852      	ldrb	r2, [r2, #1]
 80096b4:	2a00      	cmp	r2, #0
 80096b6:	d1c5      	bne.n	8009644 <_strtod_l+0x34>
 80096b8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80096ba:	9419      	str	r4, [sp, #100]	@ 0x64
 80096bc:	2b00      	cmp	r3, #0
 80096be:	f040 8570 	bne.w	800a1a2 <_strtod_l+0xb92>
 80096c2:	4652      	mov	r2, sl
 80096c4:	465b      	mov	r3, fp
 80096c6:	e7e5      	b.n	8009694 <_strtod_l+0x84>
 80096c8:	2100      	movs	r1, #0
 80096ca:	e7ef      	b.n	80096ac <_strtod_l+0x9c>
 80096cc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80096ce:	b13a      	cbz	r2, 80096e0 <_strtod_l+0xd0>
 80096d0:	2135      	movs	r1, #53	@ 0x35
 80096d2:	a81c      	add	r0, sp, #112	@ 0x70
 80096d4:	f7ff ff3a 	bl	800954c <__copybits>
 80096d8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80096da:	9805      	ldr	r0, [sp, #20]
 80096dc:	f7ff fb08 	bl	8008cf0 <_Bfree>
 80096e0:	3e01      	subs	r6, #1
 80096e2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80096e4:	2e04      	cmp	r6, #4
 80096e6:	d806      	bhi.n	80096f6 <_strtod_l+0xe6>
 80096e8:	e8df f006 	tbb	[pc, r6]
 80096ec:	201d0314 	.word	0x201d0314
 80096f0:	14          	.byte	0x14
 80096f1:	00          	.byte	0x00
 80096f2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80096f6:	05e1      	lsls	r1, r4, #23
 80096f8:	bf48      	it	mi
 80096fa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80096fe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009702:	0d1b      	lsrs	r3, r3, #20
 8009704:	051b      	lsls	r3, r3, #20
 8009706:	2b00      	cmp	r3, #0
 8009708:	d1bb      	bne.n	8009682 <_strtod_l+0x72>
 800970a:	f7fe fb21 	bl	8007d50 <__errno>
 800970e:	2322      	movs	r3, #34	@ 0x22
 8009710:	6003      	str	r3, [r0, #0]
 8009712:	e7b6      	b.n	8009682 <_strtod_l+0x72>
 8009714:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009718:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800971c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009720:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009724:	e7e7      	b.n	80096f6 <_strtod_l+0xe6>
 8009726:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80098a4 <_strtod_l+0x294>
 800972a:	e7e4      	b.n	80096f6 <_strtod_l+0xe6>
 800972c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009730:	f04f 3aff 	mov.w	sl, #4294967295
 8009734:	e7df      	b.n	80096f6 <_strtod_l+0xe6>
 8009736:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009738:	1c5a      	adds	r2, r3, #1
 800973a:	9219      	str	r2, [sp, #100]	@ 0x64
 800973c:	785b      	ldrb	r3, [r3, #1]
 800973e:	2b30      	cmp	r3, #48	@ 0x30
 8009740:	d0f9      	beq.n	8009736 <_strtod_l+0x126>
 8009742:	2b00      	cmp	r3, #0
 8009744:	d09d      	beq.n	8009682 <_strtod_l+0x72>
 8009746:	2301      	movs	r3, #1
 8009748:	9309      	str	r3, [sp, #36]	@ 0x24
 800974a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800974c:	930c      	str	r3, [sp, #48]	@ 0x30
 800974e:	2300      	movs	r3, #0
 8009750:	9308      	str	r3, [sp, #32]
 8009752:	930a      	str	r3, [sp, #40]	@ 0x28
 8009754:	461f      	mov	r7, r3
 8009756:	220a      	movs	r2, #10
 8009758:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800975a:	7805      	ldrb	r5, [r0, #0]
 800975c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009760:	b2d9      	uxtb	r1, r3
 8009762:	2909      	cmp	r1, #9
 8009764:	d928      	bls.n	80097b8 <_strtod_l+0x1a8>
 8009766:	494e      	ldr	r1, [pc, #312]	@ (80098a0 <_strtod_l+0x290>)
 8009768:	2201      	movs	r2, #1
 800976a:	f001 f979 	bl	800aa60 <strncmp>
 800976e:	2800      	cmp	r0, #0
 8009770:	d032      	beq.n	80097d8 <_strtod_l+0x1c8>
 8009772:	2000      	movs	r0, #0
 8009774:	462a      	mov	r2, r5
 8009776:	4681      	mov	r9, r0
 8009778:	463d      	mov	r5, r7
 800977a:	4603      	mov	r3, r0
 800977c:	2a65      	cmp	r2, #101	@ 0x65
 800977e:	d001      	beq.n	8009784 <_strtod_l+0x174>
 8009780:	2a45      	cmp	r2, #69	@ 0x45
 8009782:	d114      	bne.n	80097ae <_strtod_l+0x19e>
 8009784:	b91d      	cbnz	r5, 800978e <_strtod_l+0x17e>
 8009786:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009788:	4302      	orrs	r2, r0
 800978a:	d095      	beq.n	80096b8 <_strtod_l+0xa8>
 800978c:	2500      	movs	r5, #0
 800978e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009790:	1c62      	adds	r2, r4, #1
 8009792:	9219      	str	r2, [sp, #100]	@ 0x64
 8009794:	7862      	ldrb	r2, [r4, #1]
 8009796:	2a2b      	cmp	r2, #43	@ 0x2b
 8009798:	d077      	beq.n	800988a <_strtod_l+0x27a>
 800979a:	2a2d      	cmp	r2, #45	@ 0x2d
 800979c:	d07b      	beq.n	8009896 <_strtod_l+0x286>
 800979e:	f04f 0c00 	mov.w	ip, #0
 80097a2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80097a6:	2909      	cmp	r1, #9
 80097a8:	f240 8082 	bls.w	80098b0 <_strtod_l+0x2a0>
 80097ac:	9419      	str	r4, [sp, #100]	@ 0x64
 80097ae:	f04f 0800 	mov.w	r8, #0
 80097b2:	e0a2      	b.n	80098fa <_strtod_l+0x2ea>
 80097b4:	2300      	movs	r3, #0
 80097b6:	e7c7      	b.n	8009748 <_strtod_l+0x138>
 80097b8:	2f08      	cmp	r7, #8
 80097ba:	bfd5      	itete	le
 80097bc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80097be:	9908      	ldrgt	r1, [sp, #32]
 80097c0:	fb02 3301 	mlale	r3, r2, r1, r3
 80097c4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80097c8:	f100 0001 	add.w	r0, r0, #1
 80097cc:	bfd4      	ite	le
 80097ce:	930a      	strle	r3, [sp, #40]	@ 0x28
 80097d0:	9308      	strgt	r3, [sp, #32]
 80097d2:	3701      	adds	r7, #1
 80097d4:	9019      	str	r0, [sp, #100]	@ 0x64
 80097d6:	e7bf      	b.n	8009758 <_strtod_l+0x148>
 80097d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80097da:	1c5a      	adds	r2, r3, #1
 80097dc:	9219      	str	r2, [sp, #100]	@ 0x64
 80097de:	785a      	ldrb	r2, [r3, #1]
 80097e0:	b37f      	cbz	r7, 8009842 <_strtod_l+0x232>
 80097e2:	4681      	mov	r9, r0
 80097e4:	463d      	mov	r5, r7
 80097e6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80097ea:	2b09      	cmp	r3, #9
 80097ec:	d912      	bls.n	8009814 <_strtod_l+0x204>
 80097ee:	2301      	movs	r3, #1
 80097f0:	e7c4      	b.n	800977c <_strtod_l+0x16c>
 80097f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80097f4:	1c5a      	adds	r2, r3, #1
 80097f6:	9219      	str	r2, [sp, #100]	@ 0x64
 80097f8:	785a      	ldrb	r2, [r3, #1]
 80097fa:	3001      	adds	r0, #1
 80097fc:	2a30      	cmp	r2, #48	@ 0x30
 80097fe:	d0f8      	beq.n	80097f2 <_strtod_l+0x1e2>
 8009800:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009804:	2b08      	cmp	r3, #8
 8009806:	f200 84d3 	bhi.w	800a1b0 <_strtod_l+0xba0>
 800980a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800980c:	930c      	str	r3, [sp, #48]	@ 0x30
 800980e:	4681      	mov	r9, r0
 8009810:	2000      	movs	r0, #0
 8009812:	4605      	mov	r5, r0
 8009814:	3a30      	subs	r2, #48	@ 0x30
 8009816:	f100 0301 	add.w	r3, r0, #1
 800981a:	d02a      	beq.n	8009872 <_strtod_l+0x262>
 800981c:	4499      	add	r9, r3
 800981e:	eb00 0c05 	add.w	ip, r0, r5
 8009822:	462b      	mov	r3, r5
 8009824:	210a      	movs	r1, #10
 8009826:	4563      	cmp	r3, ip
 8009828:	d10d      	bne.n	8009846 <_strtod_l+0x236>
 800982a:	1c69      	adds	r1, r5, #1
 800982c:	4401      	add	r1, r0
 800982e:	4428      	add	r0, r5
 8009830:	2808      	cmp	r0, #8
 8009832:	dc16      	bgt.n	8009862 <_strtod_l+0x252>
 8009834:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009836:	230a      	movs	r3, #10
 8009838:	fb03 2300 	mla	r3, r3, r0, r2
 800983c:	930a      	str	r3, [sp, #40]	@ 0x28
 800983e:	2300      	movs	r3, #0
 8009840:	e018      	b.n	8009874 <_strtod_l+0x264>
 8009842:	4638      	mov	r0, r7
 8009844:	e7da      	b.n	80097fc <_strtod_l+0x1ec>
 8009846:	2b08      	cmp	r3, #8
 8009848:	f103 0301 	add.w	r3, r3, #1
 800984c:	dc03      	bgt.n	8009856 <_strtod_l+0x246>
 800984e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009850:	434e      	muls	r6, r1
 8009852:	960a      	str	r6, [sp, #40]	@ 0x28
 8009854:	e7e7      	b.n	8009826 <_strtod_l+0x216>
 8009856:	2b10      	cmp	r3, #16
 8009858:	bfde      	ittt	le
 800985a:	9e08      	ldrle	r6, [sp, #32]
 800985c:	434e      	mulle	r6, r1
 800985e:	9608      	strle	r6, [sp, #32]
 8009860:	e7e1      	b.n	8009826 <_strtod_l+0x216>
 8009862:	280f      	cmp	r0, #15
 8009864:	dceb      	bgt.n	800983e <_strtod_l+0x22e>
 8009866:	9808      	ldr	r0, [sp, #32]
 8009868:	230a      	movs	r3, #10
 800986a:	fb03 2300 	mla	r3, r3, r0, r2
 800986e:	9308      	str	r3, [sp, #32]
 8009870:	e7e5      	b.n	800983e <_strtod_l+0x22e>
 8009872:	4629      	mov	r1, r5
 8009874:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009876:	1c50      	adds	r0, r2, #1
 8009878:	9019      	str	r0, [sp, #100]	@ 0x64
 800987a:	7852      	ldrb	r2, [r2, #1]
 800987c:	4618      	mov	r0, r3
 800987e:	460d      	mov	r5, r1
 8009880:	e7b1      	b.n	80097e6 <_strtod_l+0x1d6>
 8009882:	f04f 0900 	mov.w	r9, #0
 8009886:	2301      	movs	r3, #1
 8009888:	e77d      	b.n	8009786 <_strtod_l+0x176>
 800988a:	f04f 0c00 	mov.w	ip, #0
 800988e:	1ca2      	adds	r2, r4, #2
 8009890:	9219      	str	r2, [sp, #100]	@ 0x64
 8009892:	78a2      	ldrb	r2, [r4, #2]
 8009894:	e785      	b.n	80097a2 <_strtod_l+0x192>
 8009896:	f04f 0c01 	mov.w	ip, #1
 800989a:	e7f8      	b.n	800988e <_strtod_l+0x27e>
 800989c:	0801a970 	.word	0x0801a970
 80098a0:	0801a958 	.word	0x0801a958
 80098a4:	7ff00000 	.word	0x7ff00000
 80098a8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80098aa:	1c51      	adds	r1, r2, #1
 80098ac:	9119      	str	r1, [sp, #100]	@ 0x64
 80098ae:	7852      	ldrb	r2, [r2, #1]
 80098b0:	2a30      	cmp	r2, #48	@ 0x30
 80098b2:	d0f9      	beq.n	80098a8 <_strtod_l+0x298>
 80098b4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80098b8:	2908      	cmp	r1, #8
 80098ba:	f63f af78 	bhi.w	80097ae <_strtod_l+0x19e>
 80098be:	3a30      	subs	r2, #48	@ 0x30
 80098c0:	920e      	str	r2, [sp, #56]	@ 0x38
 80098c2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80098c4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80098c6:	f04f 080a 	mov.w	r8, #10
 80098ca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80098cc:	1c56      	adds	r6, r2, #1
 80098ce:	9619      	str	r6, [sp, #100]	@ 0x64
 80098d0:	7852      	ldrb	r2, [r2, #1]
 80098d2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80098d6:	f1be 0f09 	cmp.w	lr, #9
 80098da:	d939      	bls.n	8009950 <_strtod_l+0x340>
 80098dc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80098de:	1a76      	subs	r6, r6, r1
 80098e0:	2e08      	cmp	r6, #8
 80098e2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80098e6:	dc03      	bgt.n	80098f0 <_strtod_l+0x2e0>
 80098e8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80098ea:	4588      	cmp	r8, r1
 80098ec:	bfa8      	it	ge
 80098ee:	4688      	movge	r8, r1
 80098f0:	f1bc 0f00 	cmp.w	ip, #0
 80098f4:	d001      	beq.n	80098fa <_strtod_l+0x2ea>
 80098f6:	f1c8 0800 	rsb	r8, r8, #0
 80098fa:	2d00      	cmp	r5, #0
 80098fc:	d14e      	bne.n	800999c <_strtod_l+0x38c>
 80098fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009900:	4308      	orrs	r0, r1
 8009902:	f47f aebe 	bne.w	8009682 <_strtod_l+0x72>
 8009906:	2b00      	cmp	r3, #0
 8009908:	f47f aed6 	bne.w	80096b8 <_strtod_l+0xa8>
 800990c:	2a69      	cmp	r2, #105	@ 0x69
 800990e:	d028      	beq.n	8009962 <_strtod_l+0x352>
 8009910:	dc25      	bgt.n	800995e <_strtod_l+0x34e>
 8009912:	2a49      	cmp	r2, #73	@ 0x49
 8009914:	d025      	beq.n	8009962 <_strtod_l+0x352>
 8009916:	2a4e      	cmp	r2, #78	@ 0x4e
 8009918:	f47f aece 	bne.w	80096b8 <_strtod_l+0xa8>
 800991c:	499b      	ldr	r1, [pc, #620]	@ (8009b8c <_strtod_l+0x57c>)
 800991e:	a819      	add	r0, sp, #100	@ 0x64
 8009920:	f001 fba6 	bl	800b070 <__match>
 8009924:	2800      	cmp	r0, #0
 8009926:	f43f aec7 	beq.w	80096b8 <_strtod_l+0xa8>
 800992a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800992c:	781b      	ldrb	r3, [r3, #0]
 800992e:	2b28      	cmp	r3, #40	@ 0x28
 8009930:	d12e      	bne.n	8009990 <_strtod_l+0x380>
 8009932:	4997      	ldr	r1, [pc, #604]	@ (8009b90 <_strtod_l+0x580>)
 8009934:	aa1c      	add	r2, sp, #112	@ 0x70
 8009936:	a819      	add	r0, sp, #100	@ 0x64
 8009938:	f001 fbae 	bl	800b098 <__hexnan>
 800993c:	2805      	cmp	r0, #5
 800993e:	d127      	bne.n	8009990 <_strtod_l+0x380>
 8009940:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009942:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009946:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800994a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800994e:	e698      	b.n	8009682 <_strtod_l+0x72>
 8009950:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009952:	fb08 2101 	mla	r1, r8, r1, r2
 8009956:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800995a:	920e      	str	r2, [sp, #56]	@ 0x38
 800995c:	e7b5      	b.n	80098ca <_strtod_l+0x2ba>
 800995e:	2a6e      	cmp	r2, #110	@ 0x6e
 8009960:	e7da      	b.n	8009918 <_strtod_l+0x308>
 8009962:	498c      	ldr	r1, [pc, #560]	@ (8009b94 <_strtod_l+0x584>)
 8009964:	a819      	add	r0, sp, #100	@ 0x64
 8009966:	f001 fb83 	bl	800b070 <__match>
 800996a:	2800      	cmp	r0, #0
 800996c:	f43f aea4 	beq.w	80096b8 <_strtod_l+0xa8>
 8009970:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009972:	4989      	ldr	r1, [pc, #548]	@ (8009b98 <_strtod_l+0x588>)
 8009974:	3b01      	subs	r3, #1
 8009976:	a819      	add	r0, sp, #100	@ 0x64
 8009978:	9319      	str	r3, [sp, #100]	@ 0x64
 800997a:	f001 fb79 	bl	800b070 <__match>
 800997e:	b910      	cbnz	r0, 8009986 <_strtod_l+0x376>
 8009980:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009982:	3301      	adds	r3, #1
 8009984:	9319      	str	r3, [sp, #100]	@ 0x64
 8009986:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009ba8 <_strtod_l+0x598>
 800998a:	f04f 0a00 	mov.w	sl, #0
 800998e:	e678      	b.n	8009682 <_strtod_l+0x72>
 8009990:	4882      	ldr	r0, [pc, #520]	@ (8009b9c <_strtod_l+0x58c>)
 8009992:	f001 f8a9 	bl	800aae8 <nan>
 8009996:	ec5b ab10 	vmov	sl, fp, d0
 800999a:	e672      	b.n	8009682 <_strtod_l+0x72>
 800999c:	eba8 0309 	sub.w	r3, r8, r9
 80099a0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80099a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80099a4:	2f00      	cmp	r7, #0
 80099a6:	bf08      	it	eq
 80099a8:	462f      	moveq	r7, r5
 80099aa:	2d10      	cmp	r5, #16
 80099ac:	462c      	mov	r4, r5
 80099ae:	bfa8      	it	ge
 80099b0:	2410      	movge	r4, #16
 80099b2:	f7f6 fda7 	bl	8000504 <__aeabi_ui2d>
 80099b6:	2d09      	cmp	r5, #9
 80099b8:	4682      	mov	sl, r0
 80099ba:	468b      	mov	fp, r1
 80099bc:	dc13      	bgt.n	80099e6 <_strtod_l+0x3d6>
 80099be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	f43f ae5e 	beq.w	8009682 <_strtod_l+0x72>
 80099c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099c8:	dd78      	ble.n	8009abc <_strtod_l+0x4ac>
 80099ca:	2b16      	cmp	r3, #22
 80099cc:	dc5f      	bgt.n	8009a8e <_strtod_l+0x47e>
 80099ce:	4974      	ldr	r1, [pc, #464]	@ (8009ba0 <_strtod_l+0x590>)
 80099d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80099d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80099d8:	4652      	mov	r2, sl
 80099da:	465b      	mov	r3, fp
 80099dc:	f7f6 fe0c 	bl	80005f8 <__aeabi_dmul>
 80099e0:	4682      	mov	sl, r0
 80099e2:	468b      	mov	fp, r1
 80099e4:	e64d      	b.n	8009682 <_strtod_l+0x72>
 80099e6:	4b6e      	ldr	r3, [pc, #440]	@ (8009ba0 <_strtod_l+0x590>)
 80099e8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80099ec:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80099f0:	f7f6 fe02 	bl	80005f8 <__aeabi_dmul>
 80099f4:	4682      	mov	sl, r0
 80099f6:	9808      	ldr	r0, [sp, #32]
 80099f8:	468b      	mov	fp, r1
 80099fa:	f7f6 fd83 	bl	8000504 <__aeabi_ui2d>
 80099fe:	4602      	mov	r2, r0
 8009a00:	460b      	mov	r3, r1
 8009a02:	4650      	mov	r0, sl
 8009a04:	4659      	mov	r1, fp
 8009a06:	f7f6 fc41 	bl	800028c <__adddf3>
 8009a0a:	2d0f      	cmp	r5, #15
 8009a0c:	4682      	mov	sl, r0
 8009a0e:	468b      	mov	fp, r1
 8009a10:	ddd5      	ble.n	80099be <_strtod_l+0x3ae>
 8009a12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a14:	1b2c      	subs	r4, r5, r4
 8009a16:	441c      	add	r4, r3
 8009a18:	2c00      	cmp	r4, #0
 8009a1a:	f340 8096 	ble.w	8009b4a <_strtod_l+0x53a>
 8009a1e:	f014 030f 	ands.w	r3, r4, #15
 8009a22:	d00a      	beq.n	8009a3a <_strtod_l+0x42a>
 8009a24:	495e      	ldr	r1, [pc, #376]	@ (8009ba0 <_strtod_l+0x590>)
 8009a26:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009a2a:	4652      	mov	r2, sl
 8009a2c:	465b      	mov	r3, fp
 8009a2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a32:	f7f6 fde1 	bl	80005f8 <__aeabi_dmul>
 8009a36:	4682      	mov	sl, r0
 8009a38:	468b      	mov	fp, r1
 8009a3a:	f034 040f 	bics.w	r4, r4, #15
 8009a3e:	d073      	beq.n	8009b28 <_strtod_l+0x518>
 8009a40:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009a44:	dd48      	ble.n	8009ad8 <_strtod_l+0x4c8>
 8009a46:	2400      	movs	r4, #0
 8009a48:	46a0      	mov	r8, r4
 8009a4a:	940a      	str	r4, [sp, #40]	@ 0x28
 8009a4c:	46a1      	mov	r9, r4
 8009a4e:	9a05      	ldr	r2, [sp, #20]
 8009a50:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009ba8 <_strtod_l+0x598>
 8009a54:	2322      	movs	r3, #34	@ 0x22
 8009a56:	6013      	str	r3, [r2, #0]
 8009a58:	f04f 0a00 	mov.w	sl, #0
 8009a5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	f43f ae0f 	beq.w	8009682 <_strtod_l+0x72>
 8009a64:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009a66:	9805      	ldr	r0, [sp, #20]
 8009a68:	f7ff f942 	bl	8008cf0 <_Bfree>
 8009a6c:	9805      	ldr	r0, [sp, #20]
 8009a6e:	4649      	mov	r1, r9
 8009a70:	f7ff f93e 	bl	8008cf0 <_Bfree>
 8009a74:	9805      	ldr	r0, [sp, #20]
 8009a76:	4641      	mov	r1, r8
 8009a78:	f7ff f93a 	bl	8008cf0 <_Bfree>
 8009a7c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009a7e:	9805      	ldr	r0, [sp, #20]
 8009a80:	f7ff f936 	bl	8008cf0 <_Bfree>
 8009a84:	9805      	ldr	r0, [sp, #20]
 8009a86:	4621      	mov	r1, r4
 8009a88:	f7ff f932 	bl	8008cf0 <_Bfree>
 8009a8c:	e5f9      	b.n	8009682 <_strtod_l+0x72>
 8009a8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a90:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009a94:	4293      	cmp	r3, r2
 8009a96:	dbbc      	blt.n	8009a12 <_strtod_l+0x402>
 8009a98:	4c41      	ldr	r4, [pc, #260]	@ (8009ba0 <_strtod_l+0x590>)
 8009a9a:	f1c5 050f 	rsb	r5, r5, #15
 8009a9e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009aa2:	4652      	mov	r2, sl
 8009aa4:	465b      	mov	r3, fp
 8009aa6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009aaa:	f7f6 fda5 	bl	80005f8 <__aeabi_dmul>
 8009aae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ab0:	1b5d      	subs	r5, r3, r5
 8009ab2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009ab6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009aba:	e78f      	b.n	80099dc <_strtod_l+0x3cc>
 8009abc:	3316      	adds	r3, #22
 8009abe:	dba8      	blt.n	8009a12 <_strtod_l+0x402>
 8009ac0:	4b37      	ldr	r3, [pc, #220]	@ (8009ba0 <_strtod_l+0x590>)
 8009ac2:	eba9 0808 	sub.w	r8, r9, r8
 8009ac6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009aca:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009ace:	4650      	mov	r0, sl
 8009ad0:	4659      	mov	r1, fp
 8009ad2:	f7f6 febb 	bl	800084c <__aeabi_ddiv>
 8009ad6:	e783      	b.n	80099e0 <_strtod_l+0x3d0>
 8009ad8:	4b32      	ldr	r3, [pc, #200]	@ (8009ba4 <_strtod_l+0x594>)
 8009ada:	9308      	str	r3, [sp, #32]
 8009adc:	2300      	movs	r3, #0
 8009ade:	1124      	asrs	r4, r4, #4
 8009ae0:	4650      	mov	r0, sl
 8009ae2:	4659      	mov	r1, fp
 8009ae4:	461e      	mov	r6, r3
 8009ae6:	2c01      	cmp	r4, #1
 8009ae8:	dc21      	bgt.n	8009b2e <_strtod_l+0x51e>
 8009aea:	b10b      	cbz	r3, 8009af0 <_strtod_l+0x4e0>
 8009aec:	4682      	mov	sl, r0
 8009aee:	468b      	mov	fp, r1
 8009af0:	492c      	ldr	r1, [pc, #176]	@ (8009ba4 <_strtod_l+0x594>)
 8009af2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009af6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009afa:	4652      	mov	r2, sl
 8009afc:	465b      	mov	r3, fp
 8009afe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b02:	f7f6 fd79 	bl	80005f8 <__aeabi_dmul>
 8009b06:	4b28      	ldr	r3, [pc, #160]	@ (8009ba8 <_strtod_l+0x598>)
 8009b08:	460a      	mov	r2, r1
 8009b0a:	400b      	ands	r3, r1
 8009b0c:	4927      	ldr	r1, [pc, #156]	@ (8009bac <_strtod_l+0x59c>)
 8009b0e:	428b      	cmp	r3, r1
 8009b10:	4682      	mov	sl, r0
 8009b12:	d898      	bhi.n	8009a46 <_strtod_l+0x436>
 8009b14:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009b18:	428b      	cmp	r3, r1
 8009b1a:	bf86      	itte	hi
 8009b1c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009bb0 <_strtod_l+0x5a0>
 8009b20:	f04f 3aff 	movhi.w	sl, #4294967295
 8009b24:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009b28:	2300      	movs	r3, #0
 8009b2a:	9308      	str	r3, [sp, #32]
 8009b2c:	e07a      	b.n	8009c24 <_strtod_l+0x614>
 8009b2e:	07e2      	lsls	r2, r4, #31
 8009b30:	d505      	bpl.n	8009b3e <_strtod_l+0x52e>
 8009b32:	9b08      	ldr	r3, [sp, #32]
 8009b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b38:	f7f6 fd5e 	bl	80005f8 <__aeabi_dmul>
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	9a08      	ldr	r2, [sp, #32]
 8009b40:	3208      	adds	r2, #8
 8009b42:	3601      	adds	r6, #1
 8009b44:	1064      	asrs	r4, r4, #1
 8009b46:	9208      	str	r2, [sp, #32]
 8009b48:	e7cd      	b.n	8009ae6 <_strtod_l+0x4d6>
 8009b4a:	d0ed      	beq.n	8009b28 <_strtod_l+0x518>
 8009b4c:	4264      	negs	r4, r4
 8009b4e:	f014 020f 	ands.w	r2, r4, #15
 8009b52:	d00a      	beq.n	8009b6a <_strtod_l+0x55a>
 8009b54:	4b12      	ldr	r3, [pc, #72]	@ (8009ba0 <_strtod_l+0x590>)
 8009b56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b5a:	4650      	mov	r0, sl
 8009b5c:	4659      	mov	r1, fp
 8009b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b62:	f7f6 fe73 	bl	800084c <__aeabi_ddiv>
 8009b66:	4682      	mov	sl, r0
 8009b68:	468b      	mov	fp, r1
 8009b6a:	1124      	asrs	r4, r4, #4
 8009b6c:	d0dc      	beq.n	8009b28 <_strtod_l+0x518>
 8009b6e:	2c1f      	cmp	r4, #31
 8009b70:	dd20      	ble.n	8009bb4 <_strtod_l+0x5a4>
 8009b72:	2400      	movs	r4, #0
 8009b74:	46a0      	mov	r8, r4
 8009b76:	940a      	str	r4, [sp, #40]	@ 0x28
 8009b78:	46a1      	mov	r9, r4
 8009b7a:	9a05      	ldr	r2, [sp, #20]
 8009b7c:	2322      	movs	r3, #34	@ 0x22
 8009b7e:	f04f 0a00 	mov.w	sl, #0
 8009b82:	f04f 0b00 	mov.w	fp, #0
 8009b86:	6013      	str	r3, [r2, #0]
 8009b88:	e768      	b.n	8009a5c <_strtod_l+0x44c>
 8009b8a:	bf00      	nop
 8009b8c:	0801a745 	.word	0x0801a745
 8009b90:	0801a95c 	.word	0x0801a95c
 8009b94:	0801a73d 	.word	0x0801a73d
 8009b98:	0801a774 	.word	0x0801a774
 8009b9c:	0801ab05 	.word	0x0801ab05
 8009ba0:	0801a890 	.word	0x0801a890
 8009ba4:	0801a868 	.word	0x0801a868
 8009ba8:	7ff00000 	.word	0x7ff00000
 8009bac:	7ca00000 	.word	0x7ca00000
 8009bb0:	7fefffff 	.word	0x7fefffff
 8009bb4:	f014 0310 	ands.w	r3, r4, #16
 8009bb8:	bf18      	it	ne
 8009bba:	236a      	movne	r3, #106	@ 0x6a
 8009bbc:	4ea9      	ldr	r6, [pc, #676]	@ (8009e64 <_strtod_l+0x854>)
 8009bbe:	9308      	str	r3, [sp, #32]
 8009bc0:	4650      	mov	r0, sl
 8009bc2:	4659      	mov	r1, fp
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	07e2      	lsls	r2, r4, #31
 8009bc8:	d504      	bpl.n	8009bd4 <_strtod_l+0x5c4>
 8009bca:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009bce:	f7f6 fd13 	bl	80005f8 <__aeabi_dmul>
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	1064      	asrs	r4, r4, #1
 8009bd6:	f106 0608 	add.w	r6, r6, #8
 8009bda:	d1f4      	bne.n	8009bc6 <_strtod_l+0x5b6>
 8009bdc:	b10b      	cbz	r3, 8009be2 <_strtod_l+0x5d2>
 8009bde:	4682      	mov	sl, r0
 8009be0:	468b      	mov	fp, r1
 8009be2:	9b08      	ldr	r3, [sp, #32]
 8009be4:	b1b3      	cbz	r3, 8009c14 <_strtod_l+0x604>
 8009be6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009bea:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	4659      	mov	r1, fp
 8009bf2:	dd0f      	ble.n	8009c14 <_strtod_l+0x604>
 8009bf4:	2b1f      	cmp	r3, #31
 8009bf6:	dd55      	ble.n	8009ca4 <_strtod_l+0x694>
 8009bf8:	2b34      	cmp	r3, #52	@ 0x34
 8009bfa:	bfde      	ittt	le
 8009bfc:	f04f 33ff 	movle.w	r3, #4294967295
 8009c00:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009c04:	4093      	lslle	r3, r2
 8009c06:	f04f 0a00 	mov.w	sl, #0
 8009c0a:	bfcc      	ite	gt
 8009c0c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009c10:	ea03 0b01 	andle.w	fp, r3, r1
 8009c14:	2200      	movs	r2, #0
 8009c16:	2300      	movs	r3, #0
 8009c18:	4650      	mov	r0, sl
 8009c1a:	4659      	mov	r1, fp
 8009c1c:	f7f6 ff54 	bl	8000ac8 <__aeabi_dcmpeq>
 8009c20:	2800      	cmp	r0, #0
 8009c22:	d1a6      	bne.n	8009b72 <_strtod_l+0x562>
 8009c24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c26:	9300      	str	r3, [sp, #0]
 8009c28:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009c2a:	9805      	ldr	r0, [sp, #20]
 8009c2c:	462b      	mov	r3, r5
 8009c2e:	463a      	mov	r2, r7
 8009c30:	f7ff f8c6 	bl	8008dc0 <__s2b>
 8009c34:	900a      	str	r0, [sp, #40]	@ 0x28
 8009c36:	2800      	cmp	r0, #0
 8009c38:	f43f af05 	beq.w	8009a46 <_strtod_l+0x436>
 8009c3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c3e:	2a00      	cmp	r2, #0
 8009c40:	eba9 0308 	sub.w	r3, r9, r8
 8009c44:	bfa8      	it	ge
 8009c46:	2300      	movge	r3, #0
 8009c48:	9312      	str	r3, [sp, #72]	@ 0x48
 8009c4a:	2400      	movs	r4, #0
 8009c4c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009c50:	9316      	str	r3, [sp, #88]	@ 0x58
 8009c52:	46a0      	mov	r8, r4
 8009c54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c56:	9805      	ldr	r0, [sp, #20]
 8009c58:	6859      	ldr	r1, [r3, #4]
 8009c5a:	f7ff f809 	bl	8008c70 <_Balloc>
 8009c5e:	4681      	mov	r9, r0
 8009c60:	2800      	cmp	r0, #0
 8009c62:	f43f aef4 	beq.w	8009a4e <_strtod_l+0x43e>
 8009c66:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c68:	691a      	ldr	r2, [r3, #16]
 8009c6a:	3202      	adds	r2, #2
 8009c6c:	f103 010c 	add.w	r1, r3, #12
 8009c70:	0092      	lsls	r2, r2, #2
 8009c72:	300c      	adds	r0, #12
 8009c74:	f7fe f899 	bl	8007daa <memcpy>
 8009c78:	ec4b ab10 	vmov	d0, sl, fp
 8009c7c:	9805      	ldr	r0, [sp, #20]
 8009c7e:	aa1c      	add	r2, sp, #112	@ 0x70
 8009c80:	a91b      	add	r1, sp, #108	@ 0x6c
 8009c82:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009c86:	f7ff fbd7 	bl	8009438 <__d2b>
 8009c8a:	901a      	str	r0, [sp, #104]	@ 0x68
 8009c8c:	2800      	cmp	r0, #0
 8009c8e:	f43f aede 	beq.w	8009a4e <_strtod_l+0x43e>
 8009c92:	9805      	ldr	r0, [sp, #20]
 8009c94:	2101      	movs	r1, #1
 8009c96:	f7ff f929 	bl	8008eec <__i2b>
 8009c9a:	4680      	mov	r8, r0
 8009c9c:	b948      	cbnz	r0, 8009cb2 <_strtod_l+0x6a2>
 8009c9e:	f04f 0800 	mov.w	r8, #0
 8009ca2:	e6d4      	b.n	8009a4e <_strtod_l+0x43e>
 8009ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8009ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8009cac:	ea03 0a0a 	and.w	sl, r3, sl
 8009cb0:	e7b0      	b.n	8009c14 <_strtod_l+0x604>
 8009cb2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009cb4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009cb6:	2d00      	cmp	r5, #0
 8009cb8:	bfab      	itete	ge
 8009cba:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009cbc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009cbe:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009cc0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009cc2:	bfac      	ite	ge
 8009cc4:	18ef      	addge	r7, r5, r3
 8009cc6:	1b5e      	sublt	r6, r3, r5
 8009cc8:	9b08      	ldr	r3, [sp, #32]
 8009cca:	1aed      	subs	r5, r5, r3
 8009ccc:	4415      	add	r5, r2
 8009cce:	4b66      	ldr	r3, [pc, #408]	@ (8009e68 <_strtod_l+0x858>)
 8009cd0:	3d01      	subs	r5, #1
 8009cd2:	429d      	cmp	r5, r3
 8009cd4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009cd8:	da50      	bge.n	8009d7c <_strtod_l+0x76c>
 8009cda:	1b5b      	subs	r3, r3, r5
 8009cdc:	2b1f      	cmp	r3, #31
 8009cde:	eba2 0203 	sub.w	r2, r2, r3
 8009ce2:	f04f 0101 	mov.w	r1, #1
 8009ce6:	dc3d      	bgt.n	8009d64 <_strtod_l+0x754>
 8009ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8009cec:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009cee:	2300      	movs	r3, #0
 8009cf0:	9310      	str	r3, [sp, #64]	@ 0x40
 8009cf2:	18bd      	adds	r5, r7, r2
 8009cf4:	9b08      	ldr	r3, [sp, #32]
 8009cf6:	42af      	cmp	r7, r5
 8009cf8:	4416      	add	r6, r2
 8009cfa:	441e      	add	r6, r3
 8009cfc:	463b      	mov	r3, r7
 8009cfe:	bfa8      	it	ge
 8009d00:	462b      	movge	r3, r5
 8009d02:	42b3      	cmp	r3, r6
 8009d04:	bfa8      	it	ge
 8009d06:	4633      	movge	r3, r6
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	bfc2      	ittt	gt
 8009d0c:	1aed      	subgt	r5, r5, r3
 8009d0e:	1af6      	subgt	r6, r6, r3
 8009d10:	1aff      	subgt	r7, r7, r3
 8009d12:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	dd16      	ble.n	8009d46 <_strtod_l+0x736>
 8009d18:	4641      	mov	r1, r8
 8009d1a:	9805      	ldr	r0, [sp, #20]
 8009d1c:	461a      	mov	r2, r3
 8009d1e:	f7ff f9a5 	bl	800906c <__pow5mult>
 8009d22:	4680      	mov	r8, r0
 8009d24:	2800      	cmp	r0, #0
 8009d26:	d0ba      	beq.n	8009c9e <_strtod_l+0x68e>
 8009d28:	4601      	mov	r1, r0
 8009d2a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009d2c:	9805      	ldr	r0, [sp, #20]
 8009d2e:	f7ff f8f3 	bl	8008f18 <__multiply>
 8009d32:	900e      	str	r0, [sp, #56]	@ 0x38
 8009d34:	2800      	cmp	r0, #0
 8009d36:	f43f ae8a 	beq.w	8009a4e <_strtod_l+0x43e>
 8009d3a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009d3c:	9805      	ldr	r0, [sp, #20]
 8009d3e:	f7fe ffd7 	bl	8008cf0 <_Bfree>
 8009d42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d44:	931a      	str	r3, [sp, #104]	@ 0x68
 8009d46:	2d00      	cmp	r5, #0
 8009d48:	dc1d      	bgt.n	8009d86 <_strtod_l+0x776>
 8009d4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	dd23      	ble.n	8009d98 <_strtod_l+0x788>
 8009d50:	4649      	mov	r1, r9
 8009d52:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009d54:	9805      	ldr	r0, [sp, #20]
 8009d56:	f7ff f989 	bl	800906c <__pow5mult>
 8009d5a:	4681      	mov	r9, r0
 8009d5c:	b9e0      	cbnz	r0, 8009d98 <_strtod_l+0x788>
 8009d5e:	f04f 0900 	mov.w	r9, #0
 8009d62:	e674      	b.n	8009a4e <_strtod_l+0x43e>
 8009d64:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009d68:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009d6c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009d70:	35e2      	adds	r5, #226	@ 0xe2
 8009d72:	fa01 f305 	lsl.w	r3, r1, r5
 8009d76:	9310      	str	r3, [sp, #64]	@ 0x40
 8009d78:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009d7a:	e7ba      	b.n	8009cf2 <_strtod_l+0x6e2>
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009d80:	2301      	movs	r3, #1
 8009d82:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009d84:	e7b5      	b.n	8009cf2 <_strtod_l+0x6e2>
 8009d86:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009d88:	9805      	ldr	r0, [sp, #20]
 8009d8a:	462a      	mov	r2, r5
 8009d8c:	f7ff f9c8 	bl	8009120 <__lshift>
 8009d90:	901a      	str	r0, [sp, #104]	@ 0x68
 8009d92:	2800      	cmp	r0, #0
 8009d94:	d1d9      	bne.n	8009d4a <_strtod_l+0x73a>
 8009d96:	e65a      	b.n	8009a4e <_strtod_l+0x43e>
 8009d98:	2e00      	cmp	r6, #0
 8009d9a:	dd07      	ble.n	8009dac <_strtod_l+0x79c>
 8009d9c:	4649      	mov	r1, r9
 8009d9e:	9805      	ldr	r0, [sp, #20]
 8009da0:	4632      	mov	r2, r6
 8009da2:	f7ff f9bd 	bl	8009120 <__lshift>
 8009da6:	4681      	mov	r9, r0
 8009da8:	2800      	cmp	r0, #0
 8009daa:	d0d8      	beq.n	8009d5e <_strtod_l+0x74e>
 8009dac:	2f00      	cmp	r7, #0
 8009dae:	dd08      	ble.n	8009dc2 <_strtod_l+0x7b2>
 8009db0:	4641      	mov	r1, r8
 8009db2:	9805      	ldr	r0, [sp, #20]
 8009db4:	463a      	mov	r2, r7
 8009db6:	f7ff f9b3 	bl	8009120 <__lshift>
 8009dba:	4680      	mov	r8, r0
 8009dbc:	2800      	cmp	r0, #0
 8009dbe:	f43f ae46 	beq.w	8009a4e <_strtod_l+0x43e>
 8009dc2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009dc4:	9805      	ldr	r0, [sp, #20]
 8009dc6:	464a      	mov	r2, r9
 8009dc8:	f7ff fa32 	bl	8009230 <__mdiff>
 8009dcc:	4604      	mov	r4, r0
 8009dce:	2800      	cmp	r0, #0
 8009dd0:	f43f ae3d 	beq.w	8009a4e <_strtod_l+0x43e>
 8009dd4:	68c3      	ldr	r3, [r0, #12]
 8009dd6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009dd8:	2300      	movs	r3, #0
 8009dda:	60c3      	str	r3, [r0, #12]
 8009ddc:	4641      	mov	r1, r8
 8009dde:	f7ff fa0b 	bl	80091f8 <__mcmp>
 8009de2:	2800      	cmp	r0, #0
 8009de4:	da46      	bge.n	8009e74 <_strtod_l+0x864>
 8009de6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009de8:	ea53 030a 	orrs.w	r3, r3, sl
 8009dec:	d16c      	bne.n	8009ec8 <_strtod_l+0x8b8>
 8009dee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d168      	bne.n	8009ec8 <_strtod_l+0x8b8>
 8009df6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009dfa:	0d1b      	lsrs	r3, r3, #20
 8009dfc:	051b      	lsls	r3, r3, #20
 8009dfe:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009e02:	d961      	bls.n	8009ec8 <_strtod_l+0x8b8>
 8009e04:	6963      	ldr	r3, [r4, #20]
 8009e06:	b913      	cbnz	r3, 8009e0e <_strtod_l+0x7fe>
 8009e08:	6923      	ldr	r3, [r4, #16]
 8009e0a:	2b01      	cmp	r3, #1
 8009e0c:	dd5c      	ble.n	8009ec8 <_strtod_l+0x8b8>
 8009e0e:	4621      	mov	r1, r4
 8009e10:	2201      	movs	r2, #1
 8009e12:	9805      	ldr	r0, [sp, #20]
 8009e14:	f7ff f984 	bl	8009120 <__lshift>
 8009e18:	4641      	mov	r1, r8
 8009e1a:	4604      	mov	r4, r0
 8009e1c:	f7ff f9ec 	bl	80091f8 <__mcmp>
 8009e20:	2800      	cmp	r0, #0
 8009e22:	dd51      	ble.n	8009ec8 <_strtod_l+0x8b8>
 8009e24:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009e28:	9a08      	ldr	r2, [sp, #32]
 8009e2a:	0d1b      	lsrs	r3, r3, #20
 8009e2c:	051b      	lsls	r3, r3, #20
 8009e2e:	2a00      	cmp	r2, #0
 8009e30:	d06b      	beq.n	8009f0a <_strtod_l+0x8fa>
 8009e32:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009e36:	d868      	bhi.n	8009f0a <_strtod_l+0x8fa>
 8009e38:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009e3c:	f67f ae9d 	bls.w	8009b7a <_strtod_l+0x56a>
 8009e40:	4b0a      	ldr	r3, [pc, #40]	@ (8009e6c <_strtod_l+0x85c>)
 8009e42:	4650      	mov	r0, sl
 8009e44:	4659      	mov	r1, fp
 8009e46:	2200      	movs	r2, #0
 8009e48:	f7f6 fbd6 	bl	80005f8 <__aeabi_dmul>
 8009e4c:	4b08      	ldr	r3, [pc, #32]	@ (8009e70 <_strtod_l+0x860>)
 8009e4e:	400b      	ands	r3, r1
 8009e50:	4682      	mov	sl, r0
 8009e52:	468b      	mov	fp, r1
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	f47f ae05 	bne.w	8009a64 <_strtod_l+0x454>
 8009e5a:	9a05      	ldr	r2, [sp, #20]
 8009e5c:	2322      	movs	r3, #34	@ 0x22
 8009e5e:	6013      	str	r3, [r2, #0]
 8009e60:	e600      	b.n	8009a64 <_strtod_l+0x454>
 8009e62:	bf00      	nop
 8009e64:	0801a988 	.word	0x0801a988
 8009e68:	fffffc02 	.word	0xfffffc02
 8009e6c:	39500000 	.word	0x39500000
 8009e70:	7ff00000 	.word	0x7ff00000
 8009e74:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009e78:	d165      	bne.n	8009f46 <_strtod_l+0x936>
 8009e7a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009e7c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009e80:	b35a      	cbz	r2, 8009eda <_strtod_l+0x8ca>
 8009e82:	4a9f      	ldr	r2, [pc, #636]	@ (800a100 <_strtod_l+0xaf0>)
 8009e84:	4293      	cmp	r3, r2
 8009e86:	d12b      	bne.n	8009ee0 <_strtod_l+0x8d0>
 8009e88:	9b08      	ldr	r3, [sp, #32]
 8009e8a:	4651      	mov	r1, sl
 8009e8c:	b303      	cbz	r3, 8009ed0 <_strtod_l+0x8c0>
 8009e8e:	4b9d      	ldr	r3, [pc, #628]	@ (800a104 <_strtod_l+0xaf4>)
 8009e90:	465a      	mov	r2, fp
 8009e92:	4013      	ands	r3, r2
 8009e94:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009e98:	f04f 32ff 	mov.w	r2, #4294967295
 8009e9c:	d81b      	bhi.n	8009ed6 <_strtod_l+0x8c6>
 8009e9e:	0d1b      	lsrs	r3, r3, #20
 8009ea0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8009ea8:	4299      	cmp	r1, r3
 8009eaa:	d119      	bne.n	8009ee0 <_strtod_l+0x8d0>
 8009eac:	4b96      	ldr	r3, [pc, #600]	@ (800a108 <_strtod_l+0xaf8>)
 8009eae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009eb0:	429a      	cmp	r2, r3
 8009eb2:	d102      	bne.n	8009eba <_strtod_l+0x8aa>
 8009eb4:	3101      	adds	r1, #1
 8009eb6:	f43f adca 	beq.w	8009a4e <_strtod_l+0x43e>
 8009eba:	4b92      	ldr	r3, [pc, #584]	@ (800a104 <_strtod_l+0xaf4>)
 8009ebc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009ebe:	401a      	ands	r2, r3
 8009ec0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009ec4:	f04f 0a00 	mov.w	sl, #0
 8009ec8:	9b08      	ldr	r3, [sp, #32]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d1b8      	bne.n	8009e40 <_strtod_l+0x830>
 8009ece:	e5c9      	b.n	8009a64 <_strtod_l+0x454>
 8009ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8009ed4:	e7e8      	b.n	8009ea8 <_strtod_l+0x898>
 8009ed6:	4613      	mov	r3, r2
 8009ed8:	e7e6      	b.n	8009ea8 <_strtod_l+0x898>
 8009eda:	ea53 030a 	orrs.w	r3, r3, sl
 8009ede:	d0a1      	beq.n	8009e24 <_strtod_l+0x814>
 8009ee0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009ee2:	b1db      	cbz	r3, 8009f1c <_strtod_l+0x90c>
 8009ee4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009ee6:	4213      	tst	r3, r2
 8009ee8:	d0ee      	beq.n	8009ec8 <_strtod_l+0x8b8>
 8009eea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009eec:	9a08      	ldr	r2, [sp, #32]
 8009eee:	4650      	mov	r0, sl
 8009ef0:	4659      	mov	r1, fp
 8009ef2:	b1bb      	cbz	r3, 8009f24 <_strtod_l+0x914>
 8009ef4:	f7ff fb6e 	bl	80095d4 <sulp>
 8009ef8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009efc:	ec53 2b10 	vmov	r2, r3, d0
 8009f00:	f7f6 f9c4 	bl	800028c <__adddf3>
 8009f04:	4682      	mov	sl, r0
 8009f06:	468b      	mov	fp, r1
 8009f08:	e7de      	b.n	8009ec8 <_strtod_l+0x8b8>
 8009f0a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009f0e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009f12:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009f16:	f04f 3aff 	mov.w	sl, #4294967295
 8009f1a:	e7d5      	b.n	8009ec8 <_strtod_l+0x8b8>
 8009f1c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009f1e:	ea13 0f0a 	tst.w	r3, sl
 8009f22:	e7e1      	b.n	8009ee8 <_strtod_l+0x8d8>
 8009f24:	f7ff fb56 	bl	80095d4 <sulp>
 8009f28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009f2c:	ec53 2b10 	vmov	r2, r3, d0
 8009f30:	f7f6 f9aa 	bl	8000288 <__aeabi_dsub>
 8009f34:	2200      	movs	r2, #0
 8009f36:	2300      	movs	r3, #0
 8009f38:	4682      	mov	sl, r0
 8009f3a:	468b      	mov	fp, r1
 8009f3c:	f7f6 fdc4 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f40:	2800      	cmp	r0, #0
 8009f42:	d0c1      	beq.n	8009ec8 <_strtod_l+0x8b8>
 8009f44:	e619      	b.n	8009b7a <_strtod_l+0x56a>
 8009f46:	4641      	mov	r1, r8
 8009f48:	4620      	mov	r0, r4
 8009f4a:	f7ff facd 	bl	80094e8 <__ratio>
 8009f4e:	ec57 6b10 	vmov	r6, r7, d0
 8009f52:	2200      	movs	r2, #0
 8009f54:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009f58:	4630      	mov	r0, r6
 8009f5a:	4639      	mov	r1, r7
 8009f5c:	f7f6 fdc8 	bl	8000af0 <__aeabi_dcmple>
 8009f60:	2800      	cmp	r0, #0
 8009f62:	d06f      	beq.n	800a044 <_strtod_l+0xa34>
 8009f64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d17a      	bne.n	800a060 <_strtod_l+0xa50>
 8009f6a:	f1ba 0f00 	cmp.w	sl, #0
 8009f6e:	d158      	bne.n	800a022 <_strtod_l+0xa12>
 8009f70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d15a      	bne.n	800a030 <_strtod_l+0xa20>
 8009f7a:	4b64      	ldr	r3, [pc, #400]	@ (800a10c <_strtod_l+0xafc>)
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	4630      	mov	r0, r6
 8009f80:	4639      	mov	r1, r7
 8009f82:	f7f6 fdab 	bl	8000adc <__aeabi_dcmplt>
 8009f86:	2800      	cmp	r0, #0
 8009f88:	d159      	bne.n	800a03e <_strtod_l+0xa2e>
 8009f8a:	4630      	mov	r0, r6
 8009f8c:	4639      	mov	r1, r7
 8009f8e:	4b60      	ldr	r3, [pc, #384]	@ (800a110 <_strtod_l+0xb00>)
 8009f90:	2200      	movs	r2, #0
 8009f92:	f7f6 fb31 	bl	80005f8 <__aeabi_dmul>
 8009f96:	4606      	mov	r6, r0
 8009f98:	460f      	mov	r7, r1
 8009f9a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009f9e:	9606      	str	r6, [sp, #24]
 8009fa0:	9307      	str	r3, [sp, #28]
 8009fa2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009fa6:	4d57      	ldr	r5, [pc, #348]	@ (800a104 <_strtod_l+0xaf4>)
 8009fa8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009fac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009fae:	401d      	ands	r5, r3
 8009fb0:	4b58      	ldr	r3, [pc, #352]	@ (800a114 <_strtod_l+0xb04>)
 8009fb2:	429d      	cmp	r5, r3
 8009fb4:	f040 80b2 	bne.w	800a11c <_strtod_l+0xb0c>
 8009fb8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009fba:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009fbe:	ec4b ab10 	vmov	d0, sl, fp
 8009fc2:	f7ff f9c9 	bl	8009358 <__ulp>
 8009fc6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009fca:	ec51 0b10 	vmov	r0, r1, d0
 8009fce:	f7f6 fb13 	bl	80005f8 <__aeabi_dmul>
 8009fd2:	4652      	mov	r2, sl
 8009fd4:	465b      	mov	r3, fp
 8009fd6:	f7f6 f959 	bl	800028c <__adddf3>
 8009fda:	460b      	mov	r3, r1
 8009fdc:	4949      	ldr	r1, [pc, #292]	@ (800a104 <_strtod_l+0xaf4>)
 8009fde:	4a4e      	ldr	r2, [pc, #312]	@ (800a118 <_strtod_l+0xb08>)
 8009fe0:	4019      	ands	r1, r3
 8009fe2:	4291      	cmp	r1, r2
 8009fe4:	4682      	mov	sl, r0
 8009fe6:	d942      	bls.n	800a06e <_strtod_l+0xa5e>
 8009fe8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009fea:	4b47      	ldr	r3, [pc, #284]	@ (800a108 <_strtod_l+0xaf8>)
 8009fec:	429a      	cmp	r2, r3
 8009fee:	d103      	bne.n	8009ff8 <_strtod_l+0x9e8>
 8009ff0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009ff2:	3301      	adds	r3, #1
 8009ff4:	f43f ad2b 	beq.w	8009a4e <_strtod_l+0x43e>
 8009ff8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a108 <_strtod_l+0xaf8>
 8009ffc:	f04f 3aff 	mov.w	sl, #4294967295
 800a000:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a002:	9805      	ldr	r0, [sp, #20]
 800a004:	f7fe fe74 	bl	8008cf0 <_Bfree>
 800a008:	9805      	ldr	r0, [sp, #20]
 800a00a:	4649      	mov	r1, r9
 800a00c:	f7fe fe70 	bl	8008cf0 <_Bfree>
 800a010:	9805      	ldr	r0, [sp, #20]
 800a012:	4641      	mov	r1, r8
 800a014:	f7fe fe6c 	bl	8008cf0 <_Bfree>
 800a018:	9805      	ldr	r0, [sp, #20]
 800a01a:	4621      	mov	r1, r4
 800a01c:	f7fe fe68 	bl	8008cf0 <_Bfree>
 800a020:	e618      	b.n	8009c54 <_strtod_l+0x644>
 800a022:	f1ba 0f01 	cmp.w	sl, #1
 800a026:	d103      	bne.n	800a030 <_strtod_l+0xa20>
 800a028:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	f43f ada5 	beq.w	8009b7a <_strtod_l+0x56a>
 800a030:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a0e0 <_strtod_l+0xad0>
 800a034:	4f35      	ldr	r7, [pc, #212]	@ (800a10c <_strtod_l+0xafc>)
 800a036:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a03a:	2600      	movs	r6, #0
 800a03c:	e7b1      	b.n	8009fa2 <_strtod_l+0x992>
 800a03e:	4f34      	ldr	r7, [pc, #208]	@ (800a110 <_strtod_l+0xb00>)
 800a040:	2600      	movs	r6, #0
 800a042:	e7aa      	b.n	8009f9a <_strtod_l+0x98a>
 800a044:	4b32      	ldr	r3, [pc, #200]	@ (800a110 <_strtod_l+0xb00>)
 800a046:	4630      	mov	r0, r6
 800a048:	4639      	mov	r1, r7
 800a04a:	2200      	movs	r2, #0
 800a04c:	f7f6 fad4 	bl	80005f8 <__aeabi_dmul>
 800a050:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a052:	4606      	mov	r6, r0
 800a054:	460f      	mov	r7, r1
 800a056:	2b00      	cmp	r3, #0
 800a058:	d09f      	beq.n	8009f9a <_strtod_l+0x98a>
 800a05a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a05e:	e7a0      	b.n	8009fa2 <_strtod_l+0x992>
 800a060:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a0e8 <_strtod_l+0xad8>
 800a064:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a068:	ec57 6b17 	vmov	r6, r7, d7
 800a06c:	e799      	b.n	8009fa2 <_strtod_l+0x992>
 800a06e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a072:	9b08      	ldr	r3, [sp, #32]
 800a074:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d1c1      	bne.n	800a000 <_strtod_l+0x9f0>
 800a07c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a080:	0d1b      	lsrs	r3, r3, #20
 800a082:	051b      	lsls	r3, r3, #20
 800a084:	429d      	cmp	r5, r3
 800a086:	d1bb      	bne.n	800a000 <_strtod_l+0x9f0>
 800a088:	4630      	mov	r0, r6
 800a08a:	4639      	mov	r1, r7
 800a08c:	f7f6 fe14 	bl	8000cb8 <__aeabi_d2lz>
 800a090:	f7f6 fa84 	bl	800059c <__aeabi_l2d>
 800a094:	4602      	mov	r2, r0
 800a096:	460b      	mov	r3, r1
 800a098:	4630      	mov	r0, r6
 800a09a:	4639      	mov	r1, r7
 800a09c:	f7f6 f8f4 	bl	8000288 <__aeabi_dsub>
 800a0a0:	460b      	mov	r3, r1
 800a0a2:	4602      	mov	r2, r0
 800a0a4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a0a8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a0ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a0ae:	ea46 060a 	orr.w	r6, r6, sl
 800a0b2:	431e      	orrs	r6, r3
 800a0b4:	d06f      	beq.n	800a196 <_strtod_l+0xb86>
 800a0b6:	a30e      	add	r3, pc, #56	@ (adr r3, 800a0f0 <_strtod_l+0xae0>)
 800a0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0bc:	f7f6 fd0e 	bl	8000adc <__aeabi_dcmplt>
 800a0c0:	2800      	cmp	r0, #0
 800a0c2:	f47f accf 	bne.w	8009a64 <_strtod_l+0x454>
 800a0c6:	a30c      	add	r3, pc, #48	@ (adr r3, 800a0f8 <_strtod_l+0xae8>)
 800a0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a0d0:	f7f6 fd22 	bl	8000b18 <__aeabi_dcmpgt>
 800a0d4:	2800      	cmp	r0, #0
 800a0d6:	d093      	beq.n	800a000 <_strtod_l+0x9f0>
 800a0d8:	e4c4      	b.n	8009a64 <_strtod_l+0x454>
 800a0da:	bf00      	nop
 800a0dc:	f3af 8000 	nop.w
 800a0e0:	00000000 	.word	0x00000000
 800a0e4:	bff00000 	.word	0xbff00000
 800a0e8:	00000000 	.word	0x00000000
 800a0ec:	3ff00000 	.word	0x3ff00000
 800a0f0:	94a03595 	.word	0x94a03595
 800a0f4:	3fdfffff 	.word	0x3fdfffff
 800a0f8:	35afe535 	.word	0x35afe535
 800a0fc:	3fe00000 	.word	0x3fe00000
 800a100:	000fffff 	.word	0x000fffff
 800a104:	7ff00000 	.word	0x7ff00000
 800a108:	7fefffff 	.word	0x7fefffff
 800a10c:	3ff00000 	.word	0x3ff00000
 800a110:	3fe00000 	.word	0x3fe00000
 800a114:	7fe00000 	.word	0x7fe00000
 800a118:	7c9fffff 	.word	0x7c9fffff
 800a11c:	9b08      	ldr	r3, [sp, #32]
 800a11e:	b323      	cbz	r3, 800a16a <_strtod_l+0xb5a>
 800a120:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a124:	d821      	bhi.n	800a16a <_strtod_l+0xb5a>
 800a126:	a328      	add	r3, pc, #160	@ (adr r3, 800a1c8 <_strtod_l+0xbb8>)
 800a128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a12c:	4630      	mov	r0, r6
 800a12e:	4639      	mov	r1, r7
 800a130:	f7f6 fcde 	bl	8000af0 <__aeabi_dcmple>
 800a134:	b1a0      	cbz	r0, 800a160 <_strtod_l+0xb50>
 800a136:	4639      	mov	r1, r7
 800a138:	4630      	mov	r0, r6
 800a13a:	f7f6 fd35 	bl	8000ba8 <__aeabi_d2uiz>
 800a13e:	2801      	cmp	r0, #1
 800a140:	bf38      	it	cc
 800a142:	2001      	movcc	r0, #1
 800a144:	f7f6 f9de 	bl	8000504 <__aeabi_ui2d>
 800a148:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a14a:	4606      	mov	r6, r0
 800a14c:	460f      	mov	r7, r1
 800a14e:	b9fb      	cbnz	r3, 800a190 <_strtod_l+0xb80>
 800a150:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a154:	9014      	str	r0, [sp, #80]	@ 0x50
 800a156:	9315      	str	r3, [sp, #84]	@ 0x54
 800a158:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a15c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a160:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a162:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a166:	1b5b      	subs	r3, r3, r5
 800a168:	9311      	str	r3, [sp, #68]	@ 0x44
 800a16a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a16e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a172:	f7ff f8f1 	bl	8009358 <__ulp>
 800a176:	4650      	mov	r0, sl
 800a178:	ec53 2b10 	vmov	r2, r3, d0
 800a17c:	4659      	mov	r1, fp
 800a17e:	f7f6 fa3b 	bl	80005f8 <__aeabi_dmul>
 800a182:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a186:	f7f6 f881 	bl	800028c <__adddf3>
 800a18a:	4682      	mov	sl, r0
 800a18c:	468b      	mov	fp, r1
 800a18e:	e770      	b.n	800a072 <_strtod_l+0xa62>
 800a190:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a194:	e7e0      	b.n	800a158 <_strtod_l+0xb48>
 800a196:	a30e      	add	r3, pc, #56	@ (adr r3, 800a1d0 <_strtod_l+0xbc0>)
 800a198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a19c:	f7f6 fc9e 	bl	8000adc <__aeabi_dcmplt>
 800a1a0:	e798      	b.n	800a0d4 <_strtod_l+0xac4>
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a1a6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a1a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a1aa:	6013      	str	r3, [r2, #0]
 800a1ac:	f7ff ba6d 	b.w	800968a <_strtod_l+0x7a>
 800a1b0:	2a65      	cmp	r2, #101	@ 0x65
 800a1b2:	f43f ab66 	beq.w	8009882 <_strtod_l+0x272>
 800a1b6:	2a45      	cmp	r2, #69	@ 0x45
 800a1b8:	f43f ab63 	beq.w	8009882 <_strtod_l+0x272>
 800a1bc:	2301      	movs	r3, #1
 800a1be:	f7ff bb9e 	b.w	80098fe <_strtod_l+0x2ee>
 800a1c2:	bf00      	nop
 800a1c4:	f3af 8000 	nop.w
 800a1c8:	ffc00000 	.word	0xffc00000
 800a1cc:	41dfffff 	.word	0x41dfffff
 800a1d0:	94a03595 	.word	0x94a03595
 800a1d4:	3fcfffff 	.word	0x3fcfffff

0800a1d8 <_strtod_r>:
 800a1d8:	4b01      	ldr	r3, [pc, #4]	@ (800a1e0 <_strtod_r+0x8>)
 800a1da:	f7ff ba19 	b.w	8009610 <_strtod_l>
 800a1de:	bf00      	nop
 800a1e0:	20000080 	.word	0x20000080

0800a1e4 <_strtol_l.constprop.0>:
 800a1e4:	2b24      	cmp	r3, #36	@ 0x24
 800a1e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1ea:	4686      	mov	lr, r0
 800a1ec:	4690      	mov	r8, r2
 800a1ee:	d801      	bhi.n	800a1f4 <_strtol_l.constprop.0+0x10>
 800a1f0:	2b01      	cmp	r3, #1
 800a1f2:	d106      	bne.n	800a202 <_strtol_l.constprop.0+0x1e>
 800a1f4:	f7fd fdac 	bl	8007d50 <__errno>
 800a1f8:	2316      	movs	r3, #22
 800a1fa:	6003      	str	r3, [r0, #0]
 800a1fc:	2000      	movs	r0, #0
 800a1fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a202:	4834      	ldr	r0, [pc, #208]	@ (800a2d4 <_strtol_l.constprop.0+0xf0>)
 800a204:	460d      	mov	r5, r1
 800a206:	462a      	mov	r2, r5
 800a208:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a20c:	5d06      	ldrb	r6, [r0, r4]
 800a20e:	f016 0608 	ands.w	r6, r6, #8
 800a212:	d1f8      	bne.n	800a206 <_strtol_l.constprop.0+0x22>
 800a214:	2c2d      	cmp	r4, #45	@ 0x2d
 800a216:	d12d      	bne.n	800a274 <_strtol_l.constprop.0+0x90>
 800a218:	782c      	ldrb	r4, [r5, #0]
 800a21a:	2601      	movs	r6, #1
 800a21c:	1c95      	adds	r5, r2, #2
 800a21e:	f033 0210 	bics.w	r2, r3, #16
 800a222:	d109      	bne.n	800a238 <_strtol_l.constprop.0+0x54>
 800a224:	2c30      	cmp	r4, #48	@ 0x30
 800a226:	d12a      	bne.n	800a27e <_strtol_l.constprop.0+0x9a>
 800a228:	782a      	ldrb	r2, [r5, #0]
 800a22a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a22e:	2a58      	cmp	r2, #88	@ 0x58
 800a230:	d125      	bne.n	800a27e <_strtol_l.constprop.0+0x9a>
 800a232:	786c      	ldrb	r4, [r5, #1]
 800a234:	2310      	movs	r3, #16
 800a236:	3502      	adds	r5, #2
 800a238:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a23c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a240:	2200      	movs	r2, #0
 800a242:	fbbc f9f3 	udiv	r9, ip, r3
 800a246:	4610      	mov	r0, r2
 800a248:	fb03 ca19 	mls	sl, r3, r9, ip
 800a24c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a250:	2f09      	cmp	r7, #9
 800a252:	d81b      	bhi.n	800a28c <_strtol_l.constprop.0+0xa8>
 800a254:	463c      	mov	r4, r7
 800a256:	42a3      	cmp	r3, r4
 800a258:	dd27      	ble.n	800a2aa <_strtol_l.constprop.0+0xc6>
 800a25a:	1c57      	adds	r7, r2, #1
 800a25c:	d007      	beq.n	800a26e <_strtol_l.constprop.0+0x8a>
 800a25e:	4581      	cmp	r9, r0
 800a260:	d320      	bcc.n	800a2a4 <_strtol_l.constprop.0+0xc0>
 800a262:	d101      	bne.n	800a268 <_strtol_l.constprop.0+0x84>
 800a264:	45a2      	cmp	sl, r4
 800a266:	db1d      	blt.n	800a2a4 <_strtol_l.constprop.0+0xc0>
 800a268:	fb00 4003 	mla	r0, r0, r3, r4
 800a26c:	2201      	movs	r2, #1
 800a26e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a272:	e7eb      	b.n	800a24c <_strtol_l.constprop.0+0x68>
 800a274:	2c2b      	cmp	r4, #43	@ 0x2b
 800a276:	bf04      	itt	eq
 800a278:	782c      	ldrbeq	r4, [r5, #0]
 800a27a:	1c95      	addeq	r5, r2, #2
 800a27c:	e7cf      	b.n	800a21e <_strtol_l.constprop.0+0x3a>
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d1da      	bne.n	800a238 <_strtol_l.constprop.0+0x54>
 800a282:	2c30      	cmp	r4, #48	@ 0x30
 800a284:	bf0c      	ite	eq
 800a286:	2308      	moveq	r3, #8
 800a288:	230a      	movne	r3, #10
 800a28a:	e7d5      	b.n	800a238 <_strtol_l.constprop.0+0x54>
 800a28c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a290:	2f19      	cmp	r7, #25
 800a292:	d801      	bhi.n	800a298 <_strtol_l.constprop.0+0xb4>
 800a294:	3c37      	subs	r4, #55	@ 0x37
 800a296:	e7de      	b.n	800a256 <_strtol_l.constprop.0+0x72>
 800a298:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a29c:	2f19      	cmp	r7, #25
 800a29e:	d804      	bhi.n	800a2aa <_strtol_l.constprop.0+0xc6>
 800a2a0:	3c57      	subs	r4, #87	@ 0x57
 800a2a2:	e7d8      	b.n	800a256 <_strtol_l.constprop.0+0x72>
 800a2a4:	f04f 32ff 	mov.w	r2, #4294967295
 800a2a8:	e7e1      	b.n	800a26e <_strtol_l.constprop.0+0x8a>
 800a2aa:	1c53      	adds	r3, r2, #1
 800a2ac:	d108      	bne.n	800a2c0 <_strtol_l.constprop.0+0xdc>
 800a2ae:	2322      	movs	r3, #34	@ 0x22
 800a2b0:	f8ce 3000 	str.w	r3, [lr]
 800a2b4:	4660      	mov	r0, ip
 800a2b6:	f1b8 0f00 	cmp.w	r8, #0
 800a2ba:	d0a0      	beq.n	800a1fe <_strtol_l.constprop.0+0x1a>
 800a2bc:	1e69      	subs	r1, r5, #1
 800a2be:	e006      	b.n	800a2ce <_strtol_l.constprop.0+0xea>
 800a2c0:	b106      	cbz	r6, 800a2c4 <_strtol_l.constprop.0+0xe0>
 800a2c2:	4240      	negs	r0, r0
 800a2c4:	f1b8 0f00 	cmp.w	r8, #0
 800a2c8:	d099      	beq.n	800a1fe <_strtol_l.constprop.0+0x1a>
 800a2ca:	2a00      	cmp	r2, #0
 800a2cc:	d1f6      	bne.n	800a2bc <_strtol_l.constprop.0+0xd8>
 800a2ce:	f8c8 1000 	str.w	r1, [r8]
 800a2d2:	e794      	b.n	800a1fe <_strtol_l.constprop.0+0x1a>
 800a2d4:	0801a9b1 	.word	0x0801a9b1

0800a2d8 <_strtol_r>:
 800a2d8:	f7ff bf84 	b.w	800a1e4 <_strtol_l.constprop.0>

0800a2dc <__ssputs_r>:
 800a2dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2e0:	688e      	ldr	r6, [r1, #8]
 800a2e2:	461f      	mov	r7, r3
 800a2e4:	42be      	cmp	r6, r7
 800a2e6:	680b      	ldr	r3, [r1, #0]
 800a2e8:	4682      	mov	sl, r0
 800a2ea:	460c      	mov	r4, r1
 800a2ec:	4690      	mov	r8, r2
 800a2ee:	d82d      	bhi.n	800a34c <__ssputs_r+0x70>
 800a2f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a2f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a2f8:	d026      	beq.n	800a348 <__ssputs_r+0x6c>
 800a2fa:	6965      	ldr	r5, [r4, #20]
 800a2fc:	6909      	ldr	r1, [r1, #16]
 800a2fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a302:	eba3 0901 	sub.w	r9, r3, r1
 800a306:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a30a:	1c7b      	adds	r3, r7, #1
 800a30c:	444b      	add	r3, r9
 800a30e:	106d      	asrs	r5, r5, #1
 800a310:	429d      	cmp	r5, r3
 800a312:	bf38      	it	cc
 800a314:	461d      	movcc	r5, r3
 800a316:	0553      	lsls	r3, r2, #21
 800a318:	d527      	bpl.n	800a36a <__ssputs_r+0x8e>
 800a31a:	4629      	mov	r1, r5
 800a31c:	f7fe fc1c 	bl	8008b58 <_malloc_r>
 800a320:	4606      	mov	r6, r0
 800a322:	b360      	cbz	r0, 800a37e <__ssputs_r+0xa2>
 800a324:	6921      	ldr	r1, [r4, #16]
 800a326:	464a      	mov	r2, r9
 800a328:	f7fd fd3f 	bl	8007daa <memcpy>
 800a32c:	89a3      	ldrh	r3, [r4, #12]
 800a32e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a332:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a336:	81a3      	strh	r3, [r4, #12]
 800a338:	6126      	str	r6, [r4, #16]
 800a33a:	6165      	str	r5, [r4, #20]
 800a33c:	444e      	add	r6, r9
 800a33e:	eba5 0509 	sub.w	r5, r5, r9
 800a342:	6026      	str	r6, [r4, #0]
 800a344:	60a5      	str	r5, [r4, #8]
 800a346:	463e      	mov	r6, r7
 800a348:	42be      	cmp	r6, r7
 800a34a:	d900      	bls.n	800a34e <__ssputs_r+0x72>
 800a34c:	463e      	mov	r6, r7
 800a34e:	6820      	ldr	r0, [r4, #0]
 800a350:	4632      	mov	r2, r6
 800a352:	4641      	mov	r1, r8
 800a354:	f000 fb6a 	bl	800aa2c <memmove>
 800a358:	68a3      	ldr	r3, [r4, #8]
 800a35a:	1b9b      	subs	r3, r3, r6
 800a35c:	60a3      	str	r3, [r4, #8]
 800a35e:	6823      	ldr	r3, [r4, #0]
 800a360:	4433      	add	r3, r6
 800a362:	6023      	str	r3, [r4, #0]
 800a364:	2000      	movs	r0, #0
 800a366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a36a:	462a      	mov	r2, r5
 800a36c:	f000 ff41 	bl	800b1f2 <_realloc_r>
 800a370:	4606      	mov	r6, r0
 800a372:	2800      	cmp	r0, #0
 800a374:	d1e0      	bne.n	800a338 <__ssputs_r+0x5c>
 800a376:	6921      	ldr	r1, [r4, #16]
 800a378:	4650      	mov	r0, sl
 800a37a:	f7fe fb79 	bl	8008a70 <_free_r>
 800a37e:	230c      	movs	r3, #12
 800a380:	f8ca 3000 	str.w	r3, [sl]
 800a384:	89a3      	ldrh	r3, [r4, #12]
 800a386:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a38a:	81a3      	strh	r3, [r4, #12]
 800a38c:	f04f 30ff 	mov.w	r0, #4294967295
 800a390:	e7e9      	b.n	800a366 <__ssputs_r+0x8a>
	...

0800a394 <_svfiprintf_r>:
 800a394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a398:	4698      	mov	r8, r3
 800a39a:	898b      	ldrh	r3, [r1, #12]
 800a39c:	061b      	lsls	r3, r3, #24
 800a39e:	b09d      	sub	sp, #116	@ 0x74
 800a3a0:	4607      	mov	r7, r0
 800a3a2:	460d      	mov	r5, r1
 800a3a4:	4614      	mov	r4, r2
 800a3a6:	d510      	bpl.n	800a3ca <_svfiprintf_r+0x36>
 800a3a8:	690b      	ldr	r3, [r1, #16]
 800a3aa:	b973      	cbnz	r3, 800a3ca <_svfiprintf_r+0x36>
 800a3ac:	2140      	movs	r1, #64	@ 0x40
 800a3ae:	f7fe fbd3 	bl	8008b58 <_malloc_r>
 800a3b2:	6028      	str	r0, [r5, #0]
 800a3b4:	6128      	str	r0, [r5, #16]
 800a3b6:	b930      	cbnz	r0, 800a3c6 <_svfiprintf_r+0x32>
 800a3b8:	230c      	movs	r3, #12
 800a3ba:	603b      	str	r3, [r7, #0]
 800a3bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a3c0:	b01d      	add	sp, #116	@ 0x74
 800a3c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3c6:	2340      	movs	r3, #64	@ 0x40
 800a3c8:	616b      	str	r3, [r5, #20]
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a3ce:	2320      	movs	r3, #32
 800a3d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a3d4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a3d8:	2330      	movs	r3, #48	@ 0x30
 800a3da:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a578 <_svfiprintf_r+0x1e4>
 800a3de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a3e2:	f04f 0901 	mov.w	r9, #1
 800a3e6:	4623      	mov	r3, r4
 800a3e8:	469a      	mov	sl, r3
 800a3ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3ee:	b10a      	cbz	r2, 800a3f4 <_svfiprintf_r+0x60>
 800a3f0:	2a25      	cmp	r2, #37	@ 0x25
 800a3f2:	d1f9      	bne.n	800a3e8 <_svfiprintf_r+0x54>
 800a3f4:	ebba 0b04 	subs.w	fp, sl, r4
 800a3f8:	d00b      	beq.n	800a412 <_svfiprintf_r+0x7e>
 800a3fa:	465b      	mov	r3, fp
 800a3fc:	4622      	mov	r2, r4
 800a3fe:	4629      	mov	r1, r5
 800a400:	4638      	mov	r0, r7
 800a402:	f7ff ff6b 	bl	800a2dc <__ssputs_r>
 800a406:	3001      	adds	r0, #1
 800a408:	f000 80a7 	beq.w	800a55a <_svfiprintf_r+0x1c6>
 800a40c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a40e:	445a      	add	r2, fp
 800a410:	9209      	str	r2, [sp, #36]	@ 0x24
 800a412:	f89a 3000 	ldrb.w	r3, [sl]
 800a416:	2b00      	cmp	r3, #0
 800a418:	f000 809f 	beq.w	800a55a <_svfiprintf_r+0x1c6>
 800a41c:	2300      	movs	r3, #0
 800a41e:	f04f 32ff 	mov.w	r2, #4294967295
 800a422:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a426:	f10a 0a01 	add.w	sl, sl, #1
 800a42a:	9304      	str	r3, [sp, #16]
 800a42c:	9307      	str	r3, [sp, #28]
 800a42e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a432:	931a      	str	r3, [sp, #104]	@ 0x68
 800a434:	4654      	mov	r4, sl
 800a436:	2205      	movs	r2, #5
 800a438:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a43c:	484e      	ldr	r0, [pc, #312]	@ (800a578 <_svfiprintf_r+0x1e4>)
 800a43e:	f7f5 fec7 	bl	80001d0 <memchr>
 800a442:	9a04      	ldr	r2, [sp, #16]
 800a444:	b9d8      	cbnz	r0, 800a47e <_svfiprintf_r+0xea>
 800a446:	06d0      	lsls	r0, r2, #27
 800a448:	bf44      	itt	mi
 800a44a:	2320      	movmi	r3, #32
 800a44c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a450:	0711      	lsls	r1, r2, #28
 800a452:	bf44      	itt	mi
 800a454:	232b      	movmi	r3, #43	@ 0x2b
 800a456:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a45a:	f89a 3000 	ldrb.w	r3, [sl]
 800a45e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a460:	d015      	beq.n	800a48e <_svfiprintf_r+0xfa>
 800a462:	9a07      	ldr	r2, [sp, #28]
 800a464:	4654      	mov	r4, sl
 800a466:	2000      	movs	r0, #0
 800a468:	f04f 0c0a 	mov.w	ip, #10
 800a46c:	4621      	mov	r1, r4
 800a46e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a472:	3b30      	subs	r3, #48	@ 0x30
 800a474:	2b09      	cmp	r3, #9
 800a476:	d94b      	bls.n	800a510 <_svfiprintf_r+0x17c>
 800a478:	b1b0      	cbz	r0, 800a4a8 <_svfiprintf_r+0x114>
 800a47a:	9207      	str	r2, [sp, #28]
 800a47c:	e014      	b.n	800a4a8 <_svfiprintf_r+0x114>
 800a47e:	eba0 0308 	sub.w	r3, r0, r8
 800a482:	fa09 f303 	lsl.w	r3, r9, r3
 800a486:	4313      	orrs	r3, r2
 800a488:	9304      	str	r3, [sp, #16]
 800a48a:	46a2      	mov	sl, r4
 800a48c:	e7d2      	b.n	800a434 <_svfiprintf_r+0xa0>
 800a48e:	9b03      	ldr	r3, [sp, #12]
 800a490:	1d19      	adds	r1, r3, #4
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	9103      	str	r1, [sp, #12]
 800a496:	2b00      	cmp	r3, #0
 800a498:	bfbb      	ittet	lt
 800a49a:	425b      	neglt	r3, r3
 800a49c:	f042 0202 	orrlt.w	r2, r2, #2
 800a4a0:	9307      	strge	r3, [sp, #28]
 800a4a2:	9307      	strlt	r3, [sp, #28]
 800a4a4:	bfb8      	it	lt
 800a4a6:	9204      	strlt	r2, [sp, #16]
 800a4a8:	7823      	ldrb	r3, [r4, #0]
 800a4aa:	2b2e      	cmp	r3, #46	@ 0x2e
 800a4ac:	d10a      	bne.n	800a4c4 <_svfiprintf_r+0x130>
 800a4ae:	7863      	ldrb	r3, [r4, #1]
 800a4b0:	2b2a      	cmp	r3, #42	@ 0x2a
 800a4b2:	d132      	bne.n	800a51a <_svfiprintf_r+0x186>
 800a4b4:	9b03      	ldr	r3, [sp, #12]
 800a4b6:	1d1a      	adds	r2, r3, #4
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	9203      	str	r2, [sp, #12]
 800a4bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a4c0:	3402      	adds	r4, #2
 800a4c2:	9305      	str	r3, [sp, #20]
 800a4c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a588 <_svfiprintf_r+0x1f4>
 800a4c8:	7821      	ldrb	r1, [r4, #0]
 800a4ca:	2203      	movs	r2, #3
 800a4cc:	4650      	mov	r0, sl
 800a4ce:	f7f5 fe7f 	bl	80001d0 <memchr>
 800a4d2:	b138      	cbz	r0, 800a4e4 <_svfiprintf_r+0x150>
 800a4d4:	9b04      	ldr	r3, [sp, #16]
 800a4d6:	eba0 000a 	sub.w	r0, r0, sl
 800a4da:	2240      	movs	r2, #64	@ 0x40
 800a4dc:	4082      	lsls	r2, r0
 800a4de:	4313      	orrs	r3, r2
 800a4e0:	3401      	adds	r4, #1
 800a4e2:	9304      	str	r3, [sp, #16]
 800a4e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4e8:	4824      	ldr	r0, [pc, #144]	@ (800a57c <_svfiprintf_r+0x1e8>)
 800a4ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a4ee:	2206      	movs	r2, #6
 800a4f0:	f7f5 fe6e 	bl	80001d0 <memchr>
 800a4f4:	2800      	cmp	r0, #0
 800a4f6:	d036      	beq.n	800a566 <_svfiprintf_r+0x1d2>
 800a4f8:	4b21      	ldr	r3, [pc, #132]	@ (800a580 <_svfiprintf_r+0x1ec>)
 800a4fa:	bb1b      	cbnz	r3, 800a544 <_svfiprintf_r+0x1b0>
 800a4fc:	9b03      	ldr	r3, [sp, #12]
 800a4fe:	3307      	adds	r3, #7
 800a500:	f023 0307 	bic.w	r3, r3, #7
 800a504:	3308      	adds	r3, #8
 800a506:	9303      	str	r3, [sp, #12]
 800a508:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a50a:	4433      	add	r3, r6
 800a50c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a50e:	e76a      	b.n	800a3e6 <_svfiprintf_r+0x52>
 800a510:	fb0c 3202 	mla	r2, ip, r2, r3
 800a514:	460c      	mov	r4, r1
 800a516:	2001      	movs	r0, #1
 800a518:	e7a8      	b.n	800a46c <_svfiprintf_r+0xd8>
 800a51a:	2300      	movs	r3, #0
 800a51c:	3401      	adds	r4, #1
 800a51e:	9305      	str	r3, [sp, #20]
 800a520:	4619      	mov	r1, r3
 800a522:	f04f 0c0a 	mov.w	ip, #10
 800a526:	4620      	mov	r0, r4
 800a528:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a52c:	3a30      	subs	r2, #48	@ 0x30
 800a52e:	2a09      	cmp	r2, #9
 800a530:	d903      	bls.n	800a53a <_svfiprintf_r+0x1a6>
 800a532:	2b00      	cmp	r3, #0
 800a534:	d0c6      	beq.n	800a4c4 <_svfiprintf_r+0x130>
 800a536:	9105      	str	r1, [sp, #20]
 800a538:	e7c4      	b.n	800a4c4 <_svfiprintf_r+0x130>
 800a53a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a53e:	4604      	mov	r4, r0
 800a540:	2301      	movs	r3, #1
 800a542:	e7f0      	b.n	800a526 <_svfiprintf_r+0x192>
 800a544:	ab03      	add	r3, sp, #12
 800a546:	9300      	str	r3, [sp, #0]
 800a548:	462a      	mov	r2, r5
 800a54a:	4b0e      	ldr	r3, [pc, #56]	@ (800a584 <_svfiprintf_r+0x1f0>)
 800a54c:	a904      	add	r1, sp, #16
 800a54e:	4638      	mov	r0, r7
 800a550:	f7fc fb90 	bl	8006c74 <_printf_float>
 800a554:	1c42      	adds	r2, r0, #1
 800a556:	4606      	mov	r6, r0
 800a558:	d1d6      	bne.n	800a508 <_svfiprintf_r+0x174>
 800a55a:	89ab      	ldrh	r3, [r5, #12]
 800a55c:	065b      	lsls	r3, r3, #25
 800a55e:	f53f af2d 	bmi.w	800a3bc <_svfiprintf_r+0x28>
 800a562:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a564:	e72c      	b.n	800a3c0 <_svfiprintf_r+0x2c>
 800a566:	ab03      	add	r3, sp, #12
 800a568:	9300      	str	r3, [sp, #0]
 800a56a:	462a      	mov	r2, r5
 800a56c:	4b05      	ldr	r3, [pc, #20]	@ (800a584 <_svfiprintf_r+0x1f0>)
 800a56e:	a904      	add	r1, sp, #16
 800a570:	4638      	mov	r0, r7
 800a572:	f7fc fe17 	bl	80071a4 <_printf_i>
 800a576:	e7ed      	b.n	800a554 <_svfiprintf_r+0x1c0>
 800a578:	0801aab1 	.word	0x0801aab1
 800a57c:	0801aabb 	.word	0x0801aabb
 800a580:	08006c75 	.word	0x08006c75
 800a584:	0800a2dd 	.word	0x0800a2dd
 800a588:	0801aab7 	.word	0x0801aab7

0800a58c <__sfputc_r>:
 800a58c:	6893      	ldr	r3, [r2, #8]
 800a58e:	3b01      	subs	r3, #1
 800a590:	2b00      	cmp	r3, #0
 800a592:	b410      	push	{r4}
 800a594:	6093      	str	r3, [r2, #8]
 800a596:	da08      	bge.n	800a5aa <__sfputc_r+0x1e>
 800a598:	6994      	ldr	r4, [r2, #24]
 800a59a:	42a3      	cmp	r3, r4
 800a59c:	db01      	blt.n	800a5a2 <__sfputc_r+0x16>
 800a59e:	290a      	cmp	r1, #10
 800a5a0:	d103      	bne.n	800a5aa <__sfputc_r+0x1e>
 800a5a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5a6:	f7fd bac6 	b.w	8007b36 <__swbuf_r>
 800a5aa:	6813      	ldr	r3, [r2, #0]
 800a5ac:	1c58      	adds	r0, r3, #1
 800a5ae:	6010      	str	r0, [r2, #0]
 800a5b0:	7019      	strb	r1, [r3, #0]
 800a5b2:	4608      	mov	r0, r1
 800a5b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5b8:	4770      	bx	lr

0800a5ba <__sfputs_r>:
 800a5ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5bc:	4606      	mov	r6, r0
 800a5be:	460f      	mov	r7, r1
 800a5c0:	4614      	mov	r4, r2
 800a5c2:	18d5      	adds	r5, r2, r3
 800a5c4:	42ac      	cmp	r4, r5
 800a5c6:	d101      	bne.n	800a5cc <__sfputs_r+0x12>
 800a5c8:	2000      	movs	r0, #0
 800a5ca:	e007      	b.n	800a5dc <__sfputs_r+0x22>
 800a5cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5d0:	463a      	mov	r2, r7
 800a5d2:	4630      	mov	r0, r6
 800a5d4:	f7ff ffda 	bl	800a58c <__sfputc_r>
 800a5d8:	1c43      	adds	r3, r0, #1
 800a5da:	d1f3      	bne.n	800a5c4 <__sfputs_r+0xa>
 800a5dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a5e0 <_vfiprintf_r>:
 800a5e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5e4:	460d      	mov	r5, r1
 800a5e6:	b09d      	sub	sp, #116	@ 0x74
 800a5e8:	4614      	mov	r4, r2
 800a5ea:	4698      	mov	r8, r3
 800a5ec:	4606      	mov	r6, r0
 800a5ee:	b118      	cbz	r0, 800a5f8 <_vfiprintf_r+0x18>
 800a5f0:	6a03      	ldr	r3, [r0, #32]
 800a5f2:	b90b      	cbnz	r3, 800a5f8 <_vfiprintf_r+0x18>
 800a5f4:	f7fd f996 	bl	8007924 <__sinit>
 800a5f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a5fa:	07d9      	lsls	r1, r3, #31
 800a5fc:	d405      	bmi.n	800a60a <_vfiprintf_r+0x2a>
 800a5fe:	89ab      	ldrh	r3, [r5, #12]
 800a600:	059a      	lsls	r2, r3, #22
 800a602:	d402      	bmi.n	800a60a <_vfiprintf_r+0x2a>
 800a604:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a606:	f7fd fbce 	bl	8007da6 <__retarget_lock_acquire_recursive>
 800a60a:	89ab      	ldrh	r3, [r5, #12]
 800a60c:	071b      	lsls	r3, r3, #28
 800a60e:	d501      	bpl.n	800a614 <_vfiprintf_r+0x34>
 800a610:	692b      	ldr	r3, [r5, #16]
 800a612:	b99b      	cbnz	r3, 800a63c <_vfiprintf_r+0x5c>
 800a614:	4629      	mov	r1, r5
 800a616:	4630      	mov	r0, r6
 800a618:	f7fd facc 	bl	8007bb4 <__swsetup_r>
 800a61c:	b170      	cbz	r0, 800a63c <_vfiprintf_r+0x5c>
 800a61e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a620:	07dc      	lsls	r4, r3, #31
 800a622:	d504      	bpl.n	800a62e <_vfiprintf_r+0x4e>
 800a624:	f04f 30ff 	mov.w	r0, #4294967295
 800a628:	b01d      	add	sp, #116	@ 0x74
 800a62a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a62e:	89ab      	ldrh	r3, [r5, #12]
 800a630:	0598      	lsls	r0, r3, #22
 800a632:	d4f7      	bmi.n	800a624 <_vfiprintf_r+0x44>
 800a634:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a636:	f7fd fbb7 	bl	8007da8 <__retarget_lock_release_recursive>
 800a63a:	e7f3      	b.n	800a624 <_vfiprintf_r+0x44>
 800a63c:	2300      	movs	r3, #0
 800a63e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a640:	2320      	movs	r3, #32
 800a642:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a646:	f8cd 800c 	str.w	r8, [sp, #12]
 800a64a:	2330      	movs	r3, #48	@ 0x30
 800a64c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a7fc <_vfiprintf_r+0x21c>
 800a650:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a654:	f04f 0901 	mov.w	r9, #1
 800a658:	4623      	mov	r3, r4
 800a65a:	469a      	mov	sl, r3
 800a65c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a660:	b10a      	cbz	r2, 800a666 <_vfiprintf_r+0x86>
 800a662:	2a25      	cmp	r2, #37	@ 0x25
 800a664:	d1f9      	bne.n	800a65a <_vfiprintf_r+0x7a>
 800a666:	ebba 0b04 	subs.w	fp, sl, r4
 800a66a:	d00b      	beq.n	800a684 <_vfiprintf_r+0xa4>
 800a66c:	465b      	mov	r3, fp
 800a66e:	4622      	mov	r2, r4
 800a670:	4629      	mov	r1, r5
 800a672:	4630      	mov	r0, r6
 800a674:	f7ff ffa1 	bl	800a5ba <__sfputs_r>
 800a678:	3001      	adds	r0, #1
 800a67a:	f000 80a7 	beq.w	800a7cc <_vfiprintf_r+0x1ec>
 800a67e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a680:	445a      	add	r2, fp
 800a682:	9209      	str	r2, [sp, #36]	@ 0x24
 800a684:	f89a 3000 	ldrb.w	r3, [sl]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	f000 809f 	beq.w	800a7cc <_vfiprintf_r+0x1ec>
 800a68e:	2300      	movs	r3, #0
 800a690:	f04f 32ff 	mov.w	r2, #4294967295
 800a694:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a698:	f10a 0a01 	add.w	sl, sl, #1
 800a69c:	9304      	str	r3, [sp, #16]
 800a69e:	9307      	str	r3, [sp, #28]
 800a6a0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a6a4:	931a      	str	r3, [sp, #104]	@ 0x68
 800a6a6:	4654      	mov	r4, sl
 800a6a8:	2205      	movs	r2, #5
 800a6aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6ae:	4853      	ldr	r0, [pc, #332]	@ (800a7fc <_vfiprintf_r+0x21c>)
 800a6b0:	f7f5 fd8e 	bl	80001d0 <memchr>
 800a6b4:	9a04      	ldr	r2, [sp, #16]
 800a6b6:	b9d8      	cbnz	r0, 800a6f0 <_vfiprintf_r+0x110>
 800a6b8:	06d1      	lsls	r1, r2, #27
 800a6ba:	bf44      	itt	mi
 800a6bc:	2320      	movmi	r3, #32
 800a6be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a6c2:	0713      	lsls	r3, r2, #28
 800a6c4:	bf44      	itt	mi
 800a6c6:	232b      	movmi	r3, #43	@ 0x2b
 800a6c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a6cc:	f89a 3000 	ldrb.w	r3, [sl]
 800a6d0:	2b2a      	cmp	r3, #42	@ 0x2a
 800a6d2:	d015      	beq.n	800a700 <_vfiprintf_r+0x120>
 800a6d4:	9a07      	ldr	r2, [sp, #28]
 800a6d6:	4654      	mov	r4, sl
 800a6d8:	2000      	movs	r0, #0
 800a6da:	f04f 0c0a 	mov.w	ip, #10
 800a6de:	4621      	mov	r1, r4
 800a6e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6e4:	3b30      	subs	r3, #48	@ 0x30
 800a6e6:	2b09      	cmp	r3, #9
 800a6e8:	d94b      	bls.n	800a782 <_vfiprintf_r+0x1a2>
 800a6ea:	b1b0      	cbz	r0, 800a71a <_vfiprintf_r+0x13a>
 800a6ec:	9207      	str	r2, [sp, #28]
 800a6ee:	e014      	b.n	800a71a <_vfiprintf_r+0x13a>
 800a6f0:	eba0 0308 	sub.w	r3, r0, r8
 800a6f4:	fa09 f303 	lsl.w	r3, r9, r3
 800a6f8:	4313      	orrs	r3, r2
 800a6fa:	9304      	str	r3, [sp, #16]
 800a6fc:	46a2      	mov	sl, r4
 800a6fe:	e7d2      	b.n	800a6a6 <_vfiprintf_r+0xc6>
 800a700:	9b03      	ldr	r3, [sp, #12]
 800a702:	1d19      	adds	r1, r3, #4
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	9103      	str	r1, [sp, #12]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	bfbb      	ittet	lt
 800a70c:	425b      	neglt	r3, r3
 800a70e:	f042 0202 	orrlt.w	r2, r2, #2
 800a712:	9307      	strge	r3, [sp, #28]
 800a714:	9307      	strlt	r3, [sp, #28]
 800a716:	bfb8      	it	lt
 800a718:	9204      	strlt	r2, [sp, #16]
 800a71a:	7823      	ldrb	r3, [r4, #0]
 800a71c:	2b2e      	cmp	r3, #46	@ 0x2e
 800a71e:	d10a      	bne.n	800a736 <_vfiprintf_r+0x156>
 800a720:	7863      	ldrb	r3, [r4, #1]
 800a722:	2b2a      	cmp	r3, #42	@ 0x2a
 800a724:	d132      	bne.n	800a78c <_vfiprintf_r+0x1ac>
 800a726:	9b03      	ldr	r3, [sp, #12]
 800a728:	1d1a      	adds	r2, r3, #4
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	9203      	str	r2, [sp, #12]
 800a72e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a732:	3402      	adds	r4, #2
 800a734:	9305      	str	r3, [sp, #20]
 800a736:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a80c <_vfiprintf_r+0x22c>
 800a73a:	7821      	ldrb	r1, [r4, #0]
 800a73c:	2203      	movs	r2, #3
 800a73e:	4650      	mov	r0, sl
 800a740:	f7f5 fd46 	bl	80001d0 <memchr>
 800a744:	b138      	cbz	r0, 800a756 <_vfiprintf_r+0x176>
 800a746:	9b04      	ldr	r3, [sp, #16]
 800a748:	eba0 000a 	sub.w	r0, r0, sl
 800a74c:	2240      	movs	r2, #64	@ 0x40
 800a74e:	4082      	lsls	r2, r0
 800a750:	4313      	orrs	r3, r2
 800a752:	3401      	adds	r4, #1
 800a754:	9304      	str	r3, [sp, #16]
 800a756:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a75a:	4829      	ldr	r0, [pc, #164]	@ (800a800 <_vfiprintf_r+0x220>)
 800a75c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a760:	2206      	movs	r2, #6
 800a762:	f7f5 fd35 	bl	80001d0 <memchr>
 800a766:	2800      	cmp	r0, #0
 800a768:	d03f      	beq.n	800a7ea <_vfiprintf_r+0x20a>
 800a76a:	4b26      	ldr	r3, [pc, #152]	@ (800a804 <_vfiprintf_r+0x224>)
 800a76c:	bb1b      	cbnz	r3, 800a7b6 <_vfiprintf_r+0x1d6>
 800a76e:	9b03      	ldr	r3, [sp, #12]
 800a770:	3307      	adds	r3, #7
 800a772:	f023 0307 	bic.w	r3, r3, #7
 800a776:	3308      	adds	r3, #8
 800a778:	9303      	str	r3, [sp, #12]
 800a77a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a77c:	443b      	add	r3, r7
 800a77e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a780:	e76a      	b.n	800a658 <_vfiprintf_r+0x78>
 800a782:	fb0c 3202 	mla	r2, ip, r2, r3
 800a786:	460c      	mov	r4, r1
 800a788:	2001      	movs	r0, #1
 800a78a:	e7a8      	b.n	800a6de <_vfiprintf_r+0xfe>
 800a78c:	2300      	movs	r3, #0
 800a78e:	3401      	adds	r4, #1
 800a790:	9305      	str	r3, [sp, #20]
 800a792:	4619      	mov	r1, r3
 800a794:	f04f 0c0a 	mov.w	ip, #10
 800a798:	4620      	mov	r0, r4
 800a79a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a79e:	3a30      	subs	r2, #48	@ 0x30
 800a7a0:	2a09      	cmp	r2, #9
 800a7a2:	d903      	bls.n	800a7ac <_vfiprintf_r+0x1cc>
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d0c6      	beq.n	800a736 <_vfiprintf_r+0x156>
 800a7a8:	9105      	str	r1, [sp, #20]
 800a7aa:	e7c4      	b.n	800a736 <_vfiprintf_r+0x156>
 800a7ac:	fb0c 2101 	mla	r1, ip, r1, r2
 800a7b0:	4604      	mov	r4, r0
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	e7f0      	b.n	800a798 <_vfiprintf_r+0x1b8>
 800a7b6:	ab03      	add	r3, sp, #12
 800a7b8:	9300      	str	r3, [sp, #0]
 800a7ba:	462a      	mov	r2, r5
 800a7bc:	4b12      	ldr	r3, [pc, #72]	@ (800a808 <_vfiprintf_r+0x228>)
 800a7be:	a904      	add	r1, sp, #16
 800a7c0:	4630      	mov	r0, r6
 800a7c2:	f7fc fa57 	bl	8006c74 <_printf_float>
 800a7c6:	4607      	mov	r7, r0
 800a7c8:	1c78      	adds	r0, r7, #1
 800a7ca:	d1d6      	bne.n	800a77a <_vfiprintf_r+0x19a>
 800a7cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a7ce:	07d9      	lsls	r1, r3, #31
 800a7d0:	d405      	bmi.n	800a7de <_vfiprintf_r+0x1fe>
 800a7d2:	89ab      	ldrh	r3, [r5, #12]
 800a7d4:	059a      	lsls	r2, r3, #22
 800a7d6:	d402      	bmi.n	800a7de <_vfiprintf_r+0x1fe>
 800a7d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a7da:	f7fd fae5 	bl	8007da8 <__retarget_lock_release_recursive>
 800a7de:	89ab      	ldrh	r3, [r5, #12]
 800a7e0:	065b      	lsls	r3, r3, #25
 800a7e2:	f53f af1f 	bmi.w	800a624 <_vfiprintf_r+0x44>
 800a7e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a7e8:	e71e      	b.n	800a628 <_vfiprintf_r+0x48>
 800a7ea:	ab03      	add	r3, sp, #12
 800a7ec:	9300      	str	r3, [sp, #0]
 800a7ee:	462a      	mov	r2, r5
 800a7f0:	4b05      	ldr	r3, [pc, #20]	@ (800a808 <_vfiprintf_r+0x228>)
 800a7f2:	a904      	add	r1, sp, #16
 800a7f4:	4630      	mov	r0, r6
 800a7f6:	f7fc fcd5 	bl	80071a4 <_printf_i>
 800a7fa:	e7e4      	b.n	800a7c6 <_vfiprintf_r+0x1e6>
 800a7fc:	0801aab1 	.word	0x0801aab1
 800a800:	0801aabb 	.word	0x0801aabb
 800a804:	08006c75 	.word	0x08006c75
 800a808:	0800a5bb 	.word	0x0800a5bb
 800a80c:	0801aab7 	.word	0x0801aab7

0800a810 <__sflush_r>:
 800a810:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a818:	0716      	lsls	r6, r2, #28
 800a81a:	4605      	mov	r5, r0
 800a81c:	460c      	mov	r4, r1
 800a81e:	d454      	bmi.n	800a8ca <__sflush_r+0xba>
 800a820:	684b      	ldr	r3, [r1, #4]
 800a822:	2b00      	cmp	r3, #0
 800a824:	dc02      	bgt.n	800a82c <__sflush_r+0x1c>
 800a826:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a828:	2b00      	cmp	r3, #0
 800a82a:	dd48      	ble.n	800a8be <__sflush_r+0xae>
 800a82c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a82e:	2e00      	cmp	r6, #0
 800a830:	d045      	beq.n	800a8be <__sflush_r+0xae>
 800a832:	2300      	movs	r3, #0
 800a834:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a838:	682f      	ldr	r7, [r5, #0]
 800a83a:	6a21      	ldr	r1, [r4, #32]
 800a83c:	602b      	str	r3, [r5, #0]
 800a83e:	d030      	beq.n	800a8a2 <__sflush_r+0x92>
 800a840:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a842:	89a3      	ldrh	r3, [r4, #12]
 800a844:	0759      	lsls	r1, r3, #29
 800a846:	d505      	bpl.n	800a854 <__sflush_r+0x44>
 800a848:	6863      	ldr	r3, [r4, #4]
 800a84a:	1ad2      	subs	r2, r2, r3
 800a84c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a84e:	b10b      	cbz	r3, 800a854 <__sflush_r+0x44>
 800a850:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a852:	1ad2      	subs	r2, r2, r3
 800a854:	2300      	movs	r3, #0
 800a856:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a858:	6a21      	ldr	r1, [r4, #32]
 800a85a:	4628      	mov	r0, r5
 800a85c:	47b0      	blx	r6
 800a85e:	1c43      	adds	r3, r0, #1
 800a860:	89a3      	ldrh	r3, [r4, #12]
 800a862:	d106      	bne.n	800a872 <__sflush_r+0x62>
 800a864:	6829      	ldr	r1, [r5, #0]
 800a866:	291d      	cmp	r1, #29
 800a868:	d82b      	bhi.n	800a8c2 <__sflush_r+0xb2>
 800a86a:	4a2a      	ldr	r2, [pc, #168]	@ (800a914 <__sflush_r+0x104>)
 800a86c:	410a      	asrs	r2, r1
 800a86e:	07d6      	lsls	r6, r2, #31
 800a870:	d427      	bmi.n	800a8c2 <__sflush_r+0xb2>
 800a872:	2200      	movs	r2, #0
 800a874:	6062      	str	r2, [r4, #4]
 800a876:	04d9      	lsls	r1, r3, #19
 800a878:	6922      	ldr	r2, [r4, #16]
 800a87a:	6022      	str	r2, [r4, #0]
 800a87c:	d504      	bpl.n	800a888 <__sflush_r+0x78>
 800a87e:	1c42      	adds	r2, r0, #1
 800a880:	d101      	bne.n	800a886 <__sflush_r+0x76>
 800a882:	682b      	ldr	r3, [r5, #0]
 800a884:	b903      	cbnz	r3, 800a888 <__sflush_r+0x78>
 800a886:	6560      	str	r0, [r4, #84]	@ 0x54
 800a888:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a88a:	602f      	str	r7, [r5, #0]
 800a88c:	b1b9      	cbz	r1, 800a8be <__sflush_r+0xae>
 800a88e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a892:	4299      	cmp	r1, r3
 800a894:	d002      	beq.n	800a89c <__sflush_r+0x8c>
 800a896:	4628      	mov	r0, r5
 800a898:	f7fe f8ea 	bl	8008a70 <_free_r>
 800a89c:	2300      	movs	r3, #0
 800a89e:	6363      	str	r3, [r4, #52]	@ 0x34
 800a8a0:	e00d      	b.n	800a8be <__sflush_r+0xae>
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	4628      	mov	r0, r5
 800a8a6:	47b0      	blx	r6
 800a8a8:	4602      	mov	r2, r0
 800a8aa:	1c50      	adds	r0, r2, #1
 800a8ac:	d1c9      	bne.n	800a842 <__sflush_r+0x32>
 800a8ae:	682b      	ldr	r3, [r5, #0]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d0c6      	beq.n	800a842 <__sflush_r+0x32>
 800a8b4:	2b1d      	cmp	r3, #29
 800a8b6:	d001      	beq.n	800a8bc <__sflush_r+0xac>
 800a8b8:	2b16      	cmp	r3, #22
 800a8ba:	d11e      	bne.n	800a8fa <__sflush_r+0xea>
 800a8bc:	602f      	str	r7, [r5, #0]
 800a8be:	2000      	movs	r0, #0
 800a8c0:	e022      	b.n	800a908 <__sflush_r+0xf8>
 800a8c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a8c6:	b21b      	sxth	r3, r3
 800a8c8:	e01b      	b.n	800a902 <__sflush_r+0xf2>
 800a8ca:	690f      	ldr	r7, [r1, #16]
 800a8cc:	2f00      	cmp	r7, #0
 800a8ce:	d0f6      	beq.n	800a8be <__sflush_r+0xae>
 800a8d0:	0793      	lsls	r3, r2, #30
 800a8d2:	680e      	ldr	r6, [r1, #0]
 800a8d4:	bf08      	it	eq
 800a8d6:	694b      	ldreq	r3, [r1, #20]
 800a8d8:	600f      	str	r7, [r1, #0]
 800a8da:	bf18      	it	ne
 800a8dc:	2300      	movne	r3, #0
 800a8de:	eba6 0807 	sub.w	r8, r6, r7
 800a8e2:	608b      	str	r3, [r1, #8]
 800a8e4:	f1b8 0f00 	cmp.w	r8, #0
 800a8e8:	dde9      	ble.n	800a8be <__sflush_r+0xae>
 800a8ea:	6a21      	ldr	r1, [r4, #32]
 800a8ec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a8ee:	4643      	mov	r3, r8
 800a8f0:	463a      	mov	r2, r7
 800a8f2:	4628      	mov	r0, r5
 800a8f4:	47b0      	blx	r6
 800a8f6:	2800      	cmp	r0, #0
 800a8f8:	dc08      	bgt.n	800a90c <__sflush_r+0xfc>
 800a8fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a902:	81a3      	strh	r3, [r4, #12]
 800a904:	f04f 30ff 	mov.w	r0, #4294967295
 800a908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a90c:	4407      	add	r7, r0
 800a90e:	eba8 0800 	sub.w	r8, r8, r0
 800a912:	e7e7      	b.n	800a8e4 <__sflush_r+0xd4>
 800a914:	dfbffffe 	.word	0xdfbffffe

0800a918 <_fflush_r>:
 800a918:	b538      	push	{r3, r4, r5, lr}
 800a91a:	690b      	ldr	r3, [r1, #16]
 800a91c:	4605      	mov	r5, r0
 800a91e:	460c      	mov	r4, r1
 800a920:	b913      	cbnz	r3, 800a928 <_fflush_r+0x10>
 800a922:	2500      	movs	r5, #0
 800a924:	4628      	mov	r0, r5
 800a926:	bd38      	pop	{r3, r4, r5, pc}
 800a928:	b118      	cbz	r0, 800a932 <_fflush_r+0x1a>
 800a92a:	6a03      	ldr	r3, [r0, #32]
 800a92c:	b90b      	cbnz	r3, 800a932 <_fflush_r+0x1a>
 800a92e:	f7fc fff9 	bl	8007924 <__sinit>
 800a932:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d0f3      	beq.n	800a922 <_fflush_r+0xa>
 800a93a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a93c:	07d0      	lsls	r0, r2, #31
 800a93e:	d404      	bmi.n	800a94a <_fflush_r+0x32>
 800a940:	0599      	lsls	r1, r3, #22
 800a942:	d402      	bmi.n	800a94a <_fflush_r+0x32>
 800a944:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a946:	f7fd fa2e 	bl	8007da6 <__retarget_lock_acquire_recursive>
 800a94a:	4628      	mov	r0, r5
 800a94c:	4621      	mov	r1, r4
 800a94e:	f7ff ff5f 	bl	800a810 <__sflush_r>
 800a952:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a954:	07da      	lsls	r2, r3, #31
 800a956:	4605      	mov	r5, r0
 800a958:	d4e4      	bmi.n	800a924 <_fflush_r+0xc>
 800a95a:	89a3      	ldrh	r3, [r4, #12]
 800a95c:	059b      	lsls	r3, r3, #22
 800a95e:	d4e1      	bmi.n	800a924 <_fflush_r+0xc>
 800a960:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a962:	f7fd fa21 	bl	8007da8 <__retarget_lock_release_recursive>
 800a966:	e7dd      	b.n	800a924 <_fflush_r+0xc>

0800a968 <__swhatbuf_r>:
 800a968:	b570      	push	{r4, r5, r6, lr}
 800a96a:	460c      	mov	r4, r1
 800a96c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a970:	2900      	cmp	r1, #0
 800a972:	b096      	sub	sp, #88	@ 0x58
 800a974:	4615      	mov	r5, r2
 800a976:	461e      	mov	r6, r3
 800a978:	da0d      	bge.n	800a996 <__swhatbuf_r+0x2e>
 800a97a:	89a3      	ldrh	r3, [r4, #12]
 800a97c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a980:	f04f 0100 	mov.w	r1, #0
 800a984:	bf14      	ite	ne
 800a986:	2340      	movne	r3, #64	@ 0x40
 800a988:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a98c:	2000      	movs	r0, #0
 800a98e:	6031      	str	r1, [r6, #0]
 800a990:	602b      	str	r3, [r5, #0]
 800a992:	b016      	add	sp, #88	@ 0x58
 800a994:	bd70      	pop	{r4, r5, r6, pc}
 800a996:	466a      	mov	r2, sp
 800a998:	f000 f874 	bl	800aa84 <_fstat_r>
 800a99c:	2800      	cmp	r0, #0
 800a99e:	dbec      	blt.n	800a97a <__swhatbuf_r+0x12>
 800a9a0:	9901      	ldr	r1, [sp, #4]
 800a9a2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a9a6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a9aa:	4259      	negs	r1, r3
 800a9ac:	4159      	adcs	r1, r3
 800a9ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a9b2:	e7eb      	b.n	800a98c <__swhatbuf_r+0x24>

0800a9b4 <__smakebuf_r>:
 800a9b4:	898b      	ldrh	r3, [r1, #12]
 800a9b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a9b8:	079d      	lsls	r5, r3, #30
 800a9ba:	4606      	mov	r6, r0
 800a9bc:	460c      	mov	r4, r1
 800a9be:	d507      	bpl.n	800a9d0 <__smakebuf_r+0x1c>
 800a9c0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a9c4:	6023      	str	r3, [r4, #0]
 800a9c6:	6123      	str	r3, [r4, #16]
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	6163      	str	r3, [r4, #20]
 800a9cc:	b003      	add	sp, #12
 800a9ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9d0:	ab01      	add	r3, sp, #4
 800a9d2:	466a      	mov	r2, sp
 800a9d4:	f7ff ffc8 	bl	800a968 <__swhatbuf_r>
 800a9d8:	9f00      	ldr	r7, [sp, #0]
 800a9da:	4605      	mov	r5, r0
 800a9dc:	4639      	mov	r1, r7
 800a9de:	4630      	mov	r0, r6
 800a9e0:	f7fe f8ba 	bl	8008b58 <_malloc_r>
 800a9e4:	b948      	cbnz	r0, 800a9fa <__smakebuf_r+0x46>
 800a9e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9ea:	059a      	lsls	r2, r3, #22
 800a9ec:	d4ee      	bmi.n	800a9cc <__smakebuf_r+0x18>
 800a9ee:	f023 0303 	bic.w	r3, r3, #3
 800a9f2:	f043 0302 	orr.w	r3, r3, #2
 800a9f6:	81a3      	strh	r3, [r4, #12]
 800a9f8:	e7e2      	b.n	800a9c0 <__smakebuf_r+0xc>
 800a9fa:	89a3      	ldrh	r3, [r4, #12]
 800a9fc:	6020      	str	r0, [r4, #0]
 800a9fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa02:	81a3      	strh	r3, [r4, #12]
 800aa04:	9b01      	ldr	r3, [sp, #4]
 800aa06:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800aa0a:	b15b      	cbz	r3, 800aa24 <__smakebuf_r+0x70>
 800aa0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa10:	4630      	mov	r0, r6
 800aa12:	f000 f849 	bl	800aaa8 <_isatty_r>
 800aa16:	b128      	cbz	r0, 800aa24 <__smakebuf_r+0x70>
 800aa18:	89a3      	ldrh	r3, [r4, #12]
 800aa1a:	f023 0303 	bic.w	r3, r3, #3
 800aa1e:	f043 0301 	orr.w	r3, r3, #1
 800aa22:	81a3      	strh	r3, [r4, #12]
 800aa24:	89a3      	ldrh	r3, [r4, #12]
 800aa26:	431d      	orrs	r5, r3
 800aa28:	81a5      	strh	r5, [r4, #12]
 800aa2a:	e7cf      	b.n	800a9cc <__smakebuf_r+0x18>

0800aa2c <memmove>:
 800aa2c:	4288      	cmp	r0, r1
 800aa2e:	b510      	push	{r4, lr}
 800aa30:	eb01 0402 	add.w	r4, r1, r2
 800aa34:	d902      	bls.n	800aa3c <memmove+0x10>
 800aa36:	4284      	cmp	r4, r0
 800aa38:	4623      	mov	r3, r4
 800aa3a:	d807      	bhi.n	800aa4c <memmove+0x20>
 800aa3c:	1e43      	subs	r3, r0, #1
 800aa3e:	42a1      	cmp	r1, r4
 800aa40:	d008      	beq.n	800aa54 <memmove+0x28>
 800aa42:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aa46:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aa4a:	e7f8      	b.n	800aa3e <memmove+0x12>
 800aa4c:	4402      	add	r2, r0
 800aa4e:	4601      	mov	r1, r0
 800aa50:	428a      	cmp	r2, r1
 800aa52:	d100      	bne.n	800aa56 <memmove+0x2a>
 800aa54:	bd10      	pop	{r4, pc}
 800aa56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aa5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aa5e:	e7f7      	b.n	800aa50 <memmove+0x24>

0800aa60 <strncmp>:
 800aa60:	b510      	push	{r4, lr}
 800aa62:	b16a      	cbz	r2, 800aa80 <strncmp+0x20>
 800aa64:	3901      	subs	r1, #1
 800aa66:	1884      	adds	r4, r0, r2
 800aa68:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa6c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800aa70:	429a      	cmp	r2, r3
 800aa72:	d103      	bne.n	800aa7c <strncmp+0x1c>
 800aa74:	42a0      	cmp	r0, r4
 800aa76:	d001      	beq.n	800aa7c <strncmp+0x1c>
 800aa78:	2a00      	cmp	r2, #0
 800aa7a:	d1f5      	bne.n	800aa68 <strncmp+0x8>
 800aa7c:	1ad0      	subs	r0, r2, r3
 800aa7e:	bd10      	pop	{r4, pc}
 800aa80:	4610      	mov	r0, r2
 800aa82:	e7fc      	b.n	800aa7e <strncmp+0x1e>

0800aa84 <_fstat_r>:
 800aa84:	b538      	push	{r3, r4, r5, lr}
 800aa86:	4d07      	ldr	r5, [pc, #28]	@ (800aaa4 <_fstat_r+0x20>)
 800aa88:	2300      	movs	r3, #0
 800aa8a:	4604      	mov	r4, r0
 800aa8c:	4608      	mov	r0, r1
 800aa8e:	4611      	mov	r1, r2
 800aa90:	602b      	str	r3, [r5, #0]
 800aa92:	f7f7 f9af 	bl	8001df4 <_fstat>
 800aa96:	1c43      	adds	r3, r0, #1
 800aa98:	d102      	bne.n	800aaa0 <_fstat_r+0x1c>
 800aa9a:	682b      	ldr	r3, [r5, #0]
 800aa9c:	b103      	cbz	r3, 800aaa0 <_fstat_r+0x1c>
 800aa9e:	6023      	str	r3, [r4, #0]
 800aaa0:	bd38      	pop	{r3, r4, r5, pc}
 800aaa2:	bf00      	nop
 800aaa4:	2000092c 	.word	0x2000092c

0800aaa8 <_isatty_r>:
 800aaa8:	b538      	push	{r3, r4, r5, lr}
 800aaaa:	4d06      	ldr	r5, [pc, #24]	@ (800aac4 <_isatty_r+0x1c>)
 800aaac:	2300      	movs	r3, #0
 800aaae:	4604      	mov	r4, r0
 800aab0:	4608      	mov	r0, r1
 800aab2:	602b      	str	r3, [r5, #0]
 800aab4:	f7f7 f9ae 	bl	8001e14 <_isatty>
 800aab8:	1c43      	adds	r3, r0, #1
 800aaba:	d102      	bne.n	800aac2 <_isatty_r+0x1a>
 800aabc:	682b      	ldr	r3, [r5, #0]
 800aabe:	b103      	cbz	r3, 800aac2 <_isatty_r+0x1a>
 800aac0:	6023      	str	r3, [r4, #0]
 800aac2:	bd38      	pop	{r3, r4, r5, pc}
 800aac4:	2000092c 	.word	0x2000092c

0800aac8 <_sbrk_r>:
 800aac8:	b538      	push	{r3, r4, r5, lr}
 800aaca:	4d06      	ldr	r5, [pc, #24]	@ (800aae4 <_sbrk_r+0x1c>)
 800aacc:	2300      	movs	r3, #0
 800aace:	4604      	mov	r4, r0
 800aad0:	4608      	mov	r0, r1
 800aad2:	602b      	str	r3, [r5, #0]
 800aad4:	f7f7 f9b6 	bl	8001e44 <_sbrk>
 800aad8:	1c43      	adds	r3, r0, #1
 800aada:	d102      	bne.n	800aae2 <_sbrk_r+0x1a>
 800aadc:	682b      	ldr	r3, [r5, #0]
 800aade:	b103      	cbz	r3, 800aae2 <_sbrk_r+0x1a>
 800aae0:	6023      	str	r3, [r4, #0]
 800aae2:	bd38      	pop	{r3, r4, r5, pc}
 800aae4:	2000092c 	.word	0x2000092c

0800aae8 <nan>:
 800aae8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800aaf0 <nan+0x8>
 800aaec:	4770      	bx	lr
 800aaee:	bf00      	nop
 800aaf0:	00000000 	.word	0x00000000
 800aaf4:	7ff80000 	.word	0x7ff80000

0800aaf8 <__assert_func>:
 800aaf8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aafa:	4614      	mov	r4, r2
 800aafc:	461a      	mov	r2, r3
 800aafe:	4b09      	ldr	r3, [pc, #36]	@ (800ab24 <__assert_func+0x2c>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	4605      	mov	r5, r0
 800ab04:	68d8      	ldr	r0, [r3, #12]
 800ab06:	b954      	cbnz	r4, 800ab1e <__assert_func+0x26>
 800ab08:	4b07      	ldr	r3, [pc, #28]	@ (800ab28 <__assert_func+0x30>)
 800ab0a:	461c      	mov	r4, r3
 800ab0c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ab10:	9100      	str	r1, [sp, #0]
 800ab12:	462b      	mov	r3, r5
 800ab14:	4905      	ldr	r1, [pc, #20]	@ (800ab2c <__assert_func+0x34>)
 800ab16:	f000 fba7 	bl	800b268 <fiprintf>
 800ab1a:	f000 fbb7 	bl	800b28c <abort>
 800ab1e:	4b04      	ldr	r3, [pc, #16]	@ (800ab30 <__assert_func+0x38>)
 800ab20:	e7f4      	b.n	800ab0c <__assert_func+0x14>
 800ab22:	bf00      	nop
 800ab24:	20000030 	.word	0x20000030
 800ab28:	0801ab05 	.word	0x0801ab05
 800ab2c:	0801aad7 	.word	0x0801aad7
 800ab30:	0801aaca 	.word	0x0801aaca

0800ab34 <_calloc_r>:
 800ab34:	b570      	push	{r4, r5, r6, lr}
 800ab36:	fba1 5402 	umull	r5, r4, r1, r2
 800ab3a:	b93c      	cbnz	r4, 800ab4c <_calloc_r+0x18>
 800ab3c:	4629      	mov	r1, r5
 800ab3e:	f7fe f80b 	bl	8008b58 <_malloc_r>
 800ab42:	4606      	mov	r6, r0
 800ab44:	b928      	cbnz	r0, 800ab52 <_calloc_r+0x1e>
 800ab46:	2600      	movs	r6, #0
 800ab48:	4630      	mov	r0, r6
 800ab4a:	bd70      	pop	{r4, r5, r6, pc}
 800ab4c:	220c      	movs	r2, #12
 800ab4e:	6002      	str	r2, [r0, #0]
 800ab50:	e7f9      	b.n	800ab46 <_calloc_r+0x12>
 800ab52:	462a      	mov	r2, r5
 800ab54:	4621      	mov	r1, r4
 800ab56:	f7fd f883 	bl	8007c60 <memset>
 800ab5a:	e7f5      	b.n	800ab48 <_calloc_r+0x14>

0800ab5c <rshift>:
 800ab5c:	6903      	ldr	r3, [r0, #16]
 800ab5e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ab62:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ab66:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ab6a:	f100 0414 	add.w	r4, r0, #20
 800ab6e:	dd45      	ble.n	800abfc <rshift+0xa0>
 800ab70:	f011 011f 	ands.w	r1, r1, #31
 800ab74:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ab78:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ab7c:	d10c      	bne.n	800ab98 <rshift+0x3c>
 800ab7e:	f100 0710 	add.w	r7, r0, #16
 800ab82:	4629      	mov	r1, r5
 800ab84:	42b1      	cmp	r1, r6
 800ab86:	d334      	bcc.n	800abf2 <rshift+0x96>
 800ab88:	1a9b      	subs	r3, r3, r2
 800ab8a:	009b      	lsls	r3, r3, #2
 800ab8c:	1eea      	subs	r2, r5, #3
 800ab8e:	4296      	cmp	r6, r2
 800ab90:	bf38      	it	cc
 800ab92:	2300      	movcc	r3, #0
 800ab94:	4423      	add	r3, r4
 800ab96:	e015      	b.n	800abc4 <rshift+0x68>
 800ab98:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ab9c:	f1c1 0820 	rsb	r8, r1, #32
 800aba0:	40cf      	lsrs	r7, r1
 800aba2:	f105 0e04 	add.w	lr, r5, #4
 800aba6:	46a1      	mov	r9, r4
 800aba8:	4576      	cmp	r6, lr
 800abaa:	46f4      	mov	ip, lr
 800abac:	d815      	bhi.n	800abda <rshift+0x7e>
 800abae:	1a9a      	subs	r2, r3, r2
 800abb0:	0092      	lsls	r2, r2, #2
 800abb2:	3a04      	subs	r2, #4
 800abb4:	3501      	adds	r5, #1
 800abb6:	42ae      	cmp	r6, r5
 800abb8:	bf38      	it	cc
 800abba:	2200      	movcc	r2, #0
 800abbc:	18a3      	adds	r3, r4, r2
 800abbe:	50a7      	str	r7, [r4, r2]
 800abc0:	b107      	cbz	r7, 800abc4 <rshift+0x68>
 800abc2:	3304      	adds	r3, #4
 800abc4:	1b1a      	subs	r2, r3, r4
 800abc6:	42a3      	cmp	r3, r4
 800abc8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800abcc:	bf08      	it	eq
 800abce:	2300      	moveq	r3, #0
 800abd0:	6102      	str	r2, [r0, #16]
 800abd2:	bf08      	it	eq
 800abd4:	6143      	streq	r3, [r0, #20]
 800abd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800abda:	f8dc c000 	ldr.w	ip, [ip]
 800abde:	fa0c fc08 	lsl.w	ip, ip, r8
 800abe2:	ea4c 0707 	orr.w	r7, ip, r7
 800abe6:	f849 7b04 	str.w	r7, [r9], #4
 800abea:	f85e 7b04 	ldr.w	r7, [lr], #4
 800abee:	40cf      	lsrs	r7, r1
 800abf0:	e7da      	b.n	800aba8 <rshift+0x4c>
 800abf2:	f851 cb04 	ldr.w	ip, [r1], #4
 800abf6:	f847 cf04 	str.w	ip, [r7, #4]!
 800abfa:	e7c3      	b.n	800ab84 <rshift+0x28>
 800abfc:	4623      	mov	r3, r4
 800abfe:	e7e1      	b.n	800abc4 <rshift+0x68>

0800ac00 <__hexdig_fun>:
 800ac00:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ac04:	2b09      	cmp	r3, #9
 800ac06:	d802      	bhi.n	800ac0e <__hexdig_fun+0xe>
 800ac08:	3820      	subs	r0, #32
 800ac0a:	b2c0      	uxtb	r0, r0
 800ac0c:	4770      	bx	lr
 800ac0e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ac12:	2b05      	cmp	r3, #5
 800ac14:	d801      	bhi.n	800ac1a <__hexdig_fun+0x1a>
 800ac16:	3847      	subs	r0, #71	@ 0x47
 800ac18:	e7f7      	b.n	800ac0a <__hexdig_fun+0xa>
 800ac1a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ac1e:	2b05      	cmp	r3, #5
 800ac20:	d801      	bhi.n	800ac26 <__hexdig_fun+0x26>
 800ac22:	3827      	subs	r0, #39	@ 0x27
 800ac24:	e7f1      	b.n	800ac0a <__hexdig_fun+0xa>
 800ac26:	2000      	movs	r0, #0
 800ac28:	4770      	bx	lr
	...

0800ac2c <__gethex>:
 800ac2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac30:	b085      	sub	sp, #20
 800ac32:	468a      	mov	sl, r1
 800ac34:	9302      	str	r3, [sp, #8]
 800ac36:	680b      	ldr	r3, [r1, #0]
 800ac38:	9001      	str	r0, [sp, #4]
 800ac3a:	4690      	mov	r8, r2
 800ac3c:	1c9c      	adds	r4, r3, #2
 800ac3e:	46a1      	mov	r9, r4
 800ac40:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ac44:	2830      	cmp	r0, #48	@ 0x30
 800ac46:	d0fa      	beq.n	800ac3e <__gethex+0x12>
 800ac48:	eba9 0303 	sub.w	r3, r9, r3
 800ac4c:	f1a3 0b02 	sub.w	fp, r3, #2
 800ac50:	f7ff ffd6 	bl	800ac00 <__hexdig_fun>
 800ac54:	4605      	mov	r5, r0
 800ac56:	2800      	cmp	r0, #0
 800ac58:	d168      	bne.n	800ad2c <__gethex+0x100>
 800ac5a:	49a0      	ldr	r1, [pc, #640]	@ (800aedc <__gethex+0x2b0>)
 800ac5c:	2201      	movs	r2, #1
 800ac5e:	4648      	mov	r0, r9
 800ac60:	f7ff fefe 	bl	800aa60 <strncmp>
 800ac64:	4607      	mov	r7, r0
 800ac66:	2800      	cmp	r0, #0
 800ac68:	d167      	bne.n	800ad3a <__gethex+0x10e>
 800ac6a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ac6e:	4626      	mov	r6, r4
 800ac70:	f7ff ffc6 	bl	800ac00 <__hexdig_fun>
 800ac74:	2800      	cmp	r0, #0
 800ac76:	d062      	beq.n	800ad3e <__gethex+0x112>
 800ac78:	4623      	mov	r3, r4
 800ac7a:	7818      	ldrb	r0, [r3, #0]
 800ac7c:	2830      	cmp	r0, #48	@ 0x30
 800ac7e:	4699      	mov	r9, r3
 800ac80:	f103 0301 	add.w	r3, r3, #1
 800ac84:	d0f9      	beq.n	800ac7a <__gethex+0x4e>
 800ac86:	f7ff ffbb 	bl	800ac00 <__hexdig_fun>
 800ac8a:	fab0 f580 	clz	r5, r0
 800ac8e:	096d      	lsrs	r5, r5, #5
 800ac90:	f04f 0b01 	mov.w	fp, #1
 800ac94:	464a      	mov	r2, r9
 800ac96:	4616      	mov	r6, r2
 800ac98:	3201      	adds	r2, #1
 800ac9a:	7830      	ldrb	r0, [r6, #0]
 800ac9c:	f7ff ffb0 	bl	800ac00 <__hexdig_fun>
 800aca0:	2800      	cmp	r0, #0
 800aca2:	d1f8      	bne.n	800ac96 <__gethex+0x6a>
 800aca4:	498d      	ldr	r1, [pc, #564]	@ (800aedc <__gethex+0x2b0>)
 800aca6:	2201      	movs	r2, #1
 800aca8:	4630      	mov	r0, r6
 800acaa:	f7ff fed9 	bl	800aa60 <strncmp>
 800acae:	2800      	cmp	r0, #0
 800acb0:	d13f      	bne.n	800ad32 <__gethex+0x106>
 800acb2:	b944      	cbnz	r4, 800acc6 <__gethex+0x9a>
 800acb4:	1c74      	adds	r4, r6, #1
 800acb6:	4622      	mov	r2, r4
 800acb8:	4616      	mov	r6, r2
 800acba:	3201      	adds	r2, #1
 800acbc:	7830      	ldrb	r0, [r6, #0]
 800acbe:	f7ff ff9f 	bl	800ac00 <__hexdig_fun>
 800acc2:	2800      	cmp	r0, #0
 800acc4:	d1f8      	bne.n	800acb8 <__gethex+0x8c>
 800acc6:	1ba4      	subs	r4, r4, r6
 800acc8:	00a7      	lsls	r7, r4, #2
 800acca:	7833      	ldrb	r3, [r6, #0]
 800accc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800acd0:	2b50      	cmp	r3, #80	@ 0x50
 800acd2:	d13e      	bne.n	800ad52 <__gethex+0x126>
 800acd4:	7873      	ldrb	r3, [r6, #1]
 800acd6:	2b2b      	cmp	r3, #43	@ 0x2b
 800acd8:	d033      	beq.n	800ad42 <__gethex+0x116>
 800acda:	2b2d      	cmp	r3, #45	@ 0x2d
 800acdc:	d034      	beq.n	800ad48 <__gethex+0x11c>
 800acde:	1c71      	adds	r1, r6, #1
 800ace0:	2400      	movs	r4, #0
 800ace2:	7808      	ldrb	r0, [r1, #0]
 800ace4:	f7ff ff8c 	bl	800ac00 <__hexdig_fun>
 800ace8:	1e43      	subs	r3, r0, #1
 800acea:	b2db      	uxtb	r3, r3
 800acec:	2b18      	cmp	r3, #24
 800acee:	d830      	bhi.n	800ad52 <__gethex+0x126>
 800acf0:	f1a0 0210 	sub.w	r2, r0, #16
 800acf4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800acf8:	f7ff ff82 	bl	800ac00 <__hexdig_fun>
 800acfc:	f100 3cff 	add.w	ip, r0, #4294967295
 800ad00:	fa5f fc8c 	uxtb.w	ip, ip
 800ad04:	f1bc 0f18 	cmp.w	ip, #24
 800ad08:	f04f 030a 	mov.w	r3, #10
 800ad0c:	d91e      	bls.n	800ad4c <__gethex+0x120>
 800ad0e:	b104      	cbz	r4, 800ad12 <__gethex+0xe6>
 800ad10:	4252      	negs	r2, r2
 800ad12:	4417      	add	r7, r2
 800ad14:	f8ca 1000 	str.w	r1, [sl]
 800ad18:	b1ed      	cbz	r5, 800ad56 <__gethex+0x12a>
 800ad1a:	f1bb 0f00 	cmp.w	fp, #0
 800ad1e:	bf0c      	ite	eq
 800ad20:	2506      	moveq	r5, #6
 800ad22:	2500      	movne	r5, #0
 800ad24:	4628      	mov	r0, r5
 800ad26:	b005      	add	sp, #20
 800ad28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad2c:	2500      	movs	r5, #0
 800ad2e:	462c      	mov	r4, r5
 800ad30:	e7b0      	b.n	800ac94 <__gethex+0x68>
 800ad32:	2c00      	cmp	r4, #0
 800ad34:	d1c7      	bne.n	800acc6 <__gethex+0x9a>
 800ad36:	4627      	mov	r7, r4
 800ad38:	e7c7      	b.n	800acca <__gethex+0x9e>
 800ad3a:	464e      	mov	r6, r9
 800ad3c:	462f      	mov	r7, r5
 800ad3e:	2501      	movs	r5, #1
 800ad40:	e7c3      	b.n	800acca <__gethex+0x9e>
 800ad42:	2400      	movs	r4, #0
 800ad44:	1cb1      	adds	r1, r6, #2
 800ad46:	e7cc      	b.n	800ace2 <__gethex+0xb6>
 800ad48:	2401      	movs	r4, #1
 800ad4a:	e7fb      	b.n	800ad44 <__gethex+0x118>
 800ad4c:	fb03 0002 	mla	r0, r3, r2, r0
 800ad50:	e7ce      	b.n	800acf0 <__gethex+0xc4>
 800ad52:	4631      	mov	r1, r6
 800ad54:	e7de      	b.n	800ad14 <__gethex+0xe8>
 800ad56:	eba6 0309 	sub.w	r3, r6, r9
 800ad5a:	3b01      	subs	r3, #1
 800ad5c:	4629      	mov	r1, r5
 800ad5e:	2b07      	cmp	r3, #7
 800ad60:	dc0a      	bgt.n	800ad78 <__gethex+0x14c>
 800ad62:	9801      	ldr	r0, [sp, #4]
 800ad64:	f7fd ff84 	bl	8008c70 <_Balloc>
 800ad68:	4604      	mov	r4, r0
 800ad6a:	b940      	cbnz	r0, 800ad7e <__gethex+0x152>
 800ad6c:	4b5c      	ldr	r3, [pc, #368]	@ (800aee0 <__gethex+0x2b4>)
 800ad6e:	4602      	mov	r2, r0
 800ad70:	21e4      	movs	r1, #228	@ 0xe4
 800ad72:	485c      	ldr	r0, [pc, #368]	@ (800aee4 <__gethex+0x2b8>)
 800ad74:	f7ff fec0 	bl	800aaf8 <__assert_func>
 800ad78:	3101      	adds	r1, #1
 800ad7a:	105b      	asrs	r3, r3, #1
 800ad7c:	e7ef      	b.n	800ad5e <__gethex+0x132>
 800ad7e:	f100 0a14 	add.w	sl, r0, #20
 800ad82:	2300      	movs	r3, #0
 800ad84:	4655      	mov	r5, sl
 800ad86:	469b      	mov	fp, r3
 800ad88:	45b1      	cmp	r9, r6
 800ad8a:	d337      	bcc.n	800adfc <__gethex+0x1d0>
 800ad8c:	f845 bb04 	str.w	fp, [r5], #4
 800ad90:	eba5 050a 	sub.w	r5, r5, sl
 800ad94:	10ad      	asrs	r5, r5, #2
 800ad96:	6125      	str	r5, [r4, #16]
 800ad98:	4658      	mov	r0, fp
 800ad9a:	f7fe f85b 	bl	8008e54 <__hi0bits>
 800ad9e:	016d      	lsls	r5, r5, #5
 800ada0:	f8d8 6000 	ldr.w	r6, [r8]
 800ada4:	1a2d      	subs	r5, r5, r0
 800ada6:	42b5      	cmp	r5, r6
 800ada8:	dd54      	ble.n	800ae54 <__gethex+0x228>
 800adaa:	1bad      	subs	r5, r5, r6
 800adac:	4629      	mov	r1, r5
 800adae:	4620      	mov	r0, r4
 800adb0:	f7fe fbef 	bl	8009592 <__any_on>
 800adb4:	4681      	mov	r9, r0
 800adb6:	b178      	cbz	r0, 800add8 <__gethex+0x1ac>
 800adb8:	1e6b      	subs	r3, r5, #1
 800adba:	1159      	asrs	r1, r3, #5
 800adbc:	f003 021f 	and.w	r2, r3, #31
 800adc0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800adc4:	f04f 0901 	mov.w	r9, #1
 800adc8:	fa09 f202 	lsl.w	r2, r9, r2
 800adcc:	420a      	tst	r2, r1
 800adce:	d003      	beq.n	800add8 <__gethex+0x1ac>
 800add0:	454b      	cmp	r3, r9
 800add2:	dc36      	bgt.n	800ae42 <__gethex+0x216>
 800add4:	f04f 0902 	mov.w	r9, #2
 800add8:	4629      	mov	r1, r5
 800adda:	4620      	mov	r0, r4
 800addc:	f7ff febe 	bl	800ab5c <rshift>
 800ade0:	442f      	add	r7, r5
 800ade2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ade6:	42bb      	cmp	r3, r7
 800ade8:	da42      	bge.n	800ae70 <__gethex+0x244>
 800adea:	9801      	ldr	r0, [sp, #4]
 800adec:	4621      	mov	r1, r4
 800adee:	f7fd ff7f 	bl	8008cf0 <_Bfree>
 800adf2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800adf4:	2300      	movs	r3, #0
 800adf6:	6013      	str	r3, [r2, #0]
 800adf8:	25a3      	movs	r5, #163	@ 0xa3
 800adfa:	e793      	b.n	800ad24 <__gethex+0xf8>
 800adfc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ae00:	2a2e      	cmp	r2, #46	@ 0x2e
 800ae02:	d012      	beq.n	800ae2a <__gethex+0x1fe>
 800ae04:	2b20      	cmp	r3, #32
 800ae06:	d104      	bne.n	800ae12 <__gethex+0x1e6>
 800ae08:	f845 bb04 	str.w	fp, [r5], #4
 800ae0c:	f04f 0b00 	mov.w	fp, #0
 800ae10:	465b      	mov	r3, fp
 800ae12:	7830      	ldrb	r0, [r6, #0]
 800ae14:	9303      	str	r3, [sp, #12]
 800ae16:	f7ff fef3 	bl	800ac00 <__hexdig_fun>
 800ae1a:	9b03      	ldr	r3, [sp, #12]
 800ae1c:	f000 000f 	and.w	r0, r0, #15
 800ae20:	4098      	lsls	r0, r3
 800ae22:	ea4b 0b00 	orr.w	fp, fp, r0
 800ae26:	3304      	adds	r3, #4
 800ae28:	e7ae      	b.n	800ad88 <__gethex+0x15c>
 800ae2a:	45b1      	cmp	r9, r6
 800ae2c:	d8ea      	bhi.n	800ae04 <__gethex+0x1d8>
 800ae2e:	492b      	ldr	r1, [pc, #172]	@ (800aedc <__gethex+0x2b0>)
 800ae30:	9303      	str	r3, [sp, #12]
 800ae32:	2201      	movs	r2, #1
 800ae34:	4630      	mov	r0, r6
 800ae36:	f7ff fe13 	bl	800aa60 <strncmp>
 800ae3a:	9b03      	ldr	r3, [sp, #12]
 800ae3c:	2800      	cmp	r0, #0
 800ae3e:	d1e1      	bne.n	800ae04 <__gethex+0x1d8>
 800ae40:	e7a2      	b.n	800ad88 <__gethex+0x15c>
 800ae42:	1ea9      	subs	r1, r5, #2
 800ae44:	4620      	mov	r0, r4
 800ae46:	f7fe fba4 	bl	8009592 <__any_on>
 800ae4a:	2800      	cmp	r0, #0
 800ae4c:	d0c2      	beq.n	800add4 <__gethex+0x1a8>
 800ae4e:	f04f 0903 	mov.w	r9, #3
 800ae52:	e7c1      	b.n	800add8 <__gethex+0x1ac>
 800ae54:	da09      	bge.n	800ae6a <__gethex+0x23e>
 800ae56:	1b75      	subs	r5, r6, r5
 800ae58:	4621      	mov	r1, r4
 800ae5a:	9801      	ldr	r0, [sp, #4]
 800ae5c:	462a      	mov	r2, r5
 800ae5e:	f7fe f95f 	bl	8009120 <__lshift>
 800ae62:	1b7f      	subs	r7, r7, r5
 800ae64:	4604      	mov	r4, r0
 800ae66:	f100 0a14 	add.w	sl, r0, #20
 800ae6a:	f04f 0900 	mov.w	r9, #0
 800ae6e:	e7b8      	b.n	800ade2 <__gethex+0x1b6>
 800ae70:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ae74:	42bd      	cmp	r5, r7
 800ae76:	dd6f      	ble.n	800af58 <__gethex+0x32c>
 800ae78:	1bed      	subs	r5, r5, r7
 800ae7a:	42ae      	cmp	r6, r5
 800ae7c:	dc34      	bgt.n	800aee8 <__gethex+0x2bc>
 800ae7e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ae82:	2b02      	cmp	r3, #2
 800ae84:	d022      	beq.n	800aecc <__gethex+0x2a0>
 800ae86:	2b03      	cmp	r3, #3
 800ae88:	d024      	beq.n	800aed4 <__gethex+0x2a8>
 800ae8a:	2b01      	cmp	r3, #1
 800ae8c:	d115      	bne.n	800aeba <__gethex+0x28e>
 800ae8e:	42ae      	cmp	r6, r5
 800ae90:	d113      	bne.n	800aeba <__gethex+0x28e>
 800ae92:	2e01      	cmp	r6, #1
 800ae94:	d10b      	bne.n	800aeae <__gethex+0x282>
 800ae96:	9a02      	ldr	r2, [sp, #8]
 800ae98:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ae9c:	6013      	str	r3, [r2, #0]
 800ae9e:	2301      	movs	r3, #1
 800aea0:	6123      	str	r3, [r4, #16]
 800aea2:	f8ca 3000 	str.w	r3, [sl]
 800aea6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aea8:	2562      	movs	r5, #98	@ 0x62
 800aeaa:	601c      	str	r4, [r3, #0]
 800aeac:	e73a      	b.n	800ad24 <__gethex+0xf8>
 800aeae:	1e71      	subs	r1, r6, #1
 800aeb0:	4620      	mov	r0, r4
 800aeb2:	f7fe fb6e 	bl	8009592 <__any_on>
 800aeb6:	2800      	cmp	r0, #0
 800aeb8:	d1ed      	bne.n	800ae96 <__gethex+0x26a>
 800aeba:	9801      	ldr	r0, [sp, #4]
 800aebc:	4621      	mov	r1, r4
 800aebe:	f7fd ff17 	bl	8008cf0 <_Bfree>
 800aec2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aec4:	2300      	movs	r3, #0
 800aec6:	6013      	str	r3, [r2, #0]
 800aec8:	2550      	movs	r5, #80	@ 0x50
 800aeca:	e72b      	b.n	800ad24 <__gethex+0xf8>
 800aecc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d1f3      	bne.n	800aeba <__gethex+0x28e>
 800aed2:	e7e0      	b.n	800ae96 <__gethex+0x26a>
 800aed4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d1dd      	bne.n	800ae96 <__gethex+0x26a>
 800aeda:	e7ee      	b.n	800aeba <__gethex+0x28e>
 800aedc:	0801a958 	.word	0x0801a958
 800aee0:	0801a7ed 	.word	0x0801a7ed
 800aee4:	0801ab06 	.word	0x0801ab06
 800aee8:	1e6f      	subs	r7, r5, #1
 800aeea:	f1b9 0f00 	cmp.w	r9, #0
 800aeee:	d130      	bne.n	800af52 <__gethex+0x326>
 800aef0:	b127      	cbz	r7, 800aefc <__gethex+0x2d0>
 800aef2:	4639      	mov	r1, r7
 800aef4:	4620      	mov	r0, r4
 800aef6:	f7fe fb4c 	bl	8009592 <__any_on>
 800aefa:	4681      	mov	r9, r0
 800aefc:	117a      	asrs	r2, r7, #5
 800aefe:	2301      	movs	r3, #1
 800af00:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800af04:	f007 071f 	and.w	r7, r7, #31
 800af08:	40bb      	lsls	r3, r7
 800af0a:	4213      	tst	r3, r2
 800af0c:	4629      	mov	r1, r5
 800af0e:	4620      	mov	r0, r4
 800af10:	bf18      	it	ne
 800af12:	f049 0902 	orrne.w	r9, r9, #2
 800af16:	f7ff fe21 	bl	800ab5c <rshift>
 800af1a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800af1e:	1b76      	subs	r6, r6, r5
 800af20:	2502      	movs	r5, #2
 800af22:	f1b9 0f00 	cmp.w	r9, #0
 800af26:	d047      	beq.n	800afb8 <__gethex+0x38c>
 800af28:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800af2c:	2b02      	cmp	r3, #2
 800af2e:	d015      	beq.n	800af5c <__gethex+0x330>
 800af30:	2b03      	cmp	r3, #3
 800af32:	d017      	beq.n	800af64 <__gethex+0x338>
 800af34:	2b01      	cmp	r3, #1
 800af36:	d109      	bne.n	800af4c <__gethex+0x320>
 800af38:	f019 0f02 	tst.w	r9, #2
 800af3c:	d006      	beq.n	800af4c <__gethex+0x320>
 800af3e:	f8da 3000 	ldr.w	r3, [sl]
 800af42:	ea49 0903 	orr.w	r9, r9, r3
 800af46:	f019 0f01 	tst.w	r9, #1
 800af4a:	d10e      	bne.n	800af6a <__gethex+0x33e>
 800af4c:	f045 0510 	orr.w	r5, r5, #16
 800af50:	e032      	b.n	800afb8 <__gethex+0x38c>
 800af52:	f04f 0901 	mov.w	r9, #1
 800af56:	e7d1      	b.n	800aefc <__gethex+0x2d0>
 800af58:	2501      	movs	r5, #1
 800af5a:	e7e2      	b.n	800af22 <__gethex+0x2f6>
 800af5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af5e:	f1c3 0301 	rsb	r3, r3, #1
 800af62:	930f      	str	r3, [sp, #60]	@ 0x3c
 800af64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af66:	2b00      	cmp	r3, #0
 800af68:	d0f0      	beq.n	800af4c <__gethex+0x320>
 800af6a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800af6e:	f104 0314 	add.w	r3, r4, #20
 800af72:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800af76:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800af7a:	f04f 0c00 	mov.w	ip, #0
 800af7e:	4618      	mov	r0, r3
 800af80:	f853 2b04 	ldr.w	r2, [r3], #4
 800af84:	f1b2 3fff 	cmp.w	r2, #4294967295
 800af88:	d01b      	beq.n	800afc2 <__gethex+0x396>
 800af8a:	3201      	adds	r2, #1
 800af8c:	6002      	str	r2, [r0, #0]
 800af8e:	2d02      	cmp	r5, #2
 800af90:	f104 0314 	add.w	r3, r4, #20
 800af94:	d13c      	bne.n	800b010 <__gethex+0x3e4>
 800af96:	f8d8 2000 	ldr.w	r2, [r8]
 800af9a:	3a01      	subs	r2, #1
 800af9c:	42b2      	cmp	r2, r6
 800af9e:	d109      	bne.n	800afb4 <__gethex+0x388>
 800afa0:	1171      	asrs	r1, r6, #5
 800afa2:	2201      	movs	r2, #1
 800afa4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800afa8:	f006 061f 	and.w	r6, r6, #31
 800afac:	fa02 f606 	lsl.w	r6, r2, r6
 800afb0:	421e      	tst	r6, r3
 800afb2:	d13a      	bne.n	800b02a <__gethex+0x3fe>
 800afb4:	f045 0520 	orr.w	r5, r5, #32
 800afb8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800afba:	601c      	str	r4, [r3, #0]
 800afbc:	9b02      	ldr	r3, [sp, #8]
 800afbe:	601f      	str	r7, [r3, #0]
 800afc0:	e6b0      	b.n	800ad24 <__gethex+0xf8>
 800afc2:	4299      	cmp	r1, r3
 800afc4:	f843 cc04 	str.w	ip, [r3, #-4]
 800afc8:	d8d9      	bhi.n	800af7e <__gethex+0x352>
 800afca:	68a3      	ldr	r3, [r4, #8]
 800afcc:	459b      	cmp	fp, r3
 800afce:	db17      	blt.n	800b000 <__gethex+0x3d4>
 800afd0:	6861      	ldr	r1, [r4, #4]
 800afd2:	9801      	ldr	r0, [sp, #4]
 800afd4:	3101      	adds	r1, #1
 800afd6:	f7fd fe4b 	bl	8008c70 <_Balloc>
 800afda:	4681      	mov	r9, r0
 800afdc:	b918      	cbnz	r0, 800afe6 <__gethex+0x3ba>
 800afde:	4b1a      	ldr	r3, [pc, #104]	@ (800b048 <__gethex+0x41c>)
 800afe0:	4602      	mov	r2, r0
 800afe2:	2184      	movs	r1, #132	@ 0x84
 800afe4:	e6c5      	b.n	800ad72 <__gethex+0x146>
 800afe6:	6922      	ldr	r2, [r4, #16]
 800afe8:	3202      	adds	r2, #2
 800afea:	f104 010c 	add.w	r1, r4, #12
 800afee:	0092      	lsls	r2, r2, #2
 800aff0:	300c      	adds	r0, #12
 800aff2:	f7fc feda 	bl	8007daa <memcpy>
 800aff6:	4621      	mov	r1, r4
 800aff8:	9801      	ldr	r0, [sp, #4]
 800affa:	f7fd fe79 	bl	8008cf0 <_Bfree>
 800affe:	464c      	mov	r4, r9
 800b000:	6923      	ldr	r3, [r4, #16]
 800b002:	1c5a      	adds	r2, r3, #1
 800b004:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b008:	6122      	str	r2, [r4, #16]
 800b00a:	2201      	movs	r2, #1
 800b00c:	615a      	str	r2, [r3, #20]
 800b00e:	e7be      	b.n	800af8e <__gethex+0x362>
 800b010:	6922      	ldr	r2, [r4, #16]
 800b012:	455a      	cmp	r2, fp
 800b014:	dd0b      	ble.n	800b02e <__gethex+0x402>
 800b016:	2101      	movs	r1, #1
 800b018:	4620      	mov	r0, r4
 800b01a:	f7ff fd9f 	bl	800ab5c <rshift>
 800b01e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b022:	3701      	adds	r7, #1
 800b024:	42bb      	cmp	r3, r7
 800b026:	f6ff aee0 	blt.w	800adea <__gethex+0x1be>
 800b02a:	2501      	movs	r5, #1
 800b02c:	e7c2      	b.n	800afb4 <__gethex+0x388>
 800b02e:	f016 061f 	ands.w	r6, r6, #31
 800b032:	d0fa      	beq.n	800b02a <__gethex+0x3fe>
 800b034:	4453      	add	r3, sl
 800b036:	f1c6 0620 	rsb	r6, r6, #32
 800b03a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b03e:	f7fd ff09 	bl	8008e54 <__hi0bits>
 800b042:	42b0      	cmp	r0, r6
 800b044:	dbe7      	blt.n	800b016 <__gethex+0x3ea>
 800b046:	e7f0      	b.n	800b02a <__gethex+0x3fe>
 800b048:	0801a7ed 	.word	0x0801a7ed

0800b04c <L_shift>:
 800b04c:	f1c2 0208 	rsb	r2, r2, #8
 800b050:	0092      	lsls	r2, r2, #2
 800b052:	b570      	push	{r4, r5, r6, lr}
 800b054:	f1c2 0620 	rsb	r6, r2, #32
 800b058:	6843      	ldr	r3, [r0, #4]
 800b05a:	6804      	ldr	r4, [r0, #0]
 800b05c:	fa03 f506 	lsl.w	r5, r3, r6
 800b060:	432c      	orrs	r4, r5
 800b062:	40d3      	lsrs	r3, r2
 800b064:	6004      	str	r4, [r0, #0]
 800b066:	f840 3f04 	str.w	r3, [r0, #4]!
 800b06a:	4288      	cmp	r0, r1
 800b06c:	d3f4      	bcc.n	800b058 <L_shift+0xc>
 800b06e:	bd70      	pop	{r4, r5, r6, pc}

0800b070 <__match>:
 800b070:	b530      	push	{r4, r5, lr}
 800b072:	6803      	ldr	r3, [r0, #0]
 800b074:	3301      	adds	r3, #1
 800b076:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b07a:	b914      	cbnz	r4, 800b082 <__match+0x12>
 800b07c:	6003      	str	r3, [r0, #0]
 800b07e:	2001      	movs	r0, #1
 800b080:	bd30      	pop	{r4, r5, pc}
 800b082:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b086:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b08a:	2d19      	cmp	r5, #25
 800b08c:	bf98      	it	ls
 800b08e:	3220      	addls	r2, #32
 800b090:	42a2      	cmp	r2, r4
 800b092:	d0f0      	beq.n	800b076 <__match+0x6>
 800b094:	2000      	movs	r0, #0
 800b096:	e7f3      	b.n	800b080 <__match+0x10>

0800b098 <__hexnan>:
 800b098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b09c:	680b      	ldr	r3, [r1, #0]
 800b09e:	6801      	ldr	r1, [r0, #0]
 800b0a0:	115e      	asrs	r6, r3, #5
 800b0a2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b0a6:	f013 031f 	ands.w	r3, r3, #31
 800b0aa:	b087      	sub	sp, #28
 800b0ac:	bf18      	it	ne
 800b0ae:	3604      	addne	r6, #4
 800b0b0:	2500      	movs	r5, #0
 800b0b2:	1f37      	subs	r7, r6, #4
 800b0b4:	4682      	mov	sl, r0
 800b0b6:	4690      	mov	r8, r2
 800b0b8:	9301      	str	r3, [sp, #4]
 800b0ba:	f846 5c04 	str.w	r5, [r6, #-4]
 800b0be:	46b9      	mov	r9, r7
 800b0c0:	463c      	mov	r4, r7
 800b0c2:	9502      	str	r5, [sp, #8]
 800b0c4:	46ab      	mov	fp, r5
 800b0c6:	784a      	ldrb	r2, [r1, #1]
 800b0c8:	1c4b      	adds	r3, r1, #1
 800b0ca:	9303      	str	r3, [sp, #12]
 800b0cc:	b342      	cbz	r2, 800b120 <__hexnan+0x88>
 800b0ce:	4610      	mov	r0, r2
 800b0d0:	9105      	str	r1, [sp, #20]
 800b0d2:	9204      	str	r2, [sp, #16]
 800b0d4:	f7ff fd94 	bl	800ac00 <__hexdig_fun>
 800b0d8:	2800      	cmp	r0, #0
 800b0da:	d151      	bne.n	800b180 <__hexnan+0xe8>
 800b0dc:	9a04      	ldr	r2, [sp, #16]
 800b0de:	9905      	ldr	r1, [sp, #20]
 800b0e0:	2a20      	cmp	r2, #32
 800b0e2:	d818      	bhi.n	800b116 <__hexnan+0x7e>
 800b0e4:	9b02      	ldr	r3, [sp, #8]
 800b0e6:	459b      	cmp	fp, r3
 800b0e8:	dd13      	ble.n	800b112 <__hexnan+0x7a>
 800b0ea:	454c      	cmp	r4, r9
 800b0ec:	d206      	bcs.n	800b0fc <__hexnan+0x64>
 800b0ee:	2d07      	cmp	r5, #7
 800b0f0:	dc04      	bgt.n	800b0fc <__hexnan+0x64>
 800b0f2:	462a      	mov	r2, r5
 800b0f4:	4649      	mov	r1, r9
 800b0f6:	4620      	mov	r0, r4
 800b0f8:	f7ff ffa8 	bl	800b04c <L_shift>
 800b0fc:	4544      	cmp	r4, r8
 800b0fe:	d952      	bls.n	800b1a6 <__hexnan+0x10e>
 800b100:	2300      	movs	r3, #0
 800b102:	f1a4 0904 	sub.w	r9, r4, #4
 800b106:	f844 3c04 	str.w	r3, [r4, #-4]
 800b10a:	f8cd b008 	str.w	fp, [sp, #8]
 800b10e:	464c      	mov	r4, r9
 800b110:	461d      	mov	r5, r3
 800b112:	9903      	ldr	r1, [sp, #12]
 800b114:	e7d7      	b.n	800b0c6 <__hexnan+0x2e>
 800b116:	2a29      	cmp	r2, #41	@ 0x29
 800b118:	d157      	bne.n	800b1ca <__hexnan+0x132>
 800b11a:	3102      	adds	r1, #2
 800b11c:	f8ca 1000 	str.w	r1, [sl]
 800b120:	f1bb 0f00 	cmp.w	fp, #0
 800b124:	d051      	beq.n	800b1ca <__hexnan+0x132>
 800b126:	454c      	cmp	r4, r9
 800b128:	d206      	bcs.n	800b138 <__hexnan+0xa0>
 800b12a:	2d07      	cmp	r5, #7
 800b12c:	dc04      	bgt.n	800b138 <__hexnan+0xa0>
 800b12e:	462a      	mov	r2, r5
 800b130:	4649      	mov	r1, r9
 800b132:	4620      	mov	r0, r4
 800b134:	f7ff ff8a 	bl	800b04c <L_shift>
 800b138:	4544      	cmp	r4, r8
 800b13a:	d936      	bls.n	800b1aa <__hexnan+0x112>
 800b13c:	f1a8 0204 	sub.w	r2, r8, #4
 800b140:	4623      	mov	r3, r4
 800b142:	f853 1b04 	ldr.w	r1, [r3], #4
 800b146:	f842 1f04 	str.w	r1, [r2, #4]!
 800b14a:	429f      	cmp	r7, r3
 800b14c:	d2f9      	bcs.n	800b142 <__hexnan+0xaa>
 800b14e:	1b3b      	subs	r3, r7, r4
 800b150:	f023 0303 	bic.w	r3, r3, #3
 800b154:	3304      	adds	r3, #4
 800b156:	3401      	adds	r4, #1
 800b158:	3e03      	subs	r6, #3
 800b15a:	42b4      	cmp	r4, r6
 800b15c:	bf88      	it	hi
 800b15e:	2304      	movhi	r3, #4
 800b160:	4443      	add	r3, r8
 800b162:	2200      	movs	r2, #0
 800b164:	f843 2b04 	str.w	r2, [r3], #4
 800b168:	429f      	cmp	r7, r3
 800b16a:	d2fb      	bcs.n	800b164 <__hexnan+0xcc>
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	b91b      	cbnz	r3, 800b178 <__hexnan+0xe0>
 800b170:	4547      	cmp	r7, r8
 800b172:	d128      	bne.n	800b1c6 <__hexnan+0x12e>
 800b174:	2301      	movs	r3, #1
 800b176:	603b      	str	r3, [r7, #0]
 800b178:	2005      	movs	r0, #5
 800b17a:	b007      	add	sp, #28
 800b17c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b180:	3501      	adds	r5, #1
 800b182:	2d08      	cmp	r5, #8
 800b184:	f10b 0b01 	add.w	fp, fp, #1
 800b188:	dd06      	ble.n	800b198 <__hexnan+0x100>
 800b18a:	4544      	cmp	r4, r8
 800b18c:	d9c1      	bls.n	800b112 <__hexnan+0x7a>
 800b18e:	2300      	movs	r3, #0
 800b190:	f844 3c04 	str.w	r3, [r4, #-4]
 800b194:	2501      	movs	r5, #1
 800b196:	3c04      	subs	r4, #4
 800b198:	6822      	ldr	r2, [r4, #0]
 800b19a:	f000 000f 	and.w	r0, r0, #15
 800b19e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b1a2:	6020      	str	r0, [r4, #0]
 800b1a4:	e7b5      	b.n	800b112 <__hexnan+0x7a>
 800b1a6:	2508      	movs	r5, #8
 800b1a8:	e7b3      	b.n	800b112 <__hexnan+0x7a>
 800b1aa:	9b01      	ldr	r3, [sp, #4]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d0dd      	beq.n	800b16c <__hexnan+0xd4>
 800b1b0:	f1c3 0320 	rsb	r3, r3, #32
 800b1b4:	f04f 32ff 	mov.w	r2, #4294967295
 800b1b8:	40da      	lsrs	r2, r3
 800b1ba:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b1be:	4013      	ands	r3, r2
 800b1c0:	f846 3c04 	str.w	r3, [r6, #-4]
 800b1c4:	e7d2      	b.n	800b16c <__hexnan+0xd4>
 800b1c6:	3f04      	subs	r7, #4
 800b1c8:	e7d0      	b.n	800b16c <__hexnan+0xd4>
 800b1ca:	2004      	movs	r0, #4
 800b1cc:	e7d5      	b.n	800b17a <__hexnan+0xe2>

0800b1ce <__ascii_mbtowc>:
 800b1ce:	b082      	sub	sp, #8
 800b1d0:	b901      	cbnz	r1, 800b1d4 <__ascii_mbtowc+0x6>
 800b1d2:	a901      	add	r1, sp, #4
 800b1d4:	b142      	cbz	r2, 800b1e8 <__ascii_mbtowc+0x1a>
 800b1d6:	b14b      	cbz	r3, 800b1ec <__ascii_mbtowc+0x1e>
 800b1d8:	7813      	ldrb	r3, [r2, #0]
 800b1da:	600b      	str	r3, [r1, #0]
 800b1dc:	7812      	ldrb	r2, [r2, #0]
 800b1de:	1e10      	subs	r0, r2, #0
 800b1e0:	bf18      	it	ne
 800b1e2:	2001      	movne	r0, #1
 800b1e4:	b002      	add	sp, #8
 800b1e6:	4770      	bx	lr
 800b1e8:	4610      	mov	r0, r2
 800b1ea:	e7fb      	b.n	800b1e4 <__ascii_mbtowc+0x16>
 800b1ec:	f06f 0001 	mvn.w	r0, #1
 800b1f0:	e7f8      	b.n	800b1e4 <__ascii_mbtowc+0x16>

0800b1f2 <_realloc_r>:
 800b1f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1f6:	4680      	mov	r8, r0
 800b1f8:	4615      	mov	r5, r2
 800b1fa:	460c      	mov	r4, r1
 800b1fc:	b921      	cbnz	r1, 800b208 <_realloc_r+0x16>
 800b1fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b202:	4611      	mov	r1, r2
 800b204:	f7fd bca8 	b.w	8008b58 <_malloc_r>
 800b208:	b92a      	cbnz	r2, 800b216 <_realloc_r+0x24>
 800b20a:	f7fd fc31 	bl	8008a70 <_free_r>
 800b20e:	2400      	movs	r4, #0
 800b210:	4620      	mov	r0, r4
 800b212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b216:	f000 f840 	bl	800b29a <_malloc_usable_size_r>
 800b21a:	4285      	cmp	r5, r0
 800b21c:	4606      	mov	r6, r0
 800b21e:	d802      	bhi.n	800b226 <_realloc_r+0x34>
 800b220:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b224:	d8f4      	bhi.n	800b210 <_realloc_r+0x1e>
 800b226:	4629      	mov	r1, r5
 800b228:	4640      	mov	r0, r8
 800b22a:	f7fd fc95 	bl	8008b58 <_malloc_r>
 800b22e:	4607      	mov	r7, r0
 800b230:	2800      	cmp	r0, #0
 800b232:	d0ec      	beq.n	800b20e <_realloc_r+0x1c>
 800b234:	42b5      	cmp	r5, r6
 800b236:	462a      	mov	r2, r5
 800b238:	4621      	mov	r1, r4
 800b23a:	bf28      	it	cs
 800b23c:	4632      	movcs	r2, r6
 800b23e:	f7fc fdb4 	bl	8007daa <memcpy>
 800b242:	4621      	mov	r1, r4
 800b244:	4640      	mov	r0, r8
 800b246:	f7fd fc13 	bl	8008a70 <_free_r>
 800b24a:	463c      	mov	r4, r7
 800b24c:	e7e0      	b.n	800b210 <_realloc_r+0x1e>

0800b24e <__ascii_wctomb>:
 800b24e:	4603      	mov	r3, r0
 800b250:	4608      	mov	r0, r1
 800b252:	b141      	cbz	r1, 800b266 <__ascii_wctomb+0x18>
 800b254:	2aff      	cmp	r2, #255	@ 0xff
 800b256:	d904      	bls.n	800b262 <__ascii_wctomb+0x14>
 800b258:	228a      	movs	r2, #138	@ 0x8a
 800b25a:	601a      	str	r2, [r3, #0]
 800b25c:	f04f 30ff 	mov.w	r0, #4294967295
 800b260:	4770      	bx	lr
 800b262:	700a      	strb	r2, [r1, #0]
 800b264:	2001      	movs	r0, #1
 800b266:	4770      	bx	lr

0800b268 <fiprintf>:
 800b268:	b40e      	push	{r1, r2, r3}
 800b26a:	b503      	push	{r0, r1, lr}
 800b26c:	4601      	mov	r1, r0
 800b26e:	ab03      	add	r3, sp, #12
 800b270:	4805      	ldr	r0, [pc, #20]	@ (800b288 <fiprintf+0x20>)
 800b272:	f853 2b04 	ldr.w	r2, [r3], #4
 800b276:	6800      	ldr	r0, [r0, #0]
 800b278:	9301      	str	r3, [sp, #4]
 800b27a:	f7ff f9b1 	bl	800a5e0 <_vfiprintf_r>
 800b27e:	b002      	add	sp, #8
 800b280:	f85d eb04 	ldr.w	lr, [sp], #4
 800b284:	b003      	add	sp, #12
 800b286:	4770      	bx	lr
 800b288:	20000030 	.word	0x20000030

0800b28c <abort>:
 800b28c:	b508      	push	{r3, lr}
 800b28e:	2006      	movs	r0, #6
 800b290:	f000 f834 	bl	800b2fc <raise>
 800b294:	2001      	movs	r0, #1
 800b296:	f7f6 fd5d 	bl	8001d54 <_exit>

0800b29a <_malloc_usable_size_r>:
 800b29a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b29e:	1f18      	subs	r0, r3, #4
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	bfbc      	itt	lt
 800b2a4:	580b      	ldrlt	r3, [r1, r0]
 800b2a6:	18c0      	addlt	r0, r0, r3
 800b2a8:	4770      	bx	lr

0800b2aa <_raise_r>:
 800b2aa:	291f      	cmp	r1, #31
 800b2ac:	b538      	push	{r3, r4, r5, lr}
 800b2ae:	4605      	mov	r5, r0
 800b2b0:	460c      	mov	r4, r1
 800b2b2:	d904      	bls.n	800b2be <_raise_r+0x14>
 800b2b4:	2316      	movs	r3, #22
 800b2b6:	6003      	str	r3, [r0, #0]
 800b2b8:	f04f 30ff 	mov.w	r0, #4294967295
 800b2bc:	bd38      	pop	{r3, r4, r5, pc}
 800b2be:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b2c0:	b112      	cbz	r2, 800b2c8 <_raise_r+0x1e>
 800b2c2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b2c6:	b94b      	cbnz	r3, 800b2dc <_raise_r+0x32>
 800b2c8:	4628      	mov	r0, r5
 800b2ca:	f000 f831 	bl	800b330 <_getpid_r>
 800b2ce:	4622      	mov	r2, r4
 800b2d0:	4601      	mov	r1, r0
 800b2d2:	4628      	mov	r0, r5
 800b2d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b2d8:	f000 b818 	b.w	800b30c <_kill_r>
 800b2dc:	2b01      	cmp	r3, #1
 800b2de:	d00a      	beq.n	800b2f6 <_raise_r+0x4c>
 800b2e0:	1c59      	adds	r1, r3, #1
 800b2e2:	d103      	bne.n	800b2ec <_raise_r+0x42>
 800b2e4:	2316      	movs	r3, #22
 800b2e6:	6003      	str	r3, [r0, #0]
 800b2e8:	2001      	movs	r0, #1
 800b2ea:	e7e7      	b.n	800b2bc <_raise_r+0x12>
 800b2ec:	2100      	movs	r1, #0
 800b2ee:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b2f2:	4620      	mov	r0, r4
 800b2f4:	4798      	blx	r3
 800b2f6:	2000      	movs	r0, #0
 800b2f8:	e7e0      	b.n	800b2bc <_raise_r+0x12>
	...

0800b2fc <raise>:
 800b2fc:	4b02      	ldr	r3, [pc, #8]	@ (800b308 <raise+0xc>)
 800b2fe:	4601      	mov	r1, r0
 800b300:	6818      	ldr	r0, [r3, #0]
 800b302:	f7ff bfd2 	b.w	800b2aa <_raise_r>
 800b306:	bf00      	nop
 800b308:	20000030 	.word	0x20000030

0800b30c <_kill_r>:
 800b30c:	b538      	push	{r3, r4, r5, lr}
 800b30e:	4d07      	ldr	r5, [pc, #28]	@ (800b32c <_kill_r+0x20>)
 800b310:	2300      	movs	r3, #0
 800b312:	4604      	mov	r4, r0
 800b314:	4608      	mov	r0, r1
 800b316:	4611      	mov	r1, r2
 800b318:	602b      	str	r3, [r5, #0]
 800b31a:	f7f6 fd0b 	bl	8001d34 <_kill>
 800b31e:	1c43      	adds	r3, r0, #1
 800b320:	d102      	bne.n	800b328 <_kill_r+0x1c>
 800b322:	682b      	ldr	r3, [r5, #0]
 800b324:	b103      	cbz	r3, 800b328 <_kill_r+0x1c>
 800b326:	6023      	str	r3, [r4, #0]
 800b328:	bd38      	pop	{r3, r4, r5, pc}
 800b32a:	bf00      	nop
 800b32c:	2000092c 	.word	0x2000092c

0800b330 <_getpid_r>:
 800b330:	f7f6 bcf8 	b.w	8001d24 <_getpid>

0800b334 <_init>:
 800b334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b336:	bf00      	nop
 800b338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b33a:	bc08      	pop	{r3}
 800b33c:	469e      	mov	lr, r3
 800b33e:	4770      	bx	lr

0800b340 <_fini>:
 800b340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b342:	bf00      	nop
 800b344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b346:	bc08      	pop	{r3}
 800b348:	469e      	mov	lr, r3
 800b34a:	4770      	bx	lr
