
Smart Dog Collar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a98c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000ac80  0800ab20  0800ab20  0000bb20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080157a0  080157a0  000171d4  2**0
                  CONTENTS
  4 .ARM          00000008  080157a0  080157a0  000167a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080157a8  080157a8  000171d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080157a8  080157a8  000167a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080157ac  080157ac  000167ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080157b0  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000744  200001d4  08015984  000171d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000918  08015984  00017918  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000171d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013c1d  00000000  00000000  00017204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002caa  00000000  00000000  0002ae21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001200  00000000  00000000  0002dad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dd1  00000000  00000000  0002ecd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000288c1  00000000  00000000  0002faa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015e3e  00000000  00000000  00058362  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7125  00000000  00000000  0006e1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001652c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006060  00000000  00000000  00165308  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000094  00000000  00000000  0016b368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ab04 	.word	0x0800ab04

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800ab04 	.word	0x0800ab04

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000fec:	1d39      	adds	r1, r7, #4
 8000fee:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	4803      	ldr	r0, [pc, #12]	@ (8001004 <__io_putchar+0x20>)
 8000ff6:	f004 f803 	bl	8005000 <HAL_UART_Transmit>
  return ch;
 8000ffa:	687b      	ldr	r3, [r7, #4]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	2000037c 	.word	0x2000037c

08001008 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800100c:	f000 fe9b 	bl	8001d46 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001010:	f000 f834 	bl	800107c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001014:	f000 fa22 	bl	800145c <MX_GPIO_Init>
  MX_DMA_Init();
 8001018:	f000 fa02 	bl	8001420 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800101c:	f000 f9a0 	bl	8001360 <MX_USART2_UART_Init>
  MX_DAC1_Init();
 8001020:	f000 f880 	bl	8001124 <MX_DAC1_Init>
  MX_USART1_UART_Init();
 8001024:	f000 f96c 	bl	8001300 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001028:	f000 f9ca 	bl	80013c0 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 800102c:	f000 f918 	bl	8001260 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001030:	f000 f8c8 	bl	80011c4 <MX_TIM2_Init>
  MX_IWDG_Init();
 8001034:	f000 f8a8 	bl	8001188 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */

  printf("START OF CODE\r\n\n");
 8001038:	480c      	ldr	r0, [pc, #48]	@ (800106c <main+0x64>)
 800103a:	f006 f90b 	bl	8007254 <puts>

  //Set LoRa settings
//  setup_lora();

  //Enable GPS Interrupt
  if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 800103e:	480c      	ldr	r0, [pc, #48]	@ (8001070 <main+0x68>)
 8001040:	f003 fb38 	bl	80046b4 <HAL_TIM_Base_Start_IT>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <main+0x46>
  {
    /* Starting Error */
    Error_Handler();
 800104a:	f000 fa99 	bl	8001580 <Error_Handler>
    // }

    // audio_cue = 0;
    // HAL_Delay(100);
 
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 800104e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001052:	4808      	ldr	r0, [pc, #32]	@ (8001074 <main+0x6c>)
 8001054:	f001 ff18 	bl	8002e88 <HAL_GPIO_TogglePin>
    HAL_Delay(1000);
 8001058:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800105c:	f000 fee8 	bl	8001e30 <HAL_Delay>
  //   printf("GPGGA DATA: %s\n\r", gpgga);
  // }
  // else{
  //   printf("None found\n\r");
  // }
    HAL_IWDG_Refresh(&hiwdg);
 8001060:	4805      	ldr	r0, [pc, #20]	@ (8001078 <main+0x70>)
 8001062:	f001 ff9f 	bl	8002fa4 <HAL_IWDG_Refresh>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 8001066:	bf00      	nop
 8001068:	e7f1      	b.n	800104e <main+0x46>
 800106a:	bf00      	nop
 800106c:	0800ab20 	.word	0x0800ab20
 8001070:	200002a8 	.word	0x200002a8
 8001074:	48000400 	.word	0x48000400
 8001078:	2000024c 	.word	0x2000024c

0800107c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b096      	sub	sp, #88	@ 0x58
 8001080:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001082:	f107 0314 	add.w	r3, r7, #20
 8001086:	2244      	movs	r2, #68	@ 0x44
 8001088:	2100      	movs	r1, #0
 800108a:	4618      	mov	r0, r3
 800108c:	f006 f9e2 	bl	8007454 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001090:	463b      	mov	r3, r7
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	609a      	str	r2, [r3, #8]
 800109a:	60da      	str	r2, [r3, #12]
 800109c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800109e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80010a2:	f001 ff9d 	bl	8002fe0 <HAL_PWREx_ControlVoltageScaling>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80010ac:	f000 fa68 	bl	8001580 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 80010b0:	2318      	movs	r3, #24
 80010b2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80010b4:	2301      	movs	r3, #1
 80010b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80010b8:	2301      	movs	r3, #1
 80010ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80010c0:	2360      	movs	r3, #96	@ 0x60
 80010c2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010c4:	2302      	movs	r3, #2
 80010c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80010c8:	2301      	movs	r3, #1
 80010ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010cc:	2301      	movs	r3, #1
 80010ce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80010d0:	2328      	movs	r3, #40	@ 0x28
 80010d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80010d4:	2307      	movs	r3, #7
 80010d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010d8:	2302      	movs	r3, #2
 80010da:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010dc:	2302      	movs	r3, #2
 80010de:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e0:	f107 0314 	add.w	r3, r7, #20
 80010e4:	4618      	mov	r0, r3
 80010e6:	f001 ffd1 	bl	800308c <HAL_RCC_OscConfig>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80010f0:	f000 fa46 	bl	8001580 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010f4:	230f      	movs	r3, #15
 80010f6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010f8:	2303      	movs	r3, #3
 80010fa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010fc:	2300      	movs	r3, #0
 80010fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001100:	2300      	movs	r3, #0
 8001102:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001104:	2300      	movs	r3, #0
 8001106:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001108:	463b      	mov	r3, r7
 800110a:	2104      	movs	r1, #4
 800110c:	4618      	mov	r0, r3
 800110e:	f002 fb99 	bl	8003844 <HAL_RCC_ClockConfig>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001118:	f000 fa32 	bl	8001580 <Error_Handler>
  }
}
 800111c:	bf00      	nop
 800111e:	3758      	adds	r7, #88	@ 0x58
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08a      	sub	sp, #40	@ 0x28
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800112a:	1d3b      	adds	r3, r7, #4
 800112c:	2224      	movs	r2, #36	@ 0x24
 800112e:	2100      	movs	r1, #0
 8001130:	4618      	mov	r0, r3
 8001132:	f006 f98f 	bl	8007454 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001136:	4b12      	ldr	r3, [pc, #72]	@ (8001180 <MX_DAC1_Init+0x5c>)
 8001138:	4a12      	ldr	r2, [pc, #72]	@ (8001184 <MX_DAC1_Init+0x60>)
 800113a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800113c:	4810      	ldr	r0, [pc, #64]	@ (8001180 <MX_DAC1_Init+0x5c>)
 800113e:	f000 ffac 	bl	800209a <HAL_DAC_Init>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001148:	f000 fa1a 	bl	8001580 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800114c:	2300      	movs	r3, #0
 800114e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001150:	2324      	movs	r3, #36	@ 0x24
 8001152:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001154:	2300      	movs	r3, #0
 8001156:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001158:	2300      	movs	r3, #0
 800115a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800115c:	2300      	movs	r3, #0
 800115e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001160:	1d3b      	adds	r3, r7, #4
 8001162:	2200      	movs	r2, #0
 8001164:	4619      	mov	r1, r3
 8001166:	4806      	ldr	r0, [pc, #24]	@ (8001180 <MX_DAC1_Init+0x5c>)
 8001168:	f001 f8a4 	bl	80022b4 <HAL_DAC_ConfigChannel>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001172:	f000 fa05 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001176:	bf00      	nop
 8001178:	3728      	adds	r7, #40	@ 0x28
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	200001f0 	.word	0x200001f0
 8001184:	40007400 	.word	0x40007400

08001188 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800118c:	4b0b      	ldr	r3, [pc, #44]	@ (80011bc <MX_IWDG_Init+0x34>)
 800118e:	4a0c      	ldr	r2, [pc, #48]	@ (80011c0 <MX_IWDG_Init+0x38>)
 8001190:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8001192:	4b0a      	ldr	r3, [pc, #40]	@ (80011bc <MX_IWDG_Init+0x34>)
 8001194:	2206      	movs	r2, #6
 8001196:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8001198:	4b08      	ldr	r3, [pc, #32]	@ (80011bc <MX_IWDG_Init+0x34>)
 800119a:	f640 72ff 	movw	r2, #4095	@ 0xfff
 800119e:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 3750;
 80011a0:	4b06      	ldr	r3, [pc, #24]	@ (80011bc <MX_IWDG_Init+0x34>)
 80011a2:	f640 62a6 	movw	r2, #3750	@ 0xea6
 80011a6:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80011a8:	4804      	ldr	r0, [pc, #16]	@ (80011bc <MX_IWDG_Init+0x34>)
 80011aa:	f001 feaa 	bl	8002f02 <HAL_IWDG_Init>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 80011b4:	f000 f9e4 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80011b8:	bf00      	nop
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	2000024c 	.word	0x2000024c
 80011c0:	40003000 	.word	0x40003000

080011c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b088      	sub	sp, #32
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ca:	f107 0310 	add.w	r3, r7, #16
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d8:	1d3b      	adds	r3, r7, #4
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	605a      	str	r2, [r3, #4]
 80011e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011e2:	4b1e      	ldr	r3, [pc, #120]	@ (800125c <MX_TIM2_Init+0x98>)
 80011e4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011e8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80011ea:	4b1c      	ldr	r3, [pc, #112]	@ (800125c <MX_TIM2_Init+0x98>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f0:	4b1a      	ldr	r3, [pc, #104]	@ (800125c <MX_TIM2_Init+0x98>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2500;
 80011f6:	4b19      	ldr	r3, [pc, #100]	@ (800125c <MX_TIM2_Init+0x98>)
 80011f8:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80011fc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011fe:	4b17      	ldr	r3, [pc, #92]	@ (800125c <MX_TIM2_Init+0x98>)
 8001200:	2200      	movs	r2, #0
 8001202:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001204:	4b15      	ldr	r3, [pc, #84]	@ (800125c <MX_TIM2_Init+0x98>)
 8001206:	2200      	movs	r2, #0
 8001208:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800120a:	4814      	ldr	r0, [pc, #80]	@ (800125c <MX_TIM2_Init+0x98>)
 800120c:	f003 f9fa 	bl	8004604 <HAL_TIM_Base_Init>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001216:	f000 f9b3 	bl	8001580 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800121a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800121e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001220:	f107 0310 	add.w	r3, r7, #16
 8001224:	4619      	mov	r1, r3
 8001226:	480d      	ldr	r0, [pc, #52]	@ (800125c <MX_TIM2_Init+0x98>)
 8001228:	f003 fbbb 	bl	80049a2 <HAL_TIM_ConfigClockSource>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001232:	f000 f9a5 	bl	8001580 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001236:	2320      	movs	r3, #32
 8001238:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800123a:	2300      	movs	r3, #0
 800123c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800123e:	1d3b      	adds	r3, r7, #4
 8001240:	4619      	mov	r1, r3
 8001242:	4806      	ldr	r0, [pc, #24]	@ (800125c <MX_TIM2_Init+0x98>)
 8001244:	f003 fde8 	bl	8004e18 <HAL_TIMEx_MasterConfigSynchronization>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800124e:	f000 f997 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001252:	bf00      	nop
 8001254:	3720      	adds	r7, #32
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	2000025c 	.word	0x2000025c

08001260 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b088      	sub	sp, #32
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001266:	f107 0310 	add.w	r3, r7, #16
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001274:	1d3b      	adds	r3, r7, #4
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800127e:	4b1e      	ldr	r3, [pc, #120]	@ (80012f8 <MX_TIM3_Init+0x98>)
 8001280:	4a1e      	ldr	r2, [pc, #120]	@ (80012fc <MX_TIM3_Init+0x9c>)
 8001282:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 19999;
 8001284:	4b1c      	ldr	r3, [pc, #112]	@ (80012f8 <MX_TIM3_Init+0x98>)
 8001286:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800128a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800128c:	4b1a      	ldr	r3, [pc, #104]	@ (80012f8 <MX_TIM3_Init+0x98>)
 800128e:	2200      	movs	r2, #0
 8001290:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 39999;
 8001292:	4b19      	ldr	r3, [pc, #100]	@ (80012f8 <MX_TIM3_Init+0x98>)
 8001294:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8001298:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800129a:	4b17      	ldr	r3, [pc, #92]	@ (80012f8 <MX_TIM3_Init+0x98>)
 800129c:	2200      	movs	r2, #0
 800129e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a0:	4b15      	ldr	r3, [pc, #84]	@ (80012f8 <MX_TIM3_Init+0x98>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012a6:	4814      	ldr	r0, [pc, #80]	@ (80012f8 <MX_TIM3_Init+0x98>)
 80012a8:	f003 f9ac 	bl	8004604 <HAL_TIM_Base_Init>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80012b2:	f000 f965 	bl	8001580 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012bc:	f107 0310 	add.w	r3, r7, #16
 80012c0:	4619      	mov	r1, r3
 80012c2:	480d      	ldr	r0, [pc, #52]	@ (80012f8 <MX_TIM3_Init+0x98>)
 80012c4:	f003 fb6d 	bl	80049a2 <HAL_TIM_ConfigClockSource>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80012ce:	f000 f957 	bl	8001580 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d2:	2300      	movs	r3, #0
 80012d4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012da:	1d3b      	adds	r3, r7, #4
 80012dc:	4619      	mov	r1, r3
 80012de:	4806      	ldr	r0, [pc, #24]	@ (80012f8 <MX_TIM3_Init+0x98>)
 80012e0:	f003 fd9a 	bl	8004e18 <HAL_TIMEx_MasterConfigSynchronization>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80012ea:	f000 f949 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012ee:	bf00      	nop
 80012f0:	3720      	adds	r7, #32
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	200002a8 	.word	0x200002a8
 80012fc:	40000400 	.word	0x40000400

08001300 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001304:	4b14      	ldr	r3, [pc, #80]	@ (8001358 <MX_USART1_UART_Init+0x58>)
 8001306:	4a15      	ldr	r2, [pc, #84]	@ (800135c <MX_USART1_UART_Init+0x5c>)
 8001308:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800130a:	4b13      	ldr	r3, [pc, #76]	@ (8001358 <MX_USART1_UART_Init+0x58>)
 800130c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001310:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001312:	4b11      	ldr	r3, [pc, #68]	@ (8001358 <MX_USART1_UART_Init+0x58>)
 8001314:	2200      	movs	r2, #0
 8001316:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001318:	4b0f      	ldr	r3, [pc, #60]	@ (8001358 <MX_USART1_UART_Init+0x58>)
 800131a:	2200      	movs	r2, #0
 800131c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800131e:	4b0e      	ldr	r3, [pc, #56]	@ (8001358 <MX_USART1_UART_Init+0x58>)
 8001320:	2200      	movs	r2, #0
 8001322:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001324:	4b0c      	ldr	r3, [pc, #48]	@ (8001358 <MX_USART1_UART_Init+0x58>)
 8001326:	220c      	movs	r2, #12
 8001328:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800132a:	4b0b      	ldr	r3, [pc, #44]	@ (8001358 <MX_USART1_UART_Init+0x58>)
 800132c:	2200      	movs	r2, #0
 800132e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001330:	4b09      	ldr	r3, [pc, #36]	@ (8001358 <MX_USART1_UART_Init+0x58>)
 8001332:	2200      	movs	r2, #0
 8001334:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001336:	4b08      	ldr	r3, [pc, #32]	@ (8001358 <MX_USART1_UART_Init+0x58>)
 8001338:	2200      	movs	r2, #0
 800133a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800133c:	4b06      	ldr	r3, [pc, #24]	@ (8001358 <MX_USART1_UART_Init+0x58>)
 800133e:	2200      	movs	r2, #0
 8001340:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001342:	4805      	ldr	r0, [pc, #20]	@ (8001358 <MX_USART1_UART_Init+0x58>)
 8001344:	f003 fe0e 	bl	8004f64 <HAL_UART_Init>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800134e:	f000 f917 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	200002f4 	.word	0x200002f4
 800135c:	40013800 	.word	0x40013800

08001360 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001364:	4b14      	ldr	r3, [pc, #80]	@ (80013b8 <MX_USART2_UART_Init+0x58>)
 8001366:	4a15      	ldr	r2, [pc, #84]	@ (80013bc <MX_USART2_UART_Init+0x5c>)
 8001368:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800136a:	4b13      	ldr	r3, [pc, #76]	@ (80013b8 <MX_USART2_UART_Init+0x58>)
 800136c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001370:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001372:	4b11      	ldr	r3, [pc, #68]	@ (80013b8 <MX_USART2_UART_Init+0x58>)
 8001374:	2200      	movs	r2, #0
 8001376:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001378:	4b0f      	ldr	r3, [pc, #60]	@ (80013b8 <MX_USART2_UART_Init+0x58>)
 800137a:	2200      	movs	r2, #0
 800137c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800137e:	4b0e      	ldr	r3, [pc, #56]	@ (80013b8 <MX_USART2_UART_Init+0x58>)
 8001380:	2200      	movs	r2, #0
 8001382:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001384:	4b0c      	ldr	r3, [pc, #48]	@ (80013b8 <MX_USART2_UART_Init+0x58>)
 8001386:	220c      	movs	r2, #12
 8001388:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800138a:	4b0b      	ldr	r3, [pc, #44]	@ (80013b8 <MX_USART2_UART_Init+0x58>)
 800138c:	2200      	movs	r2, #0
 800138e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001390:	4b09      	ldr	r3, [pc, #36]	@ (80013b8 <MX_USART2_UART_Init+0x58>)
 8001392:	2200      	movs	r2, #0
 8001394:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001396:	4b08      	ldr	r3, [pc, #32]	@ (80013b8 <MX_USART2_UART_Init+0x58>)
 8001398:	2200      	movs	r2, #0
 800139a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800139c:	4b06      	ldr	r3, [pc, #24]	@ (80013b8 <MX_USART2_UART_Init+0x58>)
 800139e:	2200      	movs	r2, #0
 80013a0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013a2:	4805      	ldr	r0, [pc, #20]	@ (80013b8 <MX_USART2_UART_Init+0x58>)
 80013a4:	f003 fdde 	bl	8004f64 <HAL_UART_Init>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80013ae:	f000 f8e7 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	2000037c 	.word	0x2000037c
 80013bc:	40004400 	.word	0x40004400

080013c0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013c4:	4b14      	ldr	r3, [pc, #80]	@ (8001418 <MX_USART3_UART_Init+0x58>)
 80013c6:	4a15      	ldr	r2, [pc, #84]	@ (800141c <MX_USART3_UART_Init+0x5c>)
 80013c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80013ca:	4b13      	ldr	r3, [pc, #76]	@ (8001418 <MX_USART3_UART_Init+0x58>)
 80013cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013d2:	4b11      	ldr	r3, [pc, #68]	@ (8001418 <MX_USART3_UART_Init+0x58>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001418 <MX_USART3_UART_Init+0x58>)
 80013da:	2200      	movs	r2, #0
 80013dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80013de:	4b0e      	ldr	r3, [pc, #56]	@ (8001418 <MX_USART3_UART_Init+0x58>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001418 <MX_USART3_UART_Init+0x58>)
 80013e6:	220c      	movs	r2, #12
 80013e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001418 <MX_USART3_UART_Init+0x58>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013f0:	4b09      	ldr	r3, [pc, #36]	@ (8001418 <MX_USART3_UART_Init+0x58>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013f6:	4b08      	ldr	r3, [pc, #32]	@ (8001418 <MX_USART3_UART_Init+0x58>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013fc:	4b06      	ldr	r3, [pc, #24]	@ (8001418 <MX_USART3_UART_Init+0x58>)
 80013fe:	2200      	movs	r2, #0
 8001400:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001402:	4805      	ldr	r0, [pc, #20]	@ (8001418 <MX_USART3_UART_Init+0x58>)
 8001404:	f003 fdae 	bl	8004f64 <HAL_UART_Init>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800140e:	f000 f8b7 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20000404 	.word	0x20000404
 800141c:	40004800 	.word	0x40004800

08001420 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001426:	4b0c      	ldr	r3, [pc, #48]	@ (8001458 <MX_DMA_Init+0x38>)
 8001428:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800142a:	4a0b      	ldr	r2, [pc, #44]	@ (8001458 <MX_DMA_Init+0x38>)
 800142c:	f043 0301 	orr.w	r3, r3, #1
 8001430:	6493      	str	r3, [r2, #72]	@ 0x48
 8001432:	4b09      	ldr	r3, [pc, #36]	@ (8001458 <MX_DMA_Init+0x38>)
 8001434:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	607b      	str	r3, [r7, #4]
 800143c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800143e:	2200      	movs	r2, #0
 8001440:	2100      	movs	r1, #0
 8001442:	200d      	movs	r0, #13
 8001444:	f000 fdf3 	bl	800202e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001448:	200d      	movs	r0, #13
 800144a:	f000 fe0c 	bl	8002066 <HAL_NVIC_EnableIRQ>

}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40021000 	.word	0x40021000

0800145c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b08a      	sub	sp, #40	@ 0x28
 8001460:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001462:	f107 0314 	add.w	r3, r7, #20
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	609a      	str	r2, [r3, #8]
 800146e:	60da      	str	r2, [r3, #12]
 8001470:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001472:	4b40      	ldr	r3, [pc, #256]	@ (8001574 <MX_GPIO_Init+0x118>)
 8001474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001476:	4a3f      	ldr	r2, [pc, #252]	@ (8001574 <MX_GPIO_Init+0x118>)
 8001478:	f043 0304 	orr.w	r3, r3, #4
 800147c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800147e:	4b3d      	ldr	r3, [pc, #244]	@ (8001574 <MX_GPIO_Init+0x118>)
 8001480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001482:	f003 0304 	and.w	r3, r3, #4
 8001486:	613b      	str	r3, [r7, #16]
 8001488:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800148a:	4b3a      	ldr	r3, [pc, #232]	@ (8001574 <MX_GPIO_Init+0x118>)
 800148c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800148e:	4a39      	ldr	r2, [pc, #228]	@ (8001574 <MX_GPIO_Init+0x118>)
 8001490:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001494:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001496:	4b37      	ldr	r3, [pc, #220]	@ (8001574 <MX_GPIO_Init+0x118>)
 8001498:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800149a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a2:	4b34      	ldr	r3, [pc, #208]	@ (8001574 <MX_GPIO_Init+0x118>)
 80014a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014a6:	4a33      	ldr	r2, [pc, #204]	@ (8001574 <MX_GPIO_Init+0x118>)
 80014a8:	f043 0301 	orr.w	r3, r3, #1
 80014ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014ae:	4b31      	ldr	r3, [pc, #196]	@ (8001574 <MX_GPIO_Init+0x118>)
 80014b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	60bb      	str	r3, [r7, #8]
 80014b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ba:	4b2e      	ldr	r3, [pc, #184]	@ (8001574 <MX_GPIO_Init+0x118>)
 80014bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014be:	4a2d      	ldr	r2, [pc, #180]	@ (8001574 <MX_GPIO_Init+0x118>)
 80014c0:	f043 0302 	orr.w	r3, r3, #2
 80014c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014c6:	4b2b      	ldr	r3, [pc, #172]	@ (8001574 <MX_GPIO_Init+0x118>)
 80014c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	607b      	str	r3, [r7, #4]
 80014d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80014d2:	2200      	movs	r2, #0
 80014d4:	2120      	movs	r1, #32
 80014d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014da:	f001 fcbd 	bl	8002e58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80014de:	2200      	movs	r2, #0
 80014e0:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80014e4:	4824      	ldr	r0, [pc, #144]	@ (8001578 <MX_GPIO_Init+0x11c>)
 80014e6:	f001 fcb7 	bl	8002e58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_3;
 80014ea:	f242 0308 	movw	r3, #8200	@ 0x2008
 80014ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014f0:	2300      	movs	r3, #0
 80014f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	4619      	mov	r1, r3
 80014fe:	481f      	ldr	r0, [pc, #124]	@ (800157c <MX_GPIO_Init+0x120>)
 8001500:	f001 fb00 	bl	8002b04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001504:	2301      	movs	r3, #1
 8001506:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001508:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800150c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001512:	f107 0314 	add.w	r3, r7, #20
 8001516:	4619      	mov	r1, r3
 8001518:	4818      	ldr	r0, [pc, #96]	@ (800157c <MX_GPIO_Init+0x120>)
 800151a:	f001 faf3 	bl	8002b04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800151e:	2320      	movs	r3, #32
 8001520:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001522:	2301      	movs	r3, #1
 8001524:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001526:	2300      	movs	r3, #0
 8001528:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152a:	2300      	movs	r3, #0
 800152c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152e:	f107 0314 	add.w	r3, r7, #20
 8001532:	4619      	mov	r1, r3
 8001534:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001538:	f001 fae4 	bl	8002b04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800153c:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001540:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001542:	2301      	movs	r3, #1
 8001544:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154a:	2300      	movs	r3, #0
 800154c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800154e:	f107 0314 	add.w	r3, r7, #20
 8001552:	4619      	mov	r1, r3
 8001554:	4808      	ldr	r0, [pc, #32]	@ (8001578 <MX_GPIO_Init+0x11c>)
 8001556:	f001 fad5 	bl	8002b04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800155a:	2200      	movs	r2, #0
 800155c:	2100      	movs	r1, #0
 800155e:	2006      	movs	r0, #6
 8001560:	f000 fd65 	bl	800202e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001564:	2006      	movs	r0, #6
 8001566:	f000 fd7e 	bl	8002066 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800156a:	bf00      	nop
 800156c:	3728      	adds	r7, #40	@ 0x28
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40021000 	.word	0x40021000
 8001578:	48000400 	.word	0x48000400
 800157c:	48000800 	.word	0x48000800

08001580 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001584:	b672      	cpsid	i
}
 8001586:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001588:	bf00      	nop
 800158a:	e7fd      	b.n	8001588 <Error_Handler+0x8>

0800158c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001592:	4b0f      	ldr	r3, [pc, #60]	@ (80015d0 <HAL_MspInit+0x44>)
 8001594:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001596:	4a0e      	ldr	r2, [pc, #56]	@ (80015d0 <HAL_MspInit+0x44>)
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	6613      	str	r3, [r2, #96]	@ 0x60
 800159e:	4b0c      	ldr	r3, [pc, #48]	@ (80015d0 <HAL_MspInit+0x44>)
 80015a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	607b      	str	r3, [r7, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015aa:	4b09      	ldr	r3, [pc, #36]	@ (80015d0 <HAL_MspInit+0x44>)
 80015ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ae:	4a08      	ldr	r2, [pc, #32]	@ (80015d0 <HAL_MspInit+0x44>)
 80015b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80015b6:	4b06      	ldr	r3, [pc, #24]	@ (80015d0 <HAL_MspInit+0x44>)
 80015b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015be:	603b      	str	r3, [r7, #0]
 80015c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	40021000 	.word	0x40021000

080015d4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08a      	sub	sp, #40	@ 0x28
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015dc:	f107 0314 	add.w	r3, r7, #20
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a2a      	ldr	r2, [pc, #168]	@ (800169c <HAL_DAC_MspInit+0xc8>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d14e      	bne.n	8001694 <HAL_DAC_MspInit+0xc0>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80015f6:	4b2a      	ldr	r3, [pc, #168]	@ (80016a0 <HAL_DAC_MspInit+0xcc>)
 80015f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015fa:	4a29      	ldr	r2, [pc, #164]	@ (80016a0 <HAL_DAC_MspInit+0xcc>)
 80015fc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001600:	6593      	str	r3, [r2, #88]	@ 0x58
 8001602:	4b27      	ldr	r3, [pc, #156]	@ (80016a0 <HAL_DAC_MspInit+0xcc>)
 8001604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001606:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800160a:	613b      	str	r3, [r7, #16]
 800160c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800160e:	4b24      	ldr	r3, [pc, #144]	@ (80016a0 <HAL_DAC_MspInit+0xcc>)
 8001610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001612:	4a23      	ldr	r2, [pc, #140]	@ (80016a0 <HAL_DAC_MspInit+0xcc>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800161a:	4b21      	ldr	r3, [pc, #132]	@ (80016a0 <HAL_DAC_MspInit+0xcc>)
 800161c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001626:	2310      	movs	r3, #16
 8001628:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800162a:	2303      	movs	r3, #3
 800162c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001632:	f107 0314 	add.w	r3, r7, #20
 8001636:	4619      	mov	r1, r3
 8001638:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800163c:	f001 fa62 	bl	8002b04 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8001640:	4b18      	ldr	r3, [pc, #96]	@ (80016a4 <HAL_DAC_MspInit+0xd0>)
 8001642:	4a19      	ldr	r2, [pc, #100]	@ (80016a8 <HAL_DAC_MspInit+0xd4>)
 8001644:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8001646:	4b17      	ldr	r3, [pc, #92]	@ (80016a4 <HAL_DAC_MspInit+0xd0>)
 8001648:	2206      	movs	r2, #6
 800164a:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800164c:	4b15      	ldr	r3, [pc, #84]	@ (80016a4 <HAL_DAC_MspInit+0xd0>)
 800164e:	2210      	movs	r2, #16
 8001650:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001652:	4b14      	ldr	r3, [pc, #80]	@ (80016a4 <HAL_DAC_MspInit+0xd0>)
 8001654:	2200      	movs	r2, #0
 8001656:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001658:	4b12      	ldr	r3, [pc, #72]	@ (80016a4 <HAL_DAC_MspInit+0xd0>)
 800165a:	2280      	movs	r2, #128	@ 0x80
 800165c:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800165e:	4b11      	ldr	r3, [pc, #68]	@ (80016a4 <HAL_DAC_MspInit+0xd0>)
 8001660:	2200      	movs	r2, #0
 8001662:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001664:	4b0f      	ldr	r3, [pc, #60]	@ (80016a4 <HAL_DAC_MspInit+0xd0>)
 8001666:	2200      	movs	r2, #0
 8001668:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_NORMAL;
 800166a:	4b0e      	ldr	r3, [pc, #56]	@ (80016a4 <HAL_DAC_MspInit+0xd0>)
 800166c:	2200      	movs	r2, #0
 800166e:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001670:	4b0c      	ldr	r3, [pc, #48]	@ (80016a4 <HAL_DAC_MspInit+0xd0>)
 8001672:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001676:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8001678:	480a      	ldr	r0, [pc, #40]	@ (80016a4 <HAL_DAC_MspInit+0xd0>)
 800167a:	f000 ffcd 	bl	8002618 <HAL_DMA_Init>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <HAL_DAC_MspInit+0xb4>
    {
      Error_Handler();
 8001684:	f7ff ff7c 	bl	8001580 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4a06      	ldr	r2, [pc, #24]	@ (80016a4 <HAL_DAC_MspInit+0xd0>)
 800168c:	609a      	str	r2, [r3, #8]
 800168e:	4a05      	ldr	r2, [pc, #20]	@ (80016a4 <HAL_DAC_MspInit+0xd0>)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8001694:	bf00      	nop
 8001696:	3728      	adds	r7, #40	@ 0x28
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40007400 	.word	0x40007400
 80016a0:	40021000 	.word	0x40021000
 80016a4:	20000204 	.word	0x20000204
 80016a8:	40020030 	.word	0x40020030

080016ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016bc:	d10c      	bne.n	80016d8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016be:	4b15      	ldr	r3, [pc, #84]	@ (8001714 <HAL_TIM_Base_MspInit+0x68>)
 80016c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016c2:	4a14      	ldr	r2, [pc, #80]	@ (8001714 <HAL_TIM_Base_MspInit+0x68>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80016ca:	4b12      	ldr	r3, [pc, #72]	@ (8001714 <HAL_TIM_Base_MspInit+0x68>)
 80016cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80016d6:	e018      	b.n	800170a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a0e      	ldr	r2, [pc, #56]	@ (8001718 <HAL_TIM_Base_MspInit+0x6c>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d113      	bne.n	800170a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001714 <HAL_TIM_Base_MspInit+0x68>)
 80016e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016e6:	4a0b      	ldr	r2, [pc, #44]	@ (8001714 <HAL_TIM_Base_MspInit+0x68>)
 80016e8:	f043 0302 	orr.w	r3, r3, #2
 80016ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80016ee:	4b09      	ldr	r3, [pc, #36]	@ (8001714 <HAL_TIM_Base_MspInit+0x68>)
 80016f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	60bb      	str	r3, [r7, #8]
 80016f8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80016fa:	2200      	movs	r2, #0
 80016fc:	2100      	movs	r1, #0
 80016fe:	201d      	movs	r0, #29
 8001700:	f000 fc95 	bl	800202e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001704:	201d      	movs	r0, #29
 8001706:	f000 fcae 	bl	8002066 <HAL_NVIC_EnableIRQ>
}
 800170a:	bf00      	nop
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40021000 	.word	0x40021000
 8001718:	40000400 	.word	0x40000400

0800171c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b0b0      	sub	sp, #192	@ 0xc0
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001724:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	60da      	str	r2, [r3, #12]
 8001732:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001734:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001738:	2288      	movs	r2, #136	@ 0x88
 800173a:	2100      	movs	r1, #0
 800173c:	4618      	mov	r0, r3
 800173e:	f005 fe89 	bl	8007454 <memset>
  if(huart->Instance==USART1)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a67      	ldr	r2, [pc, #412]	@ (80018e4 <HAL_UART_MspInit+0x1c8>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d13d      	bne.n	80017c8 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800174c:	2301      	movs	r3, #1
 800174e:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001750:	2300      	movs	r3, #0
 8001752:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001754:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001758:	4618      	mov	r0, r3
 800175a:	f002 fa97 	bl	8003c8c <HAL_RCCEx_PeriphCLKConfig>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001764:	f7ff ff0c 	bl	8001580 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001768:	4b5f      	ldr	r3, [pc, #380]	@ (80018e8 <HAL_UART_MspInit+0x1cc>)
 800176a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800176c:	4a5e      	ldr	r2, [pc, #376]	@ (80018e8 <HAL_UART_MspInit+0x1cc>)
 800176e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001772:	6613      	str	r3, [r2, #96]	@ 0x60
 8001774:	4b5c      	ldr	r3, [pc, #368]	@ (80018e8 <HAL_UART_MspInit+0x1cc>)
 8001776:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001778:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800177c:	623b      	str	r3, [r7, #32]
 800177e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001780:	4b59      	ldr	r3, [pc, #356]	@ (80018e8 <HAL_UART_MspInit+0x1cc>)
 8001782:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001784:	4a58      	ldr	r2, [pc, #352]	@ (80018e8 <HAL_UART_MspInit+0x1cc>)
 8001786:	f043 0301 	orr.w	r3, r3, #1
 800178a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800178c:	4b56      	ldr	r3, [pc, #344]	@ (80018e8 <HAL_UART_MspInit+0x1cc>)
 800178e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001790:	f003 0301 	and.w	r3, r3, #1
 8001794:	61fb      	str	r3, [r7, #28]
 8001796:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001798:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800179c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a0:	2302      	movs	r3, #2
 80017a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a6:	2300      	movs	r3, #0
 80017a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ac:	2303      	movs	r3, #3
 80017ae:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017b2:	2307      	movs	r3, #7
 80017b4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80017bc:	4619      	mov	r1, r3
 80017be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017c2:	f001 f99f 	bl	8002b04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80017c6:	e089      	b.n	80018dc <HAL_UART_MspInit+0x1c0>
  else if(huart->Instance==USART2)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a47      	ldr	r2, [pc, #284]	@ (80018ec <HAL_UART_MspInit+0x1d0>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d144      	bne.n	800185c <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80017d2:	2302      	movs	r3, #2
 80017d4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80017d6:	2300      	movs	r3, #0
 80017d8:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017de:	4618      	mov	r0, r3
 80017e0:	f002 fa54 	bl	8003c8c <HAL_RCCEx_PeriphCLKConfig>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <HAL_UART_MspInit+0xd2>
      Error_Handler();
 80017ea:	f7ff fec9 	bl	8001580 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80017ee:	4b3e      	ldr	r3, [pc, #248]	@ (80018e8 <HAL_UART_MspInit+0x1cc>)
 80017f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017f2:	4a3d      	ldr	r2, [pc, #244]	@ (80018e8 <HAL_UART_MspInit+0x1cc>)
 80017f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80017fa:	4b3b      	ldr	r3, [pc, #236]	@ (80018e8 <HAL_UART_MspInit+0x1cc>)
 80017fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001802:	61bb      	str	r3, [r7, #24]
 8001804:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001806:	4b38      	ldr	r3, [pc, #224]	@ (80018e8 <HAL_UART_MspInit+0x1cc>)
 8001808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800180a:	4a37      	ldr	r2, [pc, #220]	@ (80018e8 <HAL_UART_MspInit+0x1cc>)
 800180c:	f043 0301 	orr.w	r3, r3, #1
 8001810:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001812:	4b35      	ldr	r3, [pc, #212]	@ (80018e8 <HAL_UART_MspInit+0x1cc>)
 8001814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	617b      	str	r3, [r7, #20]
 800181c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800181e:	230c      	movs	r3, #12
 8001820:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001824:	2302      	movs	r3, #2
 8001826:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	2300      	movs	r3, #0
 800182c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001830:	2303      	movs	r3, #3
 8001832:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001836:	2307      	movs	r3, #7
 8001838:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001840:	4619      	mov	r1, r3
 8001842:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001846:	f001 f95d 	bl	8002b04 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800184a:	2200      	movs	r2, #0
 800184c:	2100      	movs	r1, #0
 800184e:	2026      	movs	r0, #38	@ 0x26
 8001850:	f000 fbed 	bl	800202e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001854:	2026      	movs	r0, #38	@ 0x26
 8001856:	f000 fc06 	bl	8002066 <HAL_NVIC_EnableIRQ>
}
 800185a:	e03f      	b.n	80018dc <HAL_UART_MspInit+0x1c0>
  else if(huart->Instance==USART3)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a23      	ldr	r2, [pc, #140]	@ (80018f0 <HAL_UART_MspInit+0x1d4>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d13a      	bne.n	80018dc <HAL_UART_MspInit+0x1c0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001866:	2304      	movs	r3, #4
 8001868:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800186a:	2300      	movs	r3, #0
 800186c:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800186e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001872:	4618      	mov	r0, r3
 8001874:	f002 fa0a 	bl	8003c8c <HAL_RCCEx_PeriphCLKConfig>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <HAL_UART_MspInit+0x166>
      Error_Handler();
 800187e:	f7ff fe7f 	bl	8001580 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001882:	4b19      	ldr	r3, [pc, #100]	@ (80018e8 <HAL_UART_MspInit+0x1cc>)
 8001884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001886:	4a18      	ldr	r2, [pc, #96]	@ (80018e8 <HAL_UART_MspInit+0x1cc>)
 8001888:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800188c:	6593      	str	r3, [r2, #88]	@ 0x58
 800188e:	4b16      	ldr	r3, [pc, #88]	@ (80018e8 <HAL_UART_MspInit+0x1cc>)
 8001890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001892:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001896:	613b      	str	r3, [r7, #16]
 8001898:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800189a:	4b13      	ldr	r3, [pc, #76]	@ (80018e8 <HAL_UART_MspInit+0x1cc>)
 800189c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800189e:	4a12      	ldr	r2, [pc, #72]	@ (80018e8 <HAL_UART_MspInit+0x1cc>)
 80018a0:	f043 0304 	orr.w	r3, r3, #4
 80018a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018a6:	4b10      	ldr	r3, [pc, #64]	@ (80018e8 <HAL_UART_MspInit+0x1cc>)
 80018a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018aa:	f003 0304 	and.w	r3, r3, #4
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80018b2:	2330      	movs	r3, #48	@ 0x30
 80018b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b8:	2302      	movs	r3, #2
 80018ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018be:	2300      	movs	r3, #0
 80018c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c4:	2303      	movs	r3, #3
 80018c6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018ca:	2307      	movs	r3, #7
 80018cc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018d0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80018d4:	4619      	mov	r1, r3
 80018d6:	4807      	ldr	r0, [pc, #28]	@ (80018f4 <HAL_UART_MspInit+0x1d8>)
 80018d8:	f001 f914 	bl	8002b04 <HAL_GPIO_Init>
}
 80018dc:	bf00      	nop
 80018de:	37c0      	adds	r7, #192	@ 0xc0
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40013800 	.word	0x40013800
 80018e8:	40021000 	.word	0x40021000
 80018ec:	40004400 	.word	0x40004400
 80018f0:	40004800 	.word	0x40004800
 80018f4:	48000800 	.word	0x48000800

080018f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018fc:	bf00      	nop
 80018fe:	e7fd      	b.n	80018fc <NMI_Handler+0x4>

08001900 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001904:	bf00      	nop
 8001906:	e7fd      	b.n	8001904 <HardFault_Handler+0x4>

08001908 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800190c:	bf00      	nop
 800190e:	e7fd      	b.n	800190c <MemManage_Handler+0x4>

08001910 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001914:	bf00      	nop
 8001916:	e7fd      	b.n	8001914 <BusFault_Handler+0x4>

08001918 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800191c:	bf00      	nop
 800191e:	e7fd      	b.n	800191c <UsageFault_Handler+0x4>

08001920 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001924:	bf00      	nop
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr

0800192e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800192e:	b480      	push	{r7}
 8001930:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001940:	bf00      	nop
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800194e:	f000 fa4f 	bl	8001df0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800195e:	2001      	movs	r0, #1
 8001960:	f001 faac 	bl	8002ebc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  
  uint8_t audio_cue = rx_data_lora[11];
 8001964:	4b33      	ldr	r3, [pc, #204]	@ (8001a34 <EXTI0_IRQHandler+0xdc>)
 8001966:	7adb      	ldrb	r3, [r3, #11]
 8001968:	71fb      	strb	r3, [r7, #7]
  printf("\r\nAudio Cue: %d\n\r", audio_cue);
 800196a:	79fb      	ldrb	r3, [r7, #7]
 800196c:	4619      	mov	r1, r3
 800196e:	4832      	ldr	r0, [pc, #200]	@ (8001a38 <EXTI0_IRQHandler+0xe0>)
 8001970:	f005 fc08 	bl	8007184 <iprintf>

  if(audio_cue == 'A'){
 8001974:	79fb      	ldrb	r3, [r7, #7]
 8001976:	2b41      	cmp	r3, #65	@ 0x41
 8001978:	d10e      	bne.n	8001998 <EXTI0_IRQHandler+0x40>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 800197a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800197e:	482f      	ldr	r0, [pc, #188]	@ (8001a3c <EXTI0_IRQHandler+0xe4>)
 8001980:	f001 fa82 	bl	8002e88 <HAL_GPIO_TogglePin>
    HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint8_t*)whistle, 24580, DAC_ALIGN_8B_R);
 8001984:	2308      	movs	r3, #8
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	f246 0304 	movw	r3, #24580	@ 0x6004
 800198c:	4a2c      	ldr	r2, [pc, #176]	@ (8001a40 <EXTI0_IRQHandler+0xe8>)
 800198e:	2100      	movs	r1, #0
 8001990:	482c      	ldr	r0, [pc, #176]	@ (8001a44 <EXTI0_IRQHandler+0xec>)
 8001992:	f000 fba5 	bl	80020e0 <HAL_DAC_Start_DMA>
 8001996:	e019      	b.n	80019cc <EXTI0_IRQHandler+0x74>
  }
  else if(audio_cue == 'B'){
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	2b42      	cmp	r3, #66	@ 0x42
 800199c:	d10e      	bne.n	80019bc <EXTI0_IRQHandler+0x64>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 800199e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80019a2:	4826      	ldr	r0, [pc, #152]	@ (8001a3c <EXTI0_IRQHandler+0xe4>)
 80019a4:	f001 fa70 	bl	8002e88 <HAL_GPIO_TogglePin>
    HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint8_t*)stopCommand, 18200, DAC_ALIGN_8B_R);
 80019a8:	2308      	movs	r3, #8
 80019aa:	9300      	str	r3, [sp, #0]
 80019ac:	f244 7318 	movw	r3, #18200	@ 0x4718
 80019b0:	4a25      	ldr	r2, [pc, #148]	@ (8001a48 <EXTI0_IRQHandler+0xf0>)
 80019b2:	2100      	movs	r1, #0
 80019b4:	4823      	ldr	r0, [pc, #140]	@ (8001a44 <EXTI0_IRQHandler+0xec>)
 80019b6:	f000 fb93 	bl	80020e0 <HAL_DAC_Start_DMA>
 80019ba:	e007      	b.n	80019cc <EXTI0_IRQHandler+0x74>
  }
  else if(audio_cue == 'C'){
 80019bc:	79fb      	ldrb	r3, [r7, #7]
 80019be:	2b43      	cmp	r3, #67	@ 0x43
 80019c0:	d104      	bne.n	80019cc <EXTI0_IRQHandler+0x74>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80019c2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80019c6:	481d      	ldr	r0, [pc, #116]	@ (8001a3c <EXTI0_IRQHandler+0xe4>)
 80019c8:	f001 fa5e 	bl	8002e88 <HAL_GPIO_TogglePin>
  }

  bzero(tx_data_lora, 240);
 80019cc:	4b1f      	ldr	r3, [pc, #124]	@ (8001a4c <EXTI0_IRQHandler+0xf4>)
 80019ce:	4618      	mov	r0, r3
 80019d0:	23f0      	movs	r3, #240	@ 0xf0
 80019d2:	461a      	mov	r2, r3
 80019d4:	2100      	movs	r1, #0
 80019d6:	f005 fd3d 	bl	8007454 <memset>
  bzero(rx_data_lora, 240);
 80019da:	4b16      	ldr	r3, [pc, #88]	@ (8001a34 <EXTI0_IRQHandler+0xdc>)
 80019dc:	4618      	mov	r0, r3
 80019de:	23f0      	movs	r3, #240	@ 0xf0
 80019e0:	461a      	mov	r2, r3
 80019e2:	2100      	movs	r1, #0
 80019e4:	f005 fd36 	bl	8007454 <memset>
  memcpy(tx_data_lora, "AT+SEND=123,8,Received\r\n", 24); //24 is size of string without /0
 80019e8:	2218      	movs	r2, #24
 80019ea:	4919      	ldr	r1, [pc, #100]	@ (8001a50 <EXTI0_IRQHandler+0xf8>)
 80019ec:	4817      	ldr	r0, [pc, #92]	@ (8001a4c <EXTI0_IRQHandler+0xf4>)
 80019ee:	f005 fdc6 	bl	800757e <memcpy>
  // printf("Sending\r\n");
  HAL_UART_Transmit(&huart3, tx_data_lora, 24, 1000);
 80019f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019f6:	2218      	movs	r2, #24
 80019f8:	4914      	ldr	r1, [pc, #80]	@ (8001a4c <EXTI0_IRQHandler+0xf4>)
 80019fa:	4816      	ldr	r0, [pc, #88]	@ (8001a54 <EXTI0_IRQHandler+0xfc>)
 80019fc:	f003 fb00 	bl	8005000 <HAL_UART_Transmit>
  while(HAL_UART_Receive(&huart3, rx_data_lora, 5, 1000)!=HAL_OK){} //Wait to receive "+OK"
 8001a00:	bf00      	nop
 8001a02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a06:	2205      	movs	r2, #5
 8001a08:	490a      	ldr	r1, [pc, #40]	@ (8001a34 <EXTI0_IRQHandler+0xdc>)
 8001a0a:	4812      	ldr	r0, [pc, #72]	@ (8001a54 <EXTI0_IRQHandler+0xfc>)
 8001a0c:	f003 fb81 	bl	8005112 <HAL_UART_Receive>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d1f5      	bne.n	8001a02 <EXTI0_IRQHandler+0xaa>
  HAL_UART_Transmit(&huart2, rx_data_lora, 5, 10);
 8001a16:	230a      	movs	r3, #10
 8001a18:	2205      	movs	r2, #5
 8001a1a:	4906      	ldr	r1, [pc, #24]	@ (8001a34 <EXTI0_IRQHandler+0xdc>)
 8001a1c:	480e      	ldr	r0, [pc, #56]	@ (8001a58 <EXTI0_IRQHandler+0x100>)
 8001a1e:	f003 faef 	bl	8005000 <HAL_UART_Transmit>

  audio_cue = 0;
 8001a22:	2300      	movs	r3, #0
 8001a24:	71fb      	strb	r3, [r7, #7]
  HAL_IWDG_Refresh(&hiwdg);
 8001a26:	480d      	ldr	r0, [pc, #52]	@ (8001a5c <EXTI0_IRQHandler+0x104>)
 8001a28:	f001 fabc 	bl	8002fa4 <HAL_IWDG_Refresh>
  /* USER CODE END EXTI0_IRQn 1 */
}
 8001a2c:	bf00      	nop
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	2000057c 	.word	0x2000057c
 8001a38:	0800abb4 	.word	0x0800abb4
 8001a3c:	48000400 	.word	0x48000400
 8001a40:	0800f370 	.word	0x0800f370
 8001a44:	200001f0 	.word	0x200001f0
 8001a48:	0800ac10 	.word	0x0800ac10
 8001a4c:	2000048c 	.word	0x2000048c
 8001a50:	0800abc8 	.word	0x0800abc8
 8001a54:	20000404 	.word	0x20000404
 8001a58:	2000037c 	.word	0x2000037c
 8001a5c:	2000024c 	.word	0x2000024c

08001a60 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8001a64:	4802      	ldr	r0, [pc, #8]	@ (8001a70 <DMA1_Channel3_IRQHandler+0x10>)
 8001a66:	f000 ff6e 	bl	8002946 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	20000204 	.word	0x20000204

08001a74 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a7a:	4824      	ldr	r0, [pc, #144]	@ (8001b0c <TIM3_IRQHandler+0x98>)
 8001a7c:	f002 fe8a 	bl	8004794 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001a80:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001a84:	4822      	ldr	r0, [pc, #136]	@ (8001b10 <TIM3_IRQHandler+0x9c>)
 8001a86:	f001 f9ff 	bl	8002e88 <HAL_GPIO_TogglePin>

  //Uncomment to use GPS
  bzero(rx_data_gps, GPS_BUF_SIZE); //clear tx buffer
 8001a8a:	4b22      	ldr	r3, [pc, #136]	@ (8001b14 <TIM3_IRQHandler+0xa0>)
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8001a92:	461a      	mov	r2, r3
 8001a94:	2100      	movs	r1, #0
 8001a96:	f005 fcdd 	bl	8007454 <memset>
  // printf("GPS DATA: \n\r");
  while(HAL_UART_Receive(&huart1, rx_data_gps, GPS_BUF_SIZE, 2000)!=HAL_OK){} //wait until received
 8001a9a:	bf00      	nop
 8001a9c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001aa0:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001aa4:	491b      	ldr	r1, [pc, #108]	@ (8001b14 <TIM3_IRQHandler+0xa0>)
 8001aa6:	481c      	ldr	r0, [pc, #112]	@ (8001b18 <TIM3_IRQHandler+0xa4>)
 8001aa8:	f003 fb33 	bl	8005112 <HAL_UART_Receive>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1f4      	bne.n	8001a9c <TIM3_IRQHandler+0x28>
  // HAL_UART_Transmit(&huart2, rx_data_gps, GPS_BUF_SIZE, 10); //print received data to terminal  
  // printf("\n\n\r");

  char *gpgga_loc = strstr((char *)rx_data_gps, "$GPGGA");
 8001ab2:	491a      	ldr	r1, [pc, #104]	@ (8001b1c <TIM3_IRQHandler+0xa8>)
 8001ab4:	4817      	ldr	r0, [pc, #92]	@ (8001b14 <TIM3_IRQHandler+0xa0>)
 8001ab6:	f005 fcd5 	bl	8007464 <strstr>
 8001aba:	6078      	str	r0, [r7, #4]
  
  bzero(gpgga, 38); //clear gpgga buffer
 8001abc:	4b18      	ldr	r3, [pc, #96]	@ (8001b20 <TIM3_IRQHandler+0xac>)
 8001abe:	4618      	mov	r0, r3
 8001ac0:	2326      	movs	r3, #38	@ 0x26
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	f005 fcc5 	bl	8007454 <memset>
  memcpy(gpgga, gpgga_loc, 38); //copy command to tx buffer
 8001aca:	2226      	movs	r2, #38	@ 0x26
 8001acc:	6879      	ldr	r1, [r7, #4]
 8001ace:	4814      	ldr	r0, [pc, #80]	@ (8001b20 <TIM3_IRQHandler+0xac>)
 8001ad0:	f005 fd55 	bl	800757e <memcpy>
  if(gpgga_loc != NULL){
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d009      	beq.n	8001aee <TIM3_IRQHandler+0x7a>
    printf("GPGGA DATA: %s\n\r", gpgga);
 8001ada:	4911      	ldr	r1, [pc, #68]	@ (8001b20 <TIM3_IRQHandler+0xac>)
 8001adc:	4811      	ldr	r0, [pc, #68]	@ (8001b24 <TIM3_IRQHandler+0xb0>)
 8001ade:	f005 fb51 	bl	8007184 <iprintf>

    // char txsend[55] = "AT+SEND=123,38,";
    // strcat(txsend, gpgga);
    // strcat(txsend, "\r\n");
    // printf("RX: %s", txsend);
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8001ae2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001ae6:	480a      	ldr	r0, [pc, #40]	@ (8001b10 <TIM3_IRQHandler+0x9c>)
 8001ae8:	f001 f9ce 	bl	8002e88 <HAL_GPIO_TogglePin>
 8001aec:	e007      	b.n	8001afe <TIM3_IRQHandler+0x8a>
    // while(HAL_UART_Receive(&huart3, rx_data_lora, 5, 1000)!=HAL_OK){}
    // HAL_UART_Transmit(&huart2, rx_data_lora, 5, 10);
    // printf("Done Sending\r\n");
  }
  else{
    printf("None found\n\r");
 8001aee:	480e      	ldr	r0, [pc, #56]	@ (8001b28 <TIM3_IRQHandler+0xb4>)
 8001af0:	f005 fb48 	bl	8007184 <iprintf>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);
 8001af4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001af8:	4805      	ldr	r0, [pc, #20]	@ (8001b10 <TIM3_IRQHandler+0x9c>)
 8001afa:	f001 f9c5 	bl	8002e88 <HAL_GPIO_TogglePin>
  }
  HAL_IWDG_Refresh(&hiwdg);
 8001afe:	480b      	ldr	r0, [pc, #44]	@ (8001b2c <TIM3_IRQHandler+0xb8>)
 8001b00:	f001 fa50 	bl	8002fa4 <HAL_IWDG_Refresh>
  /* USER CODE END TIM3_IRQn 1 */
}
 8001b04:	bf00      	nop
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	200002a8 	.word	0x200002a8
 8001b10:	48000400 	.word	0x48000400
 8001b14:	2000066c 	.word	0x2000066c
 8001b18:	200002f4 	.word	0x200002f4
 8001b1c:	0800abe4 	.word	0x0800abe4
 8001b20:	20000798 	.word	0x20000798
 8001b24:	0800abec 	.word	0x0800abec
 8001b28:	0800ac00 	.word	0x0800ac00
 8001b2c:	2000024c 	.word	0x2000024c

08001b30 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b34:	4802      	ldr	r0, [pc, #8]	@ (8001b40 <USART2_IRQHandler+0x10>)
 8001b36:	f003 fbb5 	bl	80052a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	2000037c 	.word	0x2000037c

08001b44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  return 1;
 8001b48:	2301      	movs	r3, #1
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <_kill>:

int _kill(int pid, int sig)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b5e:	f005 fce1 	bl	8007524 <__errno>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2216      	movs	r2, #22
 8001b66:	601a      	str	r2, [r3, #0]
  return -1;
 8001b68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <_exit>:

void _exit (int status)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f7ff ffe7 	bl	8001b54 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b86:	bf00      	nop
 8001b88:	e7fd      	b.n	8001b86 <_exit+0x12>

08001b8a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b086      	sub	sp, #24
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	60f8      	str	r0, [r7, #12]
 8001b92:	60b9      	str	r1, [r7, #8]
 8001b94:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b96:	2300      	movs	r3, #0
 8001b98:	617b      	str	r3, [r7, #20]
 8001b9a:	e00a      	b.n	8001bb2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b9c:	f3af 8000 	nop.w
 8001ba0:	4601      	mov	r1, r0
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	1c5a      	adds	r2, r3, #1
 8001ba6:	60ba      	str	r2, [r7, #8]
 8001ba8:	b2ca      	uxtb	r2, r1
 8001baa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	617b      	str	r3, [r7, #20]
 8001bb2:	697a      	ldr	r2, [r7, #20]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	dbf0      	blt.n	8001b9c <_read+0x12>
  }

  return len;
 8001bba:	687b      	ldr	r3, [r7, #4]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3718      	adds	r7, #24
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	617b      	str	r3, [r7, #20]
 8001bd4:	e009      	b.n	8001bea <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	1c5a      	adds	r2, r3, #1
 8001bda:	60ba      	str	r2, [r7, #8]
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff fa00 	bl	8000fe4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	3301      	adds	r3, #1
 8001be8:	617b      	str	r3, [r7, #20]
 8001bea:	697a      	ldr	r2, [r7, #20]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	dbf1      	blt.n	8001bd6 <_write+0x12>
  }
  return len;
 8001bf2:	687b      	ldr	r3, [r7, #4]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3718      	adds	r7, #24
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <_close>:

int _close(int file)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c24:	605a      	str	r2, [r3, #4]
  return 0;
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <_isatty>:

int _isatty(int file)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c3c:	2301      	movs	r3, #1
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr

08001c4a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	b085      	sub	sp, #20
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	60f8      	str	r0, [r7, #12]
 8001c52:	60b9      	str	r1, [r7, #8]
 8001c54:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3714      	adds	r7, #20
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c6c:	4a14      	ldr	r2, [pc, #80]	@ (8001cc0 <_sbrk+0x5c>)
 8001c6e:	4b15      	ldr	r3, [pc, #84]	@ (8001cc4 <_sbrk+0x60>)
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c78:	4b13      	ldr	r3, [pc, #76]	@ (8001cc8 <_sbrk+0x64>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d102      	bne.n	8001c86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c80:	4b11      	ldr	r3, [pc, #68]	@ (8001cc8 <_sbrk+0x64>)
 8001c82:	4a12      	ldr	r2, [pc, #72]	@ (8001ccc <_sbrk+0x68>)
 8001c84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c86:	4b10      	ldr	r3, [pc, #64]	@ (8001cc8 <_sbrk+0x64>)
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d207      	bcs.n	8001ca4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c94:	f005 fc46 	bl	8007524 <__errno>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	220c      	movs	r2, #12
 8001c9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca2:	e009      	b.n	8001cb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ca4:	4b08      	ldr	r3, [pc, #32]	@ (8001cc8 <_sbrk+0x64>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001caa:	4b07      	ldr	r3, [pc, #28]	@ (8001cc8 <_sbrk+0x64>)
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	4a05      	ldr	r2, [pc, #20]	@ (8001cc8 <_sbrk+0x64>)
 8001cb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3718      	adds	r7, #24
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	20018000 	.word	0x20018000
 8001cc4:	00000400 	.word	0x00000400
 8001cc8:	200007c4 	.word	0x200007c4
 8001ccc:	20000918 	.word	0x20000918

08001cd0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001cd4:	4b06      	ldr	r3, [pc, #24]	@ (8001cf0 <SystemInit+0x20>)
 8001cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cda:	4a05      	ldr	r2, [pc, #20]	@ (8001cf0 <SystemInit+0x20>)
 8001cdc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ce0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001ce4:	bf00      	nop
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	e000ed00 	.word	0xe000ed00

08001cf4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001cf4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d2c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001cf8:	f7ff ffea 	bl	8001cd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cfc:	480c      	ldr	r0, [pc, #48]	@ (8001d30 <LoopForever+0x6>)
  ldr r1, =_edata
 8001cfe:	490d      	ldr	r1, [pc, #52]	@ (8001d34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d00:	4a0d      	ldr	r2, [pc, #52]	@ (8001d38 <LoopForever+0xe>)
  movs r3, #0
 8001d02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d04:	e002      	b.n	8001d0c <LoopCopyDataInit>

08001d06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d0a:	3304      	adds	r3, #4

08001d0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d10:	d3f9      	bcc.n	8001d06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d12:	4a0a      	ldr	r2, [pc, #40]	@ (8001d3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d14:	4c0a      	ldr	r4, [pc, #40]	@ (8001d40 <LoopForever+0x16>)
  movs r3, #0
 8001d16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d18:	e001      	b.n	8001d1e <LoopFillZerobss>

08001d1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d1c:	3204      	adds	r2, #4

08001d1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d20:	d3fb      	bcc.n	8001d1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d22:	f005 fc05 	bl	8007530 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d26:	f7ff f96f 	bl	8001008 <main>

08001d2a <LoopForever>:

LoopForever:
    b LoopForever
 8001d2a:	e7fe      	b.n	8001d2a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001d2c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001d30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d34:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001d38:	080157b0 	.word	0x080157b0
  ldr r2, =_sbss
 8001d3c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001d40:	20000918 	.word	0x20000918

08001d44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d44:	e7fe      	b.n	8001d44 <ADC1_2_IRQHandler>

08001d46 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b082      	sub	sp, #8
 8001d4a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d50:	2003      	movs	r0, #3
 8001d52:	f000 f961 	bl	8002018 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d56:	200f      	movs	r0, #15
 8001d58:	f000 f80e 	bl	8001d78 <HAL_InitTick>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d002      	beq.n	8001d68 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	71fb      	strb	r3, [r7, #7]
 8001d66:	e001      	b.n	8001d6c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d68:	f7ff fc10 	bl	800158c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d6c:	79fb      	ldrb	r3, [r7, #7]
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
	...

08001d78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d80:	2300      	movs	r3, #0
 8001d82:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001d84:	4b17      	ldr	r3, [pc, #92]	@ (8001de4 <HAL_InitTick+0x6c>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d023      	beq.n	8001dd4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001d8c:	4b16      	ldr	r3, [pc, #88]	@ (8001de8 <HAL_InitTick+0x70>)
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	4b14      	ldr	r3, [pc, #80]	@ (8001de4 <HAL_InitTick+0x6c>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	4619      	mov	r1, r3
 8001d96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da2:	4618      	mov	r0, r3
 8001da4:	f000 f96d 	bl	8002082 <HAL_SYSTICK_Config>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d10f      	bne.n	8001dce <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2b0f      	cmp	r3, #15
 8001db2:	d809      	bhi.n	8001dc8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001db4:	2200      	movs	r2, #0
 8001db6:	6879      	ldr	r1, [r7, #4]
 8001db8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dbc:	f000 f937 	bl	800202e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dc0:	4a0a      	ldr	r2, [pc, #40]	@ (8001dec <HAL_InitTick+0x74>)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6013      	str	r3, [r2, #0]
 8001dc6:	e007      	b.n	8001dd8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	73fb      	strb	r3, [r7, #15]
 8001dcc:	e004      	b.n	8001dd8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	73fb      	strb	r3, [r7, #15]
 8001dd2:	e001      	b.n	8001dd8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	20000008 	.word	0x20000008
 8001de8:	20000000 	.word	0x20000000
 8001dec:	20000004 	.word	0x20000004

08001df0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001df4:	4b06      	ldr	r3, [pc, #24]	@ (8001e10 <HAL_IncTick+0x20>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	461a      	mov	r2, r3
 8001dfa:	4b06      	ldr	r3, [pc, #24]	@ (8001e14 <HAL_IncTick+0x24>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4413      	add	r3, r2
 8001e00:	4a04      	ldr	r2, [pc, #16]	@ (8001e14 <HAL_IncTick+0x24>)
 8001e02:	6013      	str	r3, [r2, #0]
}
 8001e04:	bf00      	nop
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	20000008 	.word	0x20000008
 8001e14:	200007c8 	.word	0x200007c8

08001e18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e1c:	4b03      	ldr	r3, [pc, #12]	@ (8001e2c <HAL_GetTick+0x14>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	200007c8 	.word	0x200007c8

08001e30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e38:	f7ff ffee 	bl	8001e18 <HAL_GetTick>
 8001e3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e48:	d005      	beq.n	8001e56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001e4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e74 <HAL_Delay+0x44>)
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	461a      	mov	r2, r3
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	4413      	add	r3, r2
 8001e54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e56:	bf00      	nop
 8001e58:	f7ff ffde 	bl	8001e18 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d8f7      	bhi.n	8001e58 <HAL_Delay+0x28>
  {
  }
}
 8001e68:	bf00      	nop
 8001e6a:	bf00      	nop
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	20000008 	.word	0x20000008

08001e78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e88:	4b0c      	ldr	r3, [pc, #48]	@ (8001ebc <__NVIC_SetPriorityGrouping+0x44>)
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e8e:	68ba      	ldr	r2, [r7, #8]
 8001e90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e94:	4013      	ands	r3, r2
 8001e96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ea0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ea4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ea8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eaa:	4a04      	ldr	r2, [pc, #16]	@ (8001ebc <__NVIC_SetPriorityGrouping+0x44>)
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	60d3      	str	r3, [r2, #12]
}
 8001eb0:	bf00      	nop
 8001eb2:	3714      	adds	r7, #20
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	e000ed00 	.word	0xe000ed00

08001ec0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ec4:	4b04      	ldr	r3, [pc, #16]	@ (8001ed8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	0a1b      	lsrs	r3, r3, #8
 8001eca:	f003 0307 	and.w	r3, r3, #7
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	e000ed00 	.word	0xe000ed00

08001edc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	db0b      	blt.n	8001f06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eee:	79fb      	ldrb	r3, [r7, #7]
 8001ef0:	f003 021f 	and.w	r2, r3, #31
 8001ef4:	4907      	ldr	r1, [pc, #28]	@ (8001f14 <__NVIC_EnableIRQ+0x38>)
 8001ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efa:	095b      	lsrs	r3, r3, #5
 8001efc:	2001      	movs	r0, #1
 8001efe:	fa00 f202 	lsl.w	r2, r0, r2
 8001f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f06:	bf00      	nop
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	e000e100 	.word	0xe000e100

08001f18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	6039      	str	r1, [r7, #0]
 8001f22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	db0a      	blt.n	8001f42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	b2da      	uxtb	r2, r3
 8001f30:	490c      	ldr	r1, [pc, #48]	@ (8001f64 <__NVIC_SetPriority+0x4c>)
 8001f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f36:	0112      	lsls	r2, r2, #4
 8001f38:	b2d2      	uxtb	r2, r2
 8001f3a:	440b      	add	r3, r1
 8001f3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f40:	e00a      	b.n	8001f58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	b2da      	uxtb	r2, r3
 8001f46:	4908      	ldr	r1, [pc, #32]	@ (8001f68 <__NVIC_SetPriority+0x50>)
 8001f48:	79fb      	ldrb	r3, [r7, #7]
 8001f4a:	f003 030f 	and.w	r3, r3, #15
 8001f4e:	3b04      	subs	r3, #4
 8001f50:	0112      	lsls	r2, r2, #4
 8001f52:	b2d2      	uxtb	r2, r2
 8001f54:	440b      	add	r3, r1
 8001f56:	761a      	strb	r2, [r3, #24]
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	e000e100 	.word	0xe000e100
 8001f68:	e000ed00 	.word	0xe000ed00

08001f6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b089      	sub	sp, #36	@ 0x24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	f1c3 0307 	rsb	r3, r3, #7
 8001f86:	2b04      	cmp	r3, #4
 8001f88:	bf28      	it	cs
 8001f8a:	2304      	movcs	r3, #4
 8001f8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	3304      	adds	r3, #4
 8001f92:	2b06      	cmp	r3, #6
 8001f94:	d902      	bls.n	8001f9c <NVIC_EncodePriority+0x30>
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	3b03      	subs	r3, #3
 8001f9a:	e000      	b.n	8001f9e <NVIC_EncodePriority+0x32>
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	43da      	mvns	r2, r3
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	401a      	ands	r2, r3
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fb4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	fa01 f303 	lsl.w	r3, r1, r3
 8001fbe:	43d9      	mvns	r1, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc4:	4313      	orrs	r3, r2
         );
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3724      	adds	r7, #36	@ 0x24
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
	...

08001fd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fe4:	d301      	bcc.n	8001fea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e00f      	b.n	800200a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fea:	4a0a      	ldr	r2, [pc, #40]	@ (8002014 <SysTick_Config+0x40>)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ff2:	210f      	movs	r1, #15
 8001ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ff8:	f7ff ff8e 	bl	8001f18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ffc:	4b05      	ldr	r3, [pc, #20]	@ (8002014 <SysTick_Config+0x40>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002002:	4b04      	ldr	r3, [pc, #16]	@ (8002014 <SysTick_Config+0x40>)
 8002004:	2207      	movs	r2, #7
 8002006:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	e000e010 	.word	0xe000e010

08002018 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f7ff ff29 	bl	8001e78 <__NVIC_SetPriorityGrouping>
}
 8002026:	bf00      	nop
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b086      	sub	sp, #24
 8002032:	af00      	add	r7, sp, #0
 8002034:	4603      	mov	r3, r0
 8002036:	60b9      	str	r1, [r7, #8]
 8002038:	607a      	str	r2, [r7, #4]
 800203a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800203c:	2300      	movs	r3, #0
 800203e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002040:	f7ff ff3e 	bl	8001ec0 <__NVIC_GetPriorityGrouping>
 8002044:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	68b9      	ldr	r1, [r7, #8]
 800204a:	6978      	ldr	r0, [r7, #20]
 800204c:	f7ff ff8e 	bl	8001f6c <NVIC_EncodePriority>
 8002050:	4602      	mov	r2, r0
 8002052:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002056:	4611      	mov	r1, r2
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff ff5d 	bl	8001f18 <__NVIC_SetPriority>
}
 800205e:	bf00      	nop
 8002060:	3718      	adds	r7, #24
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b082      	sub	sp, #8
 800206a:	af00      	add	r7, sp, #0
 800206c:	4603      	mov	r3, r0
 800206e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff ff31 	bl	8001edc <__NVIC_EnableIRQ>
}
 800207a:	bf00      	nop
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b082      	sub	sp, #8
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f7ff ffa2 	bl	8001fd4 <SysTick_Config>
 8002090:	4603      	mov	r3, r0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b082      	sub	sp, #8
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d101      	bne.n	80020ac <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e014      	b.n	80020d6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	791b      	ldrb	r3, [r3, #4]
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d105      	bne.n	80020c2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f7ff fa89 	bl	80015d4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2202      	movs	r2, #2
 80020c6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2201      	movs	r2, #1
 80020d2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
	...

080020e0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
 80020ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80020ee:	2300      	movs	r3, #0
 80020f0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	795b      	ldrb	r3, [r3, #5]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d101      	bne.n	80020fe <HAL_DAC_Start_DMA+0x1e>
 80020fa:	2302      	movs	r3, #2
 80020fc:	e0ab      	b.n	8002256 <HAL_DAC_Start_DMA+0x176>
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2201      	movs	r2, #1
 8002102:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2202      	movs	r2, #2
 8002108:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d12f      	bne.n	8002170 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	4a52      	ldr	r2, [pc, #328]	@ (8002260 <HAL_DAC_Start_DMA+0x180>)
 8002116:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	4a51      	ldr	r2, [pc, #324]	@ (8002264 <HAL_DAC_Start_DMA+0x184>)
 800211e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	4a50      	ldr	r2, [pc, #320]	@ (8002268 <HAL_DAC_Start_DMA+0x188>)
 8002126:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002136:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002138:	6a3b      	ldr	r3, [r7, #32]
 800213a:	2b08      	cmp	r3, #8
 800213c:	d013      	beq.n	8002166 <HAL_DAC_Start_DMA+0x86>
 800213e:	6a3b      	ldr	r3, [r7, #32]
 8002140:	2b08      	cmp	r3, #8
 8002142:	d845      	bhi.n	80021d0 <HAL_DAC_Start_DMA+0xf0>
 8002144:	6a3b      	ldr	r3, [r7, #32]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d003      	beq.n	8002152 <HAL_DAC_Start_DMA+0x72>
 800214a:	6a3b      	ldr	r3, [r7, #32]
 800214c:	2b04      	cmp	r3, #4
 800214e:	d005      	beq.n	800215c <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002150:	e03e      	b.n	80021d0 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	3308      	adds	r3, #8
 8002158:	613b      	str	r3, [r7, #16]
        break;
 800215a:	e03c      	b.n	80021d6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	330c      	adds	r3, #12
 8002162:	613b      	str	r3, [r7, #16]
        break;
 8002164:	e037      	b.n	80021d6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	3310      	adds	r3, #16
 800216c:	613b      	str	r3, [r7, #16]
        break;
 800216e:	e032      	b.n	80021d6 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	4a3d      	ldr	r2, [pc, #244]	@ (800226c <HAL_DAC_Start_DMA+0x18c>)
 8002176:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	4a3c      	ldr	r2, [pc, #240]	@ (8002270 <HAL_DAC_Start_DMA+0x190>)
 800217e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	4a3b      	ldr	r2, [pc, #236]	@ (8002274 <HAL_DAC_Start_DMA+0x194>)
 8002186:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002196:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002198:	6a3b      	ldr	r3, [r7, #32]
 800219a:	2b08      	cmp	r3, #8
 800219c:	d013      	beq.n	80021c6 <HAL_DAC_Start_DMA+0xe6>
 800219e:	6a3b      	ldr	r3, [r7, #32]
 80021a0:	2b08      	cmp	r3, #8
 80021a2:	d817      	bhi.n	80021d4 <HAL_DAC_Start_DMA+0xf4>
 80021a4:	6a3b      	ldr	r3, [r7, #32]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d003      	beq.n	80021b2 <HAL_DAC_Start_DMA+0xd2>
 80021aa:	6a3b      	ldr	r3, [r7, #32]
 80021ac:	2b04      	cmp	r3, #4
 80021ae:	d005      	beq.n	80021bc <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80021b0:	e010      	b.n	80021d4 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	3314      	adds	r3, #20
 80021b8:	613b      	str	r3, [r7, #16]
        break;
 80021ba:	e00c      	b.n	80021d6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	3318      	adds	r3, #24
 80021c2:	613b      	str	r3, [r7, #16]
        break;
 80021c4:	e007      	b.n	80021d6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	331c      	adds	r3, #28
 80021cc:	613b      	str	r3, [r7, #16]
        break;
 80021ce:	e002      	b.n	80021d6 <HAL_DAC_Start_DMA+0xf6>
        break;
 80021d0:	bf00      	nop
 80021d2:	e000      	b.n	80021d6 <HAL_DAC_Start_DMA+0xf6>
        break;
 80021d4:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d111      	bne.n	8002200 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80021ea:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6898      	ldr	r0, [r3, #8]
 80021f0:	6879      	ldr	r1, [r7, #4]
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	f000 fac7 	bl	8002788 <HAL_DMA_Start_IT>
 80021fa:	4603      	mov	r3, r0
 80021fc:	75fb      	strb	r3, [r7, #23]
 80021fe:	e010      	b.n	8002222 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 800220e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	68d8      	ldr	r0, [r3, #12]
 8002214:	6879      	ldr	r1, [r7, #4]
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	f000 fab5 	bl	8002788 <HAL_DMA_Start_IT>
 800221e:	4603      	mov	r3, r0
 8002220:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2200      	movs	r2, #0
 8002226:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002228:	7dfb      	ldrb	r3, [r7, #23]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d10c      	bne.n	8002248 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	6819      	ldr	r1, [r3, #0]
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	f003 0310 	and.w	r3, r3, #16
 800223a:	2201      	movs	r2, #1
 800223c:	409a      	lsls	r2, r3
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	430a      	orrs	r2, r1
 8002244:	601a      	str	r2, [r3, #0]
 8002246:	e005      	b.n	8002254 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	f043 0204 	orr.w	r2, r3, #4
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002254:	7dfb      	ldrb	r3, [r7, #23]
}
 8002256:	4618      	mov	r0, r3
 8002258:	3718      	adds	r7, #24
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	08002503 	.word	0x08002503
 8002264:	08002525 	.word	0x08002525
 8002268:	08002541 	.word	0x08002541
 800226c:	080025ab 	.word	0x080025ab
 8002270:	080025cd 	.word	0x080025cd
 8002274:	080025e9 	.word	0x080025e9

08002278 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b088      	sub	sp, #32
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80022c0:	2300      	movs	r3, #0
 80022c2:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	795b      	ldrb	r3, [r3, #5]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d101      	bne.n	80022d0 <HAL_DAC_ConfigChannel+0x1c>
 80022cc:	2302      	movs	r3, #2
 80022ce:	e114      	b.n	80024fa <HAL_DAC_ConfigChannel+0x246>
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2201      	movs	r2, #1
 80022d4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2202      	movs	r2, #2
 80022da:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2b04      	cmp	r3, #4
 80022e2:	f040 8081 	bne.w	80023e8 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80022e6:	f7ff fd97 	bl	8001e18 <HAL_GetTick>
 80022ea:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d140      	bne.n	8002374 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80022f2:	e018      	b.n	8002326 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80022f4:	f7ff fd90 	bl	8001e18 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d911      	bls.n	8002326 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002308:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d00a      	beq.n	8002326 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	f043 0208 	orr.w	r2, r3, #8
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2203      	movs	r2, #3
 8002320:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e0e9      	b.n	80024fa <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800232c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1df      	bne.n	80022f4 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8002334:	2001      	movs	r0, #1
 8002336:	f7ff fd7b 	bl	8001e30 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68ba      	ldr	r2, [r7, #8]
 8002340:	6992      	ldr	r2, [r2, #24]
 8002342:	641a      	str	r2, [r3, #64]	@ 0x40
 8002344:	e023      	b.n	800238e <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002346:	f7ff fd67 	bl	8001e18 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	2b01      	cmp	r3, #1
 8002352:	d90f      	bls.n	8002374 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800235a:	2b00      	cmp	r3, #0
 800235c:	da0a      	bge.n	8002374 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	f043 0208 	orr.w	r2, r3, #8
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2203      	movs	r2, #3
 800236e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e0c2      	b.n	80024fa <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800237a:	2b00      	cmp	r3, #0
 800237c:	dbe3      	blt.n	8002346 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 800237e:	2001      	movs	r0, #1
 8002380:	f7ff fd56 	bl	8001e30 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68ba      	ldr	r2, [r7, #8]
 800238a:	6992      	ldr	r2, [r2, #24]
 800238c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f003 0310 	and.w	r3, r3, #16
 800239a:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800239e:	fa01 f303 	lsl.w	r3, r1, r3
 80023a2:	43db      	mvns	r3, r3
 80023a4:	ea02 0103 	and.w	r1, r2, r3
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	69da      	ldr	r2, [r3, #28]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f003 0310 	and.w	r3, r3, #16
 80023b2:	409a      	lsls	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	430a      	orrs	r2, r1
 80023ba:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f003 0310 	and.w	r3, r3, #16
 80023c8:	21ff      	movs	r1, #255	@ 0xff
 80023ca:	fa01 f303 	lsl.w	r3, r1, r3
 80023ce:	43db      	mvns	r3, r3
 80023d0:	ea02 0103 	and.w	r1, r2, r3
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	6a1a      	ldr	r2, [r3, #32]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f003 0310 	and.w	r3, r3, #16
 80023de:	409a      	lsls	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	430a      	orrs	r2, r1
 80023e6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d11d      	bne.n	800242c <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023f6:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f003 0310 	and.w	r3, r3, #16
 80023fe:	221f      	movs	r2, #31
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	43db      	mvns	r3, r3
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	4013      	ands	r3, r2
 800240a:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	695b      	ldr	r3, [r3, #20]
 8002410:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f003 0310 	and.w	r3, r3, #16
 8002418:	697a      	ldr	r2, [r7, #20]
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	4313      	orrs	r3, r2
 8002422:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002432:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f003 0310 	and.w	r3, r3, #16
 800243a:	2207      	movs	r2, #7
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	43db      	mvns	r3, r3
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	4013      	ands	r3, r2
 8002446:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	431a      	orrs	r2, r3
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	4313      	orrs	r3, r2
 8002458:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f003 0310 	and.w	r3, r3, #16
 8002460:	697a      	ldr	r2, [r7, #20]
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4313      	orrs	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	6819      	ldr	r1, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f003 0310 	and.w	r3, r3, #16
 8002480:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	43da      	mvns	r2, r3
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	400a      	ands	r2, r1
 8002490:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f003 0310 	and.w	r3, r3, #16
 80024a0:	f640 72fc 	movw	r2, #4092	@ 0xffc
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	43db      	mvns	r3, r3
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	4013      	ands	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f003 0310 	and.w	r3, r3, #16
 80024bc:	697a      	ldr	r2, [r7, #20]
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6819      	ldr	r1, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f003 0310 	and.w	r3, r3, #16
 80024dc:	22c0      	movs	r2, #192	@ 0xc0
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	43da      	mvns	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	400a      	ands	r2, r1
 80024ea:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2201      	movs	r2, #1
 80024f0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2200      	movs	r2, #0
 80024f6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3720      	adds	r7, #32
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b084      	sub	sp, #16
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800250e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002510:	68f8      	ldr	r0, [r7, #12]
 8002512:	f7ff feb1 	bl	8002278 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2201      	movs	r2, #1
 800251a:	711a      	strb	r2, [r3, #4]
}
 800251c:	bf00      	nop
 800251e:	3710      	adds	r7, #16
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002530:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002532:	68f8      	ldr	r0, [r7, #12]
 8002534:	f7ff feaa 	bl	800228c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002538:	bf00      	nop
 800253a:	3710      	adds	r7, #16
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800254c:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	f043 0204 	orr.w	r2, r3, #4
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800255a:	68f8      	ldr	r0, [r7, #12]
 800255c:	f7ff fea0 	bl	80022a0 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2201      	movs	r2, #1
 8002564:	711a      	strb	r2, [r3, #4]
}
 8002566:	bf00      	nop
 8002568:	3710      	adds	r7, #16
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800256e:	b480      	push	{r7}
 8002570:	b083      	sub	sp, #12
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002576:	bf00      	nop
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr

08002582 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002582:	b480      	push	{r7}
 8002584:	b083      	sub	sp, #12
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800258a:	bf00      	nop
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr

08002596 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002596:	b480      	push	{r7}
 8002598:	b083      	sub	sp, #12
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr

080025aa <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b084      	sub	sp, #16
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025b6:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80025b8:	68f8      	ldr	r0, [r7, #12]
 80025ba:	f7ff ffd8 	bl	800256e <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2201      	movs	r2, #1
 80025c2:	711a      	strb	r2, [r3, #4]
}
 80025c4:	bf00      	nop
 80025c6:	3710      	adds	r7, #16
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025d8:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f7ff ffd1 	bl	8002582 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80025e0:	bf00      	nop
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f4:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	f043 0204 	orr.w	r2, r3, #4
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002602:	68f8      	ldr	r0, [r7, #12]
 8002604:	f7ff ffc7 	bl	8002596 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2201      	movs	r2, #1
 800260c:	711a      	strb	r2, [r3, #4]
}
 800260e:	bf00      	nop
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
	...

08002618 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002618:	b480      	push	{r7}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e098      	b.n	800275c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	461a      	mov	r2, r3
 8002630:	4b4d      	ldr	r3, [pc, #308]	@ (8002768 <HAL_DMA_Init+0x150>)
 8002632:	429a      	cmp	r2, r3
 8002634:	d80f      	bhi.n	8002656 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	461a      	mov	r2, r3
 800263c:	4b4b      	ldr	r3, [pc, #300]	@ (800276c <HAL_DMA_Init+0x154>)
 800263e:	4413      	add	r3, r2
 8002640:	4a4b      	ldr	r2, [pc, #300]	@ (8002770 <HAL_DMA_Init+0x158>)
 8002642:	fba2 2303 	umull	r2, r3, r2, r3
 8002646:	091b      	lsrs	r3, r3, #4
 8002648:	009a      	lsls	r2, r3, #2
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a48      	ldr	r2, [pc, #288]	@ (8002774 <HAL_DMA_Init+0x15c>)
 8002652:	641a      	str	r2, [r3, #64]	@ 0x40
 8002654:	e00e      	b.n	8002674 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	461a      	mov	r2, r3
 800265c:	4b46      	ldr	r3, [pc, #280]	@ (8002778 <HAL_DMA_Init+0x160>)
 800265e:	4413      	add	r3, r2
 8002660:	4a43      	ldr	r2, [pc, #268]	@ (8002770 <HAL_DMA_Init+0x158>)
 8002662:	fba2 2303 	umull	r2, r3, r2, r3
 8002666:	091b      	lsrs	r3, r3, #4
 8002668:	009a      	lsls	r2, r3, #2
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a42      	ldr	r2, [pc, #264]	@ (800277c <HAL_DMA_Init+0x164>)
 8002672:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2202      	movs	r2, #2
 8002678:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800268a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800268e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002698:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a1b      	ldr	r3, [r3, #32]
 80026b6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80026ce:	d039      	beq.n	8002744 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d4:	4a27      	ldr	r2, [pc, #156]	@ (8002774 <HAL_DMA_Init+0x15c>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d11a      	bne.n	8002710 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80026da:	4b29      	ldr	r3, [pc, #164]	@ (8002780 <HAL_DMA_Init+0x168>)
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026e2:	f003 031c 	and.w	r3, r3, #28
 80026e6:	210f      	movs	r1, #15
 80026e8:	fa01 f303 	lsl.w	r3, r1, r3
 80026ec:	43db      	mvns	r3, r3
 80026ee:	4924      	ldr	r1, [pc, #144]	@ (8002780 <HAL_DMA_Init+0x168>)
 80026f0:	4013      	ands	r3, r2
 80026f2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80026f4:	4b22      	ldr	r3, [pc, #136]	@ (8002780 <HAL_DMA_Init+0x168>)
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6859      	ldr	r1, [r3, #4]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002700:	f003 031c 	and.w	r3, r3, #28
 8002704:	fa01 f303 	lsl.w	r3, r1, r3
 8002708:	491d      	ldr	r1, [pc, #116]	@ (8002780 <HAL_DMA_Init+0x168>)
 800270a:	4313      	orrs	r3, r2
 800270c:	600b      	str	r3, [r1, #0]
 800270e:	e019      	b.n	8002744 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002710:	4b1c      	ldr	r3, [pc, #112]	@ (8002784 <HAL_DMA_Init+0x16c>)
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002718:	f003 031c 	and.w	r3, r3, #28
 800271c:	210f      	movs	r1, #15
 800271e:	fa01 f303 	lsl.w	r3, r1, r3
 8002722:	43db      	mvns	r3, r3
 8002724:	4917      	ldr	r1, [pc, #92]	@ (8002784 <HAL_DMA_Init+0x16c>)
 8002726:	4013      	ands	r3, r2
 8002728:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800272a:	4b16      	ldr	r3, [pc, #88]	@ (8002784 <HAL_DMA_Init+0x16c>)
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6859      	ldr	r1, [r3, #4]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002736:	f003 031c 	and.w	r3, r3, #28
 800273a:	fa01 f303 	lsl.w	r3, r1, r3
 800273e:	4911      	ldr	r1, [pc, #68]	@ (8002784 <HAL_DMA_Init+0x16c>)
 8002740:	4313      	orrs	r3, r2
 8002742:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2201      	movs	r2, #1
 800274e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	3714      	adds	r7, #20
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr
 8002768:	40020407 	.word	0x40020407
 800276c:	bffdfff8 	.word	0xbffdfff8
 8002770:	cccccccd 	.word	0xcccccccd
 8002774:	40020000 	.word	0x40020000
 8002778:	bffdfbf8 	.word	0xbffdfbf8
 800277c:	40020400 	.word	0x40020400
 8002780:	400200a8 	.word	0x400200a8
 8002784:	400204a8 	.word	0x400204a8

08002788 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b086      	sub	sp, #24
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
 8002794:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002796:	2300      	movs	r3, #0
 8002798:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d101      	bne.n	80027a8 <HAL_DMA_Start_IT+0x20>
 80027a4:	2302      	movs	r3, #2
 80027a6:	e04b      	b.n	8002840 <HAL_DMA_Start_IT+0xb8>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d13a      	bne.n	8002832 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2202      	movs	r2, #2
 80027c0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2200      	movs	r2, #0
 80027c8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f022 0201 	bic.w	r2, r2, #1
 80027d8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	68b9      	ldr	r1, [r7, #8]
 80027e0:	68f8      	ldr	r0, [r7, #12]
 80027e2:	f000 f95f 	bl	8002aa4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d008      	beq.n	8002800 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f042 020e 	orr.w	r2, r2, #14
 80027fc:	601a      	str	r2, [r3, #0]
 80027fe:	e00f      	b.n	8002820 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f022 0204 	bic.w	r2, r2, #4
 800280e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f042 020a 	orr.w	r2, r2, #10
 800281e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f042 0201 	orr.w	r2, r2, #1
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	e005      	b.n	800283e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800283a:	2302      	movs	r3, #2
 800283c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800283e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3718      	adds	r7, #24
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002850:	2300      	movs	r3, #0
 8002852:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800285a:	b2db      	uxtb	r3, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d008      	beq.n	8002872 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2204      	movs	r2, #4
 8002864:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e022      	b.n	80028b8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f022 020e 	bic.w	r2, r2, #14
 8002880:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f022 0201 	bic.w	r2, r2, #1
 8002890:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002896:	f003 021c 	and.w	r2, r3, #28
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289e:	2101      	movs	r1, #1
 80028a0:	fa01 f202 	lsl.w	r2, r1, r2
 80028a4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2201      	movs	r2, #1
 80028aa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80028b6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3714      	adds	r7, #20
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028cc:	2300      	movs	r3, #0
 80028ce:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d005      	beq.n	80028e8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2204      	movs	r2, #4
 80028e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	73fb      	strb	r3, [r7, #15]
 80028e6:	e029      	b.n	800293c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f022 020e 	bic.w	r2, r2, #14
 80028f6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f022 0201 	bic.w	r2, r2, #1
 8002906:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800290c:	f003 021c 	and.w	r2, r3, #28
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002914:	2101      	movs	r1, #1
 8002916:	fa01 f202 	lsl.w	r2, r1, r2
 800291a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002930:	2b00      	cmp	r3, #0
 8002932:	d003      	beq.n	800293c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	4798      	blx	r3
    }
  }
  return status;
 800293c:	7bfb      	ldrb	r3, [r7, #15]
}
 800293e:	4618      	mov	r0, r3
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b084      	sub	sp, #16
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002962:	f003 031c 	and.w	r3, r3, #28
 8002966:	2204      	movs	r2, #4
 8002968:	409a      	lsls	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	4013      	ands	r3, r2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d026      	beq.n	80029c0 <HAL_DMA_IRQHandler+0x7a>
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	f003 0304 	and.w	r3, r3, #4
 8002978:	2b00      	cmp	r3, #0
 800297a:	d021      	beq.n	80029c0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0320 	and.w	r3, r3, #32
 8002986:	2b00      	cmp	r3, #0
 8002988:	d107      	bne.n	800299a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f022 0204 	bic.w	r2, r2, #4
 8002998:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800299e:	f003 021c 	and.w	r2, r3, #28
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a6:	2104      	movs	r1, #4
 80029a8:	fa01 f202 	lsl.w	r2, r1, r2
 80029ac:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d071      	beq.n	8002a9a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80029be:	e06c      	b.n	8002a9a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c4:	f003 031c 	and.w	r3, r3, #28
 80029c8:	2202      	movs	r2, #2
 80029ca:	409a      	lsls	r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	4013      	ands	r3, r2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d02e      	beq.n	8002a32 <HAL_DMA_IRQHandler+0xec>
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d029      	beq.n	8002a32 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0320 	and.w	r3, r3, #32
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d10b      	bne.n	8002a04 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f022 020a 	bic.w	r2, r2, #10
 80029fa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a08:	f003 021c 	and.w	r2, r3, #28
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a10:	2102      	movs	r1, #2
 8002a12:	fa01 f202 	lsl.w	r2, r1, r2
 8002a16:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d038      	beq.n	8002a9a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002a30:	e033      	b.n	8002a9a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a36:	f003 031c 	and.w	r3, r3, #28
 8002a3a:	2208      	movs	r2, #8
 8002a3c:	409a      	lsls	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	4013      	ands	r3, r2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d02a      	beq.n	8002a9c <HAL_DMA_IRQHandler+0x156>
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	f003 0308 	and.w	r3, r3, #8
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d025      	beq.n	8002a9c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f022 020e 	bic.w	r2, r2, #14
 8002a5e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a64:	f003 021c 	and.w	r2, r3, #28
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a72:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d004      	beq.n	8002a9c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002a9a:	bf00      	nop
 8002a9c:	bf00      	nop
}
 8002a9e:	3710      	adds	r7, #16
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]
 8002ab0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ab6:	f003 021c 	and.w	r2, r3, #28
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002abe:	2101      	movs	r1, #1
 8002ac0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ac4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	683a      	ldr	r2, [r7, #0]
 8002acc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	2b10      	cmp	r3, #16
 8002ad4:	d108      	bne.n	8002ae8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68ba      	ldr	r2, [r7, #8]
 8002ae4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002ae6:	e007      	b.n	8002af8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68ba      	ldr	r2, [r7, #8]
 8002aee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	60da      	str	r2, [r3, #12]
}
 8002af8:	bf00      	nop
 8002afa:	3714      	adds	r7, #20
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b087      	sub	sp, #28
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b12:	e17f      	b.n	8002e14 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	2101      	movs	r1, #1
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b20:	4013      	ands	r3, r2
 8002b22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	f000 8171 	beq.w	8002e0e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f003 0303 	and.w	r3, r3, #3
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d005      	beq.n	8002b44 <HAL_GPIO_Init+0x40>
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f003 0303 	and.w	r3, r3, #3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d130      	bne.n	8002ba6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	2203      	movs	r2, #3
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	43db      	mvns	r3, r3
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	68da      	ldr	r2, [r3, #12]
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	693a      	ldr	r2, [r7, #16]
 8002b72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b82:	43db      	mvns	r3, r3
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	4013      	ands	r3, r2
 8002b88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	091b      	lsrs	r3, r3, #4
 8002b90:	f003 0201 	and.w	r2, r3, #1
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	693a      	ldr	r2, [r7, #16]
 8002ba4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f003 0303 	and.w	r3, r3, #3
 8002bae:	2b03      	cmp	r3, #3
 8002bb0:	d118      	bne.n	8002be4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002bb8:	2201      	movs	r2, #1
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	43db      	mvns	r3, r3
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	08db      	lsrs	r3, r3, #3
 8002bce:	f003 0201 	and.w	r2, r3, #1
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	693a      	ldr	r2, [r7, #16]
 8002be2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f003 0303 	and.w	r3, r3, #3
 8002bec:	2b03      	cmp	r3, #3
 8002bee:	d017      	beq.n	8002c20 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	2203      	movs	r2, #3
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	43db      	mvns	r3, r3
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	4013      	ands	r3, r2
 8002c06:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	689a      	ldr	r2, [r3, #8]
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	005b      	lsls	r3, r3, #1
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	693a      	ldr	r2, [r7, #16]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f003 0303 	and.w	r3, r3, #3
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d123      	bne.n	8002c74 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	08da      	lsrs	r2, r3, #3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	3208      	adds	r2, #8
 8002c34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c38:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	f003 0307 	and.w	r3, r3, #7
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	220f      	movs	r2, #15
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	691a      	ldr	r2, [r3, #16]
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	f003 0307 	and.w	r3, r3, #7
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	08da      	lsrs	r2, r3, #3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	3208      	adds	r2, #8
 8002c6e:	6939      	ldr	r1, [r7, #16]
 8002c70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	2203      	movs	r2, #3
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	43db      	mvns	r3, r3
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f003 0203 	and.w	r2, r3, #3
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f000 80ac 	beq.w	8002e0e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cb6:	4b5f      	ldr	r3, [pc, #380]	@ (8002e34 <HAL_GPIO_Init+0x330>)
 8002cb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cba:	4a5e      	ldr	r2, [pc, #376]	@ (8002e34 <HAL_GPIO_Init+0x330>)
 8002cbc:	f043 0301 	orr.w	r3, r3, #1
 8002cc0:	6613      	str	r3, [r2, #96]	@ 0x60
 8002cc2:	4b5c      	ldr	r3, [pc, #368]	@ (8002e34 <HAL_GPIO_Init+0x330>)
 8002cc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	60bb      	str	r3, [r7, #8]
 8002ccc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002cce:	4a5a      	ldr	r2, [pc, #360]	@ (8002e38 <HAL_GPIO_Init+0x334>)
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	089b      	lsrs	r3, r3, #2
 8002cd4:	3302      	adds	r3, #2
 8002cd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cda:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	f003 0303 	and.w	r3, r3, #3
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	220f      	movs	r2, #15
 8002ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cea:	43db      	mvns	r3, r3
 8002cec:	693a      	ldr	r2, [r7, #16]
 8002cee:	4013      	ands	r3, r2
 8002cf0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002cf8:	d025      	beq.n	8002d46 <HAL_GPIO_Init+0x242>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a4f      	ldr	r2, [pc, #316]	@ (8002e3c <HAL_GPIO_Init+0x338>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d01f      	beq.n	8002d42 <HAL_GPIO_Init+0x23e>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a4e      	ldr	r2, [pc, #312]	@ (8002e40 <HAL_GPIO_Init+0x33c>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d019      	beq.n	8002d3e <HAL_GPIO_Init+0x23a>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a4d      	ldr	r2, [pc, #308]	@ (8002e44 <HAL_GPIO_Init+0x340>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d013      	beq.n	8002d3a <HAL_GPIO_Init+0x236>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a4c      	ldr	r2, [pc, #304]	@ (8002e48 <HAL_GPIO_Init+0x344>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d00d      	beq.n	8002d36 <HAL_GPIO_Init+0x232>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a4b      	ldr	r2, [pc, #300]	@ (8002e4c <HAL_GPIO_Init+0x348>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d007      	beq.n	8002d32 <HAL_GPIO_Init+0x22e>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a4a      	ldr	r2, [pc, #296]	@ (8002e50 <HAL_GPIO_Init+0x34c>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d101      	bne.n	8002d2e <HAL_GPIO_Init+0x22a>
 8002d2a:	2306      	movs	r3, #6
 8002d2c:	e00c      	b.n	8002d48 <HAL_GPIO_Init+0x244>
 8002d2e:	2307      	movs	r3, #7
 8002d30:	e00a      	b.n	8002d48 <HAL_GPIO_Init+0x244>
 8002d32:	2305      	movs	r3, #5
 8002d34:	e008      	b.n	8002d48 <HAL_GPIO_Init+0x244>
 8002d36:	2304      	movs	r3, #4
 8002d38:	e006      	b.n	8002d48 <HAL_GPIO_Init+0x244>
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e004      	b.n	8002d48 <HAL_GPIO_Init+0x244>
 8002d3e:	2302      	movs	r3, #2
 8002d40:	e002      	b.n	8002d48 <HAL_GPIO_Init+0x244>
 8002d42:	2301      	movs	r3, #1
 8002d44:	e000      	b.n	8002d48 <HAL_GPIO_Init+0x244>
 8002d46:	2300      	movs	r3, #0
 8002d48:	697a      	ldr	r2, [r7, #20]
 8002d4a:	f002 0203 	and.w	r2, r2, #3
 8002d4e:	0092      	lsls	r2, r2, #2
 8002d50:	4093      	lsls	r3, r2
 8002d52:	693a      	ldr	r2, [r7, #16]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d58:	4937      	ldr	r1, [pc, #220]	@ (8002e38 <HAL_GPIO_Init+0x334>)
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	089b      	lsrs	r3, r3, #2
 8002d5e:	3302      	adds	r3, #2
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d66:	4b3b      	ldr	r3, [pc, #236]	@ (8002e54 <HAL_GPIO_Init+0x350>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	43db      	mvns	r3, r3
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	4013      	ands	r3, r2
 8002d74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d8a:	4a32      	ldr	r2, [pc, #200]	@ (8002e54 <HAL_GPIO_Init+0x350>)
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d90:	4b30      	ldr	r3, [pc, #192]	@ (8002e54 <HAL_GPIO_Init+0x350>)
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d003      	beq.n	8002db4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002dac:	693a      	ldr	r2, [r7, #16]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002db4:	4a27      	ldr	r2, [pc, #156]	@ (8002e54 <HAL_GPIO_Init+0x350>)
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002dba:	4b26      	ldr	r3, [pc, #152]	@ (8002e54 <HAL_GPIO_Init+0x350>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	43db      	mvns	r3, r3
 8002dc4:	693a      	ldr	r2, [r7, #16]
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d003      	beq.n	8002dde <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002dd6:	693a      	ldr	r2, [r7, #16]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002dde:	4a1d      	ldr	r2, [pc, #116]	@ (8002e54 <HAL_GPIO_Init+0x350>)
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002de4:	4b1b      	ldr	r3, [pc, #108]	@ (8002e54 <HAL_GPIO_Init+0x350>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	43db      	mvns	r3, r3
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	4013      	ands	r3, r2
 8002df2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d003      	beq.n	8002e08 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002e00:	693a      	ldr	r2, [r7, #16]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002e08:	4a12      	ldr	r2, [pc, #72]	@ (8002e54 <HAL_GPIO_Init+0x350>)
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	3301      	adds	r3, #1
 8002e12:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f47f ae78 	bne.w	8002b14 <HAL_GPIO_Init+0x10>
  }
}
 8002e24:	bf00      	nop
 8002e26:	bf00      	nop
 8002e28:	371c      	adds	r7, #28
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	40021000 	.word	0x40021000
 8002e38:	40010000 	.word	0x40010000
 8002e3c:	48000400 	.word	0x48000400
 8002e40:	48000800 	.word	0x48000800
 8002e44:	48000c00 	.word	0x48000c00
 8002e48:	48001000 	.word	0x48001000
 8002e4c:	48001400 	.word	0x48001400
 8002e50:	48001800 	.word	0x48001800
 8002e54:	40010400 	.word	0x40010400

08002e58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	460b      	mov	r3, r1
 8002e62:	807b      	strh	r3, [r7, #2]
 8002e64:	4613      	mov	r3, r2
 8002e66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e68:	787b      	ldrb	r3, [r7, #1]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d003      	beq.n	8002e76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e6e:	887a      	ldrh	r2, [r7, #2]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e74:	e002      	b.n	8002e7c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e76:	887a      	ldrh	r2, [r7, #2]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002e7c:	bf00      	nop
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	460b      	mov	r3, r1
 8002e92:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	695b      	ldr	r3, [r3, #20]
 8002e98:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e9a:	887a      	ldrh	r2, [r7, #2]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	041a      	lsls	r2, r3, #16
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	43d9      	mvns	r1, r3
 8002ea6:	887b      	ldrh	r3, [r7, #2]
 8002ea8:	400b      	ands	r3, r1
 8002eaa:	431a      	orrs	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	619a      	str	r2, [r3, #24]
}
 8002eb0:	bf00      	nop
 8002eb2:	3714      	adds	r7, #20
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002ec6:	4b08      	ldr	r3, [pc, #32]	@ (8002ee8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ec8:	695a      	ldr	r2, [r3, #20]
 8002eca:	88fb      	ldrh	r3, [r7, #6]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d006      	beq.n	8002ee0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ed2:	4a05      	ldr	r2, [pc, #20]	@ (8002ee8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ed4:	88fb      	ldrh	r3, [r7, #6]
 8002ed6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ed8:	88fb      	ldrh	r3, [r7, #6]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f000 f806 	bl	8002eec <HAL_GPIO_EXTI_Callback>
  }
}
 8002ee0:	bf00      	nop
 8002ee2:	3708      	adds	r7, #8
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	40010400 	.word	0x40010400

08002eec <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002ef6:	bf00      	nop
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr

08002f02 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b084      	sub	sp, #16
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d101      	bne.n	8002f14 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e043      	b.n	8002f9c <HAL_IWDG_Init+0x9a>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8002f1c:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f245 5255 	movw	r2, #21845	@ 0x5555
 8002f26:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	6852      	ldr	r2, [r2, #4]
 8002f30:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	6892      	ldr	r2, [r2, #8]
 8002f3a:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8002f3c:	f7fe ff6c 	bl	8001e18 <HAL_GetTick>
 8002f40:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002f42:	e011      	b.n	8002f68 <HAL_IWDG_Init+0x66>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8002f44:	f7fe ff68 	bl	8001e18 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	f641 0201 	movw	r2, #6145	@ 0x1801
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d908      	bls.n	8002f68 <HAL_IWDG_Init+0x66>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	f003 0307 	and.w	r3, r3, #7
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <HAL_IWDG_Init+0x66>
      {
        return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e019      	b.n	8002f9c <HAL_IWDG_Init+0x9a>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	f003 0307 	and.w	r3, r3, #7
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1e6      	bne.n	8002f44 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	691a      	ldr	r2, [r3, #16]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d005      	beq.n	8002f90 <HAL_IWDG_Init+0x8e>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	68d2      	ldr	r2, [r2, #12]
 8002f8c:	611a      	str	r2, [r3, #16]
 8002f8e:	e004      	b.n	8002f9a <HAL_IWDG_Init+0x98>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8002f98:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3710      	adds	r7, #16
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8002fb4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002fc8:	4b04      	ldr	r3, [pc, #16]	@ (8002fdc <HAL_PWREx_GetVoltageRange+0x18>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	40007000 	.word	0x40007000

08002fe0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fee:	d130      	bne.n	8003052 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ff0:	4b23      	ldr	r3, [pc, #140]	@ (8003080 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002ff8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ffc:	d038      	beq.n	8003070 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ffe:	4b20      	ldr	r3, [pc, #128]	@ (8003080 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003006:	4a1e      	ldr	r2, [pc, #120]	@ (8003080 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003008:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800300c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800300e:	4b1d      	ldr	r3, [pc, #116]	@ (8003084 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2232      	movs	r2, #50	@ 0x32
 8003014:	fb02 f303 	mul.w	r3, r2, r3
 8003018:	4a1b      	ldr	r2, [pc, #108]	@ (8003088 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800301a:	fba2 2303 	umull	r2, r3, r2, r3
 800301e:	0c9b      	lsrs	r3, r3, #18
 8003020:	3301      	adds	r3, #1
 8003022:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003024:	e002      	b.n	800302c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	3b01      	subs	r3, #1
 800302a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800302c:	4b14      	ldr	r3, [pc, #80]	@ (8003080 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800302e:	695b      	ldr	r3, [r3, #20]
 8003030:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003034:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003038:	d102      	bne.n	8003040 <HAL_PWREx_ControlVoltageScaling+0x60>
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d1f2      	bne.n	8003026 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003040:	4b0f      	ldr	r3, [pc, #60]	@ (8003080 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003042:	695b      	ldr	r3, [r3, #20]
 8003044:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003048:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800304c:	d110      	bne.n	8003070 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e00f      	b.n	8003072 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003052:	4b0b      	ldr	r3, [pc, #44]	@ (8003080 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800305a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800305e:	d007      	beq.n	8003070 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003060:	4b07      	ldr	r3, [pc, #28]	@ (8003080 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003068:	4a05      	ldr	r2, [pc, #20]	@ (8003080 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800306a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800306e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3714      	adds	r7, #20
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	40007000 	.word	0x40007000
 8003084:	20000000 	.word	0x20000000
 8003088:	431bde83 	.word	0x431bde83

0800308c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b088      	sub	sp, #32
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e3ca      	b.n	8003834 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800309e:	4b97      	ldr	r3, [pc, #604]	@ (80032fc <HAL_RCC_OscConfig+0x270>)
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f003 030c 	and.w	r3, r3, #12
 80030a6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030a8:	4b94      	ldr	r3, [pc, #592]	@ (80032fc <HAL_RCC_OscConfig+0x270>)
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	f003 0303 	and.w	r3, r3, #3
 80030b0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0310 	and.w	r3, r3, #16
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f000 80e4 	beq.w	8003288 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d007      	beq.n	80030d6 <HAL_RCC_OscConfig+0x4a>
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	2b0c      	cmp	r3, #12
 80030ca:	f040 808b 	bne.w	80031e4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	f040 8087 	bne.w	80031e4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80030d6:	4b89      	ldr	r3, [pc, #548]	@ (80032fc <HAL_RCC_OscConfig+0x270>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d005      	beq.n	80030ee <HAL_RCC_OscConfig+0x62>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e3a2      	b.n	8003834 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a1a      	ldr	r2, [r3, #32]
 80030f2:	4b82      	ldr	r3, [pc, #520]	@ (80032fc <HAL_RCC_OscConfig+0x270>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0308 	and.w	r3, r3, #8
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d004      	beq.n	8003108 <HAL_RCC_OscConfig+0x7c>
 80030fe:	4b7f      	ldr	r3, [pc, #508]	@ (80032fc <HAL_RCC_OscConfig+0x270>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003106:	e005      	b.n	8003114 <HAL_RCC_OscConfig+0x88>
 8003108:	4b7c      	ldr	r3, [pc, #496]	@ (80032fc <HAL_RCC_OscConfig+0x270>)
 800310a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800310e:	091b      	lsrs	r3, r3, #4
 8003110:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003114:	4293      	cmp	r3, r2
 8003116:	d223      	bcs.n	8003160 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a1b      	ldr	r3, [r3, #32]
 800311c:	4618      	mov	r0, r3
 800311e:	f000 fd55 	bl	8003bcc <RCC_SetFlashLatencyFromMSIRange>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d001      	beq.n	800312c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e383      	b.n	8003834 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800312c:	4b73      	ldr	r3, [pc, #460]	@ (80032fc <HAL_RCC_OscConfig+0x270>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a72      	ldr	r2, [pc, #456]	@ (80032fc <HAL_RCC_OscConfig+0x270>)
 8003132:	f043 0308 	orr.w	r3, r3, #8
 8003136:	6013      	str	r3, [r2, #0]
 8003138:	4b70      	ldr	r3, [pc, #448]	@ (80032fc <HAL_RCC_OscConfig+0x270>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a1b      	ldr	r3, [r3, #32]
 8003144:	496d      	ldr	r1, [pc, #436]	@ (80032fc <HAL_RCC_OscConfig+0x270>)
 8003146:	4313      	orrs	r3, r2
 8003148:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800314a:	4b6c      	ldr	r3, [pc, #432]	@ (80032fc <HAL_RCC_OscConfig+0x270>)
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	69db      	ldr	r3, [r3, #28]
 8003156:	021b      	lsls	r3, r3, #8
 8003158:	4968      	ldr	r1, [pc, #416]	@ (80032fc <HAL_RCC_OscConfig+0x270>)
 800315a:	4313      	orrs	r3, r2
 800315c:	604b      	str	r3, [r1, #4]
 800315e:	e025      	b.n	80031ac <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003160:	4b66      	ldr	r3, [pc, #408]	@ (80032fc <HAL_RCC_OscConfig+0x270>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a65      	ldr	r2, [pc, #404]	@ (80032fc <HAL_RCC_OscConfig+0x270>)
 8003166:	f043 0308 	orr.w	r3, r3, #8
 800316a:	6013      	str	r3, [r2, #0]
 800316c:	4b63      	ldr	r3, [pc, #396]	@ (80032fc <HAL_RCC_OscConfig+0x270>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a1b      	ldr	r3, [r3, #32]
 8003178:	4960      	ldr	r1, [pc, #384]	@ (80032fc <HAL_RCC_OscConfig+0x270>)
 800317a:	4313      	orrs	r3, r2
 800317c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800317e:	4b5f      	ldr	r3, [pc, #380]	@ (80032fc <HAL_RCC_OscConfig+0x270>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	69db      	ldr	r3, [r3, #28]
 800318a:	021b      	lsls	r3, r3, #8
 800318c:	495b      	ldr	r1, [pc, #364]	@ (80032fc <HAL_RCC_OscConfig+0x270>)
 800318e:	4313      	orrs	r3, r2
 8003190:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d109      	bne.n	80031ac <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a1b      	ldr	r3, [r3, #32]
 800319c:	4618      	mov	r0, r3
 800319e:	f000 fd15 	bl	8003bcc <RCC_SetFlashLatencyFromMSIRange>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d001      	beq.n	80031ac <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e343      	b.n	8003834 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80031ac:	f000 fc4a 	bl	8003a44 <HAL_RCC_GetSysClockFreq>
 80031b0:	4602      	mov	r2, r0
 80031b2:	4b52      	ldr	r3, [pc, #328]	@ (80032fc <HAL_RCC_OscConfig+0x270>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	091b      	lsrs	r3, r3, #4
 80031b8:	f003 030f 	and.w	r3, r3, #15
 80031bc:	4950      	ldr	r1, [pc, #320]	@ (8003300 <HAL_RCC_OscConfig+0x274>)
 80031be:	5ccb      	ldrb	r3, [r1, r3]
 80031c0:	f003 031f 	and.w	r3, r3, #31
 80031c4:	fa22 f303 	lsr.w	r3, r2, r3
 80031c8:	4a4e      	ldr	r2, [pc, #312]	@ (8003304 <HAL_RCC_OscConfig+0x278>)
 80031ca:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80031cc:	4b4e      	ldr	r3, [pc, #312]	@ (8003308 <HAL_RCC_OscConfig+0x27c>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7fe fdd1 	bl	8001d78 <HAL_InitTick>
 80031d6:	4603      	mov	r3, r0
 80031d8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80031da:	7bfb      	ldrb	r3, [r7, #15]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d052      	beq.n	8003286 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80031e0:	7bfb      	ldrb	r3, [r7, #15]
 80031e2:	e327      	b.n	8003834 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d032      	beq.n	8003252 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80031ec:	4b43      	ldr	r3, [pc, #268]	@ (80032fc <HAL_RCC_OscConfig+0x270>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a42      	ldr	r2, [pc, #264]	@ (80032fc <HAL_RCC_OscConfig+0x270>)
 80031f2:	f043 0301 	orr.w	r3, r3, #1
 80031f6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031f8:	f7fe fe0e 	bl	8001e18 <HAL_GetTick>
 80031fc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031fe:	e008      	b.n	8003212 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003200:	f7fe fe0a 	bl	8001e18 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b02      	cmp	r3, #2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e310      	b.n	8003834 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003212:	4b3a      	ldr	r3, [pc, #232]	@ (80032fc <HAL_RCC_OscConfig+0x270>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d0f0      	beq.n	8003200 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800321e:	4b37      	ldr	r3, [pc, #220]	@ (80032fc <HAL_RCC_OscConfig+0x270>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a36      	ldr	r2, [pc, #216]	@ (80032fc <HAL_RCC_OscConfig+0x270>)
 8003224:	f043 0308 	orr.w	r3, r3, #8
 8003228:	6013      	str	r3, [r2, #0]
 800322a:	4b34      	ldr	r3, [pc, #208]	@ (80032fc <HAL_RCC_OscConfig+0x270>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	4931      	ldr	r1, [pc, #196]	@ (80032fc <HAL_RCC_OscConfig+0x270>)
 8003238:	4313      	orrs	r3, r2
 800323a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800323c:	4b2f      	ldr	r3, [pc, #188]	@ (80032fc <HAL_RCC_OscConfig+0x270>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	69db      	ldr	r3, [r3, #28]
 8003248:	021b      	lsls	r3, r3, #8
 800324a:	492c      	ldr	r1, [pc, #176]	@ (80032fc <HAL_RCC_OscConfig+0x270>)
 800324c:	4313      	orrs	r3, r2
 800324e:	604b      	str	r3, [r1, #4]
 8003250:	e01a      	b.n	8003288 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003252:	4b2a      	ldr	r3, [pc, #168]	@ (80032fc <HAL_RCC_OscConfig+0x270>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a29      	ldr	r2, [pc, #164]	@ (80032fc <HAL_RCC_OscConfig+0x270>)
 8003258:	f023 0301 	bic.w	r3, r3, #1
 800325c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800325e:	f7fe fddb 	bl	8001e18 <HAL_GetTick>
 8003262:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003264:	e008      	b.n	8003278 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003266:	f7fe fdd7 	bl	8001e18 <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	2b02      	cmp	r3, #2
 8003272:	d901      	bls.n	8003278 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e2dd      	b.n	8003834 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003278:	4b20      	ldr	r3, [pc, #128]	@ (80032fc <HAL_RCC_OscConfig+0x270>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0302 	and.w	r3, r3, #2
 8003280:	2b00      	cmp	r3, #0
 8003282:	d1f0      	bne.n	8003266 <HAL_RCC_OscConfig+0x1da>
 8003284:	e000      	b.n	8003288 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003286:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	2b00      	cmp	r3, #0
 8003292:	d074      	beq.n	800337e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	2b08      	cmp	r3, #8
 8003298:	d005      	beq.n	80032a6 <HAL_RCC_OscConfig+0x21a>
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	2b0c      	cmp	r3, #12
 800329e:	d10e      	bne.n	80032be <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	2b03      	cmp	r3, #3
 80032a4:	d10b      	bne.n	80032be <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032a6:	4b15      	ldr	r3, [pc, #84]	@ (80032fc <HAL_RCC_OscConfig+0x270>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d064      	beq.n	800337c <HAL_RCC_OscConfig+0x2f0>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d160      	bne.n	800337c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e2ba      	b.n	8003834 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032c6:	d106      	bne.n	80032d6 <HAL_RCC_OscConfig+0x24a>
 80032c8:	4b0c      	ldr	r3, [pc, #48]	@ (80032fc <HAL_RCC_OscConfig+0x270>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a0b      	ldr	r2, [pc, #44]	@ (80032fc <HAL_RCC_OscConfig+0x270>)
 80032ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032d2:	6013      	str	r3, [r2, #0]
 80032d4:	e026      	b.n	8003324 <HAL_RCC_OscConfig+0x298>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80032de:	d115      	bne.n	800330c <HAL_RCC_OscConfig+0x280>
 80032e0:	4b06      	ldr	r3, [pc, #24]	@ (80032fc <HAL_RCC_OscConfig+0x270>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a05      	ldr	r2, [pc, #20]	@ (80032fc <HAL_RCC_OscConfig+0x270>)
 80032e6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032ea:	6013      	str	r3, [r2, #0]
 80032ec:	4b03      	ldr	r3, [pc, #12]	@ (80032fc <HAL_RCC_OscConfig+0x270>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a02      	ldr	r2, [pc, #8]	@ (80032fc <HAL_RCC_OscConfig+0x270>)
 80032f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032f6:	6013      	str	r3, [r2, #0]
 80032f8:	e014      	b.n	8003324 <HAL_RCC_OscConfig+0x298>
 80032fa:	bf00      	nop
 80032fc:	40021000 	.word	0x40021000
 8003300:	0800f328 	.word	0x0800f328
 8003304:	20000000 	.word	0x20000000
 8003308:	20000004 	.word	0x20000004
 800330c:	4ba0      	ldr	r3, [pc, #640]	@ (8003590 <HAL_RCC_OscConfig+0x504>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a9f      	ldr	r2, [pc, #636]	@ (8003590 <HAL_RCC_OscConfig+0x504>)
 8003312:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003316:	6013      	str	r3, [r2, #0]
 8003318:	4b9d      	ldr	r3, [pc, #628]	@ (8003590 <HAL_RCC_OscConfig+0x504>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a9c      	ldr	r2, [pc, #624]	@ (8003590 <HAL_RCC_OscConfig+0x504>)
 800331e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003322:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d013      	beq.n	8003354 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800332c:	f7fe fd74 	bl	8001e18 <HAL_GetTick>
 8003330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003332:	e008      	b.n	8003346 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003334:	f7fe fd70 	bl	8001e18 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b64      	cmp	r3, #100	@ 0x64
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e276      	b.n	8003834 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003346:	4b92      	ldr	r3, [pc, #584]	@ (8003590 <HAL_RCC_OscConfig+0x504>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d0f0      	beq.n	8003334 <HAL_RCC_OscConfig+0x2a8>
 8003352:	e014      	b.n	800337e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003354:	f7fe fd60 	bl	8001e18 <HAL_GetTick>
 8003358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800335a:	e008      	b.n	800336e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800335c:	f7fe fd5c 	bl	8001e18 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b64      	cmp	r3, #100	@ 0x64
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e262      	b.n	8003834 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800336e:	4b88      	ldr	r3, [pc, #544]	@ (8003590 <HAL_RCC_OscConfig+0x504>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1f0      	bne.n	800335c <HAL_RCC_OscConfig+0x2d0>
 800337a:	e000      	b.n	800337e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800337c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d060      	beq.n	800344c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	2b04      	cmp	r3, #4
 800338e:	d005      	beq.n	800339c <HAL_RCC_OscConfig+0x310>
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	2b0c      	cmp	r3, #12
 8003394:	d119      	bne.n	80033ca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	2b02      	cmp	r3, #2
 800339a:	d116      	bne.n	80033ca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800339c:	4b7c      	ldr	r3, [pc, #496]	@ (8003590 <HAL_RCC_OscConfig+0x504>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d005      	beq.n	80033b4 <HAL_RCC_OscConfig+0x328>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d101      	bne.n	80033b4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e23f      	b.n	8003834 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033b4:	4b76      	ldr	r3, [pc, #472]	@ (8003590 <HAL_RCC_OscConfig+0x504>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	061b      	lsls	r3, r3, #24
 80033c2:	4973      	ldr	r1, [pc, #460]	@ (8003590 <HAL_RCC_OscConfig+0x504>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033c8:	e040      	b.n	800344c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d023      	beq.n	800341a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033d2:	4b6f      	ldr	r3, [pc, #444]	@ (8003590 <HAL_RCC_OscConfig+0x504>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a6e      	ldr	r2, [pc, #440]	@ (8003590 <HAL_RCC_OscConfig+0x504>)
 80033d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033de:	f7fe fd1b 	bl	8001e18 <HAL_GetTick>
 80033e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033e4:	e008      	b.n	80033f8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033e6:	f7fe fd17 	bl	8001e18 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d901      	bls.n	80033f8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e21d      	b.n	8003834 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033f8:	4b65      	ldr	r3, [pc, #404]	@ (8003590 <HAL_RCC_OscConfig+0x504>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003400:	2b00      	cmp	r3, #0
 8003402:	d0f0      	beq.n	80033e6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003404:	4b62      	ldr	r3, [pc, #392]	@ (8003590 <HAL_RCC_OscConfig+0x504>)
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	061b      	lsls	r3, r3, #24
 8003412:	495f      	ldr	r1, [pc, #380]	@ (8003590 <HAL_RCC_OscConfig+0x504>)
 8003414:	4313      	orrs	r3, r2
 8003416:	604b      	str	r3, [r1, #4]
 8003418:	e018      	b.n	800344c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800341a:	4b5d      	ldr	r3, [pc, #372]	@ (8003590 <HAL_RCC_OscConfig+0x504>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a5c      	ldr	r2, [pc, #368]	@ (8003590 <HAL_RCC_OscConfig+0x504>)
 8003420:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003424:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003426:	f7fe fcf7 	bl	8001e18 <HAL_GetTick>
 800342a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800342c:	e008      	b.n	8003440 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800342e:	f7fe fcf3 	bl	8001e18 <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	2b02      	cmp	r3, #2
 800343a:	d901      	bls.n	8003440 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e1f9      	b.n	8003834 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003440:	4b53      	ldr	r3, [pc, #332]	@ (8003590 <HAL_RCC_OscConfig+0x504>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003448:	2b00      	cmp	r3, #0
 800344a:	d1f0      	bne.n	800342e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0308 	and.w	r3, r3, #8
 8003454:	2b00      	cmp	r3, #0
 8003456:	d03c      	beq.n	80034d2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	695b      	ldr	r3, [r3, #20]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d01c      	beq.n	800349a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003460:	4b4b      	ldr	r3, [pc, #300]	@ (8003590 <HAL_RCC_OscConfig+0x504>)
 8003462:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003466:	4a4a      	ldr	r2, [pc, #296]	@ (8003590 <HAL_RCC_OscConfig+0x504>)
 8003468:	f043 0301 	orr.w	r3, r3, #1
 800346c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003470:	f7fe fcd2 	bl	8001e18 <HAL_GetTick>
 8003474:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003476:	e008      	b.n	800348a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003478:	f7fe fcce 	bl	8001e18 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b02      	cmp	r3, #2
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e1d4      	b.n	8003834 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800348a:	4b41      	ldr	r3, [pc, #260]	@ (8003590 <HAL_RCC_OscConfig+0x504>)
 800348c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003490:	f003 0302 	and.w	r3, r3, #2
 8003494:	2b00      	cmp	r3, #0
 8003496:	d0ef      	beq.n	8003478 <HAL_RCC_OscConfig+0x3ec>
 8003498:	e01b      	b.n	80034d2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800349a:	4b3d      	ldr	r3, [pc, #244]	@ (8003590 <HAL_RCC_OscConfig+0x504>)
 800349c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034a0:	4a3b      	ldr	r2, [pc, #236]	@ (8003590 <HAL_RCC_OscConfig+0x504>)
 80034a2:	f023 0301 	bic.w	r3, r3, #1
 80034a6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034aa:	f7fe fcb5 	bl	8001e18 <HAL_GetTick>
 80034ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034b0:	e008      	b.n	80034c4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034b2:	f7fe fcb1 	bl	8001e18 <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d901      	bls.n	80034c4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e1b7      	b.n	8003834 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034c4:	4b32      	ldr	r3, [pc, #200]	@ (8003590 <HAL_RCC_OscConfig+0x504>)
 80034c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1ef      	bne.n	80034b2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0304 	and.w	r3, r3, #4
 80034da:	2b00      	cmp	r3, #0
 80034dc:	f000 80a6 	beq.w	800362c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034e0:	2300      	movs	r3, #0
 80034e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80034e4:	4b2a      	ldr	r3, [pc, #168]	@ (8003590 <HAL_RCC_OscConfig+0x504>)
 80034e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d10d      	bne.n	800350c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034f0:	4b27      	ldr	r3, [pc, #156]	@ (8003590 <HAL_RCC_OscConfig+0x504>)
 80034f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034f4:	4a26      	ldr	r2, [pc, #152]	@ (8003590 <HAL_RCC_OscConfig+0x504>)
 80034f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80034fc:	4b24      	ldr	r3, [pc, #144]	@ (8003590 <HAL_RCC_OscConfig+0x504>)
 80034fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003500:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003504:	60bb      	str	r3, [r7, #8]
 8003506:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003508:	2301      	movs	r3, #1
 800350a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800350c:	4b21      	ldr	r3, [pc, #132]	@ (8003594 <HAL_RCC_OscConfig+0x508>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003514:	2b00      	cmp	r3, #0
 8003516:	d118      	bne.n	800354a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003518:	4b1e      	ldr	r3, [pc, #120]	@ (8003594 <HAL_RCC_OscConfig+0x508>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a1d      	ldr	r2, [pc, #116]	@ (8003594 <HAL_RCC_OscConfig+0x508>)
 800351e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003522:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003524:	f7fe fc78 	bl	8001e18 <HAL_GetTick>
 8003528:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800352a:	e008      	b.n	800353e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800352c:	f7fe fc74 	bl	8001e18 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b02      	cmp	r3, #2
 8003538:	d901      	bls.n	800353e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e17a      	b.n	8003834 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800353e:	4b15      	ldr	r3, [pc, #84]	@ (8003594 <HAL_RCC_OscConfig+0x508>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003546:	2b00      	cmp	r3, #0
 8003548:	d0f0      	beq.n	800352c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	2b01      	cmp	r3, #1
 8003550:	d108      	bne.n	8003564 <HAL_RCC_OscConfig+0x4d8>
 8003552:	4b0f      	ldr	r3, [pc, #60]	@ (8003590 <HAL_RCC_OscConfig+0x504>)
 8003554:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003558:	4a0d      	ldr	r2, [pc, #52]	@ (8003590 <HAL_RCC_OscConfig+0x504>)
 800355a:	f043 0301 	orr.w	r3, r3, #1
 800355e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003562:	e029      	b.n	80035b8 <HAL_RCC_OscConfig+0x52c>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	2b05      	cmp	r3, #5
 800356a:	d115      	bne.n	8003598 <HAL_RCC_OscConfig+0x50c>
 800356c:	4b08      	ldr	r3, [pc, #32]	@ (8003590 <HAL_RCC_OscConfig+0x504>)
 800356e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003572:	4a07      	ldr	r2, [pc, #28]	@ (8003590 <HAL_RCC_OscConfig+0x504>)
 8003574:	f043 0304 	orr.w	r3, r3, #4
 8003578:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800357c:	4b04      	ldr	r3, [pc, #16]	@ (8003590 <HAL_RCC_OscConfig+0x504>)
 800357e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003582:	4a03      	ldr	r2, [pc, #12]	@ (8003590 <HAL_RCC_OscConfig+0x504>)
 8003584:	f043 0301 	orr.w	r3, r3, #1
 8003588:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800358c:	e014      	b.n	80035b8 <HAL_RCC_OscConfig+0x52c>
 800358e:	bf00      	nop
 8003590:	40021000 	.word	0x40021000
 8003594:	40007000 	.word	0x40007000
 8003598:	4b9c      	ldr	r3, [pc, #624]	@ (800380c <HAL_RCC_OscConfig+0x780>)
 800359a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800359e:	4a9b      	ldr	r2, [pc, #620]	@ (800380c <HAL_RCC_OscConfig+0x780>)
 80035a0:	f023 0301 	bic.w	r3, r3, #1
 80035a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035a8:	4b98      	ldr	r3, [pc, #608]	@ (800380c <HAL_RCC_OscConfig+0x780>)
 80035aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035ae:	4a97      	ldr	r2, [pc, #604]	@ (800380c <HAL_RCC_OscConfig+0x780>)
 80035b0:	f023 0304 	bic.w	r3, r3, #4
 80035b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d016      	beq.n	80035ee <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035c0:	f7fe fc2a 	bl	8001e18 <HAL_GetTick>
 80035c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035c6:	e00a      	b.n	80035de <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035c8:	f7fe fc26 	bl	8001e18 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e12a      	b.n	8003834 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035de:	4b8b      	ldr	r3, [pc, #556]	@ (800380c <HAL_RCC_OscConfig+0x780>)
 80035e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035e4:	f003 0302 	and.w	r3, r3, #2
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d0ed      	beq.n	80035c8 <HAL_RCC_OscConfig+0x53c>
 80035ec:	e015      	b.n	800361a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ee:	f7fe fc13 	bl	8001e18 <HAL_GetTick>
 80035f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035f4:	e00a      	b.n	800360c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035f6:	f7fe fc0f 	bl	8001e18 <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003604:	4293      	cmp	r3, r2
 8003606:	d901      	bls.n	800360c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e113      	b.n	8003834 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800360c:	4b7f      	ldr	r3, [pc, #508]	@ (800380c <HAL_RCC_OscConfig+0x780>)
 800360e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1ed      	bne.n	80035f6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800361a:	7ffb      	ldrb	r3, [r7, #31]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d105      	bne.n	800362c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003620:	4b7a      	ldr	r3, [pc, #488]	@ (800380c <HAL_RCC_OscConfig+0x780>)
 8003622:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003624:	4a79      	ldr	r2, [pc, #484]	@ (800380c <HAL_RCC_OscConfig+0x780>)
 8003626:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800362a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003630:	2b00      	cmp	r3, #0
 8003632:	f000 80fe 	beq.w	8003832 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800363a:	2b02      	cmp	r3, #2
 800363c:	f040 80d0 	bne.w	80037e0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003640:	4b72      	ldr	r3, [pc, #456]	@ (800380c <HAL_RCC_OscConfig+0x780>)
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	f003 0203 	and.w	r2, r3, #3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003650:	429a      	cmp	r2, r3
 8003652:	d130      	bne.n	80036b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800365e:	3b01      	subs	r3, #1
 8003660:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003662:	429a      	cmp	r2, r3
 8003664:	d127      	bne.n	80036b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003670:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003672:	429a      	cmp	r2, r3
 8003674:	d11f      	bne.n	80036b6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003680:	2a07      	cmp	r2, #7
 8003682:	bf14      	ite	ne
 8003684:	2201      	movne	r2, #1
 8003686:	2200      	moveq	r2, #0
 8003688:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800368a:	4293      	cmp	r3, r2
 800368c:	d113      	bne.n	80036b6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003698:	085b      	lsrs	r3, r3, #1
 800369a:	3b01      	subs	r3, #1
 800369c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800369e:	429a      	cmp	r2, r3
 80036a0:	d109      	bne.n	80036b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ac:	085b      	lsrs	r3, r3, #1
 80036ae:	3b01      	subs	r3, #1
 80036b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d06e      	beq.n	8003794 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	2b0c      	cmp	r3, #12
 80036ba:	d069      	beq.n	8003790 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80036bc:	4b53      	ldr	r3, [pc, #332]	@ (800380c <HAL_RCC_OscConfig+0x780>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d105      	bne.n	80036d4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80036c8:	4b50      	ldr	r3, [pc, #320]	@ (800380c <HAL_RCC_OscConfig+0x780>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d001      	beq.n	80036d8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e0ad      	b.n	8003834 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80036d8:	4b4c      	ldr	r3, [pc, #304]	@ (800380c <HAL_RCC_OscConfig+0x780>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a4b      	ldr	r2, [pc, #300]	@ (800380c <HAL_RCC_OscConfig+0x780>)
 80036de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80036e2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036e4:	f7fe fb98 	bl	8001e18 <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036ea:	e008      	b.n	80036fe <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ec:	f7fe fb94 	bl	8001e18 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e09a      	b.n	8003834 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036fe:	4b43      	ldr	r3, [pc, #268]	@ (800380c <HAL_RCC_OscConfig+0x780>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1f0      	bne.n	80036ec <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800370a:	4b40      	ldr	r3, [pc, #256]	@ (800380c <HAL_RCC_OscConfig+0x780>)
 800370c:	68da      	ldr	r2, [r3, #12]
 800370e:	4b40      	ldr	r3, [pc, #256]	@ (8003810 <HAL_RCC_OscConfig+0x784>)
 8003710:	4013      	ands	r3, r2
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800371a:	3a01      	subs	r2, #1
 800371c:	0112      	lsls	r2, r2, #4
 800371e:	4311      	orrs	r1, r2
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003724:	0212      	lsls	r2, r2, #8
 8003726:	4311      	orrs	r1, r2
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800372c:	0852      	lsrs	r2, r2, #1
 800372e:	3a01      	subs	r2, #1
 8003730:	0552      	lsls	r2, r2, #21
 8003732:	4311      	orrs	r1, r2
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003738:	0852      	lsrs	r2, r2, #1
 800373a:	3a01      	subs	r2, #1
 800373c:	0652      	lsls	r2, r2, #25
 800373e:	4311      	orrs	r1, r2
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003744:	0912      	lsrs	r2, r2, #4
 8003746:	0452      	lsls	r2, r2, #17
 8003748:	430a      	orrs	r2, r1
 800374a:	4930      	ldr	r1, [pc, #192]	@ (800380c <HAL_RCC_OscConfig+0x780>)
 800374c:	4313      	orrs	r3, r2
 800374e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003750:	4b2e      	ldr	r3, [pc, #184]	@ (800380c <HAL_RCC_OscConfig+0x780>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a2d      	ldr	r2, [pc, #180]	@ (800380c <HAL_RCC_OscConfig+0x780>)
 8003756:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800375a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800375c:	4b2b      	ldr	r3, [pc, #172]	@ (800380c <HAL_RCC_OscConfig+0x780>)
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	4a2a      	ldr	r2, [pc, #168]	@ (800380c <HAL_RCC_OscConfig+0x780>)
 8003762:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003766:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003768:	f7fe fb56 	bl	8001e18 <HAL_GetTick>
 800376c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800376e:	e008      	b.n	8003782 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003770:	f7fe fb52 	bl	8001e18 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b02      	cmp	r3, #2
 800377c:	d901      	bls.n	8003782 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e058      	b.n	8003834 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003782:	4b22      	ldr	r3, [pc, #136]	@ (800380c <HAL_RCC_OscConfig+0x780>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d0f0      	beq.n	8003770 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800378e:	e050      	b.n	8003832 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e04f      	b.n	8003834 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003794:	4b1d      	ldr	r3, [pc, #116]	@ (800380c <HAL_RCC_OscConfig+0x780>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d148      	bne.n	8003832 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80037a0:	4b1a      	ldr	r3, [pc, #104]	@ (800380c <HAL_RCC_OscConfig+0x780>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a19      	ldr	r2, [pc, #100]	@ (800380c <HAL_RCC_OscConfig+0x780>)
 80037a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037aa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037ac:	4b17      	ldr	r3, [pc, #92]	@ (800380c <HAL_RCC_OscConfig+0x780>)
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	4a16      	ldr	r2, [pc, #88]	@ (800380c <HAL_RCC_OscConfig+0x780>)
 80037b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037b6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80037b8:	f7fe fb2e 	bl	8001e18 <HAL_GetTick>
 80037bc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037be:	e008      	b.n	80037d2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037c0:	f7fe fb2a 	bl	8001e18 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e030      	b.n	8003834 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037d2:	4b0e      	ldr	r3, [pc, #56]	@ (800380c <HAL_RCC_OscConfig+0x780>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d0f0      	beq.n	80037c0 <HAL_RCC_OscConfig+0x734>
 80037de:	e028      	b.n	8003832 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	2b0c      	cmp	r3, #12
 80037e4:	d023      	beq.n	800382e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037e6:	4b09      	ldr	r3, [pc, #36]	@ (800380c <HAL_RCC_OscConfig+0x780>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a08      	ldr	r2, [pc, #32]	@ (800380c <HAL_RCC_OscConfig+0x780>)
 80037ec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f2:	f7fe fb11 	bl	8001e18 <HAL_GetTick>
 80037f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037f8:	e00c      	b.n	8003814 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037fa:	f7fe fb0d 	bl	8001e18 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	2b02      	cmp	r3, #2
 8003806:	d905      	bls.n	8003814 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e013      	b.n	8003834 <HAL_RCC_OscConfig+0x7a8>
 800380c:	40021000 	.word	0x40021000
 8003810:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003814:	4b09      	ldr	r3, [pc, #36]	@ (800383c <HAL_RCC_OscConfig+0x7b0>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1ec      	bne.n	80037fa <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003820:	4b06      	ldr	r3, [pc, #24]	@ (800383c <HAL_RCC_OscConfig+0x7b0>)
 8003822:	68da      	ldr	r2, [r3, #12]
 8003824:	4905      	ldr	r1, [pc, #20]	@ (800383c <HAL_RCC_OscConfig+0x7b0>)
 8003826:	4b06      	ldr	r3, [pc, #24]	@ (8003840 <HAL_RCC_OscConfig+0x7b4>)
 8003828:	4013      	ands	r3, r2
 800382a:	60cb      	str	r3, [r1, #12]
 800382c:	e001      	b.n	8003832 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e000      	b.n	8003834 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	3720      	adds	r7, #32
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	40021000 	.word	0x40021000
 8003840:	feeefffc 	.word	0xfeeefffc

08003844 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d101      	bne.n	8003858 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e0e7      	b.n	8003a28 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003858:	4b75      	ldr	r3, [pc, #468]	@ (8003a30 <HAL_RCC_ClockConfig+0x1ec>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0307 	and.w	r3, r3, #7
 8003860:	683a      	ldr	r2, [r7, #0]
 8003862:	429a      	cmp	r2, r3
 8003864:	d910      	bls.n	8003888 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003866:	4b72      	ldr	r3, [pc, #456]	@ (8003a30 <HAL_RCC_ClockConfig+0x1ec>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f023 0207 	bic.w	r2, r3, #7
 800386e:	4970      	ldr	r1, [pc, #448]	@ (8003a30 <HAL_RCC_ClockConfig+0x1ec>)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	4313      	orrs	r3, r2
 8003874:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003876:	4b6e      	ldr	r3, [pc, #440]	@ (8003a30 <HAL_RCC_ClockConfig+0x1ec>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0307 	and.w	r3, r3, #7
 800387e:	683a      	ldr	r2, [r7, #0]
 8003880:	429a      	cmp	r2, r3
 8003882:	d001      	beq.n	8003888 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e0cf      	b.n	8003a28 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0302 	and.w	r3, r3, #2
 8003890:	2b00      	cmp	r3, #0
 8003892:	d010      	beq.n	80038b6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689a      	ldr	r2, [r3, #8]
 8003898:	4b66      	ldr	r3, [pc, #408]	@ (8003a34 <HAL_RCC_ClockConfig+0x1f0>)
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d908      	bls.n	80038b6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038a4:	4b63      	ldr	r3, [pc, #396]	@ (8003a34 <HAL_RCC_ClockConfig+0x1f0>)
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	4960      	ldr	r1, [pc, #384]	@ (8003a34 <HAL_RCC_ClockConfig+0x1f0>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d04c      	beq.n	800395c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	2b03      	cmp	r3, #3
 80038c8:	d107      	bne.n	80038da <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038ca:	4b5a      	ldr	r3, [pc, #360]	@ (8003a34 <HAL_RCC_ClockConfig+0x1f0>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d121      	bne.n	800391a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e0a6      	b.n	8003a28 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d107      	bne.n	80038f2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038e2:	4b54      	ldr	r3, [pc, #336]	@ (8003a34 <HAL_RCC_ClockConfig+0x1f0>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d115      	bne.n	800391a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e09a      	b.n	8003a28 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d107      	bne.n	800390a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038fa:	4b4e      	ldr	r3, [pc, #312]	@ (8003a34 <HAL_RCC_ClockConfig+0x1f0>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0302 	and.w	r3, r3, #2
 8003902:	2b00      	cmp	r3, #0
 8003904:	d109      	bne.n	800391a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e08e      	b.n	8003a28 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800390a:	4b4a      	ldr	r3, [pc, #296]	@ (8003a34 <HAL_RCC_ClockConfig+0x1f0>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e086      	b.n	8003a28 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800391a:	4b46      	ldr	r3, [pc, #280]	@ (8003a34 <HAL_RCC_ClockConfig+0x1f0>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f023 0203 	bic.w	r2, r3, #3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	4943      	ldr	r1, [pc, #268]	@ (8003a34 <HAL_RCC_ClockConfig+0x1f0>)
 8003928:	4313      	orrs	r3, r2
 800392a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800392c:	f7fe fa74 	bl	8001e18 <HAL_GetTick>
 8003930:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003932:	e00a      	b.n	800394a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003934:	f7fe fa70 	bl	8001e18 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003942:	4293      	cmp	r3, r2
 8003944:	d901      	bls.n	800394a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e06e      	b.n	8003a28 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800394a:	4b3a      	ldr	r3, [pc, #232]	@ (8003a34 <HAL_RCC_ClockConfig+0x1f0>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f003 020c 	and.w	r2, r3, #12
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	429a      	cmp	r2, r3
 800395a:	d1eb      	bne.n	8003934 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0302 	and.w	r3, r3, #2
 8003964:	2b00      	cmp	r3, #0
 8003966:	d010      	beq.n	800398a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	689a      	ldr	r2, [r3, #8]
 800396c:	4b31      	ldr	r3, [pc, #196]	@ (8003a34 <HAL_RCC_ClockConfig+0x1f0>)
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003974:	429a      	cmp	r2, r3
 8003976:	d208      	bcs.n	800398a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003978:	4b2e      	ldr	r3, [pc, #184]	@ (8003a34 <HAL_RCC_ClockConfig+0x1f0>)
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	492b      	ldr	r1, [pc, #172]	@ (8003a34 <HAL_RCC_ClockConfig+0x1f0>)
 8003986:	4313      	orrs	r3, r2
 8003988:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800398a:	4b29      	ldr	r3, [pc, #164]	@ (8003a30 <HAL_RCC_ClockConfig+0x1ec>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0307 	and.w	r3, r3, #7
 8003992:	683a      	ldr	r2, [r7, #0]
 8003994:	429a      	cmp	r2, r3
 8003996:	d210      	bcs.n	80039ba <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003998:	4b25      	ldr	r3, [pc, #148]	@ (8003a30 <HAL_RCC_ClockConfig+0x1ec>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f023 0207 	bic.w	r2, r3, #7
 80039a0:	4923      	ldr	r1, [pc, #140]	@ (8003a30 <HAL_RCC_ClockConfig+0x1ec>)
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039a8:	4b21      	ldr	r3, [pc, #132]	@ (8003a30 <HAL_RCC_ClockConfig+0x1ec>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0307 	and.w	r3, r3, #7
 80039b0:	683a      	ldr	r2, [r7, #0]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d001      	beq.n	80039ba <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e036      	b.n	8003a28 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0304 	and.w	r3, r3, #4
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d008      	beq.n	80039d8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039c6:	4b1b      	ldr	r3, [pc, #108]	@ (8003a34 <HAL_RCC_ClockConfig+0x1f0>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	4918      	ldr	r1, [pc, #96]	@ (8003a34 <HAL_RCC_ClockConfig+0x1f0>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0308 	and.w	r3, r3, #8
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d009      	beq.n	80039f8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039e4:	4b13      	ldr	r3, [pc, #76]	@ (8003a34 <HAL_RCC_ClockConfig+0x1f0>)
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	00db      	lsls	r3, r3, #3
 80039f2:	4910      	ldr	r1, [pc, #64]	@ (8003a34 <HAL_RCC_ClockConfig+0x1f0>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039f8:	f000 f824 	bl	8003a44 <HAL_RCC_GetSysClockFreq>
 80039fc:	4602      	mov	r2, r0
 80039fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003a34 <HAL_RCC_ClockConfig+0x1f0>)
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	091b      	lsrs	r3, r3, #4
 8003a04:	f003 030f 	and.w	r3, r3, #15
 8003a08:	490b      	ldr	r1, [pc, #44]	@ (8003a38 <HAL_RCC_ClockConfig+0x1f4>)
 8003a0a:	5ccb      	ldrb	r3, [r1, r3]
 8003a0c:	f003 031f 	and.w	r3, r3, #31
 8003a10:	fa22 f303 	lsr.w	r3, r2, r3
 8003a14:	4a09      	ldr	r2, [pc, #36]	@ (8003a3c <HAL_RCC_ClockConfig+0x1f8>)
 8003a16:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003a18:	4b09      	ldr	r3, [pc, #36]	@ (8003a40 <HAL_RCC_ClockConfig+0x1fc>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7fe f9ab 	bl	8001d78 <HAL_InitTick>
 8003a22:	4603      	mov	r3, r0
 8003a24:	72fb      	strb	r3, [r7, #11]

  return status;
 8003a26:	7afb      	ldrb	r3, [r7, #11]
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3710      	adds	r7, #16
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	40022000 	.word	0x40022000
 8003a34:	40021000 	.word	0x40021000
 8003a38:	0800f328 	.word	0x0800f328
 8003a3c:	20000000 	.word	0x20000000
 8003a40:	20000004 	.word	0x20000004

08003a44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b089      	sub	sp, #36	@ 0x24
 8003a48:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	61fb      	str	r3, [r7, #28]
 8003a4e:	2300      	movs	r3, #0
 8003a50:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a52:	4b3e      	ldr	r3, [pc, #248]	@ (8003b4c <HAL_RCC_GetSysClockFreq+0x108>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f003 030c 	and.w	r3, r3, #12
 8003a5a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a5c:	4b3b      	ldr	r3, [pc, #236]	@ (8003b4c <HAL_RCC_GetSysClockFreq+0x108>)
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	f003 0303 	and.w	r3, r3, #3
 8003a64:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d005      	beq.n	8003a78 <HAL_RCC_GetSysClockFreq+0x34>
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	2b0c      	cmp	r3, #12
 8003a70:	d121      	bne.n	8003ab6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d11e      	bne.n	8003ab6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a78:	4b34      	ldr	r3, [pc, #208]	@ (8003b4c <HAL_RCC_GetSysClockFreq+0x108>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0308 	and.w	r3, r3, #8
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d107      	bne.n	8003a94 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a84:	4b31      	ldr	r3, [pc, #196]	@ (8003b4c <HAL_RCC_GetSysClockFreq+0x108>)
 8003a86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a8a:	0a1b      	lsrs	r3, r3, #8
 8003a8c:	f003 030f 	and.w	r3, r3, #15
 8003a90:	61fb      	str	r3, [r7, #28]
 8003a92:	e005      	b.n	8003aa0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a94:	4b2d      	ldr	r3, [pc, #180]	@ (8003b4c <HAL_RCC_GetSysClockFreq+0x108>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	091b      	lsrs	r3, r3, #4
 8003a9a:	f003 030f 	and.w	r3, r3, #15
 8003a9e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003aa0:	4a2b      	ldr	r2, [pc, #172]	@ (8003b50 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aa8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d10d      	bne.n	8003acc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ab4:	e00a      	b.n	8003acc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	2b04      	cmp	r3, #4
 8003aba:	d102      	bne.n	8003ac2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003abc:	4b25      	ldr	r3, [pc, #148]	@ (8003b54 <HAL_RCC_GetSysClockFreq+0x110>)
 8003abe:	61bb      	str	r3, [r7, #24]
 8003ac0:	e004      	b.n	8003acc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	2b08      	cmp	r3, #8
 8003ac6:	d101      	bne.n	8003acc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ac8:	4b23      	ldr	r3, [pc, #140]	@ (8003b58 <HAL_RCC_GetSysClockFreq+0x114>)
 8003aca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	2b0c      	cmp	r3, #12
 8003ad0:	d134      	bne.n	8003b3c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ad2:	4b1e      	ldr	r3, [pc, #120]	@ (8003b4c <HAL_RCC_GetSysClockFreq+0x108>)
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	f003 0303 	and.w	r3, r3, #3
 8003ada:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d003      	beq.n	8003aea <HAL_RCC_GetSysClockFreq+0xa6>
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	2b03      	cmp	r3, #3
 8003ae6:	d003      	beq.n	8003af0 <HAL_RCC_GetSysClockFreq+0xac>
 8003ae8:	e005      	b.n	8003af6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003aea:	4b1a      	ldr	r3, [pc, #104]	@ (8003b54 <HAL_RCC_GetSysClockFreq+0x110>)
 8003aec:	617b      	str	r3, [r7, #20]
      break;
 8003aee:	e005      	b.n	8003afc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003af0:	4b19      	ldr	r3, [pc, #100]	@ (8003b58 <HAL_RCC_GetSysClockFreq+0x114>)
 8003af2:	617b      	str	r3, [r7, #20]
      break;
 8003af4:	e002      	b.n	8003afc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	617b      	str	r3, [r7, #20]
      break;
 8003afa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003afc:	4b13      	ldr	r3, [pc, #76]	@ (8003b4c <HAL_RCC_GetSysClockFreq+0x108>)
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	091b      	lsrs	r3, r3, #4
 8003b02:	f003 0307 	and.w	r3, r3, #7
 8003b06:	3301      	adds	r3, #1
 8003b08:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003b0a:	4b10      	ldr	r3, [pc, #64]	@ (8003b4c <HAL_RCC_GetSysClockFreq+0x108>)
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	0a1b      	lsrs	r3, r3, #8
 8003b10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b14:	697a      	ldr	r2, [r7, #20]
 8003b16:	fb03 f202 	mul.w	r2, r3, r2
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b20:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b22:	4b0a      	ldr	r3, [pc, #40]	@ (8003b4c <HAL_RCC_GetSysClockFreq+0x108>)
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	0e5b      	lsrs	r3, r3, #25
 8003b28:	f003 0303 	and.w	r3, r3, #3
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	005b      	lsls	r3, r3, #1
 8003b30:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003b32:	697a      	ldr	r2, [r7, #20]
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b3a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003b3c:	69bb      	ldr	r3, [r7, #24]
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3724      	adds	r7, #36	@ 0x24
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	40021000 	.word	0x40021000
 8003b50:	0800f340 	.word	0x0800f340
 8003b54:	00f42400 	.word	0x00f42400
 8003b58:	007a1200 	.word	0x007a1200

08003b5c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b60:	4b03      	ldr	r3, [pc, #12]	@ (8003b70 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b62:	681b      	ldr	r3, [r3, #0]
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop
 8003b70:	20000000 	.word	0x20000000

08003b74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003b78:	f7ff fff0 	bl	8003b5c <HAL_RCC_GetHCLKFreq>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	4b06      	ldr	r3, [pc, #24]	@ (8003b98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	0a1b      	lsrs	r3, r3, #8
 8003b84:	f003 0307 	and.w	r3, r3, #7
 8003b88:	4904      	ldr	r1, [pc, #16]	@ (8003b9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b8a:	5ccb      	ldrb	r3, [r1, r3]
 8003b8c:	f003 031f 	and.w	r3, r3, #31
 8003b90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	40021000 	.word	0x40021000
 8003b9c:	0800f338 	.word	0x0800f338

08003ba0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003ba4:	f7ff ffda 	bl	8003b5c <HAL_RCC_GetHCLKFreq>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	4b06      	ldr	r3, [pc, #24]	@ (8003bc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	0adb      	lsrs	r3, r3, #11
 8003bb0:	f003 0307 	and.w	r3, r3, #7
 8003bb4:	4904      	ldr	r1, [pc, #16]	@ (8003bc8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003bb6:	5ccb      	ldrb	r3, [r1, r3]
 8003bb8:	f003 031f 	and.w	r3, r3, #31
 8003bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	40021000 	.word	0x40021000
 8003bc8:	0800f338 	.word	0x0800f338

08003bcc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003bd8:	4b2a      	ldr	r3, [pc, #168]	@ (8003c84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d003      	beq.n	8003bec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003be4:	f7ff f9ee 	bl	8002fc4 <HAL_PWREx_GetVoltageRange>
 8003be8:	6178      	str	r0, [r7, #20]
 8003bea:	e014      	b.n	8003c16 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003bec:	4b25      	ldr	r3, [pc, #148]	@ (8003c84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bf0:	4a24      	ldr	r2, [pc, #144]	@ (8003c84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bf2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bf6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bf8:	4b22      	ldr	r3, [pc, #136]	@ (8003c84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c00:	60fb      	str	r3, [r7, #12]
 8003c02:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003c04:	f7ff f9de 	bl	8002fc4 <HAL_PWREx_GetVoltageRange>
 8003c08:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003c0a:	4b1e      	ldr	r3, [pc, #120]	@ (8003c84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c0e:	4a1d      	ldr	r2, [pc, #116]	@ (8003c84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c10:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c14:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c1c:	d10b      	bne.n	8003c36 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2b80      	cmp	r3, #128	@ 0x80
 8003c22:	d919      	bls.n	8003c58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2ba0      	cmp	r3, #160	@ 0xa0
 8003c28:	d902      	bls.n	8003c30 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c2a:	2302      	movs	r3, #2
 8003c2c:	613b      	str	r3, [r7, #16]
 8003c2e:	e013      	b.n	8003c58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c30:	2301      	movs	r3, #1
 8003c32:	613b      	str	r3, [r7, #16]
 8003c34:	e010      	b.n	8003c58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2b80      	cmp	r3, #128	@ 0x80
 8003c3a:	d902      	bls.n	8003c42 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	613b      	str	r3, [r7, #16]
 8003c40:	e00a      	b.n	8003c58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2b80      	cmp	r3, #128	@ 0x80
 8003c46:	d102      	bne.n	8003c4e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c48:	2302      	movs	r3, #2
 8003c4a:	613b      	str	r3, [r7, #16]
 8003c4c:	e004      	b.n	8003c58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2b70      	cmp	r3, #112	@ 0x70
 8003c52:	d101      	bne.n	8003c58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c54:	2301      	movs	r3, #1
 8003c56:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c58:	4b0b      	ldr	r3, [pc, #44]	@ (8003c88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f023 0207 	bic.w	r2, r3, #7
 8003c60:	4909      	ldr	r1, [pc, #36]	@ (8003c88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003c68:	4b07      	ldr	r3, [pc, #28]	@ (8003c88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0307 	and.w	r3, r3, #7
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d001      	beq.n	8003c7a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e000      	b.n	8003c7c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3718      	adds	r7, #24
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	40021000 	.word	0x40021000
 8003c88:	40022000 	.word	0x40022000

08003c8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b086      	sub	sp, #24
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c94:	2300      	movs	r3, #0
 8003c96:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c98:	2300      	movs	r3, #0
 8003c9a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d041      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003cac:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003cb0:	d02a      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003cb2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003cb6:	d824      	bhi.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003cb8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003cbc:	d008      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003cbe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003cc2:	d81e      	bhi.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d00a      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003cc8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ccc:	d010      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003cce:	e018      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003cd0:	4b86      	ldr	r3, [pc, #536]	@ (8003eec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	4a85      	ldr	r2, [pc, #532]	@ (8003eec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cd6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cda:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cdc:	e015      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	3304      	adds	r3, #4
 8003ce2:	2100      	movs	r1, #0
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f000 fabb 	bl	8004260 <RCCEx_PLLSAI1_Config>
 8003cea:	4603      	mov	r3, r0
 8003cec:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cee:	e00c      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	3320      	adds	r3, #32
 8003cf4:	2100      	movs	r1, #0
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 fba6 	bl	8004448 <RCCEx_PLLSAI2_Config>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d00:	e003      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	74fb      	strb	r3, [r7, #19]
      break;
 8003d06:	e000      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003d08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d0a:	7cfb      	ldrb	r3, [r7, #19]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d10b      	bne.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d10:	4b76      	ldr	r3, [pc, #472]	@ (8003eec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d16:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d1e:	4973      	ldr	r1, [pc, #460]	@ (8003eec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003d26:	e001      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d28:	7cfb      	ldrb	r3, [r7, #19]
 8003d2a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d041      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d3c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003d40:	d02a      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003d42:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003d46:	d824      	bhi.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003d48:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003d4c:	d008      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003d4e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003d52:	d81e      	bhi.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00a      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003d58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d5c:	d010      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003d5e:	e018      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d60:	4b62      	ldr	r3, [pc, #392]	@ (8003eec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	4a61      	ldr	r2, [pc, #388]	@ (8003eec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d6a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d6c:	e015      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	3304      	adds	r3, #4
 8003d72:	2100      	movs	r1, #0
 8003d74:	4618      	mov	r0, r3
 8003d76:	f000 fa73 	bl	8004260 <RCCEx_PLLSAI1_Config>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d7e:	e00c      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	3320      	adds	r3, #32
 8003d84:	2100      	movs	r1, #0
 8003d86:	4618      	mov	r0, r3
 8003d88:	f000 fb5e 	bl	8004448 <RCCEx_PLLSAI2_Config>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d90:	e003      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	74fb      	strb	r3, [r7, #19]
      break;
 8003d96:	e000      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003d98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d9a:	7cfb      	ldrb	r3, [r7, #19]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d10b      	bne.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003da0:	4b52      	ldr	r3, [pc, #328]	@ (8003eec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003da6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003dae:	494f      	ldr	r1, [pc, #316]	@ (8003eec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003db6:	e001      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003db8:	7cfb      	ldrb	r3, [r7, #19]
 8003dba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f000 80a0 	beq.w	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003dce:	4b47      	ldr	r3, [pc, #284]	@ (8003eec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d101      	bne.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e000      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003dde:	2300      	movs	r3, #0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00d      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003de4:	4b41      	ldr	r3, [pc, #260]	@ (8003eec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003de6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003de8:	4a40      	ldr	r2, [pc, #256]	@ (8003eec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dee:	6593      	str	r3, [r2, #88]	@ 0x58
 8003df0:	4b3e      	ldr	r3, [pc, #248]	@ (8003eec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003df2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003df4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003df8:	60bb      	str	r3, [r7, #8]
 8003dfa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e00:	4b3b      	ldr	r3, [pc, #236]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a3a      	ldr	r2, [pc, #232]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003e06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e0a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e0c:	f7fe f804 	bl	8001e18 <HAL_GetTick>
 8003e10:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e12:	e009      	b.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e14:	f7fe f800 	bl	8001e18 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d902      	bls.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	74fb      	strb	r3, [r7, #19]
        break;
 8003e26:	e005      	b.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e28:	4b31      	ldr	r3, [pc, #196]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d0ef      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003e34:	7cfb      	ldrb	r3, [r7, #19]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d15c      	bne.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e3a:	4b2c      	ldr	r3, [pc, #176]	@ (8003eec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e40:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e44:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d01f      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e52:	697a      	ldr	r2, [r7, #20]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d019      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e58:	4b24      	ldr	r3, [pc, #144]	@ (8003eec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e62:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e64:	4b21      	ldr	r3, [pc, #132]	@ (8003eec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e6a:	4a20      	ldr	r2, [pc, #128]	@ (8003eec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e74:	4b1d      	ldr	r3, [pc, #116]	@ (8003eec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e7a:	4a1c      	ldr	r2, [pc, #112]	@ (8003eec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e84:	4a19      	ldr	r2, [pc, #100]	@ (8003eec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d016      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e96:	f7fd ffbf 	bl	8001e18 <HAL_GetTick>
 8003e9a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e9c:	e00b      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e9e:	f7fd ffbb 	bl	8001e18 <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d902      	bls.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	74fb      	strb	r3, [r7, #19]
            break;
 8003eb4:	e006      	b.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8003eec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ebc:	f003 0302 	and.w	r3, r3, #2
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d0ec      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003ec4:	7cfb      	ldrb	r3, [r7, #19]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d10c      	bne.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003eca:	4b08      	ldr	r3, [pc, #32]	@ (8003eec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ed0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003eda:	4904      	ldr	r1, [pc, #16]	@ (8003eec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003ee2:	e009      	b.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ee4:	7cfb      	ldrb	r3, [r7, #19]
 8003ee6:	74bb      	strb	r3, [r7, #18]
 8003ee8:	e006      	b.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003eea:	bf00      	nop
 8003eec:	40021000 	.word	0x40021000
 8003ef0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ef4:	7cfb      	ldrb	r3, [r7, #19]
 8003ef6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ef8:	7c7b      	ldrb	r3, [r7, #17]
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d105      	bne.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003efe:	4b9e      	ldr	r3, [pc, #632]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f02:	4a9d      	ldr	r2, [pc, #628]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f08:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00a      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f16:	4b98      	ldr	r3, [pc, #608]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f1c:	f023 0203 	bic.w	r2, r3, #3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f24:	4994      	ldr	r1, [pc, #592]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0302 	and.w	r3, r3, #2
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00a      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f38:	4b8f      	ldr	r3, [pc, #572]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f3e:	f023 020c 	bic.w	r2, r3, #12
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f46:	498c      	ldr	r1, [pc, #560]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0304 	and.w	r3, r3, #4
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00a      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f5a:	4b87      	ldr	r3, [pc, #540]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f60:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f68:	4983      	ldr	r1, [pc, #524]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0308 	and.w	r3, r3, #8
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d00a      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f7c:	4b7e      	ldr	r3, [pc, #504]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f82:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f8a:	497b      	ldr	r1, [pc, #492]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0310 	and.w	r3, r3, #16
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00a      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f9e:	4b76      	ldr	r3, [pc, #472]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fa4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fac:	4972      	ldr	r1, [pc, #456]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0320 	and.w	r3, r3, #32
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d00a      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003fc0:	4b6d      	ldr	r3, [pc, #436]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fc6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fce:	496a      	ldr	r1, [pc, #424]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00a      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fe2:	4b65      	ldr	r3, [pc, #404]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fe8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ff0:	4961      	ldr	r1, [pc, #388]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004000:	2b00      	cmp	r3, #0
 8004002:	d00a      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004004:	4b5c      	ldr	r3, [pc, #368]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004006:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800400a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004012:	4959      	ldr	r1, [pc, #356]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004014:	4313      	orrs	r3, r2
 8004016:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00a      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004026:	4b54      	ldr	r3, [pc, #336]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004028:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800402c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004034:	4950      	ldr	r1, [pc, #320]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004036:	4313      	orrs	r3, r2
 8004038:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004044:	2b00      	cmp	r3, #0
 8004046:	d00a      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004048:	4b4b      	ldr	r3, [pc, #300]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800404a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800404e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004056:	4948      	ldr	r1, [pc, #288]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004058:	4313      	orrs	r3, r2
 800405a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00a      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800406a:	4b43      	ldr	r3, [pc, #268]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800406c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004070:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004078:	493f      	ldr	r1, [pc, #252]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800407a:	4313      	orrs	r3, r2
 800407c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d028      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800408c:	4b3a      	ldr	r3, [pc, #232]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800408e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004092:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800409a:	4937      	ldr	r1, [pc, #220]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800409c:	4313      	orrs	r3, r2
 800409e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040aa:	d106      	bne.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040ac:	4b32      	ldr	r3, [pc, #200]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	4a31      	ldr	r2, [pc, #196]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040b6:	60d3      	str	r3, [r2, #12]
 80040b8:	e011      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040be:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80040c2:	d10c      	bne.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	3304      	adds	r3, #4
 80040c8:	2101      	movs	r1, #1
 80040ca:	4618      	mov	r0, r3
 80040cc:	f000 f8c8 	bl	8004260 <RCCEx_PLLSAI1_Config>
 80040d0:	4603      	mov	r3, r0
 80040d2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80040d4:	7cfb      	ldrb	r3, [r7, #19]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d001      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80040da:	7cfb      	ldrb	r3, [r7, #19]
 80040dc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d028      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80040ea:	4b23      	ldr	r3, [pc, #140]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040f0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040f8:	491f      	ldr	r1, [pc, #124]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004104:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004108:	d106      	bne.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800410a:	4b1b      	ldr	r3, [pc, #108]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	4a1a      	ldr	r2, [pc, #104]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004110:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004114:	60d3      	str	r3, [r2, #12]
 8004116:	e011      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800411c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004120:	d10c      	bne.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	3304      	adds	r3, #4
 8004126:	2101      	movs	r1, #1
 8004128:	4618      	mov	r0, r3
 800412a:	f000 f899 	bl	8004260 <RCCEx_PLLSAI1_Config>
 800412e:	4603      	mov	r3, r0
 8004130:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004132:	7cfb      	ldrb	r3, [r7, #19]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d001      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004138:	7cfb      	ldrb	r3, [r7, #19]
 800413a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d02b      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004148:	4b0b      	ldr	r3, [pc, #44]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800414a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800414e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004156:	4908      	ldr	r1, [pc, #32]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004158:	4313      	orrs	r3, r2
 800415a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004162:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004166:	d109      	bne.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004168:	4b03      	ldr	r3, [pc, #12]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	4a02      	ldr	r2, [pc, #8]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800416e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004172:	60d3      	str	r3, [r2, #12]
 8004174:	e014      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004176:	bf00      	nop
 8004178:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004180:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004184:	d10c      	bne.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	3304      	adds	r3, #4
 800418a:	2101      	movs	r1, #1
 800418c:	4618      	mov	r0, r3
 800418e:	f000 f867 	bl	8004260 <RCCEx_PLLSAI1_Config>
 8004192:	4603      	mov	r3, r0
 8004194:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004196:	7cfb      	ldrb	r3, [r7, #19]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d001      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800419c:	7cfb      	ldrb	r3, [r7, #19]
 800419e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d02f      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041ac:	4b2b      	ldr	r3, [pc, #172]	@ (800425c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041b2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80041ba:	4928      	ldr	r1, [pc, #160]	@ (800425c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80041c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80041ca:	d10d      	bne.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	3304      	adds	r3, #4
 80041d0:	2102      	movs	r1, #2
 80041d2:	4618      	mov	r0, r3
 80041d4:	f000 f844 	bl	8004260 <RCCEx_PLLSAI1_Config>
 80041d8:	4603      	mov	r3, r0
 80041da:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041dc:	7cfb      	ldrb	r3, [r7, #19]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d014      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80041e2:	7cfb      	ldrb	r3, [r7, #19]
 80041e4:	74bb      	strb	r3, [r7, #18]
 80041e6:	e011      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80041ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041f0:	d10c      	bne.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	3320      	adds	r3, #32
 80041f6:	2102      	movs	r1, #2
 80041f8:	4618      	mov	r0, r3
 80041fa:	f000 f925 	bl	8004448 <RCCEx_PLLSAI2_Config>
 80041fe:	4603      	mov	r3, r0
 8004200:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004202:	7cfb      	ldrb	r3, [r7, #19]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d001      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004208:	7cfb      	ldrb	r3, [r7, #19]
 800420a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004214:	2b00      	cmp	r3, #0
 8004216:	d00a      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004218:	4b10      	ldr	r3, [pc, #64]	@ (800425c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800421a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800421e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004226:	490d      	ldr	r1, [pc, #52]	@ (800425c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004228:	4313      	orrs	r3, r2
 800422a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00b      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800423a:	4b08      	ldr	r3, [pc, #32]	@ (800425c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800423c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004240:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800424a:	4904      	ldr	r1, [pc, #16]	@ (800425c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800424c:	4313      	orrs	r3, r2
 800424e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004252:	7cbb      	ldrb	r3, [r7, #18]
}
 8004254:	4618      	mov	r0, r3
 8004256:	3718      	adds	r7, #24
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	40021000 	.word	0x40021000

08004260 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800426a:	2300      	movs	r3, #0
 800426c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800426e:	4b75      	ldr	r3, [pc, #468]	@ (8004444 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	f003 0303 	and.w	r3, r3, #3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d018      	beq.n	80042ac <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800427a:	4b72      	ldr	r3, [pc, #456]	@ (8004444 <RCCEx_PLLSAI1_Config+0x1e4>)
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	f003 0203 	and.w	r2, r3, #3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	429a      	cmp	r2, r3
 8004288:	d10d      	bne.n	80042a6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
       ||
 800428e:	2b00      	cmp	r3, #0
 8004290:	d009      	beq.n	80042a6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004292:	4b6c      	ldr	r3, [pc, #432]	@ (8004444 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	091b      	lsrs	r3, r3, #4
 8004298:	f003 0307 	and.w	r3, r3, #7
 800429c:	1c5a      	adds	r2, r3, #1
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
       ||
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d047      	beq.n	8004336 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	73fb      	strb	r3, [r7, #15]
 80042aa:	e044      	b.n	8004336 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2b03      	cmp	r3, #3
 80042b2:	d018      	beq.n	80042e6 <RCCEx_PLLSAI1_Config+0x86>
 80042b4:	2b03      	cmp	r3, #3
 80042b6:	d825      	bhi.n	8004304 <RCCEx_PLLSAI1_Config+0xa4>
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d002      	beq.n	80042c2 <RCCEx_PLLSAI1_Config+0x62>
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d009      	beq.n	80042d4 <RCCEx_PLLSAI1_Config+0x74>
 80042c0:	e020      	b.n	8004304 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80042c2:	4b60      	ldr	r3, [pc, #384]	@ (8004444 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d11d      	bne.n	800430a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042d2:	e01a      	b.n	800430a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80042d4:	4b5b      	ldr	r3, [pc, #364]	@ (8004444 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d116      	bne.n	800430e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042e4:	e013      	b.n	800430e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80042e6:	4b57      	ldr	r3, [pc, #348]	@ (8004444 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d10f      	bne.n	8004312 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80042f2:	4b54      	ldr	r3, [pc, #336]	@ (8004444 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d109      	bne.n	8004312 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004302:	e006      	b.n	8004312 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	73fb      	strb	r3, [r7, #15]
      break;
 8004308:	e004      	b.n	8004314 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800430a:	bf00      	nop
 800430c:	e002      	b.n	8004314 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800430e:	bf00      	nop
 8004310:	e000      	b.n	8004314 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004312:	bf00      	nop
    }

    if(status == HAL_OK)
 8004314:	7bfb      	ldrb	r3, [r7, #15]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10d      	bne.n	8004336 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800431a:	4b4a      	ldr	r3, [pc, #296]	@ (8004444 <RCCEx_PLLSAI1_Config+0x1e4>)
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6819      	ldr	r1, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	3b01      	subs	r3, #1
 800432c:	011b      	lsls	r3, r3, #4
 800432e:	430b      	orrs	r3, r1
 8004330:	4944      	ldr	r1, [pc, #272]	@ (8004444 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004332:	4313      	orrs	r3, r2
 8004334:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004336:	7bfb      	ldrb	r3, [r7, #15]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d17d      	bne.n	8004438 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800433c:	4b41      	ldr	r3, [pc, #260]	@ (8004444 <RCCEx_PLLSAI1_Config+0x1e4>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a40      	ldr	r2, [pc, #256]	@ (8004444 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004342:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004346:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004348:	f7fd fd66 	bl	8001e18 <HAL_GetTick>
 800434c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800434e:	e009      	b.n	8004364 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004350:	f7fd fd62 	bl	8001e18 <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	2b02      	cmp	r3, #2
 800435c:	d902      	bls.n	8004364 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	73fb      	strb	r3, [r7, #15]
        break;
 8004362:	e005      	b.n	8004370 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004364:	4b37      	ldr	r3, [pc, #220]	@ (8004444 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1ef      	bne.n	8004350 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004370:	7bfb      	ldrb	r3, [r7, #15]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d160      	bne.n	8004438 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d111      	bne.n	80043a0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800437c:	4b31      	ldr	r3, [pc, #196]	@ (8004444 <RCCEx_PLLSAI1_Config+0x1e4>)
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004384:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	6892      	ldr	r2, [r2, #8]
 800438c:	0211      	lsls	r1, r2, #8
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	68d2      	ldr	r2, [r2, #12]
 8004392:	0912      	lsrs	r2, r2, #4
 8004394:	0452      	lsls	r2, r2, #17
 8004396:	430a      	orrs	r2, r1
 8004398:	492a      	ldr	r1, [pc, #168]	@ (8004444 <RCCEx_PLLSAI1_Config+0x1e4>)
 800439a:	4313      	orrs	r3, r2
 800439c:	610b      	str	r3, [r1, #16]
 800439e:	e027      	b.n	80043f0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d112      	bne.n	80043cc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80043a6:	4b27      	ldr	r3, [pc, #156]	@ (8004444 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80043ae:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	6892      	ldr	r2, [r2, #8]
 80043b6:	0211      	lsls	r1, r2, #8
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	6912      	ldr	r2, [r2, #16]
 80043bc:	0852      	lsrs	r2, r2, #1
 80043be:	3a01      	subs	r2, #1
 80043c0:	0552      	lsls	r2, r2, #21
 80043c2:	430a      	orrs	r2, r1
 80043c4:	491f      	ldr	r1, [pc, #124]	@ (8004444 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	610b      	str	r3, [r1, #16]
 80043ca:	e011      	b.n	80043f0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80043cc:	4b1d      	ldr	r3, [pc, #116]	@ (8004444 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80043d4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	6892      	ldr	r2, [r2, #8]
 80043dc:	0211      	lsls	r1, r2, #8
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	6952      	ldr	r2, [r2, #20]
 80043e2:	0852      	lsrs	r2, r2, #1
 80043e4:	3a01      	subs	r2, #1
 80043e6:	0652      	lsls	r2, r2, #25
 80043e8:	430a      	orrs	r2, r1
 80043ea:	4916      	ldr	r1, [pc, #88]	@ (8004444 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80043f0:	4b14      	ldr	r3, [pc, #80]	@ (8004444 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a13      	ldr	r2, [pc, #76]	@ (8004444 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043f6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80043fa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043fc:	f7fd fd0c 	bl	8001e18 <HAL_GetTick>
 8004400:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004402:	e009      	b.n	8004418 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004404:	f7fd fd08 	bl	8001e18 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	2b02      	cmp	r3, #2
 8004410:	d902      	bls.n	8004418 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	73fb      	strb	r3, [r7, #15]
          break;
 8004416:	e005      	b.n	8004424 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004418:	4b0a      	ldr	r3, [pc, #40]	@ (8004444 <RCCEx_PLLSAI1_Config+0x1e4>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d0ef      	beq.n	8004404 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004424:	7bfb      	ldrb	r3, [r7, #15]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d106      	bne.n	8004438 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800442a:	4b06      	ldr	r3, [pc, #24]	@ (8004444 <RCCEx_PLLSAI1_Config+0x1e4>)
 800442c:	691a      	ldr	r2, [r3, #16]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	4904      	ldr	r1, [pc, #16]	@ (8004444 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004434:	4313      	orrs	r3, r2
 8004436:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004438:	7bfb      	ldrb	r3, [r7, #15]
}
 800443a:	4618      	mov	r0, r3
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	40021000 	.word	0x40021000

08004448 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004452:	2300      	movs	r3, #0
 8004454:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004456:	4b6a      	ldr	r3, [pc, #424]	@ (8004600 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	f003 0303 	and.w	r3, r3, #3
 800445e:	2b00      	cmp	r3, #0
 8004460:	d018      	beq.n	8004494 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004462:	4b67      	ldr	r3, [pc, #412]	@ (8004600 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	f003 0203 	and.w	r2, r3, #3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	429a      	cmp	r2, r3
 8004470:	d10d      	bne.n	800448e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
       ||
 8004476:	2b00      	cmp	r3, #0
 8004478:	d009      	beq.n	800448e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800447a:	4b61      	ldr	r3, [pc, #388]	@ (8004600 <RCCEx_PLLSAI2_Config+0x1b8>)
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	091b      	lsrs	r3, r3, #4
 8004480:	f003 0307 	and.w	r3, r3, #7
 8004484:	1c5a      	adds	r2, r3, #1
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
       ||
 800448a:	429a      	cmp	r2, r3
 800448c:	d047      	beq.n	800451e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	73fb      	strb	r3, [r7, #15]
 8004492:	e044      	b.n	800451e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2b03      	cmp	r3, #3
 800449a:	d018      	beq.n	80044ce <RCCEx_PLLSAI2_Config+0x86>
 800449c:	2b03      	cmp	r3, #3
 800449e:	d825      	bhi.n	80044ec <RCCEx_PLLSAI2_Config+0xa4>
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d002      	beq.n	80044aa <RCCEx_PLLSAI2_Config+0x62>
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d009      	beq.n	80044bc <RCCEx_PLLSAI2_Config+0x74>
 80044a8:	e020      	b.n	80044ec <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80044aa:	4b55      	ldr	r3, [pc, #340]	@ (8004600 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d11d      	bne.n	80044f2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044ba:	e01a      	b.n	80044f2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80044bc:	4b50      	ldr	r3, [pc, #320]	@ (8004600 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d116      	bne.n	80044f6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044cc:	e013      	b.n	80044f6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80044ce:	4b4c      	ldr	r3, [pc, #304]	@ (8004600 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d10f      	bne.n	80044fa <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80044da:	4b49      	ldr	r3, [pc, #292]	@ (8004600 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d109      	bne.n	80044fa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80044ea:	e006      	b.n	80044fa <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	73fb      	strb	r3, [r7, #15]
      break;
 80044f0:	e004      	b.n	80044fc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80044f2:	bf00      	nop
 80044f4:	e002      	b.n	80044fc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80044f6:	bf00      	nop
 80044f8:	e000      	b.n	80044fc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80044fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80044fc:	7bfb      	ldrb	r3, [r7, #15]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d10d      	bne.n	800451e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004502:	4b3f      	ldr	r3, [pc, #252]	@ (8004600 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6819      	ldr	r1, [r3, #0]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	3b01      	subs	r3, #1
 8004514:	011b      	lsls	r3, r3, #4
 8004516:	430b      	orrs	r3, r1
 8004518:	4939      	ldr	r1, [pc, #228]	@ (8004600 <RCCEx_PLLSAI2_Config+0x1b8>)
 800451a:	4313      	orrs	r3, r2
 800451c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800451e:	7bfb      	ldrb	r3, [r7, #15]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d167      	bne.n	80045f4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004524:	4b36      	ldr	r3, [pc, #216]	@ (8004600 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a35      	ldr	r2, [pc, #212]	@ (8004600 <RCCEx_PLLSAI2_Config+0x1b8>)
 800452a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800452e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004530:	f7fd fc72 	bl	8001e18 <HAL_GetTick>
 8004534:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004536:	e009      	b.n	800454c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004538:	f7fd fc6e 	bl	8001e18 <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	2b02      	cmp	r3, #2
 8004544:	d902      	bls.n	800454c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	73fb      	strb	r3, [r7, #15]
        break;
 800454a:	e005      	b.n	8004558 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800454c:	4b2c      	ldr	r3, [pc, #176]	@ (8004600 <RCCEx_PLLSAI2_Config+0x1b8>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1ef      	bne.n	8004538 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004558:	7bfb      	ldrb	r3, [r7, #15]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d14a      	bne.n	80045f4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d111      	bne.n	8004588 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004564:	4b26      	ldr	r3, [pc, #152]	@ (8004600 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004566:	695b      	ldr	r3, [r3, #20]
 8004568:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800456c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	6892      	ldr	r2, [r2, #8]
 8004574:	0211      	lsls	r1, r2, #8
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	68d2      	ldr	r2, [r2, #12]
 800457a:	0912      	lsrs	r2, r2, #4
 800457c:	0452      	lsls	r2, r2, #17
 800457e:	430a      	orrs	r2, r1
 8004580:	491f      	ldr	r1, [pc, #124]	@ (8004600 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004582:	4313      	orrs	r3, r2
 8004584:	614b      	str	r3, [r1, #20]
 8004586:	e011      	b.n	80045ac <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004588:	4b1d      	ldr	r3, [pc, #116]	@ (8004600 <RCCEx_PLLSAI2_Config+0x1b8>)
 800458a:	695b      	ldr	r3, [r3, #20]
 800458c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004590:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	6892      	ldr	r2, [r2, #8]
 8004598:	0211      	lsls	r1, r2, #8
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	6912      	ldr	r2, [r2, #16]
 800459e:	0852      	lsrs	r2, r2, #1
 80045a0:	3a01      	subs	r2, #1
 80045a2:	0652      	lsls	r2, r2, #25
 80045a4:	430a      	orrs	r2, r1
 80045a6:	4916      	ldr	r1, [pc, #88]	@ (8004600 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045a8:	4313      	orrs	r3, r2
 80045aa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80045ac:	4b14      	ldr	r3, [pc, #80]	@ (8004600 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a13      	ldr	r2, [pc, #76]	@ (8004600 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045b6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045b8:	f7fd fc2e 	bl	8001e18 <HAL_GetTick>
 80045bc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80045be:	e009      	b.n	80045d4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80045c0:	f7fd fc2a 	bl	8001e18 <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d902      	bls.n	80045d4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	73fb      	strb	r3, [r7, #15]
          break;
 80045d2:	e005      	b.n	80045e0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80045d4:	4b0a      	ldr	r3, [pc, #40]	@ (8004600 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d0ef      	beq.n	80045c0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80045e0:	7bfb      	ldrb	r3, [r7, #15]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d106      	bne.n	80045f4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80045e6:	4b06      	ldr	r3, [pc, #24]	@ (8004600 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045e8:	695a      	ldr	r2, [r3, #20]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	4904      	ldr	r1, [pc, #16]	@ (8004600 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80045f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	40021000 	.word	0x40021000

08004604 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d101      	bne.n	8004616 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e049      	b.n	80046aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b00      	cmp	r3, #0
 8004620:	d106      	bne.n	8004630 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f7fd f83e 	bl	80016ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2202      	movs	r2, #2
 8004634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	3304      	adds	r3, #4
 8004640:	4619      	mov	r1, r3
 8004642:	4610      	mov	r0, r2
 8004644:	f000 faa8 	bl	8004b98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3708      	adds	r7, #8
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
	...

080046b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b085      	sub	sp, #20
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d001      	beq.n	80046cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e04f      	b.n	800476c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2202      	movs	r2, #2
 80046d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68da      	ldr	r2, [r3, #12]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f042 0201 	orr.w	r2, r2, #1
 80046e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a23      	ldr	r2, [pc, #140]	@ (8004778 <HAL_TIM_Base_Start_IT+0xc4>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d01d      	beq.n	800472a <HAL_TIM_Base_Start_IT+0x76>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046f6:	d018      	beq.n	800472a <HAL_TIM_Base_Start_IT+0x76>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a1f      	ldr	r2, [pc, #124]	@ (800477c <HAL_TIM_Base_Start_IT+0xc8>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d013      	beq.n	800472a <HAL_TIM_Base_Start_IT+0x76>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a1e      	ldr	r2, [pc, #120]	@ (8004780 <HAL_TIM_Base_Start_IT+0xcc>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d00e      	beq.n	800472a <HAL_TIM_Base_Start_IT+0x76>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a1c      	ldr	r2, [pc, #112]	@ (8004784 <HAL_TIM_Base_Start_IT+0xd0>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d009      	beq.n	800472a <HAL_TIM_Base_Start_IT+0x76>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a1b      	ldr	r2, [pc, #108]	@ (8004788 <HAL_TIM_Base_Start_IT+0xd4>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d004      	beq.n	800472a <HAL_TIM_Base_Start_IT+0x76>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a19      	ldr	r2, [pc, #100]	@ (800478c <HAL_TIM_Base_Start_IT+0xd8>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d115      	bne.n	8004756 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	689a      	ldr	r2, [r3, #8]
 8004730:	4b17      	ldr	r3, [pc, #92]	@ (8004790 <HAL_TIM_Base_Start_IT+0xdc>)
 8004732:	4013      	ands	r3, r2
 8004734:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2b06      	cmp	r3, #6
 800473a:	d015      	beq.n	8004768 <HAL_TIM_Base_Start_IT+0xb4>
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004742:	d011      	beq.n	8004768 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f042 0201 	orr.w	r2, r2, #1
 8004752:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004754:	e008      	b.n	8004768 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f042 0201 	orr.w	r2, r2, #1
 8004764:	601a      	str	r2, [r3, #0]
 8004766:	e000      	b.n	800476a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004768:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	3714      	adds	r7, #20
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr
 8004778:	40012c00 	.word	0x40012c00
 800477c:	40000400 	.word	0x40000400
 8004780:	40000800 	.word	0x40000800
 8004784:	40000c00 	.word	0x40000c00
 8004788:	40013400 	.word	0x40013400
 800478c:	40014000 	.word	0x40014000
 8004790:	00010007 	.word	0x00010007

08004794 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	f003 0302 	and.w	r3, r3, #2
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d020      	beq.n	80047f8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f003 0302 	and.w	r3, r3, #2
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d01b      	beq.n	80047f8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f06f 0202 	mvn.w	r2, #2
 80047c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2201      	movs	r2, #1
 80047ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	f003 0303 	and.w	r3, r3, #3
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d003      	beq.n	80047e6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 f9bc 	bl	8004b5c <HAL_TIM_IC_CaptureCallback>
 80047e4:	e005      	b.n	80047f2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f000 f9ae 	bl	8004b48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f000 f9bf 	bl	8004b70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	f003 0304 	and.w	r3, r3, #4
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d020      	beq.n	8004844 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f003 0304 	and.w	r3, r3, #4
 8004808:	2b00      	cmp	r3, #0
 800480a:	d01b      	beq.n	8004844 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f06f 0204 	mvn.w	r2, #4
 8004814:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2202      	movs	r2, #2
 800481a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004826:	2b00      	cmp	r3, #0
 8004828:	d003      	beq.n	8004832 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 f996 	bl	8004b5c <HAL_TIM_IC_CaptureCallback>
 8004830:	e005      	b.n	800483e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 f988 	bl	8004b48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f000 f999 	bl	8004b70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	f003 0308 	and.w	r3, r3, #8
 800484a:	2b00      	cmp	r3, #0
 800484c:	d020      	beq.n	8004890 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f003 0308 	and.w	r3, r3, #8
 8004854:	2b00      	cmp	r3, #0
 8004856:	d01b      	beq.n	8004890 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f06f 0208 	mvn.w	r2, #8
 8004860:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2204      	movs	r2, #4
 8004866:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	69db      	ldr	r3, [r3, #28]
 800486e:	f003 0303 	and.w	r3, r3, #3
 8004872:	2b00      	cmp	r3, #0
 8004874:	d003      	beq.n	800487e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 f970 	bl	8004b5c <HAL_TIM_IC_CaptureCallback>
 800487c:	e005      	b.n	800488a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 f962 	bl	8004b48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 f973 	bl	8004b70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	f003 0310 	and.w	r3, r3, #16
 8004896:	2b00      	cmp	r3, #0
 8004898:	d020      	beq.n	80048dc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f003 0310 	and.w	r3, r3, #16
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d01b      	beq.n	80048dc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f06f 0210 	mvn.w	r2, #16
 80048ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2208      	movs	r2, #8
 80048b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	69db      	ldr	r3, [r3, #28]
 80048ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d003      	beq.n	80048ca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 f94a 	bl	8004b5c <HAL_TIM_IC_CaptureCallback>
 80048c8:	e005      	b.n	80048d6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 f93c 	bl	8004b48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 f94d 	bl	8004b70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	f003 0301 	and.w	r3, r3, #1
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d00c      	beq.n	8004900 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f003 0301 	and.w	r3, r3, #1
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d007      	beq.n	8004900 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f06f 0201 	mvn.w	r2, #1
 80048f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 f91a 	bl	8004b34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004906:	2b00      	cmp	r3, #0
 8004908:	d104      	bne.n	8004914 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004910:	2b00      	cmp	r3, #0
 8004912:	d00c      	beq.n	800492e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800491a:	2b00      	cmp	r3, #0
 800491c:	d007      	beq.n	800492e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004926:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f000 fb07 	bl	8004f3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004934:	2b00      	cmp	r3, #0
 8004936:	d00c      	beq.n	8004952 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800493e:	2b00      	cmp	r3, #0
 8004940:	d007      	beq.n	8004952 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800494a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f000 faff 	bl	8004f50 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004958:	2b00      	cmp	r3, #0
 800495a:	d00c      	beq.n	8004976 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004962:	2b00      	cmp	r3, #0
 8004964:	d007      	beq.n	8004976 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800496e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 f907 	bl	8004b84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	f003 0320 	and.w	r3, r3, #32
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00c      	beq.n	800499a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f003 0320 	and.w	r3, r3, #32
 8004986:	2b00      	cmp	r3, #0
 8004988:	d007      	beq.n	800499a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f06f 0220 	mvn.w	r2, #32
 8004992:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f000 fac7 	bl	8004f28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800499a:	bf00      	nop
 800499c:	3710      	adds	r7, #16
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}

080049a2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049a2:	b580      	push	{r7, lr}
 80049a4:	b084      	sub	sp, #16
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
 80049aa:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049ac:	2300      	movs	r3, #0
 80049ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d101      	bne.n	80049be <HAL_TIM_ConfigClockSource+0x1c>
 80049ba:	2302      	movs	r3, #2
 80049bc:	e0b6      	b.n	8004b2c <HAL_TIM_ConfigClockSource+0x18a>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2202      	movs	r2, #2
 80049ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049dc:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80049e0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80049e8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68ba      	ldr	r2, [r7, #8]
 80049f0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049fa:	d03e      	beq.n	8004a7a <HAL_TIM_ConfigClockSource+0xd8>
 80049fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a00:	f200 8087 	bhi.w	8004b12 <HAL_TIM_ConfigClockSource+0x170>
 8004a04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a08:	f000 8086 	beq.w	8004b18 <HAL_TIM_ConfigClockSource+0x176>
 8004a0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a10:	d87f      	bhi.n	8004b12 <HAL_TIM_ConfigClockSource+0x170>
 8004a12:	2b70      	cmp	r3, #112	@ 0x70
 8004a14:	d01a      	beq.n	8004a4c <HAL_TIM_ConfigClockSource+0xaa>
 8004a16:	2b70      	cmp	r3, #112	@ 0x70
 8004a18:	d87b      	bhi.n	8004b12 <HAL_TIM_ConfigClockSource+0x170>
 8004a1a:	2b60      	cmp	r3, #96	@ 0x60
 8004a1c:	d050      	beq.n	8004ac0 <HAL_TIM_ConfigClockSource+0x11e>
 8004a1e:	2b60      	cmp	r3, #96	@ 0x60
 8004a20:	d877      	bhi.n	8004b12 <HAL_TIM_ConfigClockSource+0x170>
 8004a22:	2b50      	cmp	r3, #80	@ 0x50
 8004a24:	d03c      	beq.n	8004aa0 <HAL_TIM_ConfigClockSource+0xfe>
 8004a26:	2b50      	cmp	r3, #80	@ 0x50
 8004a28:	d873      	bhi.n	8004b12 <HAL_TIM_ConfigClockSource+0x170>
 8004a2a:	2b40      	cmp	r3, #64	@ 0x40
 8004a2c:	d058      	beq.n	8004ae0 <HAL_TIM_ConfigClockSource+0x13e>
 8004a2e:	2b40      	cmp	r3, #64	@ 0x40
 8004a30:	d86f      	bhi.n	8004b12 <HAL_TIM_ConfigClockSource+0x170>
 8004a32:	2b30      	cmp	r3, #48	@ 0x30
 8004a34:	d064      	beq.n	8004b00 <HAL_TIM_ConfigClockSource+0x15e>
 8004a36:	2b30      	cmp	r3, #48	@ 0x30
 8004a38:	d86b      	bhi.n	8004b12 <HAL_TIM_ConfigClockSource+0x170>
 8004a3a:	2b20      	cmp	r3, #32
 8004a3c:	d060      	beq.n	8004b00 <HAL_TIM_ConfigClockSource+0x15e>
 8004a3e:	2b20      	cmp	r3, #32
 8004a40:	d867      	bhi.n	8004b12 <HAL_TIM_ConfigClockSource+0x170>
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d05c      	beq.n	8004b00 <HAL_TIM_ConfigClockSource+0x15e>
 8004a46:	2b10      	cmp	r3, #16
 8004a48:	d05a      	beq.n	8004b00 <HAL_TIM_ConfigClockSource+0x15e>
 8004a4a:	e062      	b.n	8004b12 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a5c:	f000 f9bc 	bl	8004dd8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004a6e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68ba      	ldr	r2, [r7, #8]
 8004a76:	609a      	str	r2, [r3, #8]
      break;
 8004a78:	e04f      	b.n	8004b1a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a8a:	f000 f9a5 	bl	8004dd8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	689a      	ldr	r2, [r3, #8]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a9c:	609a      	str	r2, [r3, #8]
      break;
 8004a9e:	e03c      	b.n	8004b1a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aac:	461a      	mov	r2, r3
 8004aae:	f000 f919 	bl	8004ce4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2150      	movs	r1, #80	@ 0x50
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f000 f972 	bl	8004da2 <TIM_ITRx_SetConfig>
      break;
 8004abe:	e02c      	b.n	8004b1a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004acc:	461a      	mov	r2, r3
 8004ace:	f000 f938 	bl	8004d42 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	2160      	movs	r1, #96	@ 0x60
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f000 f962 	bl	8004da2 <TIM_ITRx_SetConfig>
      break;
 8004ade:	e01c      	b.n	8004b1a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aec:	461a      	mov	r2, r3
 8004aee:	f000 f8f9 	bl	8004ce4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2140      	movs	r1, #64	@ 0x40
 8004af8:	4618      	mov	r0, r3
 8004afa:	f000 f952 	bl	8004da2 <TIM_ITRx_SetConfig>
      break;
 8004afe:	e00c      	b.n	8004b1a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4619      	mov	r1, r3
 8004b0a:	4610      	mov	r0, r2
 8004b0c:	f000 f949 	bl	8004da2 <TIM_ITRx_SetConfig>
      break;
 8004b10:	e003      	b.n	8004b1a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	73fb      	strb	r3, [r7, #15]
      break;
 8004b16:	e000      	b.n	8004b1a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004b18:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3710      	adds	r7, #16
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004b3c:	bf00      	nop
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b50:	bf00      	nop
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b64:	bf00      	nop
 8004b66:	370c      	adds	r7, #12
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b78:	bf00      	nop
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b8c:	bf00      	nop
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a46      	ldr	r2, [pc, #280]	@ (8004cc4 <TIM_Base_SetConfig+0x12c>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d013      	beq.n	8004bd8 <TIM_Base_SetConfig+0x40>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bb6:	d00f      	beq.n	8004bd8 <TIM_Base_SetConfig+0x40>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a43      	ldr	r2, [pc, #268]	@ (8004cc8 <TIM_Base_SetConfig+0x130>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d00b      	beq.n	8004bd8 <TIM_Base_SetConfig+0x40>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a42      	ldr	r2, [pc, #264]	@ (8004ccc <TIM_Base_SetConfig+0x134>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d007      	beq.n	8004bd8 <TIM_Base_SetConfig+0x40>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a41      	ldr	r2, [pc, #260]	@ (8004cd0 <TIM_Base_SetConfig+0x138>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d003      	beq.n	8004bd8 <TIM_Base_SetConfig+0x40>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4a40      	ldr	r2, [pc, #256]	@ (8004cd4 <TIM_Base_SetConfig+0x13c>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d108      	bne.n	8004bea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	68fa      	ldr	r2, [r7, #12]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a35      	ldr	r2, [pc, #212]	@ (8004cc4 <TIM_Base_SetConfig+0x12c>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d01f      	beq.n	8004c32 <TIM_Base_SetConfig+0x9a>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bf8:	d01b      	beq.n	8004c32 <TIM_Base_SetConfig+0x9a>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a32      	ldr	r2, [pc, #200]	@ (8004cc8 <TIM_Base_SetConfig+0x130>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d017      	beq.n	8004c32 <TIM_Base_SetConfig+0x9a>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a31      	ldr	r2, [pc, #196]	@ (8004ccc <TIM_Base_SetConfig+0x134>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d013      	beq.n	8004c32 <TIM_Base_SetConfig+0x9a>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a30      	ldr	r2, [pc, #192]	@ (8004cd0 <TIM_Base_SetConfig+0x138>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d00f      	beq.n	8004c32 <TIM_Base_SetConfig+0x9a>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a2f      	ldr	r2, [pc, #188]	@ (8004cd4 <TIM_Base_SetConfig+0x13c>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d00b      	beq.n	8004c32 <TIM_Base_SetConfig+0x9a>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a2e      	ldr	r2, [pc, #184]	@ (8004cd8 <TIM_Base_SetConfig+0x140>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d007      	beq.n	8004c32 <TIM_Base_SetConfig+0x9a>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a2d      	ldr	r2, [pc, #180]	@ (8004cdc <TIM_Base_SetConfig+0x144>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d003      	beq.n	8004c32 <TIM_Base_SetConfig+0x9a>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a2c      	ldr	r2, [pc, #176]	@ (8004ce0 <TIM_Base_SetConfig+0x148>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d108      	bne.n	8004c44 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	689a      	ldr	r2, [r3, #8]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a16      	ldr	r2, [pc, #88]	@ (8004cc4 <TIM_Base_SetConfig+0x12c>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d00f      	beq.n	8004c90 <TIM_Base_SetConfig+0xf8>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4a18      	ldr	r2, [pc, #96]	@ (8004cd4 <TIM_Base_SetConfig+0x13c>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d00b      	beq.n	8004c90 <TIM_Base_SetConfig+0xf8>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a17      	ldr	r2, [pc, #92]	@ (8004cd8 <TIM_Base_SetConfig+0x140>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d007      	beq.n	8004c90 <TIM_Base_SetConfig+0xf8>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a16      	ldr	r2, [pc, #88]	@ (8004cdc <TIM_Base_SetConfig+0x144>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d003      	beq.n	8004c90 <TIM_Base_SetConfig+0xf8>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a15      	ldr	r2, [pc, #84]	@ (8004ce0 <TIM_Base_SetConfig+0x148>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d103      	bne.n	8004c98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	691a      	ldr	r2, [r3, #16]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	f003 0301 	and.w	r3, r3, #1
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d105      	bne.n	8004cb6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	f023 0201 	bic.w	r2, r3, #1
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	611a      	str	r2, [r3, #16]
  }
}
 8004cb6:	bf00      	nop
 8004cb8:	3714      	adds	r7, #20
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	40012c00 	.word	0x40012c00
 8004cc8:	40000400 	.word	0x40000400
 8004ccc:	40000800 	.word	0x40000800
 8004cd0:	40000c00 	.word	0x40000c00
 8004cd4:	40013400 	.word	0x40013400
 8004cd8:	40014000 	.word	0x40014000
 8004cdc:	40014400 	.word	0x40014400
 8004ce0:	40014800 	.word	0x40014800

08004ce4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b087      	sub	sp, #28
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	60b9      	str	r1, [r7, #8]
 8004cee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6a1b      	ldr	r3, [r3, #32]
 8004cf4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6a1b      	ldr	r3, [r3, #32]
 8004cfa:	f023 0201 	bic.w	r2, r3, #1
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	011b      	lsls	r3, r3, #4
 8004d14:	693a      	ldr	r2, [r7, #16]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	f023 030a 	bic.w	r3, r3, #10
 8004d20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	693a      	ldr	r2, [r7, #16]
 8004d2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	697a      	ldr	r2, [r7, #20]
 8004d34:	621a      	str	r2, [r3, #32]
}
 8004d36:	bf00      	nop
 8004d38:	371c      	adds	r7, #28
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr

08004d42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d42:	b480      	push	{r7}
 8004d44:	b087      	sub	sp, #28
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	60f8      	str	r0, [r7, #12]
 8004d4a:	60b9      	str	r1, [r7, #8]
 8004d4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6a1b      	ldr	r3, [r3, #32]
 8004d52:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6a1b      	ldr	r3, [r3, #32]
 8004d58:	f023 0210 	bic.w	r2, r3, #16
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	699b      	ldr	r3, [r3, #24]
 8004d64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004d6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	031b      	lsls	r3, r3, #12
 8004d72:	693a      	ldr	r2, [r7, #16]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004d7e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	011b      	lsls	r3, r3, #4
 8004d84:	697a      	ldr	r2, [r7, #20]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	693a      	ldr	r2, [r7, #16]
 8004d8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	697a      	ldr	r2, [r7, #20]
 8004d94:	621a      	str	r2, [r3, #32]
}
 8004d96:	bf00      	nop
 8004d98:	371c      	adds	r7, #28
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr

08004da2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004da2:	b480      	push	{r7}
 8004da4:	b085      	sub	sp, #20
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
 8004daa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004db8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004dba:	683a      	ldr	r2, [r7, #0]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	f043 0307 	orr.w	r3, r3, #7
 8004dc4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	609a      	str	r2, [r3, #8]
}
 8004dcc:	bf00      	nop
 8004dce:	3714      	adds	r7, #20
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b087      	sub	sp, #28
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
 8004de4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004df2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	021a      	lsls	r2, r3, #8
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	431a      	orrs	r2, r3
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	697a      	ldr	r2, [r7, #20]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	697a      	ldr	r2, [r7, #20]
 8004e0a:	609a      	str	r2, [r3, #8]
}
 8004e0c:	bf00      	nop
 8004e0e:	371c      	adds	r7, #28
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d101      	bne.n	8004e30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e2c:	2302      	movs	r3, #2
 8004e2e:	e068      	b.n	8004f02 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2202      	movs	r2, #2
 8004e3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a2e      	ldr	r2, [pc, #184]	@ (8004f10 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d004      	beq.n	8004e64 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a2d      	ldr	r2, [pc, #180]	@ (8004f14 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d108      	bne.n	8004e76 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004e6a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	68fa      	ldr	r2, [r7, #12]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e7c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68fa      	ldr	r2, [r7, #12]
 8004e8e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a1e      	ldr	r2, [pc, #120]	@ (8004f10 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d01d      	beq.n	8004ed6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ea2:	d018      	beq.n	8004ed6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a1b      	ldr	r2, [pc, #108]	@ (8004f18 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d013      	beq.n	8004ed6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a1a      	ldr	r2, [pc, #104]	@ (8004f1c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d00e      	beq.n	8004ed6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a18      	ldr	r2, [pc, #96]	@ (8004f20 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d009      	beq.n	8004ed6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a13      	ldr	r2, [pc, #76]	@ (8004f14 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d004      	beq.n	8004ed6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a14      	ldr	r2, [pc, #80]	@ (8004f24 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d10c      	bne.n	8004ef0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004edc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	68ba      	ldr	r2, [r7, #8]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	68ba      	ldr	r2, [r7, #8]
 8004eee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3714      	adds	r7, #20
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	40012c00 	.word	0x40012c00
 8004f14:	40013400 	.word	0x40013400
 8004f18:	40000400 	.word	0x40000400
 8004f1c:	40000800 	.word	0x40000800
 8004f20:	40000c00 	.word	0x40000c00
 8004f24:	40014000 	.word	0x40014000

08004f28 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f30:	bf00      	nop
 8004f32:	370c      	adds	r7, #12
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f44:	bf00      	nop
 8004f46:	370c      	adds	r7, #12
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004f58:	bf00      	nop
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d101      	bne.n	8004f76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e040      	b.n	8004ff8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d106      	bne.n	8004f8c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f7fc fbc8 	bl	800171c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2224      	movs	r2, #36	@ 0x24
 8004f90:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f022 0201 	bic.w	r2, r2, #1
 8004fa0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d002      	beq.n	8004fb0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 ff58 	bl	8005e60 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 fc9d 	bl	80058f0 <UART_SetConfig>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d101      	bne.n	8004fc0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e01b      	b.n	8004ff8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	685a      	ldr	r2, [r3, #4]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004fce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	689a      	ldr	r2, [r3, #8]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004fde:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f042 0201 	orr.w	r2, r2, #1
 8004fee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f000 ffd7 	bl	8005fa4 <UART_CheckIdleState>
 8004ff6:	4603      	mov	r3, r0
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3708      	adds	r7, #8
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b08a      	sub	sp, #40	@ 0x28
 8005004:	af02      	add	r7, sp, #8
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	603b      	str	r3, [r7, #0]
 800500c:	4613      	mov	r3, r2
 800500e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005014:	2b20      	cmp	r3, #32
 8005016:	d177      	bne.n	8005108 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d002      	beq.n	8005024 <HAL_UART_Transmit+0x24>
 800501e:	88fb      	ldrh	r3, [r7, #6]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d101      	bne.n	8005028 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e070      	b.n	800510a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2221      	movs	r2, #33	@ 0x21
 8005034:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005036:	f7fc feef 	bl	8001e18 <HAL_GetTick>
 800503a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	88fa      	ldrh	r2, [r7, #6]
 8005040:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	88fa      	ldrh	r2, [r7, #6]
 8005048:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005054:	d108      	bne.n	8005068 <HAL_UART_Transmit+0x68>
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d104      	bne.n	8005068 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800505e:	2300      	movs	r3, #0
 8005060:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	61bb      	str	r3, [r7, #24]
 8005066:	e003      	b.n	8005070 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800506c:	2300      	movs	r3, #0
 800506e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005070:	e02f      	b.n	80050d2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	9300      	str	r3, [sp, #0]
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	2200      	movs	r2, #0
 800507a:	2180      	movs	r1, #128	@ 0x80
 800507c:	68f8      	ldr	r0, [r7, #12]
 800507e:	f001 f839 	bl	80060f4 <UART_WaitOnFlagUntilTimeout>
 8005082:	4603      	mov	r3, r0
 8005084:	2b00      	cmp	r3, #0
 8005086:	d004      	beq.n	8005092 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2220      	movs	r2, #32
 800508c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e03b      	b.n	800510a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d10b      	bne.n	80050b0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	881a      	ldrh	r2, [r3, #0]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050a4:	b292      	uxth	r2, r2
 80050a6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	3302      	adds	r3, #2
 80050ac:	61bb      	str	r3, [r7, #24]
 80050ae:	e007      	b.n	80050c0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	781a      	ldrb	r2, [r3, #0]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	3301      	adds	r3, #1
 80050be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	3b01      	subs	r3, #1
 80050ca:	b29a      	uxth	r2, r3
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80050d8:	b29b      	uxth	r3, r3
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d1c9      	bne.n	8005072 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	9300      	str	r3, [sp, #0]
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	2200      	movs	r2, #0
 80050e6:	2140      	movs	r1, #64	@ 0x40
 80050e8:	68f8      	ldr	r0, [r7, #12]
 80050ea:	f001 f803 	bl	80060f4 <UART_WaitOnFlagUntilTimeout>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d004      	beq.n	80050fe <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2220      	movs	r2, #32
 80050f8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e005      	b.n	800510a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2220      	movs	r2, #32
 8005102:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005104:	2300      	movs	r3, #0
 8005106:	e000      	b.n	800510a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005108:	2302      	movs	r3, #2
  }
}
 800510a:	4618      	mov	r0, r3
 800510c:	3720      	adds	r7, #32
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}

08005112 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005112:	b580      	push	{r7, lr}
 8005114:	b08a      	sub	sp, #40	@ 0x28
 8005116:	af02      	add	r7, sp, #8
 8005118:	60f8      	str	r0, [r7, #12]
 800511a:	60b9      	str	r1, [r7, #8]
 800511c:	603b      	str	r3, [r7, #0]
 800511e:	4613      	mov	r3, r2
 8005120:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005128:	2b20      	cmp	r3, #32
 800512a:	f040 80b6 	bne.w	800529a <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d002      	beq.n	800513a <HAL_UART_Receive+0x28>
 8005134:	88fb      	ldrh	r3, [r7, #6]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d101      	bne.n	800513e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e0ae      	b.n	800529c <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2200      	movs	r2, #0
 8005142:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2222      	movs	r2, #34	@ 0x22
 800514a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2200      	movs	r2, #0
 8005152:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005154:	f7fc fe60 	bl	8001e18 <HAL_GetTick>
 8005158:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	88fa      	ldrh	r2, [r7, #6]
 800515e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	88fa      	ldrh	r2, [r7, #6]
 8005166:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005172:	d10e      	bne.n	8005192 <HAL_UART_Receive+0x80>
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	691b      	ldr	r3, [r3, #16]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d105      	bne.n	8005188 <HAL_UART_Receive+0x76>
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005182:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005186:	e02d      	b.n	80051e4 <HAL_UART_Receive+0xd2>
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	22ff      	movs	r2, #255	@ 0xff
 800518c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005190:	e028      	b.n	80051e4 <HAL_UART_Receive+0xd2>
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d10d      	bne.n	80051b6 <HAL_UART_Receive+0xa4>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d104      	bne.n	80051ac <HAL_UART_Receive+0x9a>
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	22ff      	movs	r2, #255	@ 0xff
 80051a6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80051aa:	e01b      	b.n	80051e4 <HAL_UART_Receive+0xd2>
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	227f      	movs	r2, #127	@ 0x7f
 80051b0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80051b4:	e016      	b.n	80051e4 <HAL_UART_Receive+0xd2>
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80051be:	d10d      	bne.n	80051dc <HAL_UART_Receive+0xca>
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d104      	bne.n	80051d2 <HAL_UART_Receive+0xc0>
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	227f      	movs	r2, #127	@ 0x7f
 80051cc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80051d0:	e008      	b.n	80051e4 <HAL_UART_Receive+0xd2>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	223f      	movs	r2, #63	@ 0x3f
 80051d6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80051da:	e003      	b.n	80051e4 <HAL_UART_Receive+0xd2>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2200      	movs	r2, #0
 80051e0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80051ea:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051f4:	d108      	bne.n	8005208 <HAL_UART_Receive+0xf6>
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d104      	bne.n	8005208 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80051fe:	2300      	movs	r3, #0
 8005200:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	61bb      	str	r3, [r7, #24]
 8005206:	e003      	b.n	8005210 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800520c:	2300      	movs	r3, #0
 800520e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005210:	e037      	b.n	8005282 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	9300      	str	r3, [sp, #0]
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	2200      	movs	r2, #0
 800521a:	2120      	movs	r1, #32
 800521c:	68f8      	ldr	r0, [r7, #12]
 800521e:	f000 ff69 	bl	80060f4 <UART_WaitOnFlagUntilTimeout>
 8005222:	4603      	mov	r3, r0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d005      	beq.n	8005234 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2220      	movs	r2, #32
 800522c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8005230:	2303      	movs	r3, #3
 8005232:	e033      	b.n	800529c <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d10c      	bne.n	8005254 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005240:	b29a      	uxth	r2, r3
 8005242:	8a7b      	ldrh	r3, [r7, #18]
 8005244:	4013      	ands	r3, r2
 8005246:	b29a      	uxth	r2, r3
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	3302      	adds	r3, #2
 8005250:	61bb      	str	r3, [r7, #24]
 8005252:	e00d      	b.n	8005270 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800525a:	b29b      	uxth	r3, r3
 800525c:	b2da      	uxtb	r2, r3
 800525e:	8a7b      	ldrh	r3, [r7, #18]
 8005260:	b2db      	uxtb	r3, r3
 8005262:	4013      	ands	r3, r2
 8005264:	b2da      	uxtb	r2, r3
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	3301      	adds	r3, #1
 800526e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005276:	b29b      	uxth	r3, r3
 8005278:	3b01      	subs	r3, #1
 800527a:	b29a      	uxth	r2, r3
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005288:	b29b      	uxth	r3, r3
 800528a:	2b00      	cmp	r3, #0
 800528c:	d1c1      	bne.n	8005212 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2220      	movs	r2, #32
 8005292:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8005296:	2300      	movs	r3, #0
 8005298:	e000      	b.n	800529c <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 800529a:	2302      	movs	r3, #2
  }
}
 800529c:	4618      	mov	r0, r3
 800529e:	3720      	adds	r7, #32
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b0ba      	sub	sp, #232	@ 0xe8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	69db      	ldr	r3, [r3, #28]
 80052b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80052ca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80052ce:	f640 030f 	movw	r3, #2063	@ 0x80f
 80052d2:	4013      	ands	r3, r2
 80052d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80052d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d115      	bne.n	800530c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80052e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052e4:	f003 0320 	and.w	r3, r3, #32
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00f      	beq.n	800530c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80052ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052f0:	f003 0320 	and.w	r3, r3, #32
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d009      	beq.n	800530c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	f000 82ca 	beq.w	8005896 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	4798      	blx	r3
      }
      return;
 800530a:	e2c4      	b.n	8005896 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800530c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005310:	2b00      	cmp	r3, #0
 8005312:	f000 8117 	beq.w	8005544 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005316:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800531a:	f003 0301 	and.w	r3, r3, #1
 800531e:	2b00      	cmp	r3, #0
 8005320:	d106      	bne.n	8005330 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005322:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005326:	4b85      	ldr	r3, [pc, #532]	@ (800553c <HAL_UART_IRQHandler+0x298>)
 8005328:	4013      	ands	r3, r2
 800532a:	2b00      	cmp	r3, #0
 800532c:	f000 810a 	beq.w	8005544 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005330:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005334:	f003 0301 	and.w	r3, r3, #1
 8005338:	2b00      	cmp	r3, #0
 800533a:	d011      	beq.n	8005360 <HAL_UART_IRQHandler+0xbc>
 800533c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005340:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005344:	2b00      	cmp	r3, #0
 8005346:	d00b      	beq.n	8005360 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2201      	movs	r2, #1
 800534e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005356:	f043 0201 	orr.w	r2, r3, #1
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005360:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005364:	f003 0302 	and.w	r3, r3, #2
 8005368:	2b00      	cmp	r3, #0
 800536a:	d011      	beq.n	8005390 <HAL_UART_IRQHandler+0xec>
 800536c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005370:	f003 0301 	and.w	r3, r3, #1
 8005374:	2b00      	cmp	r3, #0
 8005376:	d00b      	beq.n	8005390 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2202      	movs	r2, #2
 800537e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005386:	f043 0204 	orr.w	r2, r3, #4
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005390:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005394:	f003 0304 	and.w	r3, r3, #4
 8005398:	2b00      	cmp	r3, #0
 800539a:	d011      	beq.n	80053c0 <HAL_UART_IRQHandler+0x11c>
 800539c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053a0:	f003 0301 	and.w	r3, r3, #1
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d00b      	beq.n	80053c0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2204      	movs	r2, #4
 80053ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053b6:	f043 0202 	orr.w	r2, r3, #2
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80053c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053c4:	f003 0308 	and.w	r3, r3, #8
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d017      	beq.n	80053fc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80053cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053d0:	f003 0320 	and.w	r3, r3, #32
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d105      	bne.n	80053e4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80053d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053dc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d00b      	beq.n	80053fc <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2208      	movs	r2, #8
 80053ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053f2:	f043 0208 	orr.w	r2, r3, #8
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80053fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005400:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005404:	2b00      	cmp	r3, #0
 8005406:	d012      	beq.n	800542e <HAL_UART_IRQHandler+0x18a>
 8005408:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800540c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005410:	2b00      	cmp	r3, #0
 8005412:	d00c      	beq.n	800542e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800541c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005424:	f043 0220 	orr.w	r2, r3, #32
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005434:	2b00      	cmp	r3, #0
 8005436:	f000 8230 	beq.w	800589a <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800543a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800543e:	f003 0320 	and.w	r3, r3, #32
 8005442:	2b00      	cmp	r3, #0
 8005444:	d00d      	beq.n	8005462 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005446:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800544a:	f003 0320 	and.w	r3, r3, #32
 800544e:	2b00      	cmp	r3, #0
 8005450:	d007      	beq.n	8005462 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005456:	2b00      	cmp	r3, #0
 8005458:	d003      	beq.n	8005462 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005468:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005476:	2b40      	cmp	r3, #64	@ 0x40
 8005478:	d005      	beq.n	8005486 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800547a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800547e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005482:	2b00      	cmp	r3, #0
 8005484:	d04f      	beq.n	8005526 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 fea1 	bl	80061ce <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005496:	2b40      	cmp	r3, #64	@ 0x40
 8005498:	d141      	bne.n	800551e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	3308      	adds	r3, #8
 80054a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80054a8:	e853 3f00 	ldrex	r3, [r3]
 80054ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80054b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80054b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	3308      	adds	r3, #8
 80054c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80054c6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80054ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80054d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80054d6:	e841 2300 	strex	r3, r2, [r1]
 80054da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80054de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d1d9      	bne.n	800549a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d013      	beq.n	8005516 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054f2:	4a13      	ldr	r2, [pc, #76]	@ (8005540 <HAL_UART_IRQHandler+0x29c>)
 80054f4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054fa:	4618      	mov	r0, r3
 80054fc:	f7fd f9e2 	bl	80028c4 <HAL_DMA_Abort_IT>
 8005500:	4603      	mov	r3, r0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d017      	beq.n	8005536 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800550a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005510:	4610      	mov	r0, r2
 8005512:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005514:	e00f      	b.n	8005536 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 f9d4 	bl	80058c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800551c:	e00b      	b.n	8005536 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 f9d0 	bl	80058c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005524:	e007      	b.n	8005536 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 f9cc 	bl	80058c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005534:	e1b1      	b.n	800589a <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005536:	bf00      	nop
    return;
 8005538:	e1af      	b.n	800589a <HAL_UART_IRQHandler+0x5f6>
 800553a:	bf00      	nop
 800553c:	04000120 	.word	0x04000120
 8005540:	08006297 	.word	0x08006297

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005548:	2b01      	cmp	r3, #1
 800554a:	f040 816a 	bne.w	8005822 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800554e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005552:	f003 0310 	and.w	r3, r3, #16
 8005556:	2b00      	cmp	r3, #0
 8005558:	f000 8163 	beq.w	8005822 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800555c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005560:	f003 0310 	and.w	r3, r3, #16
 8005564:	2b00      	cmp	r3, #0
 8005566:	f000 815c 	beq.w	8005822 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2210      	movs	r2, #16
 8005570:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800557c:	2b40      	cmp	r3, #64	@ 0x40
 800557e:	f040 80d4 	bne.w	800572a <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800558e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005592:	2b00      	cmp	r3, #0
 8005594:	f000 80ad 	beq.w	80056f2 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800559e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80055a2:	429a      	cmp	r2, r3
 80055a4:	f080 80a5 	bcs.w	80056f2 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80055ae:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0320 	and.w	r3, r3, #32
 80055be:	2b00      	cmp	r3, #0
 80055c0:	f040 8086 	bne.w	80056d0 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80055d0:	e853 3f00 	ldrex	r3, [r3]
 80055d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80055d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80055dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	461a      	mov	r2, r3
 80055ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80055ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80055f2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80055fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80055fe:	e841 2300 	strex	r3, r2, [r1]
 8005602:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005606:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800560a:	2b00      	cmp	r3, #0
 800560c:	d1da      	bne.n	80055c4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	3308      	adds	r3, #8
 8005614:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005616:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005618:	e853 3f00 	ldrex	r3, [r3]
 800561c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800561e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005620:	f023 0301 	bic.w	r3, r3, #1
 8005624:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	3308      	adds	r3, #8
 800562e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005632:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005636:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005638:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800563a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800563e:	e841 2300 	strex	r3, r2, [r1]
 8005642:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005644:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1e1      	bne.n	800560e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	3308      	adds	r3, #8
 8005650:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005652:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005654:	e853 3f00 	ldrex	r3, [r3]
 8005658:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800565a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800565c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005660:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	3308      	adds	r3, #8
 800566a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800566e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005670:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005672:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005674:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005676:	e841 2300 	strex	r3, r2, [r1]
 800567a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800567c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800567e:	2b00      	cmp	r3, #0
 8005680:	d1e3      	bne.n	800564a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2220      	movs	r2, #32
 8005686:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005696:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005698:	e853 3f00 	ldrex	r3, [r3]
 800569c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800569e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056a0:	f023 0310 	bic.w	r3, r3, #16
 80056a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	461a      	mov	r2, r3
 80056ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80056b2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80056b4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80056b8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80056ba:	e841 2300 	strex	r3, r2, [r1]
 80056be:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80056c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d1e4      	bne.n	8005690 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056ca:	4618      	mov	r0, r3
 80056cc:	f7fd f8bc 	bl	8002848 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2202      	movs	r2, #2
 80056d4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	4619      	mov	r1, r3
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 f8f4 	bl	80058d8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80056f0:	e0d5      	b.n	800589e <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80056f8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80056fc:	429a      	cmp	r2, r3
 80056fe:	f040 80ce 	bne.w	800589e <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f003 0320 	and.w	r3, r3, #32
 800570e:	2b20      	cmp	r3, #32
 8005710:	f040 80c5 	bne.w	800589e <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2202      	movs	r2, #2
 8005718:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005720:	4619      	mov	r1, r3
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 f8d8 	bl	80058d8 <HAL_UARTEx_RxEventCallback>
      return;
 8005728:	e0b9      	b.n	800589e <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005736:	b29b      	uxth	r3, r3
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005744:	b29b      	uxth	r3, r3
 8005746:	2b00      	cmp	r3, #0
 8005748:	f000 80ab 	beq.w	80058a2 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 800574c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005750:	2b00      	cmp	r3, #0
 8005752:	f000 80a6 	beq.w	80058a2 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800575c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800575e:	e853 3f00 	ldrex	r3, [r3]
 8005762:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005764:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005766:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800576a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	461a      	mov	r2, r3
 8005774:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005778:	647b      	str	r3, [r7, #68]	@ 0x44
 800577a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800577c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800577e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005780:	e841 2300 	strex	r3, r2, [r1]
 8005784:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005786:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005788:	2b00      	cmp	r3, #0
 800578a:	d1e4      	bne.n	8005756 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	3308      	adds	r3, #8
 8005792:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005796:	e853 3f00 	ldrex	r3, [r3]
 800579a:	623b      	str	r3, [r7, #32]
   return(result);
 800579c:	6a3b      	ldr	r3, [r7, #32]
 800579e:	f023 0301 	bic.w	r3, r3, #1
 80057a2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	3308      	adds	r3, #8
 80057ac:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80057b0:	633a      	str	r2, [r7, #48]	@ 0x30
 80057b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80057b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057b8:	e841 2300 	strex	r3, r2, [r1]
 80057bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80057be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d1e3      	bne.n	800578c <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2220      	movs	r2, #32
 80057c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	e853 3f00 	ldrex	r3, [r3]
 80057e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f023 0310 	bic.w	r3, r3, #16
 80057ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	461a      	mov	r2, r3
 80057f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80057fa:	61fb      	str	r3, [r7, #28]
 80057fc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057fe:	69b9      	ldr	r1, [r7, #24]
 8005800:	69fa      	ldr	r2, [r7, #28]
 8005802:	e841 2300 	strex	r3, r2, [r1]
 8005806:	617b      	str	r3, [r7, #20]
   return(result);
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1e4      	bne.n	80057d8 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2202      	movs	r2, #2
 8005812:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005814:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005818:	4619      	mov	r1, r3
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 f85c 	bl	80058d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005820:	e03f      	b.n	80058a2 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005826:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00e      	beq.n	800584c <HAL_UART_IRQHandler+0x5a8>
 800582e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005832:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005836:	2b00      	cmp	r3, #0
 8005838:	d008      	beq.n	800584c <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005842:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f000 fd66 	bl	8006316 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800584a:	e02d      	b.n	80058a8 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800584c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005850:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005854:	2b00      	cmp	r3, #0
 8005856:	d00e      	beq.n	8005876 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005858:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800585c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005860:	2b00      	cmp	r3, #0
 8005862:	d008      	beq.n	8005876 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005868:	2b00      	cmp	r3, #0
 800586a:	d01c      	beq.n	80058a6 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	4798      	blx	r3
    }
    return;
 8005874:	e017      	b.n	80058a6 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800587a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800587e:	2b00      	cmp	r3, #0
 8005880:	d012      	beq.n	80058a8 <HAL_UART_IRQHandler+0x604>
 8005882:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005886:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00c      	beq.n	80058a8 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 fd17 	bl	80062c2 <UART_EndTransmit_IT>
    return;
 8005894:	e008      	b.n	80058a8 <HAL_UART_IRQHandler+0x604>
      return;
 8005896:	bf00      	nop
 8005898:	e006      	b.n	80058a8 <HAL_UART_IRQHandler+0x604>
    return;
 800589a:	bf00      	nop
 800589c:	e004      	b.n	80058a8 <HAL_UART_IRQHandler+0x604>
      return;
 800589e:	bf00      	nop
 80058a0:	e002      	b.n	80058a8 <HAL_UART_IRQHandler+0x604>
      return;
 80058a2:	bf00      	nop
 80058a4:	e000      	b.n	80058a8 <HAL_UART_IRQHandler+0x604>
    return;
 80058a6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80058a8:	37e8      	adds	r7, #232	@ 0xe8
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop

080058b0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80058b8:	bf00      	nop
 80058ba:	370c      	adds	r7, #12
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80058cc:	bf00      	nop
 80058ce:	370c      	adds	r7, #12
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80058d8:	b480      	push	{r7}
 80058da:	b083      	sub	sp, #12
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	460b      	mov	r3, r1
 80058e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80058e4:	bf00      	nop
 80058e6:	370c      	adds	r7, #12
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058f4:	b08a      	sub	sp, #40	@ 0x28
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80058fa:	2300      	movs	r3, #0
 80058fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	689a      	ldr	r2, [r3, #8]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	691b      	ldr	r3, [r3, #16]
 8005908:	431a      	orrs	r2, r3
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	695b      	ldr	r3, [r3, #20]
 800590e:	431a      	orrs	r2, r3
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	69db      	ldr	r3, [r3, #28]
 8005914:	4313      	orrs	r3, r2
 8005916:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	4ba4      	ldr	r3, [pc, #656]	@ (8005bb0 <UART_SetConfig+0x2c0>)
 8005920:	4013      	ands	r3, r2
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	6812      	ldr	r2, [r2, #0]
 8005926:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005928:	430b      	orrs	r3, r1
 800592a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	68da      	ldr	r2, [r3, #12]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	430a      	orrs	r2, r1
 8005940:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	699b      	ldr	r3, [r3, #24]
 8005946:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a99      	ldr	r2, [pc, #612]	@ (8005bb4 <UART_SetConfig+0x2c4>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d004      	beq.n	800595c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6a1b      	ldr	r3, [r3, #32]
 8005956:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005958:	4313      	orrs	r3, r2
 800595a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800596c:	430a      	orrs	r2, r1
 800596e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a90      	ldr	r2, [pc, #576]	@ (8005bb8 <UART_SetConfig+0x2c8>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d126      	bne.n	80059c8 <UART_SetConfig+0xd8>
 800597a:	4b90      	ldr	r3, [pc, #576]	@ (8005bbc <UART_SetConfig+0x2cc>)
 800597c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005980:	f003 0303 	and.w	r3, r3, #3
 8005984:	2b03      	cmp	r3, #3
 8005986:	d81b      	bhi.n	80059c0 <UART_SetConfig+0xd0>
 8005988:	a201      	add	r2, pc, #4	@ (adr r2, 8005990 <UART_SetConfig+0xa0>)
 800598a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800598e:	bf00      	nop
 8005990:	080059a1 	.word	0x080059a1
 8005994:	080059b1 	.word	0x080059b1
 8005998:	080059a9 	.word	0x080059a9
 800599c:	080059b9 	.word	0x080059b9
 80059a0:	2301      	movs	r3, #1
 80059a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059a6:	e116      	b.n	8005bd6 <UART_SetConfig+0x2e6>
 80059a8:	2302      	movs	r3, #2
 80059aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059ae:	e112      	b.n	8005bd6 <UART_SetConfig+0x2e6>
 80059b0:	2304      	movs	r3, #4
 80059b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059b6:	e10e      	b.n	8005bd6 <UART_SetConfig+0x2e6>
 80059b8:	2308      	movs	r3, #8
 80059ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059be:	e10a      	b.n	8005bd6 <UART_SetConfig+0x2e6>
 80059c0:	2310      	movs	r3, #16
 80059c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059c6:	e106      	b.n	8005bd6 <UART_SetConfig+0x2e6>
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a7c      	ldr	r2, [pc, #496]	@ (8005bc0 <UART_SetConfig+0x2d0>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d138      	bne.n	8005a44 <UART_SetConfig+0x154>
 80059d2:	4b7a      	ldr	r3, [pc, #488]	@ (8005bbc <UART_SetConfig+0x2cc>)
 80059d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059d8:	f003 030c 	and.w	r3, r3, #12
 80059dc:	2b0c      	cmp	r3, #12
 80059de:	d82d      	bhi.n	8005a3c <UART_SetConfig+0x14c>
 80059e0:	a201      	add	r2, pc, #4	@ (adr r2, 80059e8 <UART_SetConfig+0xf8>)
 80059e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e6:	bf00      	nop
 80059e8:	08005a1d 	.word	0x08005a1d
 80059ec:	08005a3d 	.word	0x08005a3d
 80059f0:	08005a3d 	.word	0x08005a3d
 80059f4:	08005a3d 	.word	0x08005a3d
 80059f8:	08005a2d 	.word	0x08005a2d
 80059fc:	08005a3d 	.word	0x08005a3d
 8005a00:	08005a3d 	.word	0x08005a3d
 8005a04:	08005a3d 	.word	0x08005a3d
 8005a08:	08005a25 	.word	0x08005a25
 8005a0c:	08005a3d 	.word	0x08005a3d
 8005a10:	08005a3d 	.word	0x08005a3d
 8005a14:	08005a3d 	.word	0x08005a3d
 8005a18:	08005a35 	.word	0x08005a35
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a22:	e0d8      	b.n	8005bd6 <UART_SetConfig+0x2e6>
 8005a24:	2302      	movs	r3, #2
 8005a26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a2a:	e0d4      	b.n	8005bd6 <UART_SetConfig+0x2e6>
 8005a2c:	2304      	movs	r3, #4
 8005a2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a32:	e0d0      	b.n	8005bd6 <UART_SetConfig+0x2e6>
 8005a34:	2308      	movs	r3, #8
 8005a36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a3a:	e0cc      	b.n	8005bd6 <UART_SetConfig+0x2e6>
 8005a3c:	2310      	movs	r3, #16
 8005a3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a42:	e0c8      	b.n	8005bd6 <UART_SetConfig+0x2e6>
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a5e      	ldr	r2, [pc, #376]	@ (8005bc4 <UART_SetConfig+0x2d4>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d125      	bne.n	8005a9a <UART_SetConfig+0x1aa>
 8005a4e:	4b5b      	ldr	r3, [pc, #364]	@ (8005bbc <UART_SetConfig+0x2cc>)
 8005a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a54:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005a58:	2b30      	cmp	r3, #48	@ 0x30
 8005a5a:	d016      	beq.n	8005a8a <UART_SetConfig+0x19a>
 8005a5c:	2b30      	cmp	r3, #48	@ 0x30
 8005a5e:	d818      	bhi.n	8005a92 <UART_SetConfig+0x1a2>
 8005a60:	2b20      	cmp	r3, #32
 8005a62:	d00a      	beq.n	8005a7a <UART_SetConfig+0x18a>
 8005a64:	2b20      	cmp	r3, #32
 8005a66:	d814      	bhi.n	8005a92 <UART_SetConfig+0x1a2>
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d002      	beq.n	8005a72 <UART_SetConfig+0x182>
 8005a6c:	2b10      	cmp	r3, #16
 8005a6e:	d008      	beq.n	8005a82 <UART_SetConfig+0x192>
 8005a70:	e00f      	b.n	8005a92 <UART_SetConfig+0x1a2>
 8005a72:	2300      	movs	r3, #0
 8005a74:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a78:	e0ad      	b.n	8005bd6 <UART_SetConfig+0x2e6>
 8005a7a:	2302      	movs	r3, #2
 8005a7c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a80:	e0a9      	b.n	8005bd6 <UART_SetConfig+0x2e6>
 8005a82:	2304      	movs	r3, #4
 8005a84:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a88:	e0a5      	b.n	8005bd6 <UART_SetConfig+0x2e6>
 8005a8a:	2308      	movs	r3, #8
 8005a8c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a90:	e0a1      	b.n	8005bd6 <UART_SetConfig+0x2e6>
 8005a92:	2310      	movs	r3, #16
 8005a94:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a98:	e09d      	b.n	8005bd6 <UART_SetConfig+0x2e6>
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a4a      	ldr	r2, [pc, #296]	@ (8005bc8 <UART_SetConfig+0x2d8>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d125      	bne.n	8005af0 <UART_SetConfig+0x200>
 8005aa4:	4b45      	ldr	r3, [pc, #276]	@ (8005bbc <UART_SetConfig+0x2cc>)
 8005aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005aaa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005aae:	2bc0      	cmp	r3, #192	@ 0xc0
 8005ab0:	d016      	beq.n	8005ae0 <UART_SetConfig+0x1f0>
 8005ab2:	2bc0      	cmp	r3, #192	@ 0xc0
 8005ab4:	d818      	bhi.n	8005ae8 <UART_SetConfig+0x1f8>
 8005ab6:	2b80      	cmp	r3, #128	@ 0x80
 8005ab8:	d00a      	beq.n	8005ad0 <UART_SetConfig+0x1e0>
 8005aba:	2b80      	cmp	r3, #128	@ 0x80
 8005abc:	d814      	bhi.n	8005ae8 <UART_SetConfig+0x1f8>
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d002      	beq.n	8005ac8 <UART_SetConfig+0x1d8>
 8005ac2:	2b40      	cmp	r3, #64	@ 0x40
 8005ac4:	d008      	beq.n	8005ad8 <UART_SetConfig+0x1e8>
 8005ac6:	e00f      	b.n	8005ae8 <UART_SetConfig+0x1f8>
 8005ac8:	2300      	movs	r3, #0
 8005aca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ace:	e082      	b.n	8005bd6 <UART_SetConfig+0x2e6>
 8005ad0:	2302      	movs	r3, #2
 8005ad2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ad6:	e07e      	b.n	8005bd6 <UART_SetConfig+0x2e6>
 8005ad8:	2304      	movs	r3, #4
 8005ada:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ade:	e07a      	b.n	8005bd6 <UART_SetConfig+0x2e6>
 8005ae0:	2308      	movs	r3, #8
 8005ae2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ae6:	e076      	b.n	8005bd6 <UART_SetConfig+0x2e6>
 8005ae8:	2310      	movs	r3, #16
 8005aea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005aee:	e072      	b.n	8005bd6 <UART_SetConfig+0x2e6>
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a35      	ldr	r2, [pc, #212]	@ (8005bcc <UART_SetConfig+0x2dc>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d12a      	bne.n	8005b50 <UART_SetConfig+0x260>
 8005afa:	4b30      	ldr	r3, [pc, #192]	@ (8005bbc <UART_SetConfig+0x2cc>)
 8005afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b04:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b08:	d01a      	beq.n	8005b40 <UART_SetConfig+0x250>
 8005b0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b0e:	d81b      	bhi.n	8005b48 <UART_SetConfig+0x258>
 8005b10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b14:	d00c      	beq.n	8005b30 <UART_SetConfig+0x240>
 8005b16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b1a:	d815      	bhi.n	8005b48 <UART_SetConfig+0x258>
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d003      	beq.n	8005b28 <UART_SetConfig+0x238>
 8005b20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b24:	d008      	beq.n	8005b38 <UART_SetConfig+0x248>
 8005b26:	e00f      	b.n	8005b48 <UART_SetConfig+0x258>
 8005b28:	2300      	movs	r3, #0
 8005b2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b2e:	e052      	b.n	8005bd6 <UART_SetConfig+0x2e6>
 8005b30:	2302      	movs	r3, #2
 8005b32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b36:	e04e      	b.n	8005bd6 <UART_SetConfig+0x2e6>
 8005b38:	2304      	movs	r3, #4
 8005b3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b3e:	e04a      	b.n	8005bd6 <UART_SetConfig+0x2e6>
 8005b40:	2308      	movs	r3, #8
 8005b42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b46:	e046      	b.n	8005bd6 <UART_SetConfig+0x2e6>
 8005b48:	2310      	movs	r3, #16
 8005b4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b4e:	e042      	b.n	8005bd6 <UART_SetConfig+0x2e6>
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a17      	ldr	r2, [pc, #92]	@ (8005bb4 <UART_SetConfig+0x2c4>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d13a      	bne.n	8005bd0 <UART_SetConfig+0x2e0>
 8005b5a:	4b18      	ldr	r3, [pc, #96]	@ (8005bbc <UART_SetConfig+0x2cc>)
 8005b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b60:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005b64:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005b68:	d01a      	beq.n	8005ba0 <UART_SetConfig+0x2b0>
 8005b6a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005b6e:	d81b      	bhi.n	8005ba8 <UART_SetConfig+0x2b8>
 8005b70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b74:	d00c      	beq.n	8005b90 <UART_SetConfig+0x2a0>
 8005b76:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b7a:	d815      	bhi.n	8005ba8 <UART_SetConfig+0x2b8>
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d003      	beq.n	8005b88 <UART_SetConfig+0x298>
 8005b80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b84:	d008      	beq.n	8005b98 <UART_SetConfig+0x2a8>
 8005b86:	e00f      	b.n	8005ba8 <UART_SetConfig+0x2b8>
 8005b88:	2300      	movs	r3, #0
 8005b8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b8e:	e022      	b.n	8005bd6 <UART_SetConfig+0x2e6>
 8005b90:	2302      	movs	r3, #2
 8005b92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b96:	e01e      	b.n	8005bd6 <UART_SetConfig+0x2e6>
 8005b98:	2304      	movs	r3, #4
 8005b9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b9e:	e01a      	b.n	8005bd6 <UART_SetConfig+0x2e6>
 8005ba0:	2308      	movs	r3, #8
 8005ba2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ba6:	e016      	b.n	8005bd6 <UART_SetConfig+0x2e6>
 8005ba8:	2310      	movs	r3, #16
 8005baa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bae:	e012      	b.n	8005bd6 <UART_SetConfig+0x2e6>
 8005bb0:	efff69f3 	.word	0xefff69f3
 8005bb4:	40008000 	.word	0x40008000
 8005bb8:	40013800 	.word	0x40013800
 8005bbc:	40021000 	.word	0x40021000
 8005bc0:	40004400 	.word	0x40004400
 8005bc4:	40004800 	.word	0x40004800
 8005bc8:	40004c00 	.word	0x40004c00
 8005bcc:	40005000 	.word	0x40005000
 8005bd0:	2310      	movs	r3, #16
 8005bd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a9f      	ldr	r2, [pc, #636]	@ (8005e58 <UART_SetConfig+0x568>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d17a      	bne.n	8005cd6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005be0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005be4:	2b08      	cmp	r3, #8
 8005be6:	d824      	bhi.n	8005c32 <UART_SetConfig+0x342>
 8005be8:	a201      	add	r2, pc, #4	@ (adr r2, 8005bf0 <UART_SetConfig+0x300>)
 8005bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bee:	bf00      	nop
 8005bf0:	08005c15 	.word	0x08005c15
 8005bf4:	08005c33 	.word	0x08005c33
 8005bf8:	08005c1d 	.word	0x08005c1d
 8005bfc:	08005c33 	.word	0x08005c33
 8005c00:	08005c23 	.word	0x08005c23
 8005c04:	08005c33 	.word	0x08005c33
 8005c08:	08005c33 	.word	0x08005c33
 8005c0c:	08005c33 	.word	0x08005c33
 8005c10:	08005c2b 	.word	0x08005c2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c14:	f7fd ffae 	bl	8003b74 <HAL_RCC_GetPCLK1Freq>
 8005c18:	61f8      	str	r0, [r7, #28]
        break;
 8005c1a:	e010      	b.n	8005c3e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c1c:	4b8f      	ldr	r3, [pc, #572]	@ (8005e5c <UART_SetConfig+0x56c>)
 8005c1e:	61fb      	str	r3, [r7, #28]
        break;
 8005c20:	e00d      	b.n	8005c3e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c22:	f7fd ff0f 	bl	8003a44 <HAL_RCC_GetSysClockFreq>
 8005c26:	61f8      	str	r0, [r7, #28]
        break;
 8005c28:	e009      	b.n	8005c3e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c2e:	61fb      	str	r3, [r7, #28]
        break;
 8005c30:	e005      	b.n	8005c3e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005c32:	2300      	movs	r3, #0
 8005c34:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005c3c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	f000 80fb 	beq.w	8005e3c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	685a      	ldr	r2, [r3, #4]
 8005c4a:	4613      	mov	r3, r2
 8005c4c:	005b      	lsls	r3, r3, #1
 8005c4e:	4413      	add	r3, r2
 8005c50:	69fa      	ldr	r2, [r7, #28]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d305      	bcc.n	8005c62 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005c5c:	69fa      	ldr	r2, [r7, #28]
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d903      	bls.n	8005c6a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005c68:	e0e8      	b.n	8005e3c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	461c      	mov	r4, r3
 8005c70:	4615      	mov	r5, r2
 8005c72:	f04f 0200 	mov.w	r2, #0
 8005c76:	f04f 0300 	mov.w	r3, #0
 8005c7a:	022b      	lsls	r3, r5, #8
 8005c7c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005c80:	0222      	lsls	r2, r4, #8
 8005c82:	68f9      	ldr	r1, [r7, #12]
 8005c84:	6849      	ldr	r1, [r1, #4]
 8005c86:	0849      	lsrs	r1, r1, #1
 8005c88:	2000      	movs	r0, #0
 8005c8a:	4688      	mov	r8, r1
 8005c8c:	4681      	mov	r9, r0
 8005c8e:	eb12 0a08 	adds.w	sl, r2, r8
 8005c92:	eb43 0b09 	adc.w	fp, r3, r9
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	603b      	str	r3, [r7, #0]
 8005c9e:	607a      	str	r2, [r7, #4]
 8005ca0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ca4:	4650      	mov	r0, sl
 8005ca6:	4659      	mov	r1, fp
 8005ca8:	f7fa ffee 	bl	8000c88 <__aeabi_uldivmod>
 8005cac:	4602      	mov	r2, r0
 8005cae:	460b      	mov	r3, r1
 8005cb0:	4613      	mov	r3, r2
 8005cb2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005cb4:	69bb      	ldr	r3, [r7, #24]
 8005cb6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005cba:	d308      	bcc.n	8005cce <UART_SetConfig+0x3de>
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005cc2:	d204      	bcs.n	8005cce <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	69ba      	ldr	r2, [r7, #24]
 8005cca:	60da      	str	r2, [r3, #12]
 8005ccc:	e0b6      	b.n	8005e3c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005cd4:	e0b2      	b.n	8005e3c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	69db      	ldr	r3, [r3, #28]
 8005cda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005cde:	d15e      	bne.n	8005d9e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005ce0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005ce4:	2b08      	cmp	r3, #8
 8005ce6:	d828      	bhi.n	8005d3a <UART_SetConfig+0x44a>
 8005ce8:	a201      	add	r2, pc, #4	@ (adr r2, 8005cf0 <UART_SetConfig+0x400>)
 8005cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cee:	bf00      	nop
 8005cf0:	08005d15 	.word	0x08005d15
 8005cf4:	08005d1d 	.word	0x08005d1d
 8005cf8:	08005d25 	.word	0x08005d25
 8005cfc:	08005d3b 	.word	0x08005d3b
 8005d00:	08005d2b 	.word	0x08005d2b
 8005d04:	08005d3b 	.word	0x08005d3b
 8005d08:	08005d3b 	.word	0x08005d3b
 8005d0c:	08005d3b 	.word	0x08005d3b
 8005d10:	08005d33 	.word	0x08005d33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d14:	f7fd ff2e 	bl	8003b74 <HAL_RCC_GetPCLK1Freq>
 8005d18:	61f8      	str	r0, [r7, #28]
        break;
 8005d1a:	e014      	b.n	8005d46 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d1c:	f7fd ff40 	bl	8003ba0 <HAL_RCC_GetPCLK2Freq>
 8005d20:	61f8      	str	r0, [r7, #28]
        break;
 8005d22:	e010      	b.n	8005d46 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d24:	4b4d      	ldr	r3, [pc, #308]	@ (8005e5c <UART_SetConfig+0x56c>)
 8005d26:	61fb      	str	r3, [r7, #28]
        break;
 8005d28:	e00d      	b.n	8005d46 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d2a:	f7fd fe8b 	bl	8003a44 <HAL_RCC_GetSysClockFreq>
 8005d2e:	61f8      	str	r0, [r7, #28]
        break;
 8005d30:	e009      	b.n	8005d46 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d36:	61fb      	str	r3, [r7, #28]
        break;
 8005d38:	e005      	b.n	8005d46 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005d44:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d077      	beq.n	8005e3c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	005a      	lsls	r2, r3, #1
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	085b      	lsrs	r3, r3, #1
 8005d56:	441a      	add	r2, r3
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d60:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	2b0f      	cmp	r3, #15
 8005d66:	d916      	bls.n	8005d96 <UART_SetConfig+0x4a6>
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d6e:	d212      	bcs.n	8005d96 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d70:	69bb      	ldr	r3, [r7, #24]
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	f023 030f 	bic.w	r3, r3, #15
 8005d78:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d7a:	69bb      	ldr	r3, [r7, #24]
 8005d7c:	085b      	lsrs	r3, r3, #1
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	f003 0307 	and.w	r3, r3, #7
 8005d84:	b29a      	uxth	r2, r3
 8005d86:	8afb      	ldrh	r3, [r7, #22]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	8afa      	ldrh	r2, [r7, #22]
 8005d92:	60da      	str	r2, [r3, #12]
 8005d94:	e052      	b.n	8005e3c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005d9c:	e04e      	b.n	8005e3c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d9e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005da2:	2b08      	cmp	r3, #8
 8005da4:	d827      	bhi.n	8005df6 <UART_SetConfig+0x506>
 8005da6:	a201      	add	r2, pc, #4	@ (adr r2, 8005dac <UART_SetConfig+0x4bc>)
 8005da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dac:	08005dd1 	.word	0x08005dd1
 8005db0:	08005dd9 	.word	0x08005dd9
 8005db4:	08005de1 	.word	0x08005de1
 8005db8:	08005df7 	.word	0x08005df7
 8005dbc:	08005de7 	.word	0x08005de7
 8005dc0:	08005df7 	.word	0x08005df7
 8005dc4:	08005df7 	.word	0x08005df7
 8005dc8:	08005df7 	.word	0x08005df7
 8005dcc:	08005def 	.word	0x08005def
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005dd0:	f7fd fed0 	bl	8003b74 <HAL_RCC_GetPCLK1Freq>
 8005dd4:	61f8      	str	r0, [r7, #28]
        break;
 8005dd6:	e014      	b.n	8005e02 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005dd8:	f7fd fee2 	bl	8003ba0 <HAL_RCC_GetPCLK2Freq>
 8005ddc:	61f8      	str	r0, [r7, #28]
        break;
 8005dde:	e010      	b.n	8005e02 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005de0:	4b1e      	ldr	r3, [pc, #120]	@ (8005e5c <UART_SetConfig+0x56c>)
 8005de2:	61fb      	str	r3, [r7, #28]
        break;
 8005de4:	e00d      	b.n	8005e02 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005de6:	f7fd fe2d 	bl	8003a44 <HAL_RCC_GetSysClockFreq>
 8005dea:	61f8      	str	r0, [r7, #28]
        break;
 8005dec:	e009      	b.n	8005e02 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005df2:	61fb      	str	r3, [r7, #28]
        break;
 8005df4:	e005      	b.n	8005e02 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005df6:	2300      	movs	r3, #0
 8005df8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005e00:	bf00      	nop
    }

    if (pclk != 0U)
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d019      	beq.n	8005e3c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	085a      	lsrs	r2, r3, #1
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	441a      	add	r2, r3
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e1a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	2b0f      	cmp	r3, #15
 8005e20:	d909      	bls.n	8005e36 <UART_SetConfig+0x546>
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e28:	d205      	bcs.n	8005e36 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	b29a      	uxth	r2, r3
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	60da      	str	r2, [r3, #12]
 8005e34:	e002      	b.n	8005e3c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2200      	movs	r2, #0
 8005e46:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005e48:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3728      	adds	r7, #40	@ 0x28
 8005e50:	46bd      	mov	sp, r7
 8005e52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e56:	bf00      	nop
 8005e58:	40008000 	.word	0x40008000
 8005e5c:	00f42400 	.word	0x00f42400

08005e60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b083      	sub	sp, #12
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e6c:	f003 0308 	and.w	r3, r3, #8
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d00a      	beq.n	8005e8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	430a      	orrs	r2, r1
 8005e88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e8e:	f003 0301 	and.w	r3, r3, #1
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d00a      	beq.n	8005eac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	430a      	orrs	r2, r1
 8005eaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eb0:	f003 0302 	and.w	r3, r3, #2
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d00a      	beq.n	8005ece <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	430a      	orrs	r2, r1
 8005ecc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ed2:	f003 0304 	and.w	r3, r3, #4
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d00a      	beq.n	8005ef0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	430a      	orrs	r2, r1
 8005eee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ef4:	f003 0310 	and.w	r3, r3, #16
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d00a      	beq.n	8005f12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	430a      	orrs	r2, r1
 8005f10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f16:	f003 0320 	and.w	r3, r3, #32
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00a      	beq.n	8005f34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	430a      	orrs	r2, r1
 8005f32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d01a      	beq.n	8005f76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	430a      	orrs	r2, r1
 8005f54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f5e:	d10a      	bne.n	8005f76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	430a      	orrs	r2, r1
 8005f74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00a      	beq.n	8005f98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	430a      	orrs	r2, r1
 8005f96:	605a      	str	r2, [r3, #4]
  }
}
 8005f98:	bf00      	nop
 8005f9a:	370c      	adds	r7, #12
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b098      	sub	sp, #96	@ 0x60
 8005fa8:	af02      	add	r7, sp, #8
 8005faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005fb4:	f7fb ff30 	bl	8001e18 <HAL_GetTick>
 8005fb8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f003 0308 	and.w	r3, r3, #8
 8005fc4:	2b08      	cmp	r3, #8
 8005fc6:	d12e      	bne.n	8006026 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fc8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005fcc:	9300      	str	r3, [sp, #0]
 8005fce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 f88c 	bl	80060f4 <UART_WaitOnFlagUntilTimeout>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d021      	beq.n	8006026 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fea:	e853 3f00 	ldrex	r3, [r3]
 8005fee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005ff0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ff2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ff6:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006000:	647b      	str	r3, [r7, #68]	@ 0x44
 8006002:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006004:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006006:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006008:	e841 2300 	strex	r3, r2, [r1]
 800600c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800600e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006010:	2b00      	cmp	r3, #0
 8006012:	d1e6      	bne.n	8005fe2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2220      	movs	r2, #32
 8006018:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006022:	2303      	movs	r3, #3
 8006024:	e062      	b.n	80060ec <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 0304 	and.w	r3, r3, #4
 8006030:	2b04      	cmp	r3, #4
 8006032:	d149      	bne.n	80060c8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006034:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006038:	9300      	str	r3, [sp, #0]
 800603a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800603c:	2200      	movs	r2, #0
 800603e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 f856 	bl	80060f4 <UART_WaitOnFlagUntilTimeout>
 8006048:	4603      	mov	r3, r0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d03c      	beq.n	80060c8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006056:	e853 3f00 	ldrex	r3, [r3]
 800605a:	623b      	str	r3, [r7, #32]
   return(result);
 800605c:	6a3b      	ldr	r3, [r7, #32]
 800605e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006062:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	461a      	mov	r2, r3
 800606a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800606c:	633b      	str	r3, [r7, #48]	@ 0x30
 800606e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006070:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006072:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006074:	e841 2300 	strex	r3, r2, [r1]
 8006078:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800607a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800607c:	2b00      	cmp	r3, #0
 800607e:	d1e6      	bne.n	800604e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	3308      	adds	r3, #8
 8006086:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	e853 3f00 	ldrex	r3, [r3]
 800608e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f023 0301 	bic.w	r3, r3, #1
 8006096:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	3308      	adds	r3, #8
 800609e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80060a0:	61fa      	str	r2, [r7, #28]
 80060a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a4:	69b9      	ldr	r1, [r7, #24]
 80060a6:	69fa      	ldr	r2, [r7, #28]
 80060a8:	e841 2300 	strex	r3, r2, [r1]
 80060ac:	617b      	str	r3, [r7, #20]
   return(result);
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d1e5      	bne.n	8006080 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2220      	movs	r2, #32
 80060b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060c4:	2303      	movs	r3, #3
 80060c6:	e011      	b.n	80060ec <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2220      	movs	r2, #32
 80060cc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2220      	movs	r2, #32
 80060d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2200      	movs	r2, #0
 80060e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80060ea:	2300      	movs	r3, #0
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3758      	adds	r7, #88	@ 0x58
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}

080060f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b084      	sub	sp, #16
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	603b      	str	r3, [r7, #0]
 8006100:	4613      	mov	r3, r2
 8006102:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006104:	e04f      	b.n	80061a6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800610c:	d04b      	beq.n	80061a6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800610e:	f7fb fe83 	bl	8001e18 <HAL_GetTick>
 8006112:	4602      	mov	r2, r0
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	1ad3      	subs	r3, r2, r3
 8006118:	69ba      	ldr	r2, [r7, #24]
 800611a:	429a      	cmp	r2, r3
 800611c:	d302      	bcc.n	8006124 <UART_WaitOnFlagUntilTimeout+0x30>
 800611e:	69bb      	ldr	r3, [r7, #24]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d101      	bne.n	8006128 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006124:	2303      	movs	r3, #3
 8006126:	e04e      	b.n	80061c6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f003 0304 	and.w	r3, r3, #4
 8006132:	2b00      	cmp	r3, #0
 8006134:	d037      	beq.n	80061a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	2b80      	cmp	r3, #128	@ 0x80
 800613a:	d034      	beq.n	80061a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	2b40      	cmp	r3, #64	@ 0x40
 8006140:	d031      	beq.n	80061a6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	69db      	ldr	r3, [r3, #28]
 8006148:	f003 0308 	and.w	r3, r3, #8
 800614c:	2b08      	cmp	r3, #8
 800614e:	d110      	bne.n	8006172 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2208      	movs	r2, #8
 8006156:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006158:	68f8      	ldr	r0, [r7, #12]
 800615a:	f000 f838 	bl	80061ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2208      	movs	r2, #8
 8006162:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2200      	movs	r2, #0
 800616a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e029      	b.n	80061c6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	69db      	ldr	r3, [r3, #28]
 8006178:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800617c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006180:	d111      	bne.n	80061a6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800618a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800618c:	68f8      	ldr	r0, [r7, #12]
 800618e:	f000 f81e 	bl	80061ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2220      	movs	r2, #32
 8006196:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2200      	movs	r2, #0
 800619e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80061a2:	2303      	movs	r3, #3
 80061a4:	e00f      	b.n	80061c6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	69da      	ldr	r2, [r3, #28]
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	4013      	ands	r3, r2
 80061b0:	68ba      	ldr	r2, [r7, #8]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	bf0c      	ite	eq
 80061b6:	2301      	moveq	r3, #1
 80061b8:	2300      	movne	r3, #0
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	461a      	mov	r2, r3
 80061be:	79fb      	ldrb	r3, [r7, #7]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d0a0      	beq.n	8006106 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061c4:	2300      	movs	r3, #0
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3710      	adds	r7, #16
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}

080061ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061ce:	b480      	push	{r7}
 80061d0:	b095      	sub	sp, #84	@ 0x54
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061de:	e853 3f00 	ldrex	r3, [r3]
 80061e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80061e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80061ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	461a      	mov	r2, r3
 80061f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80061f6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80061fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80061fc:	e841 2300 	strex	r3, r2, [r1]
 8006200:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006204:	2b00      	cmp	r3, #0
 8006206:	d1e6      	bne.n	80061d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	3308      	adds	r3, #8
 800620e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006210:	6a3b      	ldr	r3, [r7, #32]
 8006212:	e853 3f00 	ldrex	r3, [r3]
 8006216:	61fb      	str	r3, [r7, #28]
   return(result);
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	f023 0301 	bic.w	r3, r3, #1
 800621e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	3308      	adds	r3, #8
 8006226:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006228:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800622a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800622e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006230:	e841 2300 	strex	r3, r2, [r1]
 8006234:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006238:	2b00      	cmp	r3, #0
 800623a:	d1e5      	bne.n	8006208 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006240:	2b01      	cmp	r3, #1
 8006242:	d118      	bne.n	8006276 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	e853 3f00 	ldrex	r3, [r3]
 8006250:	60bb      	str	r3, [r7, #8]
   return(result);
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	f023 0310 	bic.w	r3, r3, #16
 8006258:	647b      	str	r3, [r7, #68]	@ 0x44
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	461a      	mov	r2, r3
 8006260:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006262:	61bb      	str	r3, [r7, #24]
 8006264:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006266:	6979      	ldr	r1, [r7, #20]
 8006268:	69ba      	ldr	r2, [r7, #24]
 800626a:	e841 2300 	strex	r3, r2, [r1]
 800626e:	613b      	str	r3, [r7, #16]
   return(result);
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d1e6      	bne.n	8006244 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2220      	movs	r2, #32
 800627a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800628a:	bf00      	nop
 800628c:	3754      	adds	r7, #84	@ 0x54
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr

08006296 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006296:	b580      	push	{r7, lr}
 8006298:	b084      	sub	sp, #16
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80062b4:	68f8      	ldr	r0, [r7, #12]
 80062b6:	f7ff fb05 	bl	80058c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062ba:	bf00      	nop
 80062bc:	3710      	adds	r7, #16
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}

080062c2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80062c2:	b580      	push	{r7, lr}
 80062c4:	b088      	sub	sp, #32
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	e853 3f00 	ldrex	r3, [r3]
 80062d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062de:	61fb      	str	r3, [r7, #28]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	461a      	mov	r2, r3
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	61bb      	str	r3, [r7, #24]
 80062ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ec:	6979      	ldr	r1, [r7, #20]
 80062ee:	69ba      	ldr	r2, [r7, #24]
 80062f0:	e841 2300 	strex	r3, r2, [r1]
 80062f4:	613b      	str	r3, [r7, #16]
   return(result);
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d1e6      	bne.n	80062ca <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2220      	movs	r2, #32
 8006300:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f7ff fad1 	bl	80058b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800630e:	bf00      	nop
 8006310:	3720      	adds	r7, #32
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}

08006316 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006316:	b480      	push	{r7}
 8006318:	b083      	sub	sp, #12
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800631e:	bf00      	nop
 8006320:	370c      	adds	r7, #12
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr

0800632a <__cvt>:
 800632a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800632e:	ec57 6b10 	vmov	r6, r7, d0
 8006332:	2f00      	cmp	r7, #0
 8006334:	460c      	mov	r4, r1
 8006336:	4619      	mov	r1, r3
 8006338:	463b      	mov	r3, r7
 800633a:	bfbb      	ittet	lt
 800633c:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006340:	461f      	movlt	r7, r3
 8006342:	2300      	movge	r3, #0
 8006344:	232d      	movlt	r3, #45	@ 0x2d
 8006346:	700b      	strb	r3, [r1, #0]
 8006348:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800634a:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800634e:	4691      	mov	r9, r2
 8006350:	f023 0820 	bic.w	r8, r3, #32
 8006354:	bfbc      	itt	lt
 8006356:	4632      	movlt	r2, r6
 8006358:	4616      	movlt	r6, r2
 800635a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800635e:	d005      	beq.n	800636c <__cvt+0x42>
 8006360:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006364:	d100      	bne.n	8006368 <__cvt+0x3e>
 8006366:	3401      	adds	r4, #1
 8006368:	2102      	movs	r1, #2
 800636a:	e000      	b.n	800636e <__cvt+0x44>
 800636c:	2103      	movs	r1, #3
 800636e:	ab03      	add	r3, sp, #12
 8006370:	9301      	str	r3, [sp, #4]
 8006372:	ab02      	add	r3, sp, #8
 8006374:	9300      	str	r3, [sp, #0]
 8006376:	ec47 6b10 	vmov	d0, r6, r7
 800637a:	4653      	mov	r3, sl
 800637c:	4622      	mov	r2, r4
 800637e:	f001 f99b 	bl	80076b8 <_dtoa_r>
 8006382:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006386:	4605      	mov	r5, r0
 8006388:	d119      	bne.n	80063be <__cvt+0x94>
 800638a:	f019 0f01 	tst.w	r9, #1
 800638e:	d00e      	beq.n	80063ae <__cvt+0x84>
 8006390:	eb00 0904 	add.w	r9, r0, r4
 8006394:	2200      	movs	r2, #0
 8006396:	2300      	movs	r3, #0
 8006398:	4630      	mov	r0, r6
 800639a:	4639      	mov	r1, r7
 800639c:	f7fa fb94 	bl	8000ac8 <__aeabi_dcmpeq>
 80063a0:	b108      	cbz	r0, 80063a6 <__cvt+0x7c>
 80063a2:	f8cd 900c 	str.w	r9, [sp, #12]
 80063a6:	2230      	movs	r2, #48	@ 0x30
 80063a8:	9b03      	ldr	r3, [sp, #12]
 80063aa:	454b      	cmp	r3, r9
 80063ac:	d31e      	bcc.n	80063ec <__cvt+0xc2>
 80063ae:	9b03      	ldr	r3, [sp, #12]
 80063b0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80063b2:	1b5b      	subs	r3, r3, r5
 80063b4:	4628      	mov	r0, r5
 80063b6:	6013      	str	r3, [r2, #0]
 80063b8:	b004      	add	sp, #16
 80063ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063be:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80063c2:	eb00 0904 	add.w	r9, r0, r4
 80063c6:	d1e5      	bne.n	8006394 <__cvt+0x6a>
 80063c8:	7803      	ldrb	r3, [r0, #0]
 80063ca:	2b30      	cmp	r3, #48	@ 0x30
 80063cc:	d10a      	bne.n	80063e4 <__cvt+0xba>
 80063ce:	2200      	movs	r2, #0
 80063d0:	2300      	movs	r3, #0
 80063d2:	4630      	mov	r0, r6
 80063d4:	4639      	mov	r1, r7
 80063d6:	f7fa fb77 	bl	8000ac8 <__aeabi_dcmpeq>
 80063da:	b918      	cbnz	r0, 80063e4 <__cvt+0xba>
 80063dc:	f1c4 0401 	rsb	r4, r4, #1
 80063e0:	f8ca 4000 	str.w	r4, [sl]
 80063e4:	f8da 3000 	ldr.w	r3, [sl]
 80063e8:	4499      	add	r9, r3
 80063ea:	e7d3      	b.n	8006394 <__cvt+0x6a>
 80063ec:	1c59      	adds	r1, r3, #1
 80063ee:	9103      	str	r1, [sp, #12]
 80063f0:	701a      	strb	r2, [r3, #0]
 80063f2:	e7d9      	b.n	80063a8 <__cvt+0x7e>

080063f4 <__exponent>:
 80063f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063f6:	2900      	cmp	r1, #0
 80063f8:	bfba      	itte	lt
 80063fa:	4249      	neglt	r1, r1
 80063fc:	232d      	movlt	r3, #45	@ 0x2d
 80063fe:	232b      	movge	r3, #43	@ 0x2b
 8006400:	2909      	cmp	r1, #9
 8006402:	7002      	strb	r2, [r0, #0]
 8006404:	7043      	strb	r3, [r0, #1]
 8006406:	dd29      	ble.n	800645c <__exponent+0x68>
 8006408:	f10d 0307 	add.w	r3, sp, #7
 800640c:	461d      	mov	r5, r3
 800640e:	270a      	movs	r7, #10
 8006410:	461a      	mov	r2, r3
 8006412:	fbb1 f6f7 	udiv	r6, r1, r7
 8006416:	fb07 1416 	mls	r4, r7, r6, r1
 800641a:	3430      	adds	r4, #48	@ 0x30
 800641c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006420:	460c      	mov	r4, r1
 8006422:	2c63      	cmp	r4, #99	@ 0x63
 8006424:	f103 33ff 	add.w	r3, r3, #4294967295
 8006428:	4631      	mov	r1, r6
 800642a:	dcf1      	bgt.n	8006410 <__exponent+0x1c>
 800642c:	3130      	adds	r1, #48	@ 0x30
 800642e:	1e94      	subs	r4, r2, #2
 8006430:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006434:	1c41      	adds	r1, r0, #1
 8006436:	4623      	mov	r3, r4
 8006438:	42ab      	cmp	r3, r5
 800643a:	d30a      	bcc.n	8006452 <__exponent+0x5e>
 800643c:	f10d 0309 	add.w	r3, sp, #9
 8006440:	1a9b      	subs	r3, r3, r2
 8006442:	42ac      	cmp	r4, r5
 8006444:	bf88      	it	hi
 8006446:	2300      	movhi	r3, #0
 8006448:	3302      	adds	r3, #2
 800644a:	4403      	add	r3, r0
 800644c:	1a18      	subs	r0, r3, r0
 800644e:	b003      	add	sp, #12
 8006450:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006452:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006456:	f801 6f01 	strb.w	r6, [r1, #1]!
 800645a:	e7ed      	b.n	8006438 <__exponent+0x44>
 800645c:	2330      	movs	r3, #48	@ 0x30
 800645e:	3130      	adds	r1, #48	@ 0x30
 8006460:	7083      	strb	r3, [r0, #2]
 8006462:	70c1      	strb	r1, [r0, #3]
 8006464:	1d03      	adds	r3, r0, #4
 8006466:	e7f1      	b.n	800644c <__exponent+0x58>

08006468 <_printf_float>:
 8006468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800646c:	b08d      	sub	sp, #52	@ 0x34
 800646e:	460c      	mov	r4, r1
 8006470:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006474:	4616      	mov	r6, r2
 8006476:	461f      	mov	r7, r3
 8006478:	4605      	mov	r5, r0
 800647a:	f001 f809 	bl	8007490 <_localeconv_r>
 800647e:	6803      	ldr	r3, [r0, #0]
 8006480:	9304      	str	r3, [sp, #16]
 8006482:	4618      	mov	r0, r3
 8006484:	f7f9 fef4 	bl	8000270 <strlen>
 8006488:	2300      	movs	r3, #0
 800648a:	930a      	str	r3, [sp, #40]	@ 0x28
 800648c:	f8d8 3000 	ldr.w	r3, [r8]
 8006490:	9005      	str	r0, [sp, #20]
 8006492:	3307      	adds	r3, #7
 8006494:	f023 0307 	bic.w	r3, r3, #7
 8006498:	f103 0208 	add.w	r2, r3, #8
 800649c:	f894 a018 	ldrb.w	sl, [r4, #24]
 80064a0:	f8d4 b000 	ldr.w	fp, [r4]
 80064a4:	f8c8 2000 	str.w	r2, [r8]
 80064a8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80064ac:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80064b0:	9307      	str	r3, [sp, #28]
 80064b2:	f8cd 8018 	str.w	r8, [sp, #24]
 80064b6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80064ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80064be:	4b9c      	ldr	r3, [pc, #624]	@ (8006730 <_printf_float+0x2c8>)
 80064c0:	f04f 32ff 	mov.w	r2, #4294967295
 80064c4:	f7fa fb32 	bl	8000b2c <__aeabi_dcmpun>
 80064c8:	bb70      	cbnz	r0, 8006528 <_printf_float+0xc0>
 80064ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80064ce:	4b98      	ldr	r3, [pc, #608]	@ (8006730 <_printf_float+0x2c8>)
 80064d0:	f04f 32ff 	mov.w	r2, #4294967295
 80064d4:	f7fa fb0c 	bl	8000af0 <__aeabi_dcmple>
 80064d8:	bb30      	cbnz	r0, 8006528 <_printf_float+0xc0>
 80064da:	2200      	movs	r2, #0
 80064dc:	2300      	movs	r3, #0
 80064de:	4640      	mov	r0, r8
 80064e0:	4649      	mov	r1, r9
 80064e2:	f7fa fafb 	bl	8000adc <__aeabi_dcmplt>
 80064e6:	b110      	cbz	r0, 80064ee <_printf_float+0x86>
 80064e8:	232d      	movs	r3, #45	@ 0x2d
 80064ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80064ee:	4a91      	ldr	r2, [pc, #580]	@ (8006734 <_printf_float+0x2cc>)
 80064f0:	4b91      	ldr	r3, [pc, #580]	@ (8006738 <_printf_float+0x2d0>)
 80064f2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80064f6:	bf94      	ite	ls
 80064f8:	4690      	movls	r8, r2
 80064fa:	4698      	movhi	r8, r3
 80064fc:	2303      	movs	r3, #3
 80064fe:	6123      	str	r3, [r4, #16]
 8006500:	f02b 0304 	bic.w	r3, fp, #4
 8006504:	6023      	str	r3, [r4, #0]
 8006506:	f04f 0900 	mov.w	r9, #0
 800650a:	9700      	str	r7, [sp, #0]
 800650c:	4633      	mov	r3, r6
 800650e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006510:	4621      	mov	r1, r4
 8006512:	4628      	mov	r0, r5
 8006514:	f000 f9d2 	bl	80068bc <_printf_common>
 8006518:	3001      	adds	r0, #1
 800651a:	f040 808d 	bne.w	8006638 <_printf_float+0x1d0>
 800651e:	f04f 30ff 	mov.w	r0, #4294967295
 8006522:	b00d      	add	sp, #52	@ 0x34
 8006524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006528:	4642      	mov	r2, r8
 800652a:	464b      	mov	r3, r9
 800652c:	4640      	mov	r0, r8
 800652e:	4649      	mov	r1, r9
 8006530:	f7fa fafc 	bl	8000b2c <__aeabi_dcmpun>
 8006534:	b140      	cbz	r0, 8006548 <_printf_float+0xe0>
 8006536:	464b      	mov	r3, r9
 8006538:	2b00      	cmp	r3, #0
 800653a:	bfbc      	itt	lt
 800653c:	232d      	movlt	r3, #45	@ 0x2d
 800653e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006542:	4a7e      	ldr	r2, [pc, #504]	@ (800673c <_printf_float+0x2d4>)
 8006544:	4b7e      	ldr	r3, [pc, #504]	@ (8006740 <_printf_float+0x2d8>)
 8006546:	e7d4      	b.n	80064f2 <_printf_float+0x8a>
 8006548:	6863      	ldr	r3, [r4, #4]
 800654a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800654e:	9206      	str	r2, [sp, #24]
 8006550:	1c5a      	adds	r2, r3, #1
 8006552:	d13b      	bne.n	80065cc <_printf_float+0x164>
 8006554:	2306      	movs	r3, #6
 8006556:	6063      	str	r3, [r4, #4]
 8006558:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800655c:	2300      	movs	r3, #0
 800655e:	6022      	str	r2, [r4, #0]
 8006560:	9303      	str	r3, [sp, #12]
 8006562:	ab0a      	add	r3, sp, #40	@ 0x28
 8006564:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006568:	ab09      	add	r3, sp, #36	@ 0x24
 800656a:	9300      	str	r3, [sp, #0]
 800656c:	6861      	ldr	r1, [r4, #4]
 800656e:	ec49 8b10 	vmov	d0, r8, r9
 8006572:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006576:	4628      	mov	r0, r5
 8006578:	f7ff fed7 	bl	800632a <__cvt>
 800657c:	9b06      	ldr	r3, [sp, #24]
 800657e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006580:	2b47      	cmp	r3, #71	@ 0x47
 8006582:	4680      	mov	r8, r0
 8006584:	d129      	bne.n	80065da <_printf_float+0x172>
 8006586:	1cc8      	adds	r0, r1, #3
 8006588:	db02      	blt.n	8006590 <_printf_float+0x128>
 800658a:	6863      	ldr	r3, [r4, #4]
 800658c:	4299      	cmp	r1, r3
 800658e:	dd41      	ble.n	8006614 <_printf_float+0x1ac>
 8006590:	f1aa 0a02 	sub.w	sl, sl, #2
 8006594:	fa5f fa8a 	uxtb.w	sl, sl
 8006598:	3901      	subs	r1, #1
 800659a:	4652      	mov	r2, sl
 800659c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80065a0:	9109      	str	r1, [sp, #36]	@ 0x24
 80065a2:	f7ff ff27 	bl	80063f4 <__exponent>
 80065a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80065a8:	1813      	adds	r3, r2, r0
 80065aa:	2a01      	cmp	r2, #1
 80065ac:	4681      	mov	r9, r0
 80065ae:	6123      	str	r3, [r4, #16]
 80065b0:	dc02      	bgt.n	80065b8 <_printf_float+0x150>
 80065b2:	6822      	ldr	r2, [r4, #0]
 80065b4:	07d2      	lsls	r2, r2, #31
 80065b6:	d501      	bpl.n	80065bc <_printf_float+0x154>
 80065b8:	3301      	adds	r3, #1
 80065ba:	6123      	str	r3, [r4, #16]
 80065bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d0a2      	beq.n	800650a <_printf_float+0xa2>
 80065c4:	232d      	movs	r3, #45	@ 0x2d
 80065c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80065ca:	e79e      	b.n	800650a <_printf_float+0xa2>
 80065cc:	9a06      	ldr	r2, [sp, #24]
 80065ce:	2a47      	cmp	r2, #71	@ 0x47
 80065d0:	d1c2      	bne.n	8006558 <_printf_float+0xf0>
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d1c0      	bne.n	8006558 <_printf_float+0xf0>
 80065d6:	2301      	movs	r3, #1
 80065d8:	e7bd      	b.n	8006556 <_printf_float+0xee>
 80065da:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80065de:	d9db      	bls.n	8006598 <_printf_float+0x130>
 80065e0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80065e4:	d118      	bne.n	8006618 <_printf_float+0x1b0>
 80065e6:	2900      	cmp	r1, #0
 80065e8:	6863      	ldr	r3, [r4, #4]
 80065ea:	dd0b      	ble.n	8006604 <_printf_float+0x19c>
 80065ec:	6121      	str	r1, [r4, #16]
 80065ee:	b913      	cbnz	r3, 80065f6 <_printf_float+0x18e>
 80065f0:	6822      	ldr	r2, [r4, #0]
 80065f2:	07d0      	lsls	r0, r2, #31
 80065f4:	d502      	bpl.n	80065fc <_printf_float+0x194>
 80065f6:	3301      	adds	r3, #1
 80065f8:	440b      	add	r3, r1
 80065fa:	6123      	str	r3, [r4, #16]
 80065fc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80065fe:	f04f 0900 	mov.w	r9, #0
 8006602:	e7db      	b.n	80065bc <_printf_float+0x154>
 8006604:	b913      	cbnz	r3, 800660c <_printf_float+0x1a4>
 8006606:	6822      	ldr	r2, [r4, #0]
 8006608:	07d2      	lsls	r2, r2, #31
 800660a:	d501      	bpl.n	8006610 <_printf_float+0x1a8>
 800660c:	3302      	adds	r3, #2
 800660e:	e7f4      	b.n	80065fa <_printf_float+0x192>
 8006610:	2301      	movs	r3, #1
 8006612:	e7f2      	b.n	80065fa <_printf_float+0x192>
 8006614:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006618:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800661a:	4299      	cmp	r1, r3
 800661c:	db05      	blt.n	800662a <_printf_float+0x1c2>
 800661e:	6823      	ldr	r3, [r4, #0]
 8006620:	6121      	str	r1, [r4, #16]
 8006622:	07d8      	lsls	r0, r3, #31
 8006624:	d5ea      	bpl.n	80065fc <_printf_float+0x194>
 8006626:	1c4b      	adds	r3, r1, #1
 8006628:	e7e7      	b.n	80065fa <_printf_float+0x192>
 800662a:	2900      	cmp	r1, #0
 800662c:	bfd4      	ite	le
 800662e:	f1c1 0202 	rsble	r2, r1, #2
 8006632:	2201      	movgt	r2, #1
 8006634:	4413      	add	r3, r2
 8006636:	e7e0      	b.n	80065fa <_printf_float+0x192>
 8006638:	6823      	ldr	r3, [r4, #0]
 800663a:	055a      	lsls	r2, r3, #21
 800663c:	d407      	bmi.n	800664e <_printf_float+0x1e6>
 800663e:	6923      	ldr	r3, [r4, #16]
 8006640:	4642      	mov	r2, r8
 8006642:	4631      	mov	r1, r6
 8006644:	4628      	mov	r0, r5
 8006646:	47b8      	blx	r7
 8006648:	3001      	adds	r0, #1
 800664a:	d12b      	bne.n	80066a4 <_printf_float+0x23c>
 800664c:	e767      	b.n	800651e <_printf_float+0xb6>
 800664e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006652:	f240 80dd 	bls.w	8006810 <_printf_float+0x3a8>
 8006656:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800665a:	2200      	movs	r2, #0
 800665c:	2300      	movs	r3, #0
 800665e:	f7fa fa33 	bl	8000ac8 <__aeabi_dcmpeq>
 8006662:	2800      	cmp	r0, #0
 8006664:	d033      	beq.n	80066ce <_printf_float+0x266>
 8006666:	4a37      	ldr	r2, [pc, #220]	@ (8006744 <_printf_float+0x2dc>)
 8006668:	2301      	movs	r3, #1
 800666a:	4631      	mov	r1, r6
 800666c:	4628      	mov	r0, r5
 800666e:	47b8      	blx	r7
 8006670:	3001      	adds	r0, #1
 8006672:	f43f af54 	beq.w	800651e <_printf_float+0xb6>
 8006676:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800667a:	4543      	cmp	r3, r8
 800667c:	db02      	blt.n	8006684 <_printf_float+0x21c>
 800667e:	6823      	ldr	r3, [r4, #0]
 8006680:	07d8      	lsls	r0, r3, #31
 8006682:	d50f      	bpl.n	80066a4 <_printf_float+0x23c>
 8006684:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006688:	4631      	mov	r1, r6
 800668a:	4628      	mov	r0, r5
 800668c:	47b8      	blx	r7
 800668e:	3001      	adds	r0, #1
 8006690:	f43f af45 	beq.w	800651e <_printf_float+0xb6>
 8006694:	f04f 0900 	mov.w	r9, #0
 8006698:	f108 38ff 	add.w	r8, r8, #4294967295
 800669c:	f104 0a1a 	add.w	sl, r4, #26
 80066a0:	45c8      	cmp	r8, r9
 80066a2:	dc09      	bgt.n	80066b8 <_printf_float+0x250>
 80066a4:	6823      	ldr	r3, [r4, #0]
 80066a6:	079b      	lsls	r3, r3, #30
 80066a8:	f100 8103 	bmi.w	80068b2 <_printf_float+0x44a>
 80066ac:	68e0      	ldr	r0, [r4, #12]
 80066ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80066b0:	4298      	cmp	r0, r3
 80066b2:	bfb8      	it	lt
 80066b4:	4618      	movlt	r0, r3
 80066b6:	e734      	b.n	8006522 <_printf_float+0xba>
 80066b8:	2301      	movs	r3, #1
 80066ba:	4652      	mov	r2, sl
 80066bc:	4631      	mov	r1, r6
 80066be:	4628      	mov	r0, r5
 80066c0:	47b8      	blx	r7
 80066c2:	3001      	adds	r0, #1
 80066c4:	f43f af2b 	beq.w	800651e <_printf_float+0xb6>
 80066c8:	f109 0901 	add.w	r9, r9, #1
 80066cc:	e7e8      	b.n	80066a0 <_printf_float+0x238>
 80066ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	dc39      	bgt.n	8006748 <_printf_float+0x2e0>
 80066d4:	4a1b      	ldr	r2, [pc, #108]	@ (8006744 <_printf_float+0x2dc>)
 80066d6:	2301      	movs	r3, #1
 80066d8:	4631      	mov	r1, r6
 80066da:	4628      	mov	r0, r5
 80066dc:	47b8      	blx	r7
 80066de:	3001      	adds	r0, #1
 80066e0:	f43f af1d 	beq.w	800651e <_printf_float+0xb6>
 80066e4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80066e8:	ea59 0303 	orrs.w	r3, r9, r3
 80066ec:	d102      	bne.n	80066f4 <_printf_float+0x28c>
 80066ee:	6823      	ldr	r3, [r4, #0]
 80066f0:	07d9      	lsls	r1, r3, #31
 80066f2:	d5d7      	bpl.n	80066a4 <_printf_float+0x23c>
 80066f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066f8:	4631      	mov	r1, r6
 80066fa:	4628      	mov	r0, r5
 80066fc:	47b8      	blx	r7
 80066fe:	3001      	adds	r0, #1
 8006700:	f43f af0d 	beq.w	800651e <_printf_float+0xb6>
 8006704:	f04f 0a00 	mov.w	sl, #0
 8006708:	f104 0b1a 	add.w	fp, r4, #26
 800670c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800670e:	425b      	negs	r3, r3
 8006710:	4553      	cmp	r3, sl
 8006712:	dc01      	bgt.n	8006718 <_printf_float+0x2b0>
 8006714:	464b      	mov	r3, r9
 8006716:	e793      	b.n	8006640 <_printf_float+0x1d8>
 8006718:	2301      	movs	r3, #1
 800671a:	465a      	mov	r2, fp
 800671c:	4631      	mov	r1, r6
 800671e:	4628      	mov	r0, r5
 8006720:	47b8      	blx	r7
 8006722:	3001      	adds	r0, #1
 8006724:	f43f aefb 	beq.w	800651e <_printf_float+0xb6>
 8006728:	f10a 0a01 	add.w	sl, sl, #1
 800672c:	e7ee      	b.n	800670c <_printf_float+0x2a4>
 800672e:	bf00      	nop
 8006730:	7fefffff 	.word	0x7fefffff
 8006734:	08015374 	.word	0x08015374
 8006738:	08015378 	.word	0x08015378
 800673c:	0801537c 	.word	0x0801537c
 8006740:	08015380 	.word	0x08015380
 8006744:	08015384 	.word	0x08015384
 8006748:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800674a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800674e:	4553      	cmp	r3, sl
 8006750:	bfa8      	it	ge
 8006752:	4653      	movge	r3, sl
 8006754:	2b00      	cmp	r3, #0
 8006756:	4699      	mov	r9, r3
 8006758:	dc36      	bgt.n	80067c8 <_printf_float+0x360>
 800675a:	f04f 0b00 	mov.w	fp, #0
 800675e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006762:	f104 021a 	add.w	r2, r4, #26
 8006766:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006768:	9306      	str	r3, [sp, #24]
 800676a:	eba3 0309 	sub.w	r3, r3, r9
 800676e:	455b      	cmp	r3, fp
 8006770:	dc31      	bgt.n	80067d6 <_printf_float+0x36e>
 8006772:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006774:	459a      	cmp	sl, r3
 8006776:	dc3a      	bgt.n	80067ee <_printf_float+0x386>
 8006778:	6823      	ldr	r3, [r4, #0]
 800677a:	07da      	lsls	r2, r3, #31
 800677c:	d437      	bmi.n	80067ee <_printf_float+0x386>
 800677e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006780:	ebaa 0903 	sub.w	r9, sl, r3
 8006784:	9b06      	ldr	r3, [sp, #24]
 8006786:	ebaa 0303 	sub.w	r3, sl, r3
 800678a:	4599      	cmp	r9, r3
 800678c:	bfa8      	it	ge
 800678e:	4699      	movge	r9, r3
 8006790:	f1b9 0f00 	cmp.w	r9, #0
 8006794:	dc33      	bgt.n	80067fe <_printf_float+0x396>
 8006796:	f04f 0800 	mov.w	r8, #0
 800679a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800679e:	f104 0b1a 	add.w	fp, r4, #26
 80067a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067a4:	ebaa 0303 	sub.w	r3, sl, r3
 80067a8:	eba3 0309 	sub.w	r3, r3, r9
 80067ac:	4543      	cmp	r3, r8
 80067ae:	f77f af79 	ble.w	80066a4 <_printf_float+0x23c>
 80067b2:	2301      	movs	r3, #1
 80067b4:	465a      	mov	r2, fp
 80067b6:	4631      	mov	r1, r6
 80067b8:	4628      	mov	r0, r5
 80067ba:	47b8      	blx	r7
 80067bc:	3001      	adds	r0, #1
 80067be:	f43f aeae 	beq.w	800651e <_printf_float+0xb6>
 80067c2:	f108 0801 	add.w	r8, r8, #1
 80067c6:	e7ec      	b.n	80067a2 <_printf_float+0x33a>
 80067c8:	4642      	mov	r2, r8
 80067ca:	4631      	mov	r1, r6
 80067cc:	4628      	mov	r0, r5
 80067ce:	47b8      	blx	r7
 80067d0:	3001      	adds	r0, #1
 80067d2:	d1c2      	bne.n	800675a <_printf_float+0x2f2>
 80067d4:	e6a3      	b.n	800651e <_printf_float+0xb6>
 80067d6:	2301      	movs	r3, #1
 80067d8:	4631      	mov	r1, r6
 80067da:	4628      	mov	r0, r5
 80067dc:	9206      	str	r2, [sp, #24]
 80067de:	47b8      	blx	r7
 80067e0:	3001      	adds	r0, #1
 80067e2:	f43f ae9c 	beq.w	800651e <_printf_float+0xb6>
 80067e6:	9a06      	ldr	r2, [sp, #24]
 80067e8:	f10b 0b01 	add.w	fp, fp, #1
 80067ec:	e7bb      	b.n	8006766 <_printf_float+0x2fe>
 80067ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067f2:	4631      	mov	r1, r6
 80067f4:	4628      	mov	r0, r5
 80067f6:	47b8      	blx	r7
 80067f8:	3001      	adds	r0, #1
 80067fa:	d1c0      	bne.n	800677e <_printf_float+0x316>
 80067fc:	e68f      	b.n	800651e <_printf_float+0xb6>
 80067fe:	9a06      	ldr	r2, [sp, #24]
 8006800:	464b      	mov	r3, r9
 8006802:	4442      	add	r2, r8
 8006804:	4631      	mov	r1, r6
 8006806:	4628      	mov	r0, r5
 8006808:	47b8      	blx	r7
 800680a:	3001      	adds	r0, #1
 800680c:	d1c3      	bne.n	8006796 <_printf_float+0x32e>
 800680e:	e686      	b.n	800651e <_printf_float+0xb6>
 8006810:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006814:	f1ba 0f01 	cmp.w	sl, #1
 8006818:	dc01      	bgt.n	800681e <_printf_float+0x3b6>
 800681a:	07db      	lsls	r3, r3, #31
 800681c:	d536      	bpl.n	800688c <_printf_float+0x424>
 800681e:	2301      	movs	r3, #1
 8006820:	4642      	mov	r2, r8
 8006822:	4631      	mov	r1, r6
 8006824:	4628      	mov	r0, r5
 8006826:	47b8      	blx	r7
 8006828:	3001      	adds	r0, #1
 800682a:	f43f ae78 	beq.w	800651e <_printf_float+0xb6>
 800682e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006832:	4631      	mov	r1, r6
 8006834:	4628      	mov	r0, r5
 8006836:	47b8      	blx	r7
 8006838:	3001      	adds	r0, #1
 800683a:	f43f ae70 	beq.w	800651e <_printf_float+0xb6>
 800683e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006842:	2200      	movs	r2, #0
 8006844:	2300      	movs	r3, #0
 8006846:	f10a 3aff 	add.w	sl, sl, #4294967295
 800684a:	f7fa f93d 	bl	8000ac8 <__aeabi_dcmpeq>
 800684e:	b9c0      	cbnz	r0, 8006882 <_printf_float+0x41a>
 8006850:	4653      	mov	r3, sl
 8006852:	f108 0201 	add.w	r2, r8, #1
 8006856:	4631      	mov	r1, r6
 8006858:	4628      	mov	r0, r5
 800685a:	47b8      	blx	r7
 800685c:	3001      	adds	r0, #1
 800685e:	d10c      	bne.n	800687a <_printf_float+0x412>
 8006860:	e65d      	b.n	800651e <_printf_float+0xb6>
 8006862:	2301      	movs	r3, #1
 8006864:	465a      	mov	r2, fp
 8006866:	4631      	mov	r1, r6
 8006868:	4628      	mov	r0, r5
 800686a:	47b8      	blx	r7
 800686c:	3001      	adds	r0, #1
 800686e:	f43f ae56 	beq.w	800651e <_printf_float+0xb6>
 8006872:	f108 0801 	add.w	r8, r8, #1
 8006876:	45d0      	cmp	r8, sl
 8006878:	dbf3      	blt.n	8006862 <_printf_float+0x3fa>
 800687a:	464b      	mov	r3, r9
 800687c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006880:	e6df      	b.n	8006642 <_printf_float+0x1da>
 8006882:	f04f 0800 	mov.w	r8, #0
 8006886:	f104 0b1a 	add.w	fp, r4, #26
 800688a:	e7f4      	b.n	8006876 <_printf_float+0x40e>
 800688c:	2301      	movs	r3, #1
 800688e:	4642      	mov	r2, r8
 8006890:	e7e1      	b.n	8006856 <_printf_float+0x3ee>
 8006892:	2301      	movs	r3, #1
 8006894:	464a      	mov	r2, r9
 8006896:	4631      	mov	r1, r6
 8006898:	4628      	mov	r0, r5
 800689a:	47b8      	blx	r7
 800689c:	3001      	adds	r0, #1
 800689e:	f43f ae3e 	beq.w	800651e <_printf_float+0xb6>
 80068a2:	f108 0801 	add.w	r8, r8, #1
 80068a6:	68e3      	ldr	r3, [r4, #12]
 80068a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80068aa:	1a5b      	subs	r3, r3, r1
 80068ac:	4543      	cmp	r3, r8
 80068ae:	dcf0      	bgt.n	8006892 <_printf_float+0x42a>
 80068b0:	e6fc      	b.n	80066ac <_printf_float+0x244>
 80068b2:	f04f 0800 	mov.w	r8, #0
 80068b6:	f104 0919 	add.w	r9, r4, #25
 80068ba:	e7f4      	b.n	80068a6 <_printf_float+0x43e>

080068bc <_printf_common>:
 80068bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068c0:	4616      	mov	r6, r2
 80068c2:	4698      	mov	r8, r3
 80068c4:	688a      	ldr	r2, [r1, #8]
 80068c6:	690b      	ldr	r3, [r1, #16]
 80068c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80068cc:	4293      	cmp	r3, r2
 80068ce:	bfb8      	it	lt
 80068d0:	4613      	movlt	r3, r2
 80068d2:	6033      	str	r3, [r6, #0]
 80068d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80068d8:	4607      	mov	r7, r0
 80068da:	460c      	mov	r4, r1
 80068dc:	b10a      	cbz	r2, 80068e2 <_printf_common+0x26>
 80068de:	3301      	adds	r3, #1
 80068e0:	6033      	str	r3, [r6, #0]
 80068e2:	6823      	ldr	r3, [r4, #0]
 80068e4:	0699      	lsls	r1, r3, #26
 80068e6:	bf42      	ittt	mi
 80068e8:	6833      	ldrmi	r3, [r6, #0]
 80068ea:	3302      	addmi	r3, #2
 80068ec:	6033      	strmi	r3, [r6, #0]
 80068ee:	6825      	ldr	r5, [r4, #0]
 80068f0:	f015 0506 	ands.w	r5, r5, #6
 80068f4:	d106      	bne.n	8006904 <_printf_common+0x48>
 80068f6:	f104 0a19 	add.w	sl, r4, #25
 80068fa:	68e3      	ldr	r3, [r4, #12]
 80068fc:	6832      	ldr	r2, [r6, #0]
 80068fe:	1a9b      	subs	r3, r3, r2
 8006900:	42ab      	cmp	r3, r5
 8006902:	dc26      	bgt.n	8006952 <_printf_common+0x96>
 8006904:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006908:	6822      	ldr	r2, [r4, #0]
 800690a:	3b00      	subs	r3, #0
 800690c:	bf18      	it	ne
 800690e:	2301      	movne	r3, #1
 8006910:	0692      	lsls	r2, r2, #26
 8006912:	d42b      	bmi.n	800696c <_printf_common+0xb0>
 8006914:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006918:	4641      	mov	r1, r8
 800691a:	4638      	mov	r0, r7
 800691c:	47c8      	blx	r9
 800691e:	3001      	adds	r0, #1
 8006920:	d01e      	beq.n	8006960 <_printf_common+0xa4>
 8006922:	6823      	ldr	r3, [r4, #0]
 8006924:	6922      	ldr	r2, [r4, #16]
 8006926:	f003 0306 	and.w	r3, r3, #6
 800692a:	2b04      	cmp	r3, #4
 800692c:	bf02      	ittt	eq
 800692e:	68e5      	ldreq	r5, [r4, #12]
 8006930:	6833      	ldreq	r3, [r6, #0]
 8006932:	1aed      	subeq	r5, r5, r3
 8006934:	68a3      	ldr	r3, [r4, #8]
 8006936:	bf0c      	ite	eq
 8006938:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800693c:	2500      	movne	r5, #0
 800693e:	4293      	cmp	r3, r2
 8006940:	bfc4      	itt	gt
 8006942:	1a9b      	subgt	r3, r3, r2
 8006944:	18ed      	addgt	r5, r5, r3
 8006946:	2600      	movs	r6, #0
 8006948:	341a      	adds	r4, #26
 800694a:	42b5      	cmp	r5, r6
 800694c:	d11a      	bne.n	8006984 <_printf_common+0xc8>
 800694e:	2000      	movs	r0, #0
 8006950:	e008      	b.n	8006964 <_printf_common+0xa8>
 8006952:	2301      	movs	r3, #1
 8006954:	4652      	mov	r2, sl
 8006956:	4641      	mov	r1, r8
 8006958:	4638      	mov	r0, r7
 800695a:	47c8      	blx	r9
 800695c:	3001      	adds	r0, #1
 800695e:	d103      	bne.n	8006968 <_printf_common+0xac>
 8006960:	f04f 30ff 	mov.w	r0, #4294967295
 8006964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006968:	3501      	adds	r5, #1
 800696a:	e7c6      	b.n	80068fa <_printf_common+0x3e>
 800696c:	18e1      	adds	r1, r4, r3
 800696e:	1c5a      	adds	r2, r3, #1
 8006970:	2030      	movs	r0, #48	@ 0x30
 8006972:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006976:	4422      	add	r2, r4
 8006978:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800697c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006980:	3302      	adds	r3, #2
 8006982:	e7c7      	b.n	8006914 <_printf_common+0x58>
 8006984:	2301      	movs	r3, #1
 8006986:	4622      	mov	r2, r4
 8006988:	4641      	mov	r1, r8
 800698a:	4638      	mov	r0, r7
 800698c:	47c8      	blx	r9
 800698e:	3001      	adds	r0, #1
 8006990:	d0e6      	beq.n	8006960 <_printf_common+0xa4>
 8006992:	3601      	adds	r6, #1
 8006994:	e7d9      	b.n	800694a <_printf_common+0x8e>
	...

08006998 <_printf_i>:
 8006998:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800699c:	7e0f      	ldrb	r7, [r1, #24]
 800699e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80069a0:	2f78      	cmp	r7, #120	@ 0x78
 80069a2:	4691      	mov	r9, r2
 80069a4:	4680      	mov	r8, r0
 80069a6:	460c      	mov	r4, r1
 80069a8:	469a      	mov	sl, r3
 80069aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80069ae:	d807      	bhi.n	80069c0 <_printf_i+0x28>
 80069b0:	2f62      	cmp	r7, #98	@ 0x62
 80069b2:	d80a      	bhi.n	80069ca <_printf_i+0x32>
 80069b4:	2f00      	cmp	r7, #0
 80069b6:	f000 80d2 	beq.w	8006b5e <_printf_i+0x1c6>
 80069ba:	2f58      	cmp	r7, #88	@ 0x58
 80069bc:	f000 80b9 	beq.w	8006b32 <_printf_i+0x19a>
 80069c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80069c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80069c8:	e03a      	b.n	8006a40 <_printf_i+0xa8>
 80069ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80069ce:	2b15      	cmp	r3, #21
 80069d0:	d8f6      	bhi.n	80069c0 <_printf_i+0x28>
 80069d2:	a101      	add	r1, pc, #4	@ (adr r1, 80069d8 <_printf_i+0x40>)
 80069d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80069d8:	08006a31 	.word	0x08006a31
 80069dc:	08006a45 	.word	0x08006a45
 80069e0:	080069c1 	.word	0x080069c1
 80069e4:	080069c1 	.word	0x080069c1
 80069e8:	080069c1 	.word	0x080069c1
 80069ec:	080069c1 	.word	0x080069c1
 80069f0:	08006a45 	.word	0x08006a45
 80069f4:	080069c1 	.word	0x080069c1
 80069f8:	080069c1 	.word	0x080069c1
 80069fc:	080069c1 	.word	0x080069c1
 8006a00:	080069c1 	.word	0x080069c1
 8006a04:	08006b45 	.word	0x08006b45
 8006a08:	08006a6f 	.word	0x08006a6f
 8006a0c:	08006aff 	.word	0x08006aff
 8006a10:	080069c1 	.word	0x080069c1
 8006a14:	080069c1 	.word	0x080069c1
 8006a18:	08006b67 	.word	0x08006b67
 8006a1c:	080069c1 	.word	0x080069c1
 8006a20:	08006a6f 	.word	0x08006a6f
 8006a24:	080069c1 	.word	0x080069c1
 8006a28:	080069c1 	.word	0x080069c1
 8006a2c:	08006b07 	.word	0x08006b07
 8006a30:	6833      	ldr	r3, [r6, #0]
 8006a32:	1d1a      	adds	r2, r3, #4
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	6032      	str	r2, [r6, #0]
 8006a38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a3c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006a40:	2301      	movs	r3, #1
 8006a42:	e09d      	b.n	8006b80 <_printf_i+0x1e8>
 8006a44:	6833      	ldr	r3, [r6, #0]
 8006a46:	6820      	ldr	r0, [r4, #0]
 8006a48:	1d19      	adds	r1, r3, #4
 8006a4a:	6031      	str	r1, [r6, #0]
 8006a4c:	0606      	lsls	r6, r0, #24
 8006a4e:	d501      	bpl.n	8006a54 <_printf_i+0xbc>
 8006a50:	681d      	ldr	r5, [r3, #0]
 8006a52:	e003      	b.n	8006a5c <_printf_i+0xc4>
 8006a54:	0645      	lsls	r5, r0, #25
 8006a56:	d5fb      	bpl.n	8006a50 <_printf_i+0xb8>
 8006a58:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006a5c:	2d00      	cmp	r5, #0
 8006a5e:	da03      	bge.n	8006a68 <_printf_i+0xd0>
 8006a60:	232d      	movs	r3, #45	@ 0x2d
 8006a62:	426d      	negs	r5, r5
 8006a64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a68:	4859      	ldr	r0, [pc, #356]	@ (8006bd0 <_printf_i+0x238>)
 8006a6a:	230a      	movs	r3, #10
 8006a6c:	e011      	b.n	8006a92 <_printf_i+0xfa>
 8006a6e:	6821      	ldr	r1, [r4, #0]
 8006a70:	6833      	ldr	r3, [r6, #0]
 8006a72:	0608      	lsls	r0, r1, #24
 8006a74:	f853 5b04 	ldr.w	r5, [r3], #4
 8006a78:	d402      	bmi.n	8006a80 <_printf_i+0xe8>
 8006a7a:	0649      	lsls	r1, r1, #25
 8006a7c:	bf48      	it	mi
 8006a7e:	b2ad      	uxthmi	r5, r5
 8006a80:	2f6f      	cmp	r7, #111	@ 0x6f
 8006a82:	4853      	ldr	r0, [pc, #332]	@ (8006bd0 <_printf_i+0x238>)
 8006a84:	6033      	str	r3, [r6, #0]
 8006a86:	bf14      	ite	ne
 8006a88:	230a      	movne	r3, #10
 8006a8a:	2308      	moveq	r3, #8
 8006a8c:	2100      	movs	r1, #0
 8006a8e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006a92:	6866      	ldr	r6, [r4, #4]
 8006a94:	60a6      	str	r6, [r4, #8]
 8006a96:	2e00      	cmp	r6, #0
 8006a98:	bfa2      	ittt	ge
 8006a9a:	6821      	ldrge	r1, [r4, #0]
 8006a9c:	f021 0104 	bicge.w	r1, r1, #4
 8006aa0:	6021      	strge	r1, [r4, #0]
 8006aa2:	b90d      	cbnz	r5, 8006aa8 <_printf_i+0x110>
 8006aa4:	2e00      	cmp	r6, #0
 8006aa6:	d04b      	beq.n	8006b40 <_printf_i+0x1a8>
 8006aa8:	4616      	mov	r6, r2
 8006aaa:	fbb5 f1f3 	udiv	r1, r5, r3
 8006aae:	fb03 5711 	mls	r7, r3, r1, r5
 8006ab2:	5dc7      	ldrb	r7, [r0, r7]
 8006ab4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006ab8:	462f      	mov	r7, r5
 8006aba:	42bb      	cmp	r3, r7
 8006abc:	460d      	mov	r5, r1
 8006abe:	d9f4      	bls.n	8006aaa <_printf_i+0x112>
 8006ac0:	2b08      	cmp	r3, #8
 8006ac2:	d10b      	bne.n	8006adc <_printf_i+0x144>
 8006ac4:	6823      	ldr	r3, [r4, #0]
 8006ac6:	07df      	lsls	r7, r3, #31
 8006ac8:	d508      	bpl.n	8006adc <_printf_i+0x144>
 8006aca:	6923      	ldr	r3, [r4, #16]
 8006acc:	6861      	ldr	r1, [r4, #4]
 8006ace:	4299      	cmp	r1, r3
 8006ad0:	bfde      	ittt	le
 8006ad2:	2330      	movle	r3, #48	@ 0x30
 8006ad4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006ad8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006adc:	1b92      	subs	r2, r2, r6
 8006ade:	6122      	str	r2, [r4, #16]
 8006ae0:	f8cd a000 	str.w	sl, [sp]
 8006ae4:	464b      	mov	r3, r9
 8006ae6:	aa03      	add	r2, sp, #12
 8006ae8:	4621      	mov	r1, r4
 8006aea:	4640      	mov	r0, r8
 8006aec:	f7ff fee6 	bl	80068bc <_printf_common>
 8006af0:	3001      	adds	r0, #1
 8006af2:	d14a      	bne.n	8006b8a <_printf_i+0x1f2>
 8006af4:	f04f 30ff 	mov.w	r0, #4294967295
 8006af8:	b004      	add	sp, #16
 8006afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006afe:	6823      	ldr	r3, [r4, #0]
 8006b00:	f043 0320 	orr.w	r3, r3, #32
 8006b04:	6023      	str	r3, [r4, #0]
 8006b06:	4833      	ldr	r0, [pc, #204]	@ (8006bd4 <_printf_i+0x23c>)
 8006b08:	2778      	movs	r7, #120	@ 0x78
 8006b0a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006b0e:	6823      	ldr	r3, [r4, #0]
 8006b10:	6831      	ldr	r1, [r6, #0]
 8006b12:	061f      	lsls	r7, r3, #24
 8006b14:	f851 5b04 	ldr.w	r5, [r1], #4
 8006b18:	d402      	bmi.n	8006b20 <_printf_i+0x188>
 8006b1a:	065f      	lsls	r7, r3, #25
 8006b1c:	bf48      	it	mi
 8006b1e:	b2ad      	uxthmi	r5, r5
 8006b20:	6031      	str	r1, [r6, #0]
 8006b22:	07d9      	lsls	r1, r3, #31
 8006b24:	bf44      	itt	mi
 8006b26:	f043 0320 	orrmi.w	r3, r3, #32
 8006b2a:	6023      	strmi	r3, [r4, #0]
 8006b2c:	b11d      	cbz	r5, 8006b36 <_printf_i+0x19e>
 8006b2e:	2310      	movs	r3, #16
 8006b30:	e7ac      	b.n	8006a8c <_printf_i+0xf4>
 8006b32:	4827      	ldr	r0, [pc, #156]	@ (8006bd0 <_printf_i+0x238>)
 8006b34:	e7e9      	b.n	8006b0a <_printf_i+0x172>
 8006b36:	6823      	ldr	r3, [r4, #0]
 8006b38:	f023 0320 	bic.w	r3, r3, #32
 8006b3c:	6023      	str	r3, [r4, #0]
 8006b3e:	e7f6      	b.n	8006b2e <_printf_i+0x196>
 8006b40:	4616      	mov	r6, r2
 8006b42:	e7bd      	b.n	8006ac0 <_printf_i+0x128>
 8006b44:	6833      	ldr	r3, [r6, #0]
 8006b46:	6825      	ldr	r5, [r4, #0]
 8006b48:	6961      	ldr	r1, [r4, #20]
 8006b4a:	1d18      	adds	r0, r3, #4
 8006b4c:	6030      	str	r0, [r6, #0]
 8006b4e:	062e      	lsls	r6, r5, #24
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	d501      	bpl.n	8006b58 <_printf_i+0x1c0>
 8006b54:	6019      	str	r1, [r3, #0]
 8006b56:	e002      	b.n	8006b5e <_printf_i+0x1c6>
 8006b58:	0668      	lsls	r0, r5, #25
 8006b5a:	d5fb      	bpl.n	8006b54 <_printf_i+0x1bc>
 8006b5c:	8019      	strh	r1, [r3, #0]
 8006b5e:	2300      	movs	r3, #0
 8006b60:	6123      	str	r3, [r4, #16]
 8006b62:	4616      	mov	r6, r2
 8006b64:	e7bc      	b.n	8006ae0 <_printf_i+0x148>
 8006b66:	6833      	ldr	r3, [r6, #0]
 8006b68:	1d1a      	adds	r2, r3, #4
 8006b6a:	6032      	str	r2, [r6, #0]
 8006b6c:	681e      	ldr	r6, [r3, #0]
 8006b6e:	6862      	ldr	r2, [r4, #4]
 8006b70:	2100      	movs	r1, #0
 8006b72:	4630      	mov	r0, r6
 8006b74:	f7f9 fb2c 	bl	80001d0 <memchr>
 8006b78:	b108      	cbz	r0, 8006b7e <_printf_i+0x1e6>
 8006b7a:	1b80      	subs	r0, r0, r6
 8006b7c:	6060      	str	r0, [r4, #4]
 8006b7e:	6863      	ldr	r3, [r4, #4]
 8006b80:	6123      	str	r3, [r4, #16]
 8006b82:	2300      	movs	r3, #0
 8006b84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b88:	e7aa      	b.n	8006ae0 <_printf_i+0x148>
 8006b8a:	6923      	ldr	r3, [r4, #16]
 8006b8c:	4632      	mov	r2, r6
 8006b8e:	4649      	mov	r1, r9
 8006b90:	4640      	mov	r0, r8
 8006b92:	47d0      	blx	sl
 8006b94:	3001      	adds	r0, #1
 8006b96:	d0ad      	beq.n	8006af4 <_printf_i+0x15c>
 8006b98:	6823      	ldr	r3, [r4, #0]
 8006b9a:	079b      	lsls	r3, r3, #30
 8006b9c:	d413      	bmi.n	8006bc6 <_printf_i+0x22e>
 8006b9e:	68e0      	ldr	r0, [r4, #12]
 8006ba0:	9b03      	ldr	r3, [sp, #12]
 8006ba2:	4298      	cmp	r0, r3
 8006ba4:	bfb8      	it	lt
 8006ba6:	4618      	movlt	r0, r3
 8006ba8:	e7a6      	b.n	8006af8 <_printf_i+0x160>
 8006baa:	2301      	movs	r3, #1
 8006bac:	4632      	mov	r2, r6
 8006bae:	4649      	mov	r1, r9
 8006bb0:	4640      	mov	r0, r8
 8006bb2:	47d0      	blx	sl
 8006bb4:	3001      	adds	r0, #1
 8006bb6:	d09d      	beq.n	8006af4 <_printf_i+0x15c>
 8006bb8:	3501      	adds	r5, #1
 8006bba:	68e3      	ldr	r3, [r4, #12]
 8006bbc:	9903      	ldr	r1, [sp, #12]
 8006bbe:	1a5b      	subs	r3, r3, r1
 8006bc0:	42ab      	cmp	r3, r5
 8006bc2:	dcf2      	bgt.n	8006baa <_printf_i+0x212>
 8006bc4:	e7eb      	b.n	8006b9e <_printf_i+0x206>
 8006bc6:	2500      	movs	r5, #0
 8006bc8:	f104 0619 	add.w	r6, r4, #25
 8006bcc:	e7f5      	b.n	8006bba <_printf_i+0x222>
 8006bce:	bf00      	nop
 8006bd0:	08015386 	.word	0x08015386
 8006bd4:	08015397 	.word	0x08015397

08006bd8 <_scanf_float>:
 8006bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bdc:	b087      	sub	sp, #28
 8006bde:	4617      	mov	r7, r2
 8006be0:	9303      	str	r3, [sp, #12]
 8006be2:	688b      	ldr	r3, [r1, #8]
 8006be4:	1e5a      	subs	r2, r3, #1
 8006be6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006bea:	bf81      	itttt	hi
 8006bec:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006bf0:	eb03 0b05 	addhi.w	fp, r3, r5
 8006bf4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006bf8:	608b      	strhi	r3, [r1, #8]
 8006bfa:	680b      	ldr	r3, [r1, #0]
 8006bfc:	460a      	mov	r2, r1
 8006bfe:	f04f 0500 	mov.w	r5, #0
 8006c02:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006c06:	f842 3b1c 	str.w	r3, [r2], #28
 8006c0a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006c0e:	4680      	mov	r8, r0
 8006c10:	460c      	mov	r4, r1
 8006c12:	bf98      	it	ls
 8006c14:	f04f 0b00 	movls.w	fp, #0
 8006c18:	9201      	str	r2, [sp, #4]
 8006c1a:	4616      	mov	r6, r2
 8006c1c:	46aa      	mov	sl, r5
 8006c1e:	46a9      	mov	r9, r5
 8006c20:	9502      	str	r5, [sp, #8]
 8006c22:	68a2      	ldr	r2, [r4, #8]
 8006c24:	b152      	cbz	r2, 8006c3c <_scanf_float+0x64>
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	2b4e      	cmp	r3, #78	@ 0x4e
 8006c2c:	d864      	bhi.n	8006cf8 <_scanf_float+0x120>
 8006c2e:	2b40      	cmp	r3, #64	@ 0x40
 8006c30:	d83c      	bhi.n	8006cac <_scanf_float+0xd4>
 8006c32:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006c36:	b2c8      	uxtb	r0, r1
 8006c38:	280e      	cmp	r0, #14
 8006c3a:	d93a      	bls.n	8006cb2 <_scanf_float+0xda>
 8006c3c:	f1b9 0f00 	cmp.w	r9, #0
 8006c40:	d003      	beq.n	8006c4a <_scanf_float+0x72>
 8006c42:	6823      	ldr	r3, [r4, #0]
 8006c44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c48:	6023      	str	r3, [r4, #0]
 8006c4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006c4e:	f1ba 0f01 	cmp.w	sl, #1
 8006c52:	f200 8117 	bhi.w	8006e84 <_scanf_float+0x2ac>
 8006c56:	9b01      	ldr	r3, [sp, #4]
 8006c58:	429e      	cmp	r6, r3
 8006c5a:	f200 8108 	bhi.w	8006e6e <_scanf_float+0x296>
 8006c5e:	2001      	movs	r0, #1
 8006c60:	b007      	add	sp, #28
 8006c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c66:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006c6a:	2a0d      	cmp	r2, #13
 8006c6c:	d8e6      	bhi.n	8006c3c <_scanf_float+0x64>
 8006c6e:	a101      	add	r1, pc, #4	@ (adr r1, 8006c74 <_scanf_float+0x9c>)
 8006c70:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006c74:	08006dbb 	.word	0x08006dbb
 8006c78:	08006c3d 	.word	0x08006c3d
 8006c7c:	08006c3d 	.word	0x08006c3d
 8006c80:	08006c3d 	.word	0x08006c3d
 8006c84:	08006e1b 	.word	0x08006e1b
 8006c88:	08006df3 	.word	0x08006df3
 8006c8c:	08006c3d 	.word	0x08006c3d
 8006c90:	08006c3d 	.word	0x08006c3d
 8006c94:	08006dc9 	.word	0x08006dc9
 8006c98:	08006c3d 	.word	0x08006c3d
 8006c9c:	08006c3d 	.word	0x08006c3d
 8006ca0:	08006c3d 	.word	0x08006c3d
 8006ca4:	08006c3d 	.word	0x08006c3d
 8006ca8:	08006d81 	.word	0x08006d81
 8006cac:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006cb0:	e7db      	b.n	8006c6a <_scanf_float+0x92>
 8006cb2:	290e      	cmp	r1, #14
 8006cb4:	d8c2      	bhi.n	8006c3c <_scanf_float+0x64>
 8006cb6:	a001      	add	r0, pc, #4	@ (adr r0, 8006cbc <_scanf_float+0xe4>)
 8006cb8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006cbc:	08006d71 	.word	0x08006d71
 8006cc0:	08006c3d 	.word	0x08006c3d
 8006cc4:	08006d71 	.word	0x08006d71
 8006cc8:	08006e07 	.word	0x08006e07
 8006ccc:	08006c3d 	.word	0x08006c3d
 8006cd0:	08006d19 	.word	0x08006d19
 8006cd4:	08006d57 	.word	0x08006d57
 8006cd8:	08006d57 	.word	0x08006d57
 8006cdc:	08006d57 	.word	0x08006d57
 8006ce0:	08006d57 	.word	0x08006d57
 8006ce4:	08006d57 	.word	0x08006d57
 8006ce8:	08006d57 	.word	0x08006d57
 8006cec:	08006d57 	.word	0x08006d57
 8006cf0:	08006d57 	.word	0x08006d57
 8006cf4:	08006d57 	.word	0x08006d57
 8006cf8:	2b6e      	cmp	r3, #110	@ 0x6e
 8006cfa:	d809      	bhi.n	8006d10 <_scanf_float+0x138>
 8006cfc:	2b60      	cmp	r3, #96	@ 0x60
 8006cfe:	d8b2      	bhi.n	8006c66 <_scanf_float+0x8e>
 8006d00:	2b54      	cmp	r3, #84	@ 0x54
 8006d02:	d07b      	beq.n	8006dfc <_scanf_float+0x224>
 8006d04:	2b59      	cmp	r3, #89	@ 0x59
 8006d06:	d199      	bne.n	8006c3c <_scanf_float+0x64>
 8006d08:	2d07      	cmp	r5, #7
 8006d0a:	d197      	bne.n	8006c3c <_scanf_float+0x64>
 8006d0c:	2508      	movs	r5, #8
 8006d0e:	e02c      	b.n	8006d6a <_scanf_float+0x192>
 8006d10:	2b74      	cmp	r3, #116	@ 0x74
 8006d12:	d073      	beq.n	8006dfc <_scanf_float+0x224>
 8006d14:	2b79      	cmp	r3, #121	@ 0x79
 8006d16:	e7f6      	b.n	8006d06 <_scanf_float+0x12e>
 8006d18:	6821      	ldr	r1, [r4, #0]
 8006d1a:	05c8      	lsls	r0, r1, #23
 8006d1c:	d51b      	bpl.n	8006d56 <_scanf_float+0x17e>
 8006d1e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006d22:	6021      	str	r1, [r4, #0]
 8006d24:	f109 0901 	add.w	r9, r9, #1
 8006d28:	f1bb 0f00 	cmp.w	fp, #0
 8006d2c:	d003      	beq.n	8006d36 <_scanf_float+0x15e>
 8006d2e:	3201      	adds	r2, #1
 8006d30:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006d34:	60a2      	str	r2, [r4, #8]
 8006d36:	68a3      	ldr	r3, [r4, #8]
 8006d38:	3b01      	subs	r3, #1
 8006d3a:	60a3      	str	r3, [r4, #8]
 8006d3c:	6923      	ldr	r3, [r4, #16]
 8006d3e:	3301      	adds	r3, #1
 8006d40:	6123      	str	r3, [r4, #16]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	3b01      	subs	r3, #1
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	607b      	str	r3, [r7, #4]
 8006d4a:	f340 8087 	ble.w	8006e5c <_scanf_float+0x284>
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	3301      	adds	r3, #1
 8006d52:	603b      	str	r3, [r7, #0]
 8006d54:	e765      	b.n	8006c22 <_scanf_float+0x4a>
 8006d56:	eb1a 0105 	adds.w	r1, sl, r5
 8006d5a:	f47f af6f 	bne.w	8006c3c <_scanf_float+0x64>
 8006d5e:	6822      	ldr	r2, [r4, #0]
 8006d60:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006d64:	6022      	str	r2, [r4, #0]
 8006d66:	460d      	mov	r5, r1
 8006d68:	468a      	mov	sl, r1
 8006d6a:	f806 3b01 	strb.w	r3, [r6], #1
 8006d6e:	e7e2      	b.n	8006d36 <_scanf_float+0x15e>
 8006d70:	6822      	ldr	r2, [r4, #0]
 8006d72:	0610      	lsls	r0, r2, #24
 8006d74:	f57f af62 	bpl.w	8006c3c <_scanf_float+0x64>
 8006d78:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006d7c:	6022      	str	r2, [r4, #0]
 8006d7e:	e7f4      	b.n	8006d6a <_scanf_float+0x192>
 8006d80:	f1ba 0f00 	cmp.w	sl, #0
 8006d84:	d10e      	bne.n	8006da4 <_scanf_float+0x1cc>
 8006d86:	f1b9 0f00 	cmp.w	r9, #0
 8006d8a:	d10e      	bne.n	8006daa <_scanf_float+0x1d2>
 8006d8c:	6822      	ldr	r2, [r4, #0]
 8006d8e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006d92:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006d96:	d108      	bne.n	8006daa <_scanf_float+0x1d2>
 8006d98:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006d9c:	6022      	str	r2, [r4, #0]
 8006d9e:	f04f 0a01 	mov.w	sl, #1
 8006da2:	e7e2      	b.n	8006d6a <_scanf_float+0x192>
 8006da4:	f1ba 0f02 	cmp.w	sl, #2
 8006da8:	d055      	beq.n	8006e56 <_scanf_float+0x27e>
 8006daa:	2d01      	cmp	r5, #1
 8006dac:	d002      	beq.n	8006db4 <_scanf_float+0x1dc>
 8006dae:	2d04      	cmp	r5, #4
 8006db0:	f47f af44 	bne.w	8006c3c <_scanf_float+0x64>
 8006db4:	3501      	adds	r5, #1
 8006db6:	b2ed      	uxtb	r5, r5
 8006db8:	e7d7      	b.n	8006d6a <_scanf_float+0x192>
 8006dba:	f1ba 0f01 	cmp.w	sl, #1
 8006dbe:	f47f af3d 	bne.w	8006c3c <_scanf_float+0x64>
 8006dc2:	f04f 0a02 	mov.w	sl, #2
 8006dc6:	e7d0      	b.n	8006d6a <_scanf_float+0x192>
 8006dc8:	b97d      	cbnz	r5, 8006dea <_scanf_float+0x212>
 8006dca:	f1b9 0f00 	cmp.w	r9, #0
 8006dce:	f47f af38 	bne.w	8006c42 <_scanf_float+0x6a>
 8006dd2:	6822      	ldr	r2, [r4, #0]
 8006dd4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006dd8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006ddc:	f040 8108 	bne.w	8006ff0 <_scanf_float+0x418>
 8006de0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006de4:	6022      	str	r2, [r4, #0]
 8006de6:	2501      	movs	r5, #1
 8006de8:	e7bf      	b.n	8006d6a <_scanf_float+0x192>
 8006dea:	2d03      	cmp	r5, #3
 8006dec:	d0e2      	beq.n	8006db4 <_scanf_float+0x1dc>
 8006dee:	2d05      	cmp	r5, #5
 8006df0:	e7de      	b.n	8006db0 <_scanf_float+0x1d8>
 8006df2:	2d02      	cmp	r5, #2
 8006df4:	f47f af22 	bne.w	8006c3c <_scanf_float+0x64>
 8006df8:	2503      	movs	r5, #3
 8006dfa:	e7b6      	b.n	8006d6a <_scanf_float+0x192>
 8006dfc:	2d06      	cmp	r5, #6
 8006dfe:	f47f af1d 	bne.w	8006c3c <_scanf_float+0x64>
 8006e02:	2507      	movs	r5, #7
 8006e04:	e7b1      	b.n	8006d6a <_scanf_float+0x192>
 8006e06:	6822      	ldr	r2, [r4, #0]
 8006e08:	0591      	lsls	r1, r2, #22
 8006e0a:	f57f af17 	bpl.w	8006c3c <_scanf_float+0x64>
 8006e0e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006e12:	6022      	str	r2, [r4, #0]
 8006e14:	f8cd 9008 	str.w	r9, [sp, #8]
 8006e18:	e7a7      	b.n	8006d6a <_scanf_float+0x192>
 8006e1a:	6822      	ldr	r2, [r4, #0]
 8006e1c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006e20:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006e24:	d006      	beq.n	8006e34 <_scanf_float+0x25c>
 8006e26:	0550      	lsls	r0, r2, #21
 8006e28:	f57f af08 	bpl.w	8006c3c <_scanf_float+0x64>
 8006e2c:	f1b9 0f00 	cmp.w	r9, #0
 8006e30:	f000 80de 	beq.w	8006ff0 <_scanf_float+0x418>
 8006e34:	0591      	lsls	r1, r2, #22
 8006e36:	bf58      	it	pl
 8006e38:	9902      	ldrpl	r1, [sp, #8]
 8006e3a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006e3e:	bf58      	it	pl
 8006e40:	eba9 0101 	subpl.w	r1, r9, r1
 8006e44:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006e48:	bf58      	it	pl
 8006e4a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006e4e:	6022      	str	r2, [r4, #0]
 8006e50:	f04f 0900 	mov.w	r9, #0
 8006e54:	e789      	b.n	8006d6a <_scanf_float+0x192>
 8006e56:	f04f 0a03 	mov.w	sl, #3
 8006e5a:	e786      	b.n	8006d6a <_scanf_float+0x192>
 8006e5c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006e60:	4639      	mov	r1, r7
 8006e62:	4640      	mov	r0, r8
 8006e64:	4798      	blx	r3
 8006e66:	2800      	cmp	r0, #0
 8006e68:	f43f aedb 	beq.w	8006c22 <_scanf_float+0x4a>
 8006e6c:	e6e6      	b.n	8006c3c <_scanf_float+0x64>
 8006e6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006e72:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006e76:	463a      	mov	r2, r7
 8006e78:	4640      	mov	r0, r8
 8006e7a:	4798      	blx	r3
 8006e7c:	6923      	ldr	r3, [r4, #16]
 8006e7e:	3b01      	subs	r3, #1
 8006e80:	6123      	str	r3, [r4, #16]
 8006e82:	e6e8      	b.n	8006c56 <_scanf_float+0x7e>
 8006e84:	1e6b      	subs	r3, r5, #1
 8006e86:	2b06      	cmp	r3, #6
 8006e88:	d824      	bhi.n	8006ed4 <_scanf_float+0x2fc>
 8006e8a:	2d02      	cmp	r5, #2
 8006e8c:	d836      	bhi.n	8006efc <_scanf_float+0x324>
 8006e8e:	9b01      	ldr	r3, [sp, #4]
 8006e90:	429e      	cmp	r6, r3
 8006e92:	f67f aee4 	bls.w	8006c5e <_scanf_float+0x86>
 8006e96:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006e9a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006e9e:	463a      	mov	r2, r7
 8006ea0:	4640      	mov	r0, r8
 8006ea2:	4798      	blx	r3
 8006ea4:	6923      	ldr	r3, [r4, #16]
 8006ea6:	3b01      	subs	r3, #1
 8006ea8:	6123      	str	r3, [r4, #16]
 8006eaa:	e7f0      	b.n	8006e8e <_scanf_float+0x2b6>
 8006eac:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006eb0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006eb4:	463a      	mov	r2, r7
 8006eb6:	4640      	mov	r0, r8
 8006eb8:	4798      	blx	r3
 8006eba:	6923      	ldr	r3, [r4, #16]
 8006ebc:	3b01      	subs	r3, #1
 8006ebe:	6123      	str	r3, [r4, #16]
 8006ec0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006ec4:	fa5f fa8a 	uxtb.w	sl, sl
 8006ec8:	f1ba 0f02 	cmp.w	sl, #2
 8006ecc:	d1ee      	bne.n	8006eac <_scanf_float+0x2d4>
 8006ece:	3d03      	subs	r5, #3
 8006ed0:	b2ed      	uxtb	r5, r5
 8006ed2:	1b76      	subs	r6, r6, r5
 8006ed4:	6823      	ldr	r3, [r4, #0]
 8006ed6:	05da      	lsls	r2, r3, #23
 8006ed8:	d530      	bpl.n	8006f3c <_scanf_float+0x364>
 8006eda:	055b      	lsls	r3, r3, #21
 8006edc:	d511      	bpl.n	8006f02 <_scanf_float+0x32a>
 8006ede:	9b01      	ldr	r3, [sp, #4]
 8006ee0:	429e      	cmp	r6, r3
 8006ee2:	f67f aebc 	bls.w	8006c5e <_scanf_float+0x86>
 8006ee6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006eea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006eee:	463a      	mov	r2, r7
 8006ef0:	4640      	mov	r0, r8
 8006ef2:	4798      	blx	r3
 8006ef4:	6923      	ldr	r3, [r4, #16]
 8006ef6:	3b01      	subs	r3, #1
 8006ef8:	6123      	str	r3, [r4, #16]
 8006efa:	e7f0      	b.n	8006ede <_scanf_float+0x306>
 8006efc:	46aa      	mov	sl, r5
 8006efe:	46b3      	mov	fp, r6
 8006f00:	e7de      	b.n	8006ec0 <_scanf_float+0x2e8>
 8006f02:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006f06:	6923      	ldr	r3, [r4, #16]
 8006f08:	2965      	cmp	r1, #101	@ 0x65
 8006f0a:	f103 33ff 	add.w	r3, r3, #4294967295
 8006f0e:	f106 35ff 	add.w	r5, r6, #4294967295
 8006f12:	6123      	str	r3, [r4, #16]
 8006f14:	d00c      	beq.n	8006f30 <_scanf_float+0x358>
 8006f16:	2945      	cmp	r1, #69	@ 0x45
 8006f18:	d00a      	beq.n	8006f30 <_scanf_float+0x358>
 8006f1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006f1e:	463a      	mov	r2, r7
 8006f20:	4640      	mov	r0, r8
 8006f22:	4798      	blx	r3
 8006f24:	6923      	ldr	r3, [r4, #16]
 8006f26:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006f2a:	3b01      	subs	r3, #1
 8006f2c:	1eb5      	subs	r5, r6, #2
 8006f2e:	6123      	str	r3, [r4, #16]
 8006f30:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006f34:	463a      	mov	r2, r7
 8006f36:	4640      	mov	r0, r8
 8006f38:	4798      	blx	r3
 8006f3a:	462e      	mov	r6, r5
 8006f3c:	6822      	ldr	r2, [r4, #0]
 8006f3e:	f012 0210 	ands.w	r2, r2, #16
 8006f42:	d001      	beq.n	8006f48 <_scanf_float+0x370>
 8006f44:	2000      	movs	r0, #0
 8006f46:	e68b      	b.n	8006c60 <_scanf_float+0x88>
 8006f48:	7032      	strb	r2, [r6, #0]
 8006f4a:	6823      	ldr	r3, [r4, #0]
 8006f4c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006f50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f54:	d11c      	bne.n	8006f90 <_scanf_float+0x3b8>
 8006f56:	9b02      	ldr	r3, [sp, #8]
 8006f58:	454b      	cmp	r3, r9
 8006f5a:	eba3 0209 	sub.w	r2, r3, r9
 8006f5e:	d123      	bne.n	8006fa8 <_scanf_float+0x3d0>
 8006f60:	9901      	ldr	r1, [sp, #4]
 8006f62:	2200      	movs	r2, #0
 8006f64:	4640      	mov	r0, r8
 8006f66:	f002 fd1f 	bl	80099a8 <_strtod_r>
 8006f6a:	9b03      	ldr	r3, [sp, #12]
 8006f6c:	6821      	ldr	r1, [r4, #0]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f011 0f02 	tst.w	r1, #2
 8006f74:	ec57 6b10 	vmov	r6, r7, d0
 8006f78:	f103 0204 	add.w	r2, r3, #4
 8006f7c:	d01f      	beq.n	8006fbe <_scanf_float+0x3e6>
 8006f7e:	9903      	ldr	r1, [sp, #12]
 8006f80:	600a      	str	r2, [r1, #0]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	e9c3 6700 	strd	r6, r7, [r3]
 8006f88:	68e3      	ldr	r3, [r4, #12]
 8006f8a:	3301      	adds	r3, #1
 8006f8c:	60e3      	str	r3, [r4, #12]
 8006f8e:	e7d9      	b.n	8006f44 <_scanf_float+0x36c>
 8006f90:	9b04      	ldr	r3, [sp, #16]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d0e4      	beq.n	8006f60 <_scanf_float+0x388>
 8006f96:	9905      	ldr	r1, [sp, #20]
 8006f98:	230a      	movs	r3, #10
 8006f9a:	3101      	adds	r1, #1
 8006f9c:	4640      	mov	r0, r8
 8006f9e:	f002 fd83 	bl	8009aa8 <_strtol_r>
 8006fa2:	9b04      	ldr	r3, [sp, #16]
 8006fa4:	9e05      	ldr	r6, [sp, #20]
 8006fa6:	1ac2      	subs	r2, r0, r3
 8006fa8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006fac:	429e      	cmp	r6, r3
 8006fae:	bf28      	it	cs
 8006fb0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006fb4:	4910      	ldr	r1, [pc, #64]	@ (8006ff8 <_scanf_float+0x420>)
 8006fb6:	4630      	mov	r0, r6
 8006fb8:	f000 f954 	bl	8007264 <siprintf>
 8006fbc:	e7d0      	b.n	8006f60 <_scanf_float+0x388>
 8006fbe:	f011 0f04 	tst.w	r1, #4
 8006fc2:	9903      	ldr	r1, [sp, #12]
 8006fc4:	600a      	str	r2, [r1, #0]
 8006fc6:	d1dc      	bne.n	8006f82 <_scanf_float+0x3aa>
 8006fc8:	681d      	ldr	r5, [r3, #0]
 8006fca:	4632      	mov	r2, r6
 8006fcc:	463b      	mov	r3, r7
 8006fce:	4630      	mov	r0, r6
 8006fd0:	4639      	mov	r1, r7
 8006fd2:	f7f9 fdab 	bl	8000b2c <__aeabi_dcmpun>
 8006fd6:	b128      	cbz	r0, 8006fe4 <_scanf_float+0x40c>
 8006fd8:	4808      	ldr	r0, [pc, #32]	@ (8006ffc <_scanf_float+0x424>)
 8006fda:	f000 fadf 	bl	800759c <nanf>
 8006fde:	ed85 0a00 	vstr	s0, [r5]
 8006fe2:	e7d1      	b.n	8006f88 <_scanf_float+0x3b0>
 8006fe4:	4630      	mov	r0, r6
 8006fe6:	4639      	mov	r1, r7
 8006fe8:	f7f9 fdfe 	bl	8000be8 <__aeabi_d2f>
 8006fec:	6028      	str	r0, [r5, #0]
 8006fee:	e7cb      	b.n	8006f88 <_scanf_float+0x3b0>
 8006ff0:	f04f 0900 	mov.w	r9, #0
 8006ff4:	e629      	b.n	8006c4a <_scanf_float+0x72>
 8006ff6:	bf00      	nop
 8006ff8:	080153a8 	.word	0x080153a8
 8006ffc:	0801573d 	.word	0x0801573d

08007000 <std>:
 8007000:	2300      	movs	r3, #0
 8007002:	b510      	push	{r4, lr}
 8007004:	4604      	mov	r4, r0
 8007006:	e9c0 3300 	strd	r3, r3, [r0]
 800700a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800700e:	6083      	str	r3, [r0, #8]
 8007010:	8181      	strh	r1, [r0, #12]
 8007012:	6643      	str	r3, [r0, #100]	@ 0x64
 8007014:	81c2      	strh	r2, [r0, #14]
 8007016:	6183      	str	r3, [r0, #24]
 8007018:	4619      	mov	r1, r3
 800701a:	2208      	movs	r2, #8
 800701c:	305c      	adds	r0, #92	@ 0x5c
 800701e:	f000 fa19 	bl	8007454 <memset>
 8007022:	4b0d      	ldr	r3, [pc, #52]	@ (8007058 <std+0x58>)
 8007024:	6263      	str	r3, [r4, #36]	@ 0x24
 8007026:	4b0d      	ldr	r3, [pc, #52]	@ (800705c <std+0x5c>)
 8007028:	62a3      	str	r3, [r4, #40]	@ 0x28
 800702a:	4b0d      	ldr	r3, [pc, #52]	@ (8007060 <std+0x60>)
 800702c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800702e:	4b0d      	ldr	r3, [pc, #52]	@ (8007064 <std+0x64>)
 8007030:	6323      	str	r3, [r4, #48]	@ 0x30
 8007032:	4b0d      	ldr	r3, [pc, #52]	@ (8007068 <std+0x68>)
 8007034:	6224      	str	r4, [r4, #32]
 8007036:	429c      	cmp	r4, r3
 8007038:	d006      	beq.n	8007048 <std+0x48>
 800703a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800703e:	4294      	cmp	r4, r2
 8007040:	d002      	beq.n	8007048 <std+0x48>
 8007042:	33d0      	adds	r3, #208	@ 0xd0
 8007044:	429c      	cmp	r4, r3
 8007046:	d105      	bne.n	8007054 <std+0x54>
 8007048:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800704c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007050:	f000 ba92 	b.w	8007578 <__retarget_lock_init_recursive>
 8007054:	bd10      	pop	{r4, pc}
 8007056:	bf00      	nop
 8007058:	080072a5 	.word	0x080072a5
 800705c:	080072c7 	.word	0x080072c7
 8007060:	080072ff 	.word	0x080072ff
 8007064:	08007323 	.word	0x08007323
 8007068:	200007cc 	.word	0x200007cc

0800706c <stdio_exit_handler>:
 800706c:	4a02      	ldr	r2, [pc, #8]	@ (8007078 <stdio_exit_handler+0xc>)
 800706e:	4903      	ldr	r1, [pc, #12]	@ (800707c <stdio_exit_handler+0x10>)
 8007070:	4803      	ldr	r0, [pc, #12]	@ (8007080 <stdio_exit_handler+0x14>)
 8007072:	f000 b869 	b.w	8007148 <_fwalk_sglue>
 8007076:	bf00      	nop
 8007078:	2000000c 	.word	0x2000000c
 800707c:	0800a0e9 	.word	0x0800a0e9
 8007080:	2000001c 	.word	0x2000001c

08007084 <cleanup_stdio>:
 8007084:	6841      	ldr	r1, [r0, #4]
 8007086:	4b0c      	ldr	r3, [pc, #48]	@ (80070b8 <cleanup_stdio+0x34>)
 8007088:	4299      	cmp	r1, r3
 800708a:	b510      	push	{r4, lr}
 800708c:	4604      	mov	r4, r0
 800708e:	d001      	beq.n	8007094 <cleanup_stdio+0x10>
 8007090:	f003 f82a 	bl	800a0e8 <_fflush_r>
 8007094:	68a1      	ldr	r1, [r4, #8]
 8007096:	4b09      	ldr	r3, [pc, #36]	@ (80070bc <cleanup_stdio+0x38>)
 8007098:	4299      	cmp	r1, r3
 800709a:	d002      	beq.n	80070a2 <cleanup_stdio+0x1e>
 800709c:	4620      	mov	r0, r4
 800709e:	f003 f823 	bl	800a0e8 <_fflush_r>
 80070a2:	68e1      	ldr	r1, [r4, #12]
 80070a4:	4b06      	ldr	r3, [pc, #24]	@ (80070c0 <cleanup_stdio+0x3c>)
 80070a6:	4299      	cmp	r1, r3
 80070a8:	d004      	beq.n	80070b4 <cleanup_stdio+0x30>
 80070aa:	4620      	mov	r0, r4
 80070ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070b0:	f003 b81a 	b.w	800a0e8 <_fflush_r>
 80070b4:	bd10      	pop	{r4, pc}
 80070b6:	bf00      	nop
 80070b8:	200007cc 	.word	0x200007cc
 80070bc:	20000834 	.word	0x20000834
 80070c0:	2000089c 	.word	0x2000089c

080070c4 <global_stdio_init.part.0>:
 80070c4:	b510      	push	{r4, lr}
 80070c6:	4b0b      	ldr	r3, [pc, #44]	@ (80070f4 <global_stdio_init.part.0+0x30>)
 80070c8:	4c0b      	ldr	r4, [pc, #44]	@ (80070f8 <global_stdio_init.part.0+0x34>)
 80070ca:	4a0c      	ldr	r2, [pc, #48]	@ (80070fc <global_stdio_init.part.0+0x38>)
 80070cc:	601a      	str	r2, [r3, #0]
 80070ce:	4620      	mov	r0, r4
 80070d0:	2200      	movs	r2, #0
 80070d2:	2104      	movs	r1, #4
 80070d4:	f7ff ff94 	bl	8007000 <std>
 80070d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80070dc:	2201      	movs	r2, #1
 80070de:	2109      	movs	r1, #9
 80070e0:	f7ff ff8e 	bl	8007000 <std>
 80070e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80070e8:	2202      	movs	r2, #2
 80070ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070ee:	2112      	movs	r1, #18
 80070f0:	f7ff bf86 	b.w	8007000 <std>
 80070f4:	20000904 	.word	0x20000904
 80070f8:	200007cc 	.word	0x200007cc
 80070fc:	0800706d 	.word	0x0800706d

08007100 <__sfp_lock_acquire>:
 8007100:	4801      	ldr	r0, [pc, #4]	@ (8007108 <__sfp_lock_acquire+0x8>)
 8007102:	f000 ba3a 	b.w	800757a <__retarget_lock_acquire_recursive>
 8007106:	bf00      	nop
 8007108:	2000090d 	.word	0x2000090d

0800710c <__sfp_lock_release>:
 800710c:	4801      	ldr	r0, [pc, #4]	@ (8007114 <__sfp_lock_release+0x8>)
 800710e:	f000 ba35 	b.w	800757c <__retarget_lock_release_recursive>
 8007112:	bf00      	nop
 8007114:	2000090d 	.word	0x2000090d

08007118 <__sinit>:
 8007118:	b510      	push	{r4, lr}
 800711a:	4604      	mov	r4, r0
 800711c:	f7ff fff0 	bl	8007100 <__sfp_lock_acquire>
 8007120:	6a23      	ldr	r3, [r4, #32]
 8007122:	b11b      	cbz	r3, 800712c <__sinit+0x14>
 8007124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007128:	f7ff bff0 	b.w	800710c <__sfp_lock_release>
 800712c:	4b04      	ldr	r3, [pc, #16]	@ (8007140 <__sinit+0x28>)
 800712e:	6223      	str	r3, [r4, #32]
 8007130:	4b04      	ldr	r3, [pc, #16]	@ (8007144 <__sinit+0x2c>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d1f5      	bne.n	8007124 <__sinit+0xc>
 8007138:	f7ff ffc4 	bl	80070c4 <global_stdio_init.part.0>
 800713c:	e7f2      	b.n	8007124 <__sinit+0xc>
 800713e:	bf00      	nop
 8007140:	08007085 	.word	0x08007085
 8007144:	20000904 	.word	0x20000904

08007148 <_fwalk_sglue>:
 8007148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800714c:	4607      	mov	r7, r0
 800714e:	4688      	mov	r8, r1
 8007150:	4614      	mov	r4, r2
 8007152:	2600      	movs	r6, #0
 8007154:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007158:	f1b9 0901 	subs.w	r9, r9, #1
 800715c:	d505      	bpl.n	800716a <_fwalk_sglue+0x22>
 800715e:	6824      	ldr	r4, [r4, #0]
 8007160:	2c00      	cmp	r4, #0
 8007162:	d1f7      	bne.n	8007154 <_fwalk_sglue+0xc>
 8007164:	4630      	mov	r0, r6
 8007166:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800716a:	89ab      	ldrh	r3, [r5, #12]
 800716c:	2b01      	cmp	r3, #1
 800716e:	d907      	bls.n	8007180 <_fwalk_sglue+0x38>
 8007170:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007174:	3301      	adds	r3, #1
 8007176:	d003      	beq.n	8007180 <_fwalk_sglue+0x38>
 8007178:	4629      	mov	r1, r5
 800717a:	4638      	mov	r0, r7
 800717c:	47c0      	blx	r8
 800717e:	4306      	orrs	r6, r0
 8007180:	3568      	adds	r5, #104	@ 0x68
 8007182:	e7e9      	b.n	8007158 <_fwalk_sglue+0x10>

08007184 <iprintf>:
 8007184:	b40f      	push	{r0, r1, r2, r3}
 8007186:	b507      	push	{r0, r1, r2, lr}
 8007188:	4906      	ldr	r1, [pc, #24]	@ (80071a4 <iprintf+0x20>)
 800718a:	ab04      	add	r3, sp, #16
 800718c:	6808      	ldr	r0, [r1, #0]
 800718e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007192:	6881      	ldr	r1, [r0, #8]
 8007194:	9301      	str	r3, [sp, #4]
 8007196:	f002 fe0b 	bl	8009db0 <_vfiprintf_r>
 800719a:	b003      	add	sp, #12
 800719c:	f85d eb04 	ldr.w	lr, [sp], #4
 80071a0:	b004      	add	sp, #16
 80071a2:	4770      	bx	lr
 80071a4:	20000018 	.word	0x20000018

080071a8 <_puts_r>:
 80071a8:	6a03      	ldr	r3, [r0, #32]
 80071aa:	b570      	push	{r4, r5, r6, lr}
 80071ac:	6884      	ldr	r4, [r0, #8]
 80071ae:	4605      	mov	r5, r0
 80071b0:	460e      	mov	r6, r1
 80071b2:	b90b      	cbnz	r3, 80071b8 <_puts_r+0x10>
 80071b4:	f7ff ffb0 	bl	8007118 <__sinit>
 80071b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80071ba:	07db      	lsls	r3, r3, #31
 80071bc:	d405      	bmi.n	80071ca <_puts_r+0x22>
 80071be:	89a3      	ldrh	r3, [r4, #12]
 80071c0:	0598      	lsls	r0, r3, #22
 80071c2:	d402      	bmi.n	80071ca <_puts_r+0x22>
 80071c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80071c6:	f000 f9d8 	bl	800757a <__retarget_lock_acquire_recursive>
 80071ca:	89a3      	ldrh	r3, [r4, #12]
 80071cc:	0719      	lsls	r1, r3, #28
 80071ce:	d502      	bpl.n	80071d6 <_puts_r+0x2e>
 80071d0:	6923      	ldr	r3, [r4, #16]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d135      	bne.n	8007242 <_puts_r+0x9a>
 80071d6:	4621      	mov	r1, r4
 80071d8:	4628      	mov	r0, r5
 80071da:	f000 f8e5 	bl	80073a8 <__swsetup_r>
 80071de:	b380      	cbz	r0, 8007242 <_puts_r+0x9a>
 80071e0:	f04f 35ff 	mov.w	r5, #4294967295
 80071e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80071e6:	07da      	lsls	r2, r3, #31
 80071e8:	d405      	bmi.n	80071f6 <_puts_r+0x4e>
 80071ea:	89a3      	ldrh	r3, [r4, #12]
 80071ec:	059b      	lsls	r3, r3, #22
 80071ee:	d402      	bmi.n	80071f6 <_puts_r+0x4e>
 80071f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80071f2:	f000 f9c3 	bl	800757c <__retarget_lock_release_recursive>
 80071f6:	4628      	mov	r0, r5
 80071f8:	bd70      	pop	{r4, r5, r6, pc}
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	da04      	bge.n	8007208 <_puts_r+0x60>
 80071fe:	69a2      	ldr	r2, [r4, #24]
 8007200:	429a      	cmp	r2, r3
 8007202:	dc17      	bgt.n	8007234 <_puts_r+0x8c>
 8007204:	290a      	cmp	r1, #10
 8007206:	d015      	beq.n	8007234 <_puts_r+0x8c>
 8007208:	6823      	ldr	r3, [r4, #0]
 800720a:	1c5a      	adds	r2, r3, #1
 800720c:	6022      	str	r2, [r4, #0]
 800720e:	7019      	strb	r1, [r3, #0]
 8007210:	68a3      	ldr	r3, [r4, #8]
 8007212:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007216:	3b01      	subs	r3, #1
 8007218:	60a3      	str	r3, [r4, #8]
 800721a:	2900      	cmp	r1, #0
 800721c:	d1ed      	bne.n	80071fa <_puts_r+0x52>
 800721e:	2b00      	cmp	r3, #0
 8007220:	da11      	bge.n	8007246 <_puts_r+0x9e>
 8007222:	4622      	mov	r2, r4
 8007224:	210a      	movs	r1, #10
 8007226:	4628      	mov	r0, r5
 8007228:	f000 f87f 	bl	800732a <__swbuf_r>
 800722c:	3001      	adds	r0, #1
 800722e:	d0d7      	beq.n	80071e0 <_puts_r+0x38>
 8007230:	250a      	movs	r5, #10
 8007232:	e7d7      	b.n	80071e4 <_puts_r+0x3c>
 8007234:	4622      	mov	r2, r4
 8007236:	4628      	mov	r0, r5
 8007238:	f000 f877 	bl	800732a <__swbuf_r>
 800723c:	3001      	adds	r0, #1
 800723e:	d1e7      	bne.n	8007210 <_puts_r+0x68>
 8007240:	e7ce      	b.n	80071e0 <_puts_r+0x38>
 8007242:	3e01      	subs	r6, #1
 8007244:	e7e4      	b.n	8007210 <_puts_r+0x68>
 8007246:	6823      	ldr	r3, [r4, #0]
 8007248:	1c5a      	adds	r2, r3, #1
 800724a:	6022      	str	r2, [r4, #0]
 800724c:	220a      	movs	r2, #10
 800724e:	701a      	strb	r2, [r3, #0]
 8007250:	e7ee      	b.n	8007230 <_puts_r+0x88>
	...

08007254 <puts>:
 8007254:	4b02      	ldr	r3, [pc, #8]	@ (8007260 <puts+0xc>)
 8007256:	4601      	mov	r1, r0
 8007258:	6818      	ldr	r0, [r3, #0]
 800725a:	f7ff bfa5 	b.w	80071a8 <_puts_r>
 800725e:	bf00      	nop
 8007260:	20000018 	.word	0x20000018

08007264 <siprintf>:
 8007264:	b40e      	push	{r1, r2, r3}
 8007266:	b500      	push	{lr}
 8007268:	b09c      	sub	sp, #112	@ 0x70
 800726a:	ab1d      	add	r3, sp, #116	@ 0x74
 800726c:	9002      	str	r0, [sp, #8]
 800726e:	9006      	str	r0, [sp, #24]
 8007270:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007274:	4809      	ldr	r0, [pc, #36]	@ (800729c <siprintf+0x38>)
 8007276:	9107      	str	r1, [sp, #28]
 8007278:	9104      	str	r1, [sp, #16]
 800727a:	4909      	ldr	r1, [pc, #36]	@ (80072a0 <siprintf+0x3c>)
 800727c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007280:	9105      	str	r1, [sp, #20]
 8007282:	6800      	ldr	r0, [r0, #0]
 8007284:	9301      	str	r3, [sp, #4]
 8007286:	a902      	add	r1, sp, #8
 8007288:	f002 fc6c 	bl	8009b64 <_svfiprintf_r>
 800728c:	9b02      	ldr	r3, [sp, #8]
 800728e:	2200      	movs	r2, #0
 8007290:	701a      	strb	r2, [r3, #0]
 8007292:	b01c      	add	sp, #112	@ 0x70
 8007294:	f85d eb04 	ldr.w	lr, [sp], #4
 8007298:	b003      	add	sp, #12
 800729a:	4770      	bx	lr
 800729c:	20000018 	.word	0x20000018
 80072a0:	ffff0208 	.word	0xffff0208

080072a4 <__sread>:
 80072a4:	b510      	push	{r4, lr}
 80072a6:	460c      	mov	r4, r1
 80072a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072ac:	f000 f916 	bl	80074dc <_read_r>
 80072b0:	2800      	cmp	r0, #0
 80072b2:	bfab      	itete	ge
 80072b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80072b6:	89a3      	ldrhlt	r3, [r4, #12]
 80072b8:	181b      	addge	r3, r3, r0
 80072ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80072be:	bfac      	ite	ge
 80072c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80072c2:	81a3      	strhlt	r3, [r4, #12]
 80072c4:	bd10      	pop	{r4, pc}

080072c6 <__swrite>:
 80072c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072ca:	461f      	mov	r7, r3
 80072cc:	898b      	ldrh	r3, [r1, #12]
 80072ce:	05db      	lsls	r3, r3, #23
 80072d0:	4605      	mov	r5, r0
 80072d2:	460c      	mov	r4, r1
 80072d4:	4616      	mov	r6, r2
 80072d6:	d505      	bpl.n	80072e4 <__swrite+0x1e>
 80072d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072dc:	2302      	movs	r3, #2
 80072de:	2200      	movs	r2, #0
 80072e0:	f000 f8ea 	bl	80074b8 <_lseek_r>
 80072e4:	89a3      	ldrh	r3, [r4, #12]
 80072e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80072ee:	81a3      	strh	r3, [r4, #12]
 80072f0:	4632      	mov	r2, r6
 80072f2:	463b      	mov	r3, r7
 80072f4:	4628      	mov	r0, r5
 80072f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80072fa:	f000 b901 	b.w	8007500 <_write_r>

080072fe <__sseek>:
 80072fe:	b510      	push	{r4, lr}
 8007300:	460c      	mov	r4, r1
 8007302:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007306:	f000 f8d7 	bl	80074b8 <_lseek_r>
 800730a:	1c43      	adds	r3, r0, #1
 800730c:	89a3      	ldrh	r3, [r4, #12]
 800730e:	bf15      	itete	ne
 8007310:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007312:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007316:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800731a:	81a3      	strheq	r3, [r4, #12]
 800731c:	bf18      	it	ne
 800731e:	81a3      	strhne	r3, [r4, #12]
 8007320:	bd10      	pop	{r4, pc}

08007322 <__sclose>:
 8007322:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007326:	f000 b8b7 	b.w	8007498 <_close_r>

0800732a <__swbuf_r>:
 800732a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800732c:	460e      	mov	r6, r1
 800732e:	4614      	mov	r4, r2
 8007330:	4605      	mov	r5, r0
 8007332:	b118      	cbz	r0, 800733c <__swbuf_r+0x12>
 8007334:	6a03      	ldr	r3, [r0, #32]
 8007336:	b90b      	cbnz	r3, 800733c <__swbuf_r+0x12>
 8007338:	f7ff feee 	bl	8007118 <__sinit>
 800733c:	69a3      	ldr	r3, [r4, #24]
 800733e:	60a3      	str	r3, [r4, #8]
 8007340:	89a3      	ldrh	r3, [r4, #12]
 8007342:	071a      	lsls	r2, r3, #28
 8007344:	d501      	bpl.n	800734a <__swbuf_r+0x20>
 8007346:	6923      	ldr	r3, [r4, #16]
 8007348:	b943      	cbnz	r3, 800735c <__swbuf_r+0x32>
 800734a:	4621      	mov	r1, r4
 800734c:	4628      	mov	r0, r5
 800734e:	f000 f82b 	bl	80073a8 <__swsetup_r>
 8007352:	b118      	cbz	r0, 800735c <__swbuf_r+0x32>
 8007354:	f04f 37ff 	mov.w	r7, #4294967295
 8007358:	4638      	mov	r0, r7
 800735a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800735c:	6823      	ldr	r3, [r4, #0]
 800735e:	6922      	ldr	r2, [r4, #16]
 8007360:	1a98      	subs	r0, r3, r2
 8007362:	6963      	ldr	r3, [r4, #20]
 8007364:	b2f6      	uxtb	r6, r6
 8007366:	4283      	cmp	r3, r0
 8007368:	4637      	mov	r7, r6
 800736a:	dc05      	bgt.n	8007378 <__swbuf_r+0x4e>
 800736c:	4621      	mov	r1, r4
 800736e:	4628      	mov	r0, r5
 8007370:	f002 feba 	bl	800a0e8 <_fflush_r>
 8007374:	2800      	cmp	r0, #0
 8007376:	d1ed      	bne.n	8007354 <__swbuf_r+0x2a>
 8007378:	68a3      	ldr	r3, [r4, #8]
 800737a:	3b01      	subs	r3, #1
 800737c:	60a3      	str	r3, [r4, #8]
 800737e:	6823      	ldr	r3, [r4, #0]
 8007380:	1c5a      	adds	r2, r3, #1
 8007382:	6022      	str	r2, [r4, #0]
 8007384:	701e      	strb	r6, [r3, #0]
 8007386:	6962      	ldr	r2, [r4, #20]
 8007388:	1c43      	adds	r3, r0, #1
 800738a:	429a      	cmp	r2, r3
 800738c:	d004      	beq.n	8007398 <__swbuf_r+0x6e>
 800738e:	89a3      	ldrh	r3, [r4, #12]
 8007390:	07db      	lsls	r3, r3, #31
 8007392:	d5e1      	bpl.n	8007358 <__swbuf_r+0x2e>
 8007394:	2e0a      	cmp	r6, #10
 8007396:	d1df      	bne.n	8007358 <__swbuf_r+0x2e>
 8007398:	4621      	mov	r1, r4
 800739a:	4628      	mov	r0, r5
 800739c:	f002 fea4 	bl	800a0e8 <_fflush_r>
 80073a0:	2800      	cmp	r0, #0
 80073a2:	d0d9      	beq.n	8007358 <__swbuf_r+0x2e>
 80073a4:	e7d6      	b.n	8007354 <__swbuf_r+0x2a>
	...

080073a8 <__swsetup_r>:
 80073a8:	b538      	push	{r3, r4, r5, lr}
 80073aa:	4b29      	ldr	r3, [pc, #164]	@ (8007450 <__swsetup_r+0xa8>)
 80073ac:	4605      	mov	r5, r0
 80073ae:	6818      	ldr	r0, [r3, #0]
 80073b0:	460c      	mov	r4, r1
 80073b2:	b118      	cbz	r0, 80073bc <__swsetup_r+0x14>
 80073b4:	6a03      	ldr	r3, [r0, #32]
 80073b6:	b90b      	cbnz	r3, 80073bc <__swsetup_r+0x14>
 80073b8:	f7ff feae 	bl	8007118 <__sinit>
 80073bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073c0:	0719      	lsls	r1, r3, #28
 80073c2:	d422      	bmi.n	800740a <__swsetup_r+0x62>
 80073c4:	06da      	lsls	r2, r3, #27
 80073c6:	d407      	bmi.n	80073d8 <__swsetup_r+0x30>
 80073c8:	2209      	movs	r2, #9
 80073ca:	602a      	str	r2, [r5, #0]
 80073cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073d0:	81a3      	strh	r3, [r4, #12]
 80073d2:	f04f 30ff 	mov.w	r0, #4294967295
 80073d6:	e033      	b.n	8007440 <__swsetup_r+0x98>
 80073d8:	0758      	lsls	r0, r3, #29
 80073da:	d512      	bpl.n	8007402 <__swsetup_r+0x5a>
 80073dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80073de:	b141      	cbz	r1, 80073f2 <__swsetup_r+0x4a>
 80073e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80073e4:	4299      	cmp	r1, r3
 80073e6:	d002      	beq.n	80073ee <__swsetup_r+0x46>
 80073e8:	4628      	mov	r0, r5
 80073ea:	f000 ff29 	bl	8008240 <_free_r>
 80073ee:	2300      	movs	r3, #0
 80073f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80073f2:	89a3      	ldrh	r3, [r4, #12]
 80073f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80073f8:	81a3      	strh	r3, [r4, #12]
 80073fa:	2300      	movs	r3, #0
 80073fc:	6063      	str	r3, [r4, #4]
 80073fe:	6923      	ldr	r3, [r4, #16]
 8007400:	6023      	str	r3, [r4, #0]
 8007402:	89a3      	ldrh	r3, [r4, #12]
 8007404:	f043 0308 	orr.w	r3, r3, #8
 8007408:	81a3      	strh	r3, [r4, #12]
 800740a:	6923      	ldr	r3, [r4, #16]
 800740c:	b94b      	cbnz	r3, 8007422 <__swsetup_r+0x7a>
 800740e:	89a3      	ldrh	r3, [r4, #12]
 8007410:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007414:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007418:	d003      	beq.n	8007422 <__swsetup_r+0x7a>
 800741a:	4621      	mov	r1, r4
 800741c:	4628      	mov	r0, r5
 800741e:	f002 feb1 	bl	800a184 <__smakebuf_r>
 8007422:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007426:	f013 0201 	ands.w	r2, r3, #1
 800742a:	d00a      	beq.n	8007442 <__swsetup_r+0x9a>
 800742c:	2200      	movs	r2, #0
 800742e:	60a2      	str	r2, [r4, #8]
 8007430:	6962      	ldr	r2, [r4, #20]
 8007432:	4252      	negs	r2, r2
 8007434:	61a2      	str	r2, [r4, #24]
 8007436:	6922      	ldr	r2, [r4, #16]
 8007438:	b942      	cbnz	r2, 800744c <__swsetup_r+0xa4>
 800743a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800743e:	d1c5      	bne.n	80073cc <__swsetup_r+0x24>
 8007440:	bd38      	pop	{r3, r4, r5, pc}
 8007442:	0799      	lsls	r1, r3, #30
 8007444:	bf58      	it	pl
 8007446:	6962      	ldrpl	r2, [r4, #20]
 8007448:	60a2      	str	r2, [r4, #8]
 800744a:	e7f4      	b.n	8007436 <__swsetup_r+0x8e>
 800744c:	2000      	movs	r0, #0
 800744e:	e7f7      	b.n	8007440 <__swsetup_r+0x98>
 8007450:	20000018 	.word	0x20000018

08007454 <memset>:
 8007454:	4402      	add	r2, r0
 8007456:	4603      	mov	r3, r0
 8007458:	4293      	cmp	r3, r2
 800745a:	d100      	bne.n	800745e <memset+0xa>
 800745c:	4770      	bx	lr
 800745e:	f803 1b01 	strb.w	r1, [r3], #1
 8007462:	e7f9      	b.n	8007458 <memset+0x4>

08007464 <strstr>:
 8007464:	780a      	ldrb	r2, [r1, #0]
 8007466:	b570      	push	{r4, r5, r6, lr}
 8007468:	b96a      	cbnz	r2, 8007486 <strstr+0x22>
 800746a:	bd70      	pop	{r4, r5, r6, pc}
 800746c:	429a      	cmp	r2, r3
 800746e:	d109      	bne.n	8007484 <strstr+0x20>
 8007470:	460c      	mov	r4, r1
 8007472:	4605      	mov	r5, r0
 8007474:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007478:	2b00      	cmp	r3, #0
 800747a:	d0f6      	beq.n	800746a <strstr+0x6>
 800747c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007480:	429e      	cmp	r6, r3
 8007482:	d0f7      	beq.n	8007474 <strstr+0x10>
 8007484:	3001      	adds	r0, #1
 8007486:	7803      	ldrb	r3, [r0, #0]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d1ef      	bne.n	800746c <strstr+0x8>
 800748c:	4618      	mov	r0, r3
 800748e:	e7ec      	b.n	800746a <strstr+0x6>

08007490 <_localeconv_r>:
 8007490:	4800      	ldr	r0, [pc, #0]	@ (8007494 <_localeconv_r+0x4>)
 8007492:	4770      	bx	lr
 8007494:	20000158 	.word	0x20000158

08007498 <_close_r>:
 8007498:	b538      	push	{r3, r4, r5, lr}
 800749a:	4d06      	ldr	r5, [pc, #24]	@ (80074b4 <_close_r+0x1c>)
 800749c:	2300      	movs	r3, #0
 800749e:	4604      	mov	r4, r0
 80074a0:	4608      	mov	r0, r1
 80074a2:	602b      	str	r3, [r5, #0]
 80074a4:	f7fa fbaa 	bl	8001bfc <_close>
 80074a8:	1c43      	adds	r3, r0, #1
 80074aa:	d102      	bne.n	80074b2 <_close_r+0x1a>
 80074ac:	682b      	ldr	r3, [r5, #0]
 80074ae:	b103      	cbz	r3, 80074b2 <_close_r+0x1a>
 80074b0:	6023      	str	r3, [r4, #0]
 80074b2:	bd38      	pop	{r3, r4, r5, pc}
 80074b4:	20000908 	.word	0x20000908

080074b8 <_lseek_r>:
 80074b8:	b538      	push	{r3, r4, r5, lr}
 80074ba:	4d07      	ldr	r5, [pc, #28]	@ (80074d8 <_lseek_r+0x20>)
 80074bc:	4604      	mov	r4, r0
 80074be:	4608      	mov	r0, r1
 80074c0:	4611      	mov	r1, r2
 80074c2:	2200      	movs	r2, #0
 80074c4:	602a      	str	r2, [r5, #0]
 80074c6:	461a      	mov	r2, r3
 80074c8:	f7fa fbbf 	bl	8001c4a <_lseek>
 80074cc:	1c43      	adds	r3, r0, #1
 80074ce:	d102      	bne.n	80074d6 <_lseek_r+0x1e>
 80074d0:	682b      	ldr	r3, [r5, #0]
 80074d2:	b103      	cbz	r3, 80074d6 <_lseek_r+0x1e>
 80074d4:	6023      	str	r3, [r4, #0]
 80074d6:	bd38      	pop	{r3, r4, r5, pc}
 80074d8:	20000908 	.word	0x20000908

080074dc <_read_r>:
 80074dc:	b538      	push	{r3, r4, r5, lr}
 80074de:	4d07      	ldr	r5, [pc, #28]	@ (80074fc <_read_r+0x20>)
 80074e0:	4604      	mov	r4, r0
 80074e2:	4608      	mov	r0, r1
 80074e4:	4611      	mov	r1, r2
 80074e6:	2200      	movs	r2, #0
 80074e8:	602a      	str	r2, [r5, #0]
 80074ea:	461a      	mov	r2, r3
 80074ec:	f7fa fb4d 	bl	8001b8a <_read>
 80074f0:	1c43      	adds	r3, r0, #1
 80074f2:	d102      	bne.n	80074fa <_read_r+0x1e>
 80074f4:	682b      	ldr	r3, [r5, #0]
 80074f6:	b103      	cbz	r3, 80074fa <_read_r+0x1e>
 80074f8:	6023      	str	r3, [r4, #0]
 80074fa:	bd38      	pop	{r3, r4, r5, pc}
 80074fc:	20000908 	.word	0x20000908

08007500 <_write_r>:
 8007500:	b538      	push	{r3, r4, r5, lr}
 8007502:	4d07      	ldr	r5, [pc, #28]	@ (8007520 <_write_r+0x20>)
 8007504:	4604      	mov	r4, r0
 8007506:	4608      	mov	r0, r1
 8007508:	4611      	mov	r1, r2
 800750a:	2200      	movs	r2, #0
 800750c:	602a      	str	r2, [r5, #0]
 800750e:	461a      	mov	r2, r3
 8007510:	f7fa fb58 	bl	8001bc4 <_write>
 8007514:	1c43      	adds	r3, r0, #1
 8007516:	d102      	bne.n	800751e <_write_r+0x1e>
 8007518:	682b      	ldr	r3, [r5, #0]
 800751a:	b103      	cbz	r3, 800751e <_write_r+0x1e>
 800751c:	6023      	str	r3, [r4, #0]
 800751e:	bd38      	pop	{r3, r4, r5, pc}
 8007520:	20000908 	.word	0x20000908

08007524 <__errno>:
 8007524:	4b01      	ldr	r3, [pc, #4]	@ (800752c <__errno+0x8>)
 8007526:	6818      	ldr	r0, [r3, #0]
 8007528:	4770      	bx	lr
 800752a:	bf00      	nop
 800752c:	20000018 	.word	0x20000018

08007530 <__libc_init_array>:
 8007530:	b570      	push	{r4, r5, r6, lr}
 8007532:	4d0d      	ldr	r5, [pc, #52]	@ (8007568 <__libc_init_array+0x38>)
 8007534:	4c0d      	ldr	r4, [pc, #52]	@ (800756c <__libc_init_array+0x3c>)
 8007536:	1b64      	subs	r4, r4, r5
 8007538:	10a4      	asrs	r4, r4, #2
 800753a:	2600      	movs	r6, #0
 800753c:	42a6      	cmp	r6, r4
 800753e:	d109      	bne.n	8007554 <__libc_init_array+0x24>
 8007540:	4d0b      	ldr	r5, [pc, #44]	@ (8007570 <__libc_init_array+0x40>)
 8007542:	4c0c      	ldr	r4, [pc, #48]	@ (8007574 <__libc_init_array+0x44>)
 8007544:	f003 fade 	bl	800ab04 <_init>
 8007548:	1b64      	subs	r4, r4, r5
 800754a:	10a4      	asrs	r4, r4, #2
 800754c:	2600      	movs	r6, #0
 800754e:	42a6      	cmp	r6, r4
 8007550:	d105      	bne.n	800755e <__libc_init_array+0x2e>
 8007552:	bd70      	pop	{r4, r5, r6, pc}
 8007554:	f855 3b04 	ldr.w	r3, [r5], #4
 8007558:	4798      	blx	r3
 800755a:	3601      	adds	r6, #1
 800755c:	e7ee      	b.n	800753c <__libc_init_array+0xc>
 800755e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007562:	4798      	blx	r3
 8007564:	3601      	adds	r6, #1
 8007566:	e7f2      	b.n	800754e <__libc_init_array+0x1e>
 8007568:	080157a8 	.word	0x080157a8
 800756c:	080157a8 	.word	0x080157a8
 8007570:	080157a8 	.word	0x080157a8
 8007574:	080157ac 	.word	0x080157ac

08007578 <__retarget_lock_init_recursive>:
 8007578:	4770      	bx	lr

0800757a <__retarget_lock_acquire_recursive>:
 800757a:	4770      	bx	lr

0800757c <__retarget_lock_release_recursive>:
 800757c:	4770      	bx	lr

0800757e <memcpy>:
 800757e:	440a      	add	r2, r1
 8007580:	4291      	cmp	r1, r2
 8007582:	f100 33ff 	add.w	r3, r0, #4294967295
 8007586:	d100      	bne.n	800758a <memcpy+0xc>
 8007588:	4770      	bx	lr
 800758a:	b510      	push	{r4, lr}
 800758c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007590:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007594:	4291      	cmp	r1, r2
 8007596:	d1f9      	bne.n	800758c <memcpy+0xe>
 8007598:	bd10      	pop	{r4, pc}
	...

0800759c <nanf>:
 800759c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80075a4 <nanf+0x8>
 80075a0:	4770      	bx	lr
 80075a2:	bf00      	nop
 80075a4:	7fc00000 	.word	0x7fc00000

080075a8 <quorem>:
 80075a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075ac:	6903      	ldr	r3, [r0, #16]
 80075ae:	690c      	ldr	r4, [r1, #16]
 80075b0:	42a3      	cmp	r3, r4
 80075b2:	4607      	mov	r7, r0
 80075b4:	db7e      	blt.n	80076b4 <quorem+0x10c>
 80075b6:	3c01      	subs	r4, #1
 80075b8:	f101 0814 	add.w	r8, r1, #20
 80075bc:	00a3      	lsls	r3, r4, #2
 80075be:	f100 0514 	add.w	r5, r0, #20
 80075c2:	9300      	str	r3, [sp, #0]
 80075c4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80075c8:	9301      	str	r3, [sp, #4]
 80075ca:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80075ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80075d2:	3301      	adds	r3, #1
 80075d4:	429a      	cmp	r2, r3
 80075d6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80075da:	fbb2 f6f3 	udiv	r6, r2, r3
 80075de:	d32e      	bcc.n	800763e <quorem+0x96>
 80075e0:	f04f 0a00 	mov.w	sl, #0
 80075e4:	46c4      	mov	ip, r8
 80075e6:	46ae      	mov	lr, r5
 80075e8:	46d3      	mov	fp, sl
 80075ea:	f85c 3b04 	ldr.w	r3, [ip], #4
 80075ee:	b298      	uxth	r0, r3
 80075f0:	fb06 a000 	mla	r0, r6, r0, sl
 80075f4:	0c02      	lsrs	r2, r0, #16
 80075f6:	0c1b      	lsrs	r3, r3, #16
 80075f8:	fb06 2303 	mla	r3, r6, r3, r2
 80075fc:	f8de 2000 	ldr.w	r2, [lr]
 8007600:	b280      	uxth	r0, r0
 8007602:	b292      	uxth	r2, r2
 8007604:	1a12      	subs	r2, r2, r0
 8007606:	445a      	add	r2, fp
 8007608:	f8de 0000 	ldr.w	r0, [lr]
 800760c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007610:	b29b      	uxth	r3, r3
 8007612:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007616:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800761a:	b292      	uxth	r2, r2
 800761c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007620:	45e1      	cmp	r9, ip
 8007622:	f84e 2b04 	str.w	r2, [lr], #4
 8007626:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800762a:	d2de      	bcs.n	80075ea <quorem+0x42>
 800762c:	9b00      	ldr	r3, [sp, #0]
 800762e:	58eb      	ldr	r3, [r5, r3]
 8007630:	b92b      	cbnz	r3, 800763e <quorem+0x96>
 8007632:	9b01      	ldr	r3, [sp, #4]
 8007634:	3b04      	subs	r3, #4
 8007636:	429d      	cmp	r5, r3
 8007638:	461a      	mov	r2, r3
 800763a:	d32f      	bcc.n	800769c <quorem+0xf4>
 800763c:	613c      	str	r4, [r7, #16]
 800763e:	4638      	mov	r0, r7
 8007640:	f001 f9c2 	bl	80089c8 <__mcmp>
 8007644:	2800      	cmp	r0, #0
 8007646:	db25      	blt.n	8007694 <quorem+0xec>
 8007648:	4629      	mov	r1, r5
 800764a:	2000      	movs	r0, #0
 800764c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007650:	f8d1 c000 	ldr.w	ip, [r1]
 8007654:	fa1f fe82 	uxth.w	lr, r2
 8007658:	fa1f f38c 	uxth.w	r3, ip
 800765c:	eba3 030e 	sub.w	r3, r3, lr
 8007660:	4403      	add	r3, r0
 8007662:	0c12      	lsrs	r2, r2, #16
 8007664:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007668:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800766c:	b29b      	uxth	r3, r3
 800766e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007672:	45c1      	cmp	r9, r8
 8007674:	f841 3b04 	str.w	r3, [r1], #4
 8007678:	ea4f 4022 	mov.w	r0, r2, asr #16
 800767c:	d2e6      	bcs.n	800764c <quorem+0xa4>
 800767e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007682:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007686:	b922      	cbnz	r2, 8007692 <quorem+0xea>
 8007688:	3b04      	subs	r3, #4
 800768a:	429d      	cmp	r5, r3
 800768c:	461a      	mov	r2, r3
 800768e:	d30b      	bcc.n	80076a8 <quorem+0x100>
 8007690:	613c      	str	r4, [r7, #16]
 8007692:	3601      	adds	r6, #1
 8007694:	4630      	mov	r0, r6
 8007696:	b003      	add	sp, #12
 8007698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800769c:	6812      	ldr	r2, [r2, #0]
 800769e:	3b04      	subs	r3, #4
 80076a0:	2a00      	cmp	r2, #0
 80076a2:	d1cb      	bne.n	800763c <quorem+0x94>
 80076a4:	3c01      	subs	r4, #1
 80076a6:	e7c6      	b.n	8007636 <quorem+0x8e>
 80076a8:	6812      	ldr	r2, [r2, #0]
 80076aa:	3b04      	subs	r3, #4
 80076ac:	2a00      	cmp	r2, #0
 80076ae:	d1ef      	bne.n	8007690 <quorem+0xe8>
 80076b0:	3c01      	subs	r4, #1
 80076b2:	e7ea      	b.n	800768a <quorem+0xe2>
 80076b4:	2000      	movs	r0, #0
 80076b6:	e7ee      	b.n	8007696 <quorem+0xee>

080076b8 <_dtoa_r>:
 80076b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076bc:	69c7      	ldr	r7, [r0, #28]
 80076be:	b099      	sub	sp, #100	@ 0x64
 80076c0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80076c4:	ec55 4b10 	vmov	r4, r5, d0
 80076c8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80076ca:	9109      	str	r1, [sp, #36]	@ 0x24
 80076cc:	4683      	mov	fp, r0
 80076ce:	920e      	str	r2, [sp, #56]	@ 0x38
 80076d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80076d2:	b97f      	cbnz	r7, 80076f4 <_dtoa_r+0x3c>
 80076d4:	2010      	movs	r0, #16
 80076d6:	f000 fdfd 	bl	80082d4 <malloc>
 80076da:	4602      	mov	r2, r0
 80076dc:	f8cb 001c 	str.w	r0, [fp, #28]
 80076e0:	b920      	cbnz	r0, 80076ec <_dtoa_r+0x34>
 80076e2:	4ba7      	ldr	r3, [pc, #668]	@ (8007980 <_dtoa_r+0x2c8>)
 80076e4:	21ef      	movs	r1, #239	@ 0xef
 80076e6:	48a7      	ldr	r0, [pc, #668]	@ (8007984 <_dtoa_r+0x2cc>)
 80076e8:	f002 fdee 	bl	800a2c8 <__assert_func>
 80076ec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80076f0:	6007      	str	r7, [r0, #0]
 80076f2:	60c7      	str	r7, [r0, #12]
 80076f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80076f8:	6819      	ldr	r1, [r3, #0]
 80076fa:	b159      	cbz	r1, 8007714 <_dtoa_r+0x5c>
 80076fc:	685a      	ldr	r2, [r3, #4]
 80076fe:	604a      	str	r2, [r1, #4]
 8007700:	2301      	movs	r3, #1
 8007702:	4093      	lsls	r3, r2
 8007704:	608b      	str	r3, [r1, #8]
 8007706:	4658      	mov	r0, fp
 8007708:	f000 feda 	bl	80084c0 <_Bfree>
 800770c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007710:	2200      	movs	r2, #0
 8007712:	601a      	str	r2, [r3, #0]
 8007714:	1e2b      	subs	r3, r5, #0
 8007716:	bfb9      	ittee	lt
 8007718:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800771c:	9303      	strlt	r3, [sp, #12]
 800771e:	2300      	movge	r3, #0
 8007720:	6033      	strge	r3, [r6, #0]
 8007722:	9f03      	ldr	r7, [sp, #12]
 8007724:	4b98      	ldr	r3, [pc, #608]	@ (8007988 <_dtoa_r+0x2d0>)
 8007726:	bfbc      	itt	lt
 8007728:	2201      	movlt	r2, #1
 800772a:	6032      	strlt	r2, [r6, #0]
 800772c:	43bb      	bics	r3, r7
 800772e:	d112      	bne.n	8007756 <_dtoa_r+0x9e>
 8007730:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007732:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007736:	6013      	str	r3, [r2, #0]
 8007738:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800773c:	4323      	orrs	r3, r4
 800773e:	f000 854d 	beq.w	80081dc <_dtoa_r+0xb24>
 8007742:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007744:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800799c <_dtoa_r+0x2e4>
 8007748:	2b00      	cmp	r3, #0
 800774a:	f000 854f 	beq.w	80081ec <_dtoa_r+0xb34>
 800774e:	f10a 0303 	add.w	r3, sl, #3
 8007752:	f000 bd49 	b.w	80081e8 <_dtoa_r+0xb30>
 8007756:	ed9d 7b02 	vldr	d7, [sp, #8]
 800775a:	2200      	movs	r2, #0
 800775c:	ec51 0b17 	vmov	r0, r1, d7
 8007760:	2300      	movs	r3, #0
 8007762:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007766:	f7f9 f9af 	bl	8000ac8 <__aeabi_dcmpeq>
 800776a:	4680      	mov	r8, r0
 800776c:	b158      	cbz	r0, 8007786 <_dtoa_r+0xce>
 800776e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007770:	2301      	movs	r3, #1
 8007772:	6013      	str	r3, [r2, #0]
 8007774:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007776:	b113      	cbz	r3, 800777e <_dtoa_r+0xc6>
 8007778:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800777a:	4b84      	ldr	r3, [pc, #528]	@ (800798c <_dtoa_r+0x2d4>)
 800777c:	6013      	str	r3, [r2, #0]
 800777e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80079a0 <_dtoa_r+0x2e8>
 8007782:	f000 bd33 	b.w	80081ec <_dtoa_r+0xb34>
 8007786:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800778a:	aa16      	add	r2, sp, #88	@ 0x58
 800778c:	a917      	add	r1, sp, #92	@ 0x5c
 800778e:	4658      	mov	r0, fp
 8007790:	f001 fa3a 	bl	8008c08 <__d2b>
 8007794:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007798:	4681      	mov	r9, r0
 800779a:	2e00      	cmp	r6, #0
 800779c:	d077      	beq.n	800788e <_dtoa_r+0x1d6>
 800779e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80077a0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80077a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80077a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80077ac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80077b0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80077b4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80077b8:	4619      	mov	r1, r3
 80077ba:	2200      	movs	r2, #0
 80077bc:	4b74      	ldr	r3, [pc, #464]	@ (8007990 <_dtoa_r+0x2d8>)
 80077be:	f7f8 fd63 	bl	8000288 <__aeabi_dsub>
 80077c2:	a369      	add	r3, pc, #420	@ (adr r3, 8007968 <_dtoa_r+0x2b0>)
 80077c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c8:	f7f8 ff16 	bl	80005f8 <__aeabi_dmul>
 80077cc:	a368      	add	r3, pc, #416	@ (adr r3, 8007970 <_dtoa_r+0x2b8>)
 80077ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d2:	f7f8 fd5b 	bl	800028c <__adddf3>
 80077d6:	4604      	mov	r4, r0
 80077d8:	4630      	mov	r0, r6
 80077da:	460d      	mov	r5, r1
 80077dc:	f7f8 fea2 	bl	8000524 <__aeabi_i2d>
 80077e0:	a365      	add	r3, pc, #404	@ (adr r3, 8007978 <_dtoa_r+0x2c0>)
 80077e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e6:	f7f8 ff07 	bl	80005f8 <__aeabi_dmul>
 80077ea:	4602      	mov	r2, r0
 80077ec:	460b      	mov	r3, r1
 80077ee:	4620      	mov	r0, r4
 80077f0:	4629      	mov	r1, r5
 80077f2:	f7f8 fd4b 	bl	800028c <__adddf3>
 80077f6:	4604      	mov	r4, r0
 80077f8:	460d      	mov	r5, r1
 80077fa:	f7f9 f9ad 	bl	8000b58 <__aeabi_d2iz>
 80077fe:	2200      	movs	r2, #0
 8007800:	4607      	mov	r7, r0
 8007802:	2300      	movs	r3, #0
 8007804:	4620      	mov	r0, r4
 8007806:	4629      	mov	r1, r5
 8007808:	f7f9 f968 	bl	8000adc <__aeabi_dcmplt>
 800780c:	b140      	cbz	r0, 8007820 <_dtoa_r+0x168>
 800780e:	4638      	mov	r0, r7
 8007810:	f7f8 fe88 	bl	8000524 <__aeabi_i2d>
 8007814:	4622      	mov	r2, r4
 8007816:	462b      	mov	r3, r5
 8007818:	f7f9 f956 	bl	8000ac8 <__aeabi_dcmpeq>
 800781c:	b900      	cbnz	r0, 8007820 <_dtoa_r+0x168>
 800781e:	3f01      	subs	r7, #1
 8007820:	2f16      	cmp	r7, #22
 8007822:	d851      	bhi.n	80078c8 <_dtoa_r+0x210>
 8007824:	4b5b      	ldr	r3, [pc, #364]	@ (8007994 <_dtoa_r+0x2dc>)
 8007826:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800782a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800782e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007832:	f7f9 f953 	bl	8000adc <__aeabi_dcmplt>
 8007836:	2800      	cmp	r0, #0
 8007838:	d048      	beq.n	80078cc <_dtoa_r+0x214>
 800783a:	3f01      	subs	r7, #1
 800783c:	2300      	movs	r3, #0
 800783e:	9312      	str	r3, [sp, #72]	@ 0x48
 8007840:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007842:	1b9b      	subs	r3, r3, r6
 8007844:	1e5a      	subs	r2, r3, #1
 8007846:	bf44      	itt	mi
 8007848:	f1c3 0801 	rsbmi	r8, r3, #1
 800784c:	2300      	movmi	r3, #0
 800784e:	9208      	str	r2, [sp, #32]
 8007850:	bf54      	ite	pl
 8007852:	f04f 0800 	movpl.w	r8, #0
 8007856:	9308      	strmi	r3, [sp, #32]
 8007858:	2f00      	cmp	r7, #0
 800785a:	db39      	blt.n	80078d0 <_dtoa_r+0x218>
 800785c:	9b08      	ldr	r3, [sp, #32]
 800785e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007860:	443b      	add	r3, r7
 8007862:	9308      	str	r3, [sp, #32]
 8007864:	2300      	movs	r3, #0
 8007866:	930a      	str	r3, [sp, #40]	@ 0x28
 8007868:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800786a:	2b09      	cmp	r3, #9
 800786c:	d864      	bhi.n	8007938 <_dtoa_r+0x280>
 800786e:	2b05      	cmp	r3, #5
 8007870:	bfc4      	itt	gt
 8007872:	3b04      	subgt	r3, #4
 8007874:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007876:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007878:	f1a3 0302 	sub.w	r3, r3, #2
 800787c:	bfcc      	ite	gt
 800787e:	2400      	movgt	r4, #0
 8007880:	2401      	movle	r4, #1
 8007882:	2b03      	cmp	r3, #3
 8007884:	d863      	bhi.n	800794e <_dtoa_r+0x296>
 8007886:	e8df f003 	tbb	[pc, r3]
 800788a:	372a      	.short	0x372a
 800788c:	5535      	.short	0x5535
 800788e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007892:	441e      	add	r6, r3
 8007894:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007898:	2b20      	cmp	r3, #32
 800789a:	bfc1      	itttt	gt
 800789c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80078a0:	409f      	lslgt	r7, r3
 80078a2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80078a6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80078aa:	bfd6      	itet	le
 80078ac:	f1c3 0320 	rsble	r3, r3, #32
 80078b0:	ea47 0003 	orrgt.w	r0, r7, r3
 80078b4:	fa04 f003 	lslle.w	r0, r4, r3
 80078b8:	f7f8 fe24 	bl	8000504 <__aeabi_ui2d>
 80078bc:	2201      	movs	r2, #1
 80078be:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80078c2:	3e01      	subs	r6, #1
 80078c4:	9214      	str	r2, [sp, #80]	@ 0x50
 80078c6:	e777      	b.n	80077b8 <_dtoa_r+0x100>
 80078c8:	2301      	movs	r3, #1
 80078ca:	e7b8      	b.n	800783e <_dtoa_r+0x186>
 80078cc:	9012      	str	r0, [sp, #72]	@ 0x48
 80078ce:	e7b7      	b.n	8007840 <_dtoa_r+0x188>
 80078d0:	427b      	negs	r3, r7
 80078d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80078d4:	2300      	movs	r3, #0
 80078d6:	eba8 0807 	sub.w	r8, r8, r7
 80078da:	930f      	str	r3, [sp, #60]	@ 0x3c
 80078dc:	e7c4      	b.n	8007868 <_dtoa_r+0x1b0>
 80078de:	2300      	movs	r3, #0
 80078e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80078e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	dc35      	bgt.n	8007954 <_dtoa_r+0x29c>
 80078e8:	2301      	movs	r3, #1
 80078ea:	9300      	str	r3, [sp, #0]
 80078ec:	9307      	str	r3, [sp, #28]
 80078ee:	461a      	mov	r2, r3
 80078f0:	920e      	str	r2, [sp, #56]	@ 0x38
 80078f2:	e00b      	b.n	800790c <_dtoa_r+0x254>
 80078f4:	2301      	movs	r3, #1
 80078f6:	e7f3      	b.n	80078e0 <_dtoa_r+0x228>
 80078f8:	2300      	movs	r3, #0
 80078fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80078fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80078fe:	18fb      	adds	r3, r7, r3
 8007900:	9300      	str	r3, [sp, #0]
 8007902:	3301      	adds	r3, #1
 8007904:	2b01      	cmp	r3, #1
 8007906:	9307      	str	r3, [sp, #28]
 8007908:	bfb8      	it	lt
 800790a:	2301      	movlt	r3, #1
 800790c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007910:	2100      	movs	r1, #0
 8007912:	2204      	movs	r2, #4
 8007914:	f102 0514 	add.w	r5, r2, #20
 8007918:	429d      	cmp	r5, r3
 800791a:	d91f      	bls.n	800795c <_dtoa_r+0x2a4>
 800791c:	6041      	str	r1, [r0, #4]
 800791e:	4658      	mov	r0, fp
 8007920:	f000 fd8e 	bl	8008440 <_Balloc>
 8007924:	4682      	mov	sl, r0
 8007926:	2800      	cmp	r0, #0
 8007928:	d13c      	bne.n	80079a4 <_dtoa_r+0x2ec>
 800792a:	4b1b      	ldr	r3, [pc, #108]	@ (8007998 <_dtoa_r+0x2e0>)
 800792c:	4602      	mov	r2, r0
 800792e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007932:	e6d8      	b.n	80076e6 <_dtoa_r+0x2e>
 8007934:	2301      	movs	r3, #1
 8007936:	e7e0      	b.n	80078fa <_dtoa_r+0x242>
 8007938:	2401      	movs	r4, #1
 800793a:	2300      	movs	r3, #0
 800793c:	9309      	str	r3, [sp, #36]	@ 0x24
 800793e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007940:	f04f 33ff 	mov.w	r3, #4294967295
 8007944:	9300      	str	r3, [sp, #0]
 8007946:	9307      	str	r3, [sp, #28]
 8007948:	2200      	movs	r2, #0
 800794a:	2312      	movs	r3, #18
 800794c:	e7d0      	b.n	80078f0 <_dtoa_r+0x238>
 800794e:	2301      	movs	r3, #1
 8007950:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007952:	e7f5      	b.n	8007940 <_dtoa_r+0x288>
 8007954:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007956:	9300      	str	r3, [sp, #0]
 8007958:	9307      	str	r3, [sp, #28]
 800795a:	e7d7      	b.n	800790c <_dtoa_r+0x254>
 800795c:	3101      	adds	r1, #1
 800795e:	0052      	lsls	r2, r2, #1
 8007960:	e7d8      	b.n	8007914 <_dtoa_r+0x25c>
 8007962:	bf00      	nop
 8007964:	f3af 8000 	nop.w
 8007968:	636f4361 	.word	0x636f4361
 800796c:	3fd287a7 	.word	0x3fd287a7
 8007970:	8b60c8b3 	.word	0x8b60c8b3
 8007974:	3fc68a28 	.word	0x3fc68a28
 8007978:	509f79fb 	.word	0x509f79fb
 800797c:	3fd34413 	.word	0x3fd34413
 8007980:	080153ba 	.word	0x080153ba
 8007984:	080153d1 	.word	0x080153d1
 8007988:	7ff00000 	.word	0x7ff00000
 800798c:	08015385 	.word	0x08015385
 8007990:	3ff80000 	.word	0x3ff80000
 8007994:	080154c8 	.word	0x080154c8
 8007998:	08015429 	.word	0x08015429
 800799c:	080153b6 	.word	0x080153b6
 80079a0:	08015384 	.word	0x08015384
 80079a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80079a8:	6018      	str	r0, [r3, #0]
 80079aa:	9b07      	ldr	r3, [sp, #28]
 80079ac:	2b0e      	cmp	r3, #14
 80079ae:	f200 80a4 	bhi.w	8007afa <_dtoa_r+0x442>
 80079b2:	2c00      	cmp	r4, #0
 80079b4:	f000 80a1 	beq.w	8007afa <_dtoa_r+0x442>
 80079b8:	2f00      	cmp	r7, #0
 80079ba:	dd33      	ble.n	8007a24 <_dtoa_r+0x36c>
 80079bc:	4bad      	ldr	r3, [pc, #692]	@ (8007c74 <_dtoa_r+0x5bc>)
 80079be:	f007 020f 	and.w	r2, r7, #15
 80079c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80079c6:	ed93 7b00 	vldr	d7, [r3]
 80079ca:	05f8      	lsls	r0, r7, #23
 80079cc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80079d0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80079d4:	d516      	bpl.n	8007a04 <_dtoa_r+0x34c>
 80079d6:	4ba8      	ldr	r3, [pc, #672]	@ (8007c78 <_dtoa_r+0x5c0>)
 80079d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80079dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80079e0:	f7f8 ff34 	bl	800084c <__aeabi_ddiv>
 80079e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80079e8:	f004 040f 	and.w	r4, r4, #15
 80079ec:	2603      	movs	r6, #3
 80079ee:	4da2      	ldr	r5, [pc, #648]	@ (8007c78 <_dtoa_r+0x5c0>)
 80079f0:	b954      	cbnz	r4, 8007a08 <_dtoa_r+0x350>
 80079f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80079f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079fa:	f7f8 ff27 	bl	800084c <__aeabi_ddiv>
 80079fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a02:	e028      	b.n	8007a56 <_dtoa_r+0x39e>
 8007a04:	2602      	movs	r6, #2
 8007a06:	e7f2      	b.n	80079ee <_dtoa_r+0x336>
 8007a08:	07e1      	lsls	r1, r4, #31
 8007a0a:	d508      	bpl.n	8007a1e <_dtoa_r+0x366>
 8007a0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a10:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007a14:	f7f8 fdf0 	bl	80005f8 <__aeabi_dmul>
 8007a18:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a1c:	3601      	adds	r6, #1
 8007a1e:	1064      	asrs	r4, r4, #1
 8007a20:	3508      	adds	r5, #8
 8007a22:	e7e5      	b.n	80079f0 <_dtoa_r+0x338>
 8007a24:	f000 80d2 	beq.w	8007bcc <_dtoa_r+0x514>
 8007a28:	427c      	negs	r4, r7
 8007a2a:	4b92      	ldr	r3, [pc, #584]	@ (8007c74 <_dtoa_r+0x5bc>)
 8007a2c:	4d92      	ldr	r5, [pc, #584]	@ (8007c78 <_dtoa_r+0x5c0>)
 8007a2e:	f004 020f 	and.w	r2, r4, #15
 8007a32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a3a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a3e:	f7f8 fddb 	bl	80005f8 <__aeabi_dmul>
 8007a42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a46:	1124      	asrs	r4, r4, #4
 8007a48:	2300      	movs	r3, #0
 8007a4a:	2602      	movs	r6, #2
 8007a4c:	2c00      	cmp	r4, #0
 8007a4e:	f040 80b2 	bne.w	8007bb6 <_dtoa_r+0x4fe>
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d1d3      	bne.n	80079fe <_dtoa_r+0x346>
 8007a56:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007a58:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	f000 80b7 	beq.w	8007bd0 <_dtoa_r+0x518>
 8007a62:	4b86      	ldr	r3, [pc, #536]	@ (8007c7c <_dtoa_r+0x5c4>)
 8007a64:	2200      	movs	r2, #0
 8007a66:	4620      	mov	r0, r4
 8007a68:	4629      	mov	r1, r5
 8007a6a:	f7f9 f837 	bl	8000adc <__aeabi_dcmplt>
 8007a6e:	2800      	cmp	r0, #0
 8007a70:	f000 80ae 	beq.w	8007bd0 <_dtoa_r+0x518>
 8007a74:	9b07      	ldr	r3, [sp, #28]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	f000 80aa 	beq.w	8007bd0 <_dtoa_r+0x518>
 8007a7c:	9b00      	ldr	r3, [sp, #0]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	dd37      	ble.n	8007af2 <_dtoa_r+0x43a>
 8007a82:	1e7b      	subs	r3, r7, #1
 8007a84:	9304      	str	r3, [sp, #16]
 8007a86:	4620      	mov	r0, r4
 8007a88:	4b7d      	ldr	r3, [pc, #500]	@ (8007c80 <_dtoa_r+0x5c8>)
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	4629      	mov	r1, r5
 8007a8e:	f7f8 fdb3 	bl	80005f8 <__aeabi_dmul>
 8007a92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a96:	9c00      	ldr	r4, [sp, #0]
 8007a98:	3601      	adds	r6, #1
 8007a9a:	4630      	mov	r0, r6
 8007a9c:	f7f8 fd42 	bl	8000524 <__aeabi_i2d>
 8007aa0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007aa4:	f7f8 fda8 	bl	80005f8 <__aeabi_dmul>
 8007aa8:	4b76      	ldr	r3, [pc, #472]	@ (8007c84 <_dtoa_r+0x5cc>)
 8007aaa:	2200      	movs	r2, #0
 8007aac:	f7f8 fbee 	bl	800028c <__adddf3>
 8007ab0:	4605      	mov	r5, r0
 8007ab2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007ab6:	2c00      	cmp	r4, #0
 8007ab8:	f040 808d 	bne.w	8007bd6 <_dtoa_r+0x51e>
 8007abc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ac0:	4b71      	ldr	r3, [pc, #452]	@ (8007c88 <_dtoa_r+0x5d0>)
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	f7f8 fbe0 	bl	8000288 <__aeabi_dsub>
 8007ac8:	4602      	mov	r2, r0
 8007aca:	460b      	mov	r3, r1
 8007acc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007ad0:	462a      	mov	r2, r5
 8007ad2:	4633      	mov	r3, r6
 8007ad4:	f7f9 f820 	bl	8000b18 <__aeabi_dcmpgt>
 8007ad8:	2800      	cmp	r0, #0
 8007ada:	f040 828b 	bne.w	8007ff4 <_dtoa_r+0x93c>
 8007ade:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ae2:	462a      	mov	r2, r5
 8007ae4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007ae8:	f7f8 fff8 	bl	8000adc <__aeabi_dcmplt>
 8007aec:	2800      	cmp	r0, #0
 8007aee:	f040 8128 	bne.w	8007d42 <_dtoa_r+0x68a>
 8007af2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007af6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007afa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	f2c0 815a 	blt.w	8007db6 <_dtoa_r+0x6fe>
 8007b02:	2f0e      	cmp	r7, #14
 8007b04:	f300 8157 	bgt.w	8007db6 <_dtoa_r+0x6fe>
 8007b08:	4b5a      	ldr	r3, [pc, #360]	@ (8007c74 <_dtoa_r+0x5bc>)
 8007b0a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007b0e:	ed93 7b00 	vldr	d7, [r3]
 8007b12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	ed8d 7b00 	vstr	d7, [sp]
 8007b1a:	da03      	bge.n	8007b24 <_dtoa_r+0x46c>
 8007b1c:	9b07      	ldr	r3, [sp, #28]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	f340 8101 	ble.w	8007d26 <_dtoa_r+0x66e>
 8007b24:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007b28:	4656      	mov	r6, sl
 8007b2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b2e:	4620      	mov	r0, r4
 8007b30:	4629      	mov	r1, r5
 8007b32:	f7f8 fe8b 	bl	800084c <__aeabi_ddiv>
 8007b36:	f7f9 f80f 	bl	8000b58 <__aeabi_d2iz>
 8007b3a:	4680      	mov	r8, r0
 8007b3c:	f7f8 fcf2 	bl	8000524 <__aeabi_i2d>
 8007b40:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b44:	f7f8 fd58 	bl	80005f8 <__aeabi_dmul>
 8007b48:	4602      	mov	r2, r0
 8007b4a:	460b      	mov	r3, r1
 8007b4c:	4620      	mov	r0, r4
 8007b4e:	4629      	mov	r1, r5
 8007b50:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007b54:	f7f8 fb98 	bl	8000288 <__aeabi_dsub>
 8007b58:	f806 4b01 	strb.w	r4, [r6], #1
 8007b5c:	9d07      	ldr	r5, [sp, #28]
 8007b5e:	eba6 040a 	sub.w	r4, r6, sl
 8007b62:	42a5      	cmp	r5, r4
 8007b64:	4602      	mov	r2, r0
 8007b66:	460b      	mov	r3, r1
 8007b68:	f040 8117 	bne.w	8007d9a <_dtoa_r+0x6e2>
 8007b6c:	f7f8 fb8e 	bl	800028c <__adddf3>
 8007b70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b74:	4604      	mov	r4, r0
 8007b76:	460d      	mov	r5, r1
 8007b78:	f7f8 ffce 	bl	8000b18 <__aeabi_dcmpgt>
 8007b7c:	2800      	cmp	r0, #0
 8007b7e:	f040 80f9 	bne.w	8007d74 <_dtoa_r+0x6bc>
 8007b82:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b86:	4620      	mov	r0, r4
 8007b88:	4629      	mov	r1, r5
 8007b8a:	f7f8 ff9d 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b8e:	b118      	cbz	r0, 8007b98 <_dtoa_r+0x4e0>
 8007b90:	f018 0f01 	tst.w	r8, #1
 8007b94:	f040 80ee 	bne.w	8007d74 <_dtoa_r+0x6bc>
 8007b98:	4649      	mov	r1, r9
 8007b9a:	4658      	mov	r0, fp
 8007b9c:	f000 fc90 	bl	80084c0 <_Bfree>
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	7033      	strb	r3, [r6, #0]
 8007ba4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007ba6:	3701      	adds	r7, #1
 8007ba8:	601f      	str	r7, [r3, #0]
 8007baa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	f000 831d 	beq.w	80081ec <_dtoa_r+0xb34>
 8007bb2:	601e      	str	r6, [r3, #0]
 8007bb4:	e31a      	b.n	80081ec <_dtoa_r+0xb34>
 8007bb6:	07e2      	lsls	r2, r4, #31
 8007bb8:	d505      	bpl.n	8007bc6 <_dtoa_r+0x50e>
 8007bba:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007bbe:	f7f8 fd1b 	bl	80005f8 <__aeabi_dmul>
 8007bc2:	3601      	adds	r6, #1
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	1064      	asrs	r4, r4, #1
 8007bc8:	3508      	adds	r5, #8
 8007bca:	e73f      	b.n	8007a4c <_dtoa_r+0x394>
 8007bcc:	2602      	movs	r6, #2
 8007bce:	e742      	b.n	8007a56 <_dtoa_r+0x39e>
 8007bd0:	9c07      	ldr	r4, [sp, #28]
 8007bd2:	9704      	str	r7, [sp, #16]
 8007bd4:	e761      	b.n	8007a9a <_dtoa_r+0x3e2>
 8007bd6:	4b27      	ldr	r3, [pc, #156]	@ (8007c74 <_dtoa_r+0x5bc>)
 8007bd8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007bda:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007bde:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007be2:	4454      	add	r4, sl
 8007be4:	2900      	cmp	r1, #0
 8007be6:	d053      	beq.n	8007c90 <_dtoa_r+0x5d8>
 8007be8:	4928      	ldr	r1, [pc, #160]	@ (8007c8c <_dtoa_r+0x5d4>)
 8007bea:	2000      	movs	r0, #0
 8007bec:	f7f8 fe2e 	bl	800084c <__aeabi_ddiv>
 8007bf0:	4633      	mov	r3, r6
 8007bf2:	462a      	mov	r2, r5
 8007bf4:	f7f8 fb48 	bl	8000288 <__aeabi_dsub>
 8007bf8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007bfc:	4656      	mov	r6, sl
 8007bfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c02:	f7f8 ffa9 	bl	8000b58 <__aeabi_d2iz>
 8007c06:	4605      	mov	r5, r0
 8007c08:	f7f8 fc8c 	bl	8000524 <__aeabi_i2d>
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	460b      	mov	r3, r1
 8007c10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c14:	f7f8 fb38 	bl	8000288 <__aeabi_dsub>
 8007c18:	3530      	adds	r5, #48	@ 0x30
 8007c1a:	4602      	mov	r2, r0
 8007c1c:	460b      	mov	r3, r1
 8007c1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007c22:	f806 5b01 	strb.w	r5, [r6], #1
 8007c26:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007c2a:	f7f8 ff57 	bl	8000adc <__aeabi_dcmplt>
 8007c2e:	2800      	cmp	r0, #0
 8007c30:	d171      	bne.n	8007d16 <_dtoa_r+0x65e>
 8007c32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c36:	4911      	ldr	r1, [pc, #68]	@ (8007c7c <_dtoa_r+0x5c4>)
 8007c38:	2000      	movs	r0, #0
 8007c3a:	f7f8 fb25 	bl	8000288 <__aeabi_dsub>
 8007c3e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007c42:	f7f8 ff4b 	bl	8000adc <__aeabi_dcmplt>
 8007c46:	2800      	cmp	r0, #0
 8007c48:	f040 8095 	bne.w	8007d76 <_dtoa_r+0x6be>
 8007c4c:	42a6      	cmp	r6, r4
 8007c4e:	f43f af50 	beq.w	8007af2 <_dtoa_r+0x43a>
 8007c52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007c56:	4b0a      	ldr	r3, [pc, #40]	@ (8007c80 <_dtoa_r+0x5c8>)
 8007c58:	2200      	movs	r2, #0
 8007c5a:	f7f8 fccd 	bl	80005f8 <__aeabi_dmul>
 8007c5e:	4b08      	ldr	r3, [pc, #32]	@ (8007c80 <_dtoa_r+0x5c8>)
 8007c60:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007c64:	2200      	movs	r2, #0
 8007c66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c6a:	f7f8 fcc5 	bl	80005f8 <__aeabi_dmul>
 8007c6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c72:	e7c4      	b.n	8007bfe <_dtoa_r+0x546>
 8007c74:	080154c8 	.word	0x080154c8
 8007c78:	080154a0 	.word	0x080154a0
 8007c7c:	3ff00000 	.word	0x3ff00000
 8007c80:	40240000 	.word	0x40240000
 8007c84:	401c0000 	.word	0x401c0000
 8007c88:	40140000 	.word	0x40140000
 8007c8c:	3fe00000 	.word	0x3fe00000
 8007c90:	4631      	mov	r1, r6
 8007c92:	4628      	mov	r0, r5
 8007c94:	f7f8 fcb0 	bl	80005f8 <__aeabi_dmul>
 8007c98:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007c9c:	9415      	str	r4, [sp, #84]	@ 0x54
 8007c9e:	4656      	mov	r6, sl
 8007ca0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ca4:	f7f8 ff58 	bl	8000b58 <__aeabi_d2iz>
 8007ca8:	4605      	mov	r5, r0
 8007caa:	f7f8 fc3b 	bl	8000524 <__aeabi_i2d>
 8007cae:	4602      	mov	r2, r0
 8007cb0:	460b      	mov	r3, r1
 8007cb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cb6:	f7f8 fae7 	bl	8000288 <__aeabi_dsub>
 8007cba:	3530      	adds	r5, #48	@ 0x30
 8007cbc:	f806 5b01 	strb.w	r5, [r6], #1
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	460b      	mov	r3, r1
 8007cc4:	42a6      	cmp	r6, r4
 8007cc6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007cca:	f04f 0200 	mov.w	r2, #0
 8007cce:	d124      	bne.n	8007d1a <_dtoa_r+0x662>
 8007cd0:	4bac      	ldr	r3, [pc, #688]	@ (8007f84 <_dtoa_r+0x8cc>)
 8007cd2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007cd6:	f7f8 fad9 	bl	800028c <__adddf3>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	460b      	mov	r3, r1
 8007cde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ce2:	f7f8 ff19 	bl	8000b18 <__aeabi_dcmpgt>
 8007ce6:	2800      	cmp	r0, #0
 8007ce8:	d145      	bne.n	8007d76 <_dtoa_r+0x6be>
 8007cea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007cee:	49a5      	ldr	r1, [pc, #660]	@ (8007f84 <_dtoa_r+0x8cc>)
 8007cf0:	2000      	movs	r0, #0
 8007cf2:	f7f8 fac9 	bl	8000288 <__aeabi_dsub>
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	460b      	mov	r3, r1
 8007cfa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cfe:	f7f8 feed 	bl	8000adc <__aeabi_dcmplt>
 8007d02:	2800      	cmp	r0, #0
 8007d04:	f43f aef5 	beq.w	8007af2 <_dtoa_r+0x43a>
 8007d08:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007d0a:	1e73      	subs	r3, r6, #1
 8007d0c:	9315      	str	r3, [sp, #84]	@ 0x54
 8007d0e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007d12:	2b30      	cmp	r3, #48	@ 0x30
 8007d14:	d0f8      	beq.n	8007d08 <_dtoa_r+0x650>
 8007d16:	9f04      	ldr	r7, [sp, #16]
 8007d18:	e73e      	b.n	8007b98 <_dtoa_r+0x4e0>
 8007d1a:	4b9b      	ldr	r3, [pc, #620]	@ (8007f88 <_dtoa_r+0x8d0>)
 8007d1c:	f7f8 fc6c 	bl	80005f8 <__aeabi_dmul>
 8007d20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d24:	e7bc      	b.n	8007ca0 <_dtoa_r+0x5e8>
 8007d26:	d10c      	bne.n	8007d42 <_dtoa_r+0x68a>
 8007d28:	4b98      	ldr	r3, [pc, #608]	@ (8007f8c <_dtoa_r+0x8d4>)
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d30:	f7f8 fc62 	bl	80005f8 <__aeabi_dmul>
 8007d34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d38:	f7f8 fee4 	bl	8000b04 <__aeabi_dcmpge>
 8007d3c:	2800      	cmp	r0, #0
 8007d3e:	f000 8157 	beq.w	8007ff0 <_dtoa_r+0x938>
 8007d42:	2400      	movs	r4, #0
 8007d44:	4625      	mov	r5, r4
 8007d46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d48:	43db      	mvns	r3, r3
 8007d4a:	9304      	str	r3, [sp, #16]
 8007d4c:	4656      	mov	r6, sl
 8007d4e:	2700      	movs	r7, #0
 8007d50:	4621      	mov	r1, r4
 8007d52:	4658      	mov	r0, fp
 8007d54:	f000 fbb4 	bl	80084c0 <_Bfree>
 8007d58:	2d00      	cmp	r5, #0
 8007d5a:	d0dc      	beq.n	8007d16 <_dtoa_r+0x65e>
 8007d5c:	b12f      	cbz	r7, 8007d6a <_dtoa_r+0x6b2>
 8007d5e:	42af      	cmp	r7, r5
 8007d60:	d003      	beq.n	8007d6a <_dtoa_r+0x6b2>
 8007d62:	4639      	mov	r1, r7
 8007d64:	4658      	mov	r0, fp
 8007d66:	f000 fbab 	bl	80084c0 <_Bfree>
 8007d6a:	4629      	mov	r1, r5
 8007d6c:	4658      	mov	r0, fp
 8007d6e:	f000 fba7 	bl	80084c0 <_Bfree>
 8007d72:	e7d0      	b.n	8007d16 <_dtoa_r+0x65e>
 8007d74:	9704      	str	r7, [sp, #16]
 8007d76:	4633      	mov	r3, r6
 8007d78:	461e      	mov	r6, r3
 8007d7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d7e:	2a39      	cmp	r2, #57	@ 0x39
 8007d80:	d107      	bne.n	8007d92 <_dtoa_r+0x6da>
 8007d82:	459a      	cmp	sl, r3
 8007d84:	d1f8      	bne.n	8007d78 <_dtoa_r+0x6c0>
 8007d86:	9a04      	ldr	r2, [sp, #16]
 8007d88:	3201      	adds	r2, #1
 8007d8a:	9204      	str	r2, [sp, #16]
 8007d8c:	2230      	movs	r2, #48	@ 0x30
 8007d8e:	f88a 2000 	strb.w	r2, [sl]
 8007d92:	781a      	ldrb	r2, [r3, #0]
 8007d94:	3201      	adds	r2, #1
 8007d96:	701a      	strb	r2, [r3, #0]
 8007d98:	e7bd      	b.n	8007d16 <_dtoa_r+0x65e>
 8007d9a:	4b7b      	ldr	r3, [pc, #492]	@ (8007f88 <_dtoa_r+0x8d0>)
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	f7f8 fc2b 	bl	80005f8 <__aeabi_dmul>
 8007da2:	2200      	movs	r2, #0
 8007da4:	2300      	movs	r3, #0
 8007da6:	4604      	mov	r4, r0
 8007da8:	460d      	mov	r5, r1
 8007daa:	f7f8 fe8d 	bl	8000ac8 <__aeabi_dcmpeq>
 8007dae:	2800      	cmp	r0, #0
 8007db0:	f43f aebb 	beq.w	8007b2a <_dtoa_r+0x472>
 8007db4:	e6f0      	b.n	8007b98 <_dtoa_r+0x4e0>
 8007db6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007db8:	2a00      	cmp	r2, #0
 8007dba:	f000 80db 	beq.w	8007f74 <_dtoa_r+0x8bc>
 8007dbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007dc0:	2a01      	cmp	r2, #1
 8007dc2:	f300 80bf 	bgt.w	8007f44 <_dtoa_r+0x88c>
 8007dc6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007dc8:	2a00      	cmp	r2, #0
 8007dca:	f000 80b7 	beq.w	8007f3c <_dtoa_r+0x884>
 8007dce:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007dd2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007dd4:	4646      	mov	r6, r8
 8007dd6:	9a08      	ldr	r2, [sp, #32]
 8007dd8:	2101      	movs	r1, #1
 8007dda:	441a      	add	r2, r3
 8007ddc:	4658      	mov	r0, fp
 8007dde:	4498      	add	r8, r3
 8007de0:	9208      	str	r2, [sp, #32]
 8007de2:	f000 fc6b 	bl	80086bc <__i2b>
 8007de6:	4605      	mov	r5, r0
 8007de8:	b15e      	cbz	r6, 8007e02 <_dtoa_r+0x74a>
 8007dea:	9b08      	ldr	r3, [sp, #32]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	dd08      	ble.n	8007e02 <_dtoa_r+0x74a>
 8007df0:	42b3      	cmp	r3, r6
 8007df2:	9a08      	ldr	r2, [sp, #32]
 8007df4:	bfa8      	it	ge
 8007df6:	4633      	movge	r3, r6
 8007df8:	eba8 0803 	sub.w	r8, r8, r3
 8007dfc:	1af6      	subs	r6, r6, r3
 8007dfe:	1ad3      	subs	r3, r2, r3
 8007e00:	9308      	str	r3, [sp, #32]
 8007e02:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e04:	b1f3      	cbz	r3, 8007e44 <_dtoa_r+0x78c>
 8007e06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	f000 80b7 	beq.w	8007f7c <_dtoa_r+0x8c4>
 8007e0e:	b18c      	cbz	r4, 8007e34 <_dtoa_r+0x77c>
 8007e10:	4629      	mov	r1, r5
 8007e12:	4622      	mov	r2, r4
 8007e14:	4658      	mov	r0, fp
 8007e16:	f000 fd11 	bl	800883c <__pow5mult>
 8007e1a:	464a      	mov	r2, r9
 8007e1c:	4601      	mov	r1, r0
 8007e1e:	4605      	mov	r5, r0
 8007e20:	4658      	mov	r0, fp
 8007e22:	f000 fc61 	bl	80086e8 <__multiply>
 8007e26:	4649      	mov	r1, r9
 8007e28:	9004      	str	r0, [sp, #16]
 8007e2a:	4658      	mov	r0, fp
 8007e2c:	f000 fb48 	bl	80084c0 <_Bfree>
 8007e30:	9b04      	ldr	r3, [sp, #16]
 8007e32:	4699      	mov	r9, r3
 8007e34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e36:	1b1a      	subs	r2, r3, r4
 8007e38:	d004      	beq.n	8007e44 <_dtoa_r+0x78c>
 8007e3a:	4649      	mov	r1, r9
 8007e3c:	4658      	mov	r0, fp
 8007e3e:	f000 fcfd 	bl	800883c <__pow5mult>
 8007e42:	4681      	mov	r9, r0
 8007e44:	2101      	movs	r1, #1
 8007e46:	4658      	mov	r0, fp
 8007e48:	f000 fc38 	bl	80086bc <__i2b>
 8007e4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e4e:	4604      	mov	r4, r0
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	f000 81cf 	beq.w	80081f4 <_dtoa_r+0xb3c>
 8007e56:	461a      	mov	r2, r3
 8007e58:	4601      	mov	r1, r0
 8007e5a:	4658      	mov	r0, fp
 8007e5c:	f000 fcee 	bl	800883c <__pow5mult>
 8007e60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e62:	2b01      	cmp	r3, #1
 8007e64:	4604      	mov	r4, r0
 8007e66:	f300 8095 	bgt.w	8007f94 <_dtoa_r+0x8dc>
 8007e6a:	9b02      	ldr	r3, [sp, #8]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	f040 8087 	bne.w	8007f80 <_dtoa_r+0x8c8>
 8007e72:	9b03      	ldr	r3, [sp, #12]
 8007e74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	f040 8089 	bne.w	8007f90 <_dtoa_r+0x8d8>
 8007e7e:	9b03      	ldr	r3, [sp, #12]
 8007e80:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007e84:	0d1b      	lsrs	r3, r3, #20
 8007e86:	051b      	lsls	r3, r3, #20
 8007e88:	b12b      	cbz	r3, 8007e96 <_dtoa_r+0x7de>
 8007e8a:	9b08      	ldr	r3, [sp, #32]
 8007e8c:	3301      	adds	r3, #1
 8007e8e:	9308      	str	r3, [sp, #32]
 8007e90:	f108 0801 	add.w	r8, r8, #1
 8007e94:	2301      	movs	r3, #1
 8007e96:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	f000 81b0 	beq.w	8008200 <_dtoa_r+0xb48>
 8007ea0:	6923      	ldr	r3, [r4, #16]
 8007ea2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007ea6:	6918      	ldr	r0, [r3, #16]
 8007ea8:	f000 fbbc 	bl	8008624 <__hi0bits>
 8007eac:	f1c0 0020 	rsb	r0, r0, #32
 8007eb0:	9b08      	ldr	r3, [sp, #32]
 8007eb2:	4418      	add	r0, r3
 8007eb4:	f010 001f 	ands.w	r0, r0, #31
 8007eb8:	d077      	beq.n	8007faa <_dtoa_r+0x8f2>
 8007eba:	f1c0 0320 	rsb	r3, r0, #32
 8007ebe:	2b04      	cmp	r3, #4
 8007ec0:	dd6b      	ble.n	8007f9a <_dtoa_r+0x8e2>
 8007ec2:	9b08      	ldr	r3, [sp, #32]
 8007ec4:	f1c0 001c 	rsb	r0, r0, #28
 8007ec8:	4403      	add	r3, r0
 8007eca:	4480      	add	r8, r0
 8007ecc:	4406      	add	r6, r0
 8007ece:	9308      	str	r3, [sp, #32]
 8007ed0:	f1b8 0f00 	cmp.w	r8, #0
 8007ed4:	dd05      	ble.n	8007ee2 <_dtoa_r+0x82a>
 8007ed6:	4649      	mov	r1, r9
 8007ed8:	4642      	mov	r2, r8
 8007eda:	4658      	mov	r0, fp
 8007edc:	f000 fd08 	bl	80088f0 <__lshift>
 8007ee0:	4681      	mov	r9, r0
 8007ee2:	9b08      	ldr	r3, [sp, #32]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	dd05      	ble.n	8007ef4 <_dtoa_r+0x83c>
 8007ee8:	4621      	mov	r1, r4
 8007eea:	461a      	mov	r2, r3
 8007eec:	4658      	mov	r0, fp
 8007eee:	f000 fcff 	bl	80088f0 <__lshift>
 8007ef2:	4604      	mov	r4, r0
 8007ef4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d059      	beq.n	8007fae <_dtoa_r+0x8f6>
 8007efa:	4621      	mov	r1, r4
 8007efc:	4648      	mov	r0, r9
 8007efe:	f000 fd63 	bl	80089c8 <__mcmp>
 8007f02:	2800      	cmp	r0, #0
 8007f04:	da53      	bge.n	8007fae <_dtoa_r+0x8f6>
 8007f06:	1e7b      	subs	r3, r7, #1
 8007f08:	9304      	str	r3, [sp, #16]
 8007f0a:	4649      	mov	r1, r9
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	220a      	movs	r2, #10
 8007f10:	4658      	mov	r0, fp
 8007f12:	f000 faf7 	bl	8008504 <__multadd>
 8007f16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f18:	4681      	mov	r9, r0
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	f000 8172 	beq.w	8008204 <_dtoa_r+0xb4c>
 8007f20:	2300      	movs	r3, #0
 8007f22:	4629      	mov	r1, r5
 8007f24:	220a      	movs	r2, #10
 8007f26:	4658      	mov	r0, fp
 8007f28:	f000 faec 	bl	8008504 <__multadd>
 8007f2c:	9b00      	ldr	r3, [sp, #0]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	4605      	mov	r5, r0
 8007f32:	dc67      	bgt.n	8008004 <_dtoa_r+0x94c>
 8007f34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f36:	2b02      	cmp	r3, #2
 8007f38:	dc41      	bgt.n	8007fbe <_dtoa_r+0x906>
 8007f3a:	e063      	b.n	8008004 <_dtoa_r+0x94c>
 8007f3c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007f3e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007f42:	e746      	b.n	8007dd2 <_dtoa_r+0x71a>
 8007f44:	9b07      	ldr	r3, [sp, #28]
 8007f46:	1e5c      	subs	r4, r3, #1
 8007f48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f4a:	42a3      	cmp	r3, r4
 8007f4c:	bfbf      	itttt	lt
 8007f4e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007f50:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007f52:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007f54:	1ae3      	sublt	r3, r4, r3
 8007f56:	bfb4      	ite	lt
 8007f58:	18d2      	addlt	r2, r2, r3
 8007f5a:	1b1c      	subge	r4, r3, r4
 8007f5c:	9b07      	ldr	r3, [sp, #28]
 8007f5e:	bfbc      	itt	lt
 8007f60:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007f62:	2400      	movlt	r4, #0
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	bfb5      	itete	lt
 8007f68:	eba8 0603 	sublt.w	r6, r8, r3
 8007f6c:	9b07      	ldrge	r3, [sp, #28]
 8007f6e:	2300      	movlt	r3, #0
 8007f70:	4646      	movge	r6, r8
 8007f72:	e730      	b.n	8007dd6 <_dtoa_r+0x71e>
 8007f74:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007f76:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007f78:	4646      	mov	r6, r8
 8007f7a:	e735      	b.n	8007de8 <_dtoa_r+0x730>
 8007f7c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007f7e:	e75c      	b.n	8007e3a <_dtoa_r+0x782>
 8007f80:	2300      	movs	r3, #0
 8007f82:	e788      	b.n	8007e96 <_dtoa_r+0x7de>
 8007f84:	3fe00000 	.word	0x3fe00000
 8007f88:	40240000 	.word	0x40240000
 8007f8c:	40140000 	.word	0x40140000
 8007f90:	9b02      	ldr	r3, [sp, #8]
 8007f92:	e780      	b.n	8007e96 <_dtoa_r+0x7de>
 8007f94:	2300      	movs	r3, #0
 8007f96:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f98:	e782      	b.n	8007ea0 <_dtoa_r+0x7e8>
 8007f9a:	d099      	beq.n	8007ed0 <_dtoa_r+0x818>
 8007f9c:	9a08      	ldr	r2, [sp, #32]
 8007f9e:	331c      	adds	r3, #28
 8007fa0:	441a      	add	r2, r3
 8007fa2:	4498      	add	r8, r3
 8007fa4:	441e      	add	r6, r3
 8007fa6:	9208      	str	r2, [sp, #32]
 8007fa8:	e792      	b.n	8007ed0 <_dtoa_r+0x818>
 8007faa:	4603      	mov	r3, r0
 8007fac:	e7f6      	b.n	8007f9c <_dtoa_r+0x8e4>
 8007fae:	9b07      	ldr	r3, [sp, #28]
 8007fb0:	9704      	str	r7, [sp, #16]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	dc20      	bgt.n	8007ff8 <_dtoa_r+0x940>
 8007fb6:	9300      	str	r3, [sp, #0]
 8007fb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fba:	2b02      	cmp	r3, #2
 8007fbc:	dd1e      	ble.n	8007ffc <_dtoa_r+0x944>
 8007fbe:	9b00      	ldr	r3, [sp, #0]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	f47f aec0 	bne.w	8007d46 <_dtoa_r+0x68e>
 8007fc6:	4621      	mov	r1, r4
 8007fc8:	2205      	movs	r2, #5
 8007fca:	4658      	mov	r0, fp
 8007fcc:	f000 fa9a 	bl	8008504 <__multadd>
 8007fd0:	4601      	mov	r1, r0
 8007fd2:	4604      	mov	r4, r0
 8007fd4:	4648      	mov	r0, r9
 8007fd6:	f000 fcf7 	bl	80089c8 <__mcmp>
 8007fda:	2800      	cmp	r0, #0
 8007fdc:	f77f aeb3 	ble.w	8007d46 <_dtoa_r+0x68e>
 8007fe0:	4656      	mov	r6, sl
 8007fe2:	2331      	movs	r3, #49	@ 0x31
 8007fe4:	f806 3b01 	strb.w	r3, [r6], #1
 8007fe8:	9b04      	ldr	r3, [sp, #16]
 8007fea:	3301      	adds	r3, #1
 8007fec:	9304      	str	r3, [sp, #16]
 8007fee:	e6ae      	b.n	8007d4e <_dtoa_r+0x696>
 8007ff0:	9c07      	ldr	r4, [sp, #28]
 8007ff2:	9704      	str	r7, [sp, #16]
 8007ff4:	4625      	mov	r5, r4
 8007ff6:	e7f3      	b.n	8007fe0 <_dtoa_r+0x928>
 8007ff8:	9b07      	ldr	r3, [sp, #28]
 8007ffa:	9300      	str	r3, [sp, #0]
 8007ffc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	f000 8104 	beq.w	800820c <_dtoa_r+0xb54>
 8008004:	2e00      	cmp	r6, #0
 8008006:	dd05      	ble.n	8008014 <_dtoa_r+0x95c>
 8008008:	4629      	mov	r1, r5
 800800a:	4632      	mov	r2, r6
 800800c:	4658      	mov	r0, fp
 800800e:	f000 fc6f 	bl	80088f0 <__lshift>
 8008012:	4605      	mov	r5, r0
 8008014:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008016:	2b00      	cmp	r3, #0
 8008018:	d05a      	beq.n	80080d0 <_dtoa_r+0xa18>
 800801a:	6869      	ldr	r1, [r5, #4]
 800801c:	4658      	mov	r0, fp
 800801e:	f000 fa0f 	bl	8008440 <_Balloc>
 8008022:	4606      	mov	r6, r0
 8008024:	b928      	cbnz	r0, 8008032 <_dtoa_r+0x97a>
 8008026:	4b84      	ldr	r3, [pc, #528]	@ (8008238 <_dtoa_r+0xb80>)
 8008028:	4602      	mov	r2, r0
 800802a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800802e:	f7ff bb5a 	b.w	80076e6 <_dtoa_r+0x2e>
 8008032:	692a      	ldr	r2, [r5, #16]
 8008034:	3202      	adds	r2, #2
 8008036:	0092      	lsls	r2, r2, #2
 8008038:	f105 010c 	add.w	r1, r5, #12
 800803c:	300c      	adds	r0, #12
 800803e:	f7ff fa9e 	bl	800757e <memcpy>
 8008042:	2201      	movs	r2, #1
 8008044:	4631      	mov	r1, r6
 8008046:	4658      	mov	r0, fp
 8008048:	f000 fc52 	bl	80088f0 <__lshift>
 800804c:	f10a 0301 	add.w	r3, sl, #1
 8008050:	9307      	str	r3, [sp, #28]
 8008052:	9b00      	ldr	r3, [sp, #0]
 8008054:	4453      	add	r3, sl
 8008056:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008058:	9b02      	ldr	r3, [sp, #8]
 800805a:	f003 0301 	and.w	r3, r3, #1
 800805e:	462f      	mov	r7, r5
 8008060:	930a      	str	r3, [sp, #40]	@ 0x28
 8008062:	4605      	mov	r5, r0
 8008064:	9b07      	ldr	r3, [sp, #28]
 8008066:	4621      	mov	r1, r4
 8008068:	3b01      	subs	r3, #1
 800806a:	4648      	mov	r0, r9
 800806c:	9300      	str	r3, [sp, #0]
 800806e:	f7ff fa9b 	bl	80075a8 <quorem>
 8008072:	4639      	mov	r1, r7
 8008074:	9002      	str	r0, [sp, #8]
 8008076:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800807a:	4648      	mov	r0, r9
 800807c:	f000 fca4 	bl	80089c8 <__mcmp>
 8008080:	462a      	mov	r2, r5
 8008082:	9008      	str	r0, [sp, #32]
 8008084:	4621      	mov	r1, r4
 8008086:	4658      	mov	r0, fp
 8008088:	f000 fcba 	bl	8008a00 <__mdiff>
 800808c:	68c2      	ldr	r2, [r0, #12]
 800808e:	4606      	mov	r6, r0
 8008090:	bb02      	cbnz	r2, 80080d4 <_dtoa_r+0xa1c>
 8008092:	4601      	mov	r1, r0
 8008094:	4648      	mov	r0, r9
 8008096:	f000 fc97 	bl	80089c8 <__mcmp>
 800809a:	4602      	mov	r2, r0
 800809c:	4631      	mov	r1, r6
 800809e:	4658      	mov	r0, fp
 80080a0:	920e      	str	r2, [sp, #56]	@ 0x38
 80080a2:	f000 fa0d 	bl	80084c0 <_Bfree>
 80080a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080a8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80080aa:	9e07      	ldr	r6, [sp, #28]
 80080ac:	ea43 0102 	orr.w	r1, r3, r2
 80080b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80080b2:	4319      	orrs	r1, r3
 80080b4:	d110      	bne.n	80080d8 <_dtoa_r+0xa20>
 80080b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80080ba:	d029      	beq.n	8008110 <_dtoa_r+0xa58>
 80080bc:	9b08      	ldr	r3, [sp, #32]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	dd02      	ble.n	80080c8 <_dtoa_r+0xa10>
 80080c2:	9b02      	ldr	r3, [sp, #8]
 80080c4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80080c8:	9b00      	ldr	r3, [sp, #0]
 80080ca:	f883 8000 	strb.w	r8, [r3]
 80080ce:	e63f      	b.n	8007d50 <_dtoa_r+0x698>
 80080d0:	4628      	mov	r0, r5
 80080d2:	e7bb      	b.n	800804c <_dtoa_r+0x994>
 80080d4:	2201      	movs	r2, #1
 80080d6:	e7e1      	b.n	800809c <_dtoa_r+0x9e4>
 80080d8:	9b08      	ldr	r3, [sp, #32]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	db04      	blt.n	80080e8 <_dtoa_r+0xa30>
 80080de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80080e0:	430b      	orrs	r3, r1
 80080e2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80080e4:	430b      	orrs	r3, r1
 80080e6:	d120      	bne.n	800812a <_dtoa_r+0xa72>
 80080e8:	2a00      	cmp	r2, #0
 80080ea:	dded      	ble.n	80080c8 <_dtoa_r+0xa10>
 80080ec:	4649      	mov	r1, r9
 80080ee:	2201      	movs	r2, #1
 80080f0:	4658      	mov	r0, fp
 80080f2:	f000 fbfd 	bl	80088f0 <__lshift>
 80080f6:	4621      	mov	r1, r4
 80080f8:	4681      	mov	r9, r0
 80080fa:	f000 fc65 	bl	80089c8 <__mcmp>
 80080fe:	2800      	cmp	r0, #0
 8008100:	dc03      	bgt.n	800810a <_dtoa_r+0xa52>
 8008102:	d1e1      	bne.n	80080c8 <_dtoa_r+0xa10>
 8008104:	f018 0f01 	tst.w	r8, #1
 8008108:	d0de      	beq.n	80080c8 <_dtoa_r+0xa10>
 800810a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800810e:	d1d8      	bne.n	80080c2 <_dtoa_r+0xa0a>
 8008110:	9a00      	ldr	r2, [sp, #0]
 8008112:	2339      	movs	r3, #57	@ 0x39
 8008114:	7013      	strb	r3, [r2, #0]
 8008116:	4633      	mov	r3, r6
 8008118:	461e      	mov	r6, r3
 800811a:	3b01      	subs	r3, #1
 800811c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008120:	2a39      	cmp	r2, #57	@ 0x39
 8008122:	d052      	beq.n	80081ca <_dtoa_r+0xb12>
 8008124:	3201      	adds	r2, #1
 8008126:	701a      	strb	r2, [r3, #0]
 8008128:	e612      	b.n	8007d50 <_dtoa_r+0x698>
 800812a:	2a00      	cmp	r2, #0
 800812c:	dd07      	ble.n	800813e <_dtoa_r+0xa86>
 800812e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008132:	d0ed      	beq.n	8008110 <_dtoa_r+0xa58>
 8008134:	9a00      	ldr	r2, [sp, #0]
 8008136:	f108 0301 	add.w	r3, r8, #1
 800813a:	7013      	strb	r3, [r2, #0]
 800813c:	e608      	b.n	8007d50 <_dtoa_r+0x698>
 800813e:	9b07      	ldr	r3, [sp, #28]
 8008140:	9a07      	ldr	r2, [sp, #28]
 8008142:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008146:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008148:	4293      	cmp	r3, r2
 800814a:	d028      	beq.n	800819e <_dtoa_r+0xae6>
 800814c:	4649      	mov	r1, r9
 800814e:	2300      	movs	r3, #0
 8008150:	220a      	movs	r2, #10
 8008152:	4658      	mov	r0, fp
 8008154:	f000 f9d6 	bl	8008504 <__multadd>
 8008158:	42af      	cmp	r7, r5
 800815a:	4681      	mov	r9, r0
 800815c:	f04f 0300 	mov.w	r3, #0
 8008160:	f04f 020a 	mov.w	r2, #10
 8008164:	4639      	mov	r1, r7
 8008166:	4658      	mov	r0, fp
 8008168:	d107      	bne.n	800817a <_dtoa_r+0xac2>
 800816a:	f000 f9cb 	bl	8008504 <__multadd>
 800816e:	4607      	mov	r7, r0
 8008170:	4605      	mov	r5, r0
 8008172:	9b07      	ldr	r3, [sp, #28]
 8008174:	3301      	adds	r3, #1
 8008176:	9307      	str	r3, [sp, #28]
 8008178:	e774      	b.n	8008064 <_dtoa_r+0x9ac>
 800817a:	f000 f9c3 	bl	8008504 <__multadd>
 800817e:	4629      	mov	r1, r5
 8008180:	4607      	mov	r7, r0
 8008182:	2300      	movs	r3, #0
 8008184:	220a      	movs	r2, #10
 8008186:	4658      	mov	r0, fp
 8008188:	f000 f9bc 	bl	8008504 <__multadd>
 800818c:	4605      	mov	r5, r0
 800818e:	e7f0      	b.n	8008172 <_dtoa_r+0xaba>
 8008190:	9b00      	ldr	r3, [sp, #0]
 8008192:	2b00      	cmp	r3, #0
 8008194:	bfcc      	ite	gt
 8008196:	461e      	movgt	r6, r3
 8008198:	2601      	movle	r6, #1
 800819a:	4456      	add	r6, sl
 800819c:	2700      	movs	r7, #0
 800819e:	4649      	mov	r1, r9
 80081a0:	2201      	movs	r2, #1
 80081a2:	4658      	mov	r0, fp
 80081a4:	f000 fba4 	bl	80088f0 <__lshift>
 80081a8:	4621      	mov	r1, r4
 80081aa:	4681      	mov	r9, r0
 80081ac:	f000 fc0c 	bl	80089c8 <__mcmp>
 80081b0:	2800      	cmp	r0, #0
 80081b2:	dcb0      	bgt.n	8008116 <_dtoa_r+0xa5e>
 80081b4:	d102      	bne.n	80081bc <_dtoa_r+0xb04>
 80081b6:	f018 0f01 	tst.w	r8, #1
 80081ba:	d1ac      	bne.n	8008116 <_dtoa_r+0xa5e>
 80081bc:	4633      	mov	r3, r6
 80081be:	461e      	mov	r6, r3
 80081c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80081c4:	2a30      	cmp	r2, #48	@ 0x30
 80081c6:	d0fa      	beq.n	80081be <_dtoa_r+0xb06>
 80081c8:	e5c2      	b.n	8007d50 <_dtoa_r+0x698>
 80081ca:	459a      	cmp	sl, r3
 80081cc:	d1a4      	bne.n	8008118 <_dtoa_r+0xa60>
 80081ce:	9b04      	ldr	r3, [sp, #16]
 80081d0:	3301      	adds	r3, #1
 80081d2:	9304      	str	r3, [sp, #16]
 80081d4:	2331      	movs	r3, #49	@ 0x31
 80081d6:	f88a 3000 	strb.w	r3, [sl]
 80081da:	e5b9      	b.n	8007d50 <_dtoa_r+0x698>
 80081dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80081de:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800823c <_dtoa_r+0xb84>
 80081e2:	b11b      	cbz	r3, 80081ec <_dtoa_r+0xb34>
 80081e4:	f10a 0308 	add.w	r3, sl, #8
 80081e8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80081ea:	6013      	str	r3, [r2, #0]
 80081ec:	4650      	mov	r0, sl
 80081ee:	b019      	add	sp, #100	@ 0x64
 80081f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	f77f ae37 	ble.w	8007e6a <_dtoa_r+0x7b2>
 80081fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80081fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8008200:	2001      	movs	r0, #1
 8008202:	e655      	b.n	8007eb0 <_dtoa_r+0x7f8>
 8008204:	9b00      	ldr	r3, [sp, #0]
 8008206:	2b00      	cmp	r3, #0
 8008208:	f77f aed6 	ble.w	8007fb8 <_dtoa_r+0x900>
 800820c:	4656      	mov	r6, sl
 800820e:	4621      	mov	r1, r4
 8008210:	4648      	mov	r0, r9
 8008212:	f7ff f9c9 	bl	80075a8 <quorem>
 8008216:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800821a:	f806 8b01 	strb.w	r8, [r6], #1
 800821e:	9b00      	ldr	r3, [sp, #0]
 8008220:	eba6 020a 	sub.w	r2, r6, sl
 8008224:	4293      	cmp	r3, r2
 8008226:	ddb3      	ble.n	8008190 <_dtoa_r+0xad8>
 8008228:	4649      	mov	r1, r9
 800822a:	2300      	movs	r3, #0
 800822c:	220a      	movs	r2, #10
 800822e:	4658      	mov	r0, fp
 8008230:	f000 f968 	bl	8008504 <__multadd>
 8008234:	4681      	mov	r9, r0
 8008236:	e7ea      	b.n	800820e <_dtoa_r+0xb56>
 8008238:	08015429 	.word	0x08015429
 800823c:	080153ad 	.word	0x080153ad

08008240 <_free_r>:
 8008240:	b538      	push	{r3, r4, r5, lr}
 8008242:	4605      	mov	r5, r0
 8008244:	2900      	cmp	r1, #0
 8008246:	d041      	beq.n	80082cc <_free_r+0x8c>
 8008248:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800824c:	1f0c      	subs	r4, r1, #4
 800824e:	2b00      	cmp	r3, #0
 8008250:	bfb8      	it	lt
 8008252:	18e4      	addlt	r4, r4, r3
 8008254:	f000 f8e8 	bl	8008428 <__malloc_lock>
 8008258:	4a1d      	ldr	r2, [pc, #116]	@ (80082d0 <_free_r+0x90>)
 800825a:	6813      	ldr	r3, [r2, #0]
 800825c:	b933      	cbnz	r3, 800826c <_free_r+0x2c>
 800825e:	6063      	str	r3, [r4, #4]
 8008260:	6014      	str	r4, [r2, #0]
 8008262:	4628      	mov	r0, r5
 8008264:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008268:	f000 b8e4 	b.w	8008434 <__malloc_unlock>
 800826c:	42a3      	cmp	r3, r4
 800826e:	d908      	bls.n	8008282 <_free_r+0x42>
 8008270:	6820      	ldr	r0, [r4, #0]
 8008272:	1821      	adds	r1, r4, r0
 8008274:	428b      	cmp	r3, r1
 8008276:	bf01      	itttt	eq
 8008278:	6819      	ldreq	r1, [r3, #0]
 800827a:	685b      	ldreq	r3, [r3, #4]
 800827c:	1809      	addeq	r1, r1, r0
 800827e:	6021      	streq	r1, [r4, #0]
 8008280:	e7ed      	b.n	800825e <_free_r+0x1e>
 8008282:	461a      	mov	r2, r3
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	b10b      	cbz	r3, 800828c <_free_r+0x4c>
 8008288:	42a3      	cmp	r3, r4
 800828a:	d9fa      	bls.n	8008282 <_free_r+0x42>
 800828c:	6811      	ldr	r1, [r2, #0]
 800828e:	1850      	adds	r0, r2, r1
 8008290:	42a0      	cmp	r0, r4
 8008292:	d10b      	bne.n	80082ac <_free_r+0x6c>
 8008294:	6820      	ldr	r0, [r4, #0]
 8008296:	4401      	add	r1, r0
 8008298:	1850      	adds	r0, r2, r1
 800829a:	4283      	cmp	r3, r0
 800829c:	6011      	str	r1, [r2, #0]
 800829e:	d1e0      	bne.n	8008262 <_free_r+0x22>
 80082a0:	6818      	ldr	r0, [r3, #0]
 80082a2:	685b      	ldr	r3, [r3, #4]
 80082a4:	6053      	str	r3, [r2, #4]
 80082a6:	4408      	add	r0, r1
 80082a8:	6010      	str	r0, [r2, #0]
 80082aa:	e7da      	b.n	8008262 <_free_r+0x22>
 80082ac:	d902      	bls.n	80082b4 <_free_r+0x74>
 80082ae:	230c      	movs	r3, #12
 80082b0:	602b      	str	r3, [r5, #0]
 80082b2:	e7d6      	b.n	8008262 <_free_r+0x22>
 80082b4:	6820      	ldr	r0, [r4, #0]
 80082b6:	1821      	adds	r1, r4, r0
 80082b8:	428b      	cmp	r3, r1
 80082ba:	bf04      	itt	eq
 80082bc:	6819      	ldreq	r1, [r3, #0]
 80082be:	685b      	ldreq	r3, [r3, #4]
 80082c0:	6063      	str	r3, [r4, #4]
 80082c2:	bf04      	itt	eq
 80082c4:	1809      	addeq	r1, r1, r0
 80082c6:	6021      	streq	r1, [r4, #0]
 80082c8:	6054      	str	r4, [r2, #4]
 80082ca:	e7ca      	b.n	8008262 <_free_r+0x22>
 80082cc:	bd38      	pop	{r3, r4, r5, pc}
 80082ce:	bf00      	nop
 80082d0:	20000914 	.word	0x20000914

080082d4 <malloc>:
 80082d4:	4b02      	ldr	r3, [pc, #8]	@ (80082e0 <malloc+0xc>)
 80082d6:	4601      	mov	r1, r0
 80082d8:	6818      	ldr	r0, [r3, #0]
 80082da:	f000 b825 	b.w	8008328 <_malloc_r>
 80082de:	bf00      	nop
 80082e0:	20000018 	.word	0x20000018

080082e4 <sbrk_aligned>:
 80082e4:	b570      	push	{r4, r5, r6, lr}
 80082e6:	4e0f      	ldr	r6, [pc, #60]	@ (8008324 <sbrk_aligned+0x40>)
 80082e8:	460c      	mov	r4, r1
 80082ea:	6831      	ldr	r1, [r6, #0]
 80082ec:	4605      	mov	r5, r0
 80082ee:	b911      	cbnz	r1, 80082f6 <sbrk_aligned+0x12>
 80082f0:	f001 ffd2 	bl	800a298 <_sbrk_r>
 80082f4:	6030      	str	r0, [r6, #0]
 80082f6:	4621      	mov	r1, r4
 80082f8:	4628      	mov	r0, r5
 80082fa:	f001 ffcd 	bl	800a298 <_sbrk_r>
 80082fe:	1c43      	adds	r3, r0, #1
 8008300:	d103      	bne.n	800830a <sbrk_aligned+0x26>
 8008302:	f04f 34ff 	mov.w	r4, #4294967295
 8008306:	4620      	mov	r0, r4
 8008308:	bd70      	pop	{r4, r5, r6, pc}
 800830a:	1cc4      	adds	r4, r0, #3
 800830c:	f024 0403 	bic.w	r4, r4, #3
 8008310:	42a0      	cmp	r0, r4
 8008312:	d0f8      	beq.n	8008306 <sbrk_aligned+0x22>
 8008314:	1a21      	subs	r1, r4, r0
 8008316:	4628      	mov	r0, r5
 8008318:	f001 ffbe 	bl	800a298 <_sbrk_r>
 800831c:	3001      	adds	r0, #1
 800831e:	d1f2      	bne.n	8008306 <sbrk_aligned+0x22>
 8008320:	e7ef      	b.n	8008302 <sbrk_aligned+0x1e>
 8008322:	bf00      	nop
 8008324:	20000910 	.word	0x20000910

08008328 <_malloc_r>:
 8008328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800832c:	1ccd      	adds	r5, r1, #3
 800832e:	f025 0503 	bic.w	r5, r5, #3
 8008332:	3508      	adds	r5, #8
 8008334:	2d0c      	cmp	r5, #12
 8008336:	bf38      	it	cc
 8008338:	250c      	movcc	r5, #12
 800833a:	2d00      	cmp	r5, #0
 800833c:	4606      	mov	r6, r0
 800833e:	db01      	blt.n	8008344 <_malloc_r+0x1c>
 8008340:	42a9      	cmp	r1, r5
 8008342:	d904      	bls.n	800834e <_malloc_r+0x26>
 8008344:	230c      	movs	r3, #12
 8008346:	6033      	str	r3, [r6, #0]
 8008348:	2000      	movs	r0, #0
 800834a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800834e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008424 <_malloc_r+0xfc>
 8008352:	f000 f869 	bl	8008428 <__malloc_lock>
 8008356:	f8d8 3000 	ldr.w	r3, [r8]
 800835a:	461c      	mov	r4, r3
 800835c:	bb44      	cbnz	r4, 80083b0 <_malloc_r+0x88>
 800835e:	4629      	mov	r1, r5
 8008360:	4630      	mov	r0, r6
 8008362:	f7ff ffbf 	bl	80082e4 <sbrk_aligned>
 8008366:	1c43      	adds	r3, r0, #1
 8008368:	4604      	mov	r4, r0
 800836a:	d158      	bne.n	800841e <_malloc_r+0xf6>
 800836c:	f8d8 4000 	ldr.w	r4, [r8]
 8008370:	4627      	mov	r7, r4
 8008372:	2f00      	cmp	r7, #0
 8008374:	d143      	bne.n	80083fe <_malloc_r+0xd6>
 8008376:	2c00      	cmp	r4, #0
 8008378:	d04b      	beq.n	8008412 <_malloc_r+0xea>
 800837a:	6823      	ldr	r3, [r4, #0]
 800837c:	4639      	mov	r1, r7
 800837e:	4630      	mov	r0, r6
 8008380:	eb04 0903 	add.w	r9, r4, r3
 8008384:	f001 ff88 	bl	800a298 <_sbrk_r>
 8008388:	4581      	cmp	r9, r0
 800838a:	d142      	bne.n	8008412 <_malloc_r+0xea>
 800838c:	6821      	ldr	r1, [r4, #0]
 800838e:	1a6d      	subs	r5, r5, r1
 8008390:	4629      	mov	r1, r5
 8008392:	4630      	mov	r0, r6
 8008394:	f7ff ffa6 	bl	80082e4 <sbrk_aligned>
 8008398:	3001      	adds	r0, #1
 800839a:	d03a      	beq.n	8008412 <_malloc_r+0xea>
 800839c:	6823      	ldr	r3, [r4, #0]
 800839e:	442b      	add	r3, r5
 80083a0:	6023      	str	r3, [r4, #0]
 80083a2:	f8d8 3000 	ldr.w	r3, [r8]
 80083a6:	685a      	ldr	r2, [r3, #4]
 80083a8:	bb62      	cbnz	r2, 8008404 <_malloc_r+0xdc>
 80083aa:	f8c8 7000 	str.w	r7, [r8]
 80083ae:	e00f      	b.n	80083d0 <_malloc_r+0xa8>
 80083b0:	6822      	ldr	r2, [r4, #0]
 80083b2:	1b52      	subs	r2, r2, r5
 80083b4:	d420      	bmi.n	80083f8 <_malloc_r+0xd0>
 80083b6:	2a0b      	cmp	r2, #11
 80083b8:	d917      	bls.n	80083ea <_malloc_r+0xc2>
 80083ba:	1961      	adds	r1, r4, r5
 80083bc:	42a3      	cmp	r3, r4
 80083be:	6025      	str	r5, [r4, #0]
 80083c0:	bf18      	it	ne
 80083c2:	6059      	strne	r1, [r3, #4]
 80083c4:	6863      	ldr	r3, [r4, #4]
 80083c6:	bf08      	it	eq
 80083c8:	f8c8 1000 	streq.w	r1, [r8]
 80083cc:	5162      	str	r2, [r4, r5]
 80083ce:	604b      	str	r3, [r1, #4]
 80083d0:	4630      	mov	r0, r6
 80083d2:	f000 f82f 	bl	8008434 <__malloc_unlock>
 80083d6:	f104 000b 	add.w	r0, r4, #11
 80083da:	1d23      	adds	r3, r4, #4
 80083dc:	f020 0007 	bic.w	r0, r0, #7
 80083e0:	1ac2      	subs	r2, r0, r3
 80083e2:	bf1c      	itt	ne
 80083e4:	1a1b      	subne	r3, r3, r0
 80083e6:	50a3      	strne	r3, [r4, r2]
 80083e8:	e7af      	b.n	800834a <_malloc_r+0x22>
 80083ea:	6862      	ldr	r2, [r4, #4]
 80083ec:	42a3      	cmp	r3, r4
 80083ee:	bf0c      	ite	eq
 80083f0:	f8c8 2000 	streq.w	r2, [r8]
 80083f4:	605a      	strne	r2, [r3, #4]
 80083f6:	e7eb      	b.n	80083d0 <_malloc_r+0xa8>
 80083f8:	4623      	mov	r3, r4
 80083fa:	6864      	ldr	r4, [r4, #4]
 80083fc:	e7ae      	b.n	800835c <_malloc_r+0x34>
 80083fe:	463c      	mov	r4, r7
 8008400:	687f      	ldr	r7, [r7, #4]
 8008402:	e7b6      	b.n	8008372 <_malloc_r+0x4a>
 8008404:	461a      	mov	r2, r3
 8008406:	685b      	ldr	r3, [r3, #4]
 8008408:	42a3      	cmp	r3, r4
 800840a:	d1fb      	bne.n	8008404 <_malloc_r+0xdc>
 800840c:	2300      	movs	r3, #0
 800840e:	6053      	str	r3, [r2, #4]
 8008410:	e7de      	b.n	80083d0 <_malloc_r+0xa8>
 8008412:	230c      	movs	r3, #12
 8008414:	6033      	str	r3, [r6, #0]
 8008416:	4630      	mov	r0, r6
 8008418:	f000 f80c 	bl	8008434 <__malloc_unlock>
 800841c:	e794      	b.n	8008348 <_malloc_r+0x20>
 800841e:	6005      	str	r5, [r0, #0]
 8008420:	e7d6      	b.n	80083d0 <_malloc_r+0xa8>
 8008422:	bf00      	nop
 8008424:	20000914 	.word	0x20000914

08008428 <__malloc_lock>:
 8008428:	4801      	ldr	r0, [pc, #4]	@ (8008430 <__malloc_lock+0x8>)
 800842a:	f7ff b8a6 	b.w	800757a <__retarget_lock_acquire_recursive>
 800842e:	bf00      	nop
 8008430:	2000090c 	.word	0x2000090c

08008434 <__malloc_unlock>:
 8008434:	4801      	ldr	r0, [pc, #4]	@ (800843c <__malloc_unlock+0x8>)
 8008436:	f7ff b8a1 	b.w	800757c <__retarget_lock_release_recursive>
 800843a:	bf00      	nop
 800843c:	2000090c 	.word	0x2000090c

08008440 <_Balloc>:
 8008440:	b570      	push	{r4, r5, r6, lr}
 8008442:	69c6      	ldr	r6, [r0, #28]
 8008444:	4604      	mov	r4, r0
 8008446:	460d      	mov	r5, r1
 8008448:	b976      	cbnz	r6, 8008468 <_Balloc+0x28>
 800844a:	2010      	movs	r0, #16
 800844c:	f7ff ff42 	bl	80082d4 <malloc>
 8008450:	4602      	mov	r2, r0
 8008452:	61e0      	str	r0, [r4, #28]
 8008454:	b920      	cbnz	r0, 8008460 <_Balloc+0x20>
 8008456:	4b18      	ldr	r3, [pc, #96]	@ (80084b8 <_Balloc+0x78>)
 8008458:	4818      	ldr	r0, [pc, #96]	@ (80084bc <_Balloc+0x7c>)
 800845a:	216b      	movs	r1, #107	@ 0x6b
 800845c:	f001 ff34 	bl	800a2c8 <__assert_func>
 8008460:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008464:	6006      	str	r6, [r0, #0]
 8008466:	60c6      	str	r6, [r0, #12]
 8008468:	69e6      	ldr	r6, [r4, #28]
 800846a:	68f3      	ldr	r3, [r6, #12]
 800846c:	b183      	cbz	r3, 8008490 <_Balloc+0x50>
 800846e:	69e3      	ldr	r3, [r4, #28]
 8008470:	68db      	ldr	r3, [r3, #12]
 8008472:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008476:	b9b8      	cbnz	r0, 80084a8 <_Balloc+0x68>
 8008478:	2101      	movs	r1, #1
 800847a:	fa01 f605 	lsl.w	r6, r1, r5
 800847e:	1d72      	adds	r2, r6, #5
 8008480:	0092      	lsls	r2, r2, #2
 8008482:	4620      	mov	r0, r4
 8008484:	f001 ff3e 	bl	800a304 <_calloc_r>
 8008488:	b160      	cbz	r0, 80084a4 <_Balloc+0x64>
 800848a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800848e:	e00e      	b.n	80084ae <_Balloc+0x6e>
 8008490:	2221      	movs	r2, #33	@ 0x21
 8008492:	2104      	movs	r1, #4
 8008494:	4620      	mov	r0, r4
 8008496:	f001 ff35 	bl	800a304 <_calloc_r>
 800849a:	69e3      	ldr	r3, [r4, #28]
 800849c:	60f0      	str	r0, [r6, #12]
 800849e:	68db      	ldr	r3, [r3, #12]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d1e4      	bne.n	800846e <_Balloc+0x2e>
 80084a4:	2000      	movs	r0, #0
 80084a6:	bd70      	pop	{r4, r5, r6, pc}
 80084a8:	6802      	ldr	r2, [r0, #0]
 80084aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80084ae:	2300      	movs	r3, #0
 80084b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80084b4:	e7f7      	b.n	80084a6 <_Balloc+0x66>
 80084b6:	bf00      	nop
 80084b8:	080153ba 	.word	0x080153ba
 80084bc:	0801543a 	.word	0x0801543a

080084c0 <_Bfree>:
 80084c0:	b570      	push	{r4, r5, r6, lr}
 80084c2:	69c6      	ldr	r6, [r0, #28]
 80084c4:	4605      	mov	r5, r0
 80084c6:	460c      	mov	r4, r1
 80084c8:	b976      	cbnz	r6, 80084e8 <_Bfree+0x28>
 80084ca:	2010      	movs	r0, #16
 80084cc:	f7ff ff02 	bl	80082d4 <malloc>
 80084d0:	4602      	mov	r2, r0
 80084d2:	61e8      	str	r0, [r5, #28]
 80084d4:	b920      	cbnz	r0, 80084e0 <_Bfree+0x20>
 80084d6:	4b09      	ldr	r3, [pc, #36]	@ (80084fc <_Bfree+0x3c>)
 80084d8:	4809      	ldr	r0, [pc, #36]	@ (8008500 <_Bfree+0x40>)
 80084da:	218f      	movs	r1, #143	@ 0x8f
 80084dc:	f001 fef4 	bl	800a2c8 <__assert_func>
 80084e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80084e4:	6006      	str	r6, [r0, #0]
 80084e6:	60c6      	str	r6, [r0, #12]
 80084e8:	b13c      	cbz	r4, 80084fa <_Bfree+0x3a>
 80084ea:	69eb      	ldr	r3, [r5, #28]
 80084ec:	6862      	ldr	r2, [r4, #4]
 80084ee:	68db      	ldr	r3, [r3, #12]
 80084f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80084f4:	6021      	str	r1, [r4, #0]
 80084f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80084fa:	bd70      	pop	{r4, r5, r6, pc}
 80084fc:	080153ba 	.word	0x080153ba
 8008500:	0801543a 	.word	0x0801543a

08008504 <__multadd>:
 8008504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008508:	690d      	ldr	r5, [r1, #16]
 800850a:	4607      	mov	r7, r0
 800850c:	460c      	mov	r4, r1
 800850e:	461e      	mov	r6, r3
 8008510:	f101 0c14 	add.w	ip, r1, #20
 8008514:	2000      	movs	r0, #0
 8008516:	f8dc 3000 	ldr.w	r3, [ip]
 800851a:	b299      	uxth	r1, r3
 800851c:	fb02 6101 	mla	r1, r2, r1, r6
 8008520:	0c1e      	lsrs	r6, r3, #16
 8008522:	0c0b      	lsrs	r3, r1, #16
 8008524:	fb02 3306 	mla	r3, r2, r6, r3
 8008528:	b289      	uxth	r1, r1
 800852a:	3001      	adds	r0, #1
 800852c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008530:	4285      	cmp	r5, r0
 8008532:	f84c 1b04 	str.w	r1, [ip], #4
 8008536:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800853a:	dcec      	bgt.n	8008516 <__multadd+0x12>
 800853c:	b30e      	cbz	r6, 8008582 <__multadd+0x7e>
 800853e:	68a3      	ldr	r3, [r4, #8]
 8008540:	42ab      	cmp	r3, r5
 8008542:	dc19      	bgt.n	8008578 <__multadd+0x74>
 8008544:	6861      	ldr	r1, [r4, #4]
 8008546:	4638      	mov	r0, r7
 8008548:	3101      	adds	r1, #1
 800854a:	f7ff ff79 	bl	8008440 <_Balloc>
 800854e:	4680      	mov	r8, r0
 8008550:	b928      	cbnz	r0, 800855e <__multadd+0x5a>
 8008552:	4602      	mov	r2, r0
 8008554:	4b0c      	ldr	r3, [pc, #48]	@ (8008588 <__multadd+0x84>)
 8008556:	480d      	ldr	r0, [pc, #52]	@ (800858c <__multadd+0x88>)
 8008558:	21ba      	movs	r1, #186	@ 0xba
 800855a:	f001 feb5 	bl	800a2c8 <__assert_func>
 800855e:	6922      	ldr	r2, [r4, #16]
 8008560:	3202      	adds	r2, #2
 8008562:	f104 010c 	add.w	r1, r4, #12
 8008566:	0092      	lsls	r2, r2, #2
 8008568:	300c      	adds	r0, #12
 800856a:	f7ff f808 	bl	800757e <memcpy>
 800856e:	4621      	mov	r1, r4
 8008570:	4638      	mov	r0, r7
 8008572:	f7ff ffa5 	bl	80084c0 <_Bfree>
 8008576:	4644      	mov	r4, r8
 8008578:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800857c:	3501      	adds	r5, #1
 800857e:	615e      	str	r6, [r3, #20]
 8008580:	6125      	str	r5, [r4, #16]
 8008582:	4620      	mov	r0, r4
 8008584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008588:	08015429 	.word	0x08015429
 800858c:	0801543a 	.word	0x0801543a

08008590 <__s2b>:
 8008590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008594:	460c      	mov	r4, r1
 8008596:	4615      	mov	r5, r2
 8008598:	461f      	mov	r7, r3
 800859a:	2209      	movs	r2, #9
 800859c:	3308      	adds	r3, #8
 800859e:	4606      	mov	r6, r0
 80085a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80085a4:	2100      	movs	r1, #0
 80085a6:	2201      	movs	r2, #1
 80085a8:	429a      	cmp	r2, r3
 80085aa:	db09      	blt.n	80085c0 <__s2b+0x30>
 80085ac:	4630      	mov	r0, r6
 80085ae:	f7ff ff47 	bl	8008440 <_Balloc>
 80085b2:	b940      	cbnz	r0, 80085c6 <__s2b+0x36>
 80085b4:	4602      	mov	r2, r0
 80085b6:	4b19      	ldr	r3, [pc, #100]	@ (800861c <__s2b+0x8c>)
 80085b8:	4819      	ldr	r0, [pc, #100]	@ (8008620 <__s2b+0x90>)
 80085ba:	21d3      	movs	r1, #211	@ 0xd3
 80085bc:	f001 fe84 	bl	800a2c8 <__assert_func>
 80085c0:	0052      	lsls	r2, r2, #1
 80085c2:	3101      	adds	r1, #1
 80085c4:	e7f0      	b.n	80085a8 <__s2b+0x18>
 80085c6:	9b08      	ldr	r3, [sp, #32]
 80085c8:	6143      	str	r3, [r0, #20]
 80085ca:	2d09      	cmp	r5, #9
 80085cc:	f04f 0301 	mov.w	r3, #1
 80085d0:	6103      	str	r3, [r0, #16]
 80085d2:	dd16      	ble.n	8008602 <__s2b+0x72>
 80085d4:	f104 0909 	add.w	r9, r4, #9
 80085d8:	46c8      	mov	r8, r9
 80085da:	442c      	add	r4, r5
 80085dc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80085e0:	4601      	mov	r1, r0
 80085e2:	3b30      	subs	r3, #48	@ 0x30
 80085e4:	220a      	movs	r2, #10
 80085e6:	4630      	mov	r0, r6
 80085e8:	f7ff ff8c 	bl	8008504 <__multadd>
 80085ec:	45a0      	cmp	r8, r4
 80085ee:	d1f5      	bne.n	80085dc <__s2b+0x4c>
 80085f0:	f1a5 0408 	sub.w	r4, r5, #8
 80085f4:	444c      	add	r4, r9
 80085f6:	1b2d      	subs	r5, r5, r4
 80085f8:	1963      	adds	r3, r4, r5
 80085fa:	42bb      	cmp	r3, r7
 80085fc:	db04      	blt.n	8008608 <__s2b+0x78>
 80085fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008602:	340a      	adds	r4, #10
 8008604:	2509      	movs	r5, #9
 8008606:	e7f6      	b.n	80085f6 <__s2b+0x66>
 8008608:	f814 3b01 	ldrb.w	r3, [r4], #1
 800860c:	4601      	mov	r1, r0
 800860e:	3b30      	subs	r3, #48	@ 0x30
 8008610:	220a      	movs	r2, #10
 8008612:	4630      	mov	r0, r6
 8008614:	f7ff ff76 	bl	8008504 <__multadd>
 8008618:	e7ee      	b.n	80085f8 <__s2b+0x68>
 800861a:	bf00      	nop
 800861c:	08015429 	.word	0x08015429
 8008620:	0801543a 	.word	0x0801543a

08008624 <__hi0bits>:
 8008624:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008628:	4603      	mov	r3, r0
 800862a:	bf36      	itet	cc
 800862c:	0403      	lslcc	r3, r0, #16
 800862e:	2000      	movcs	r0, #0
 8008630:	2010      	movcc	r0, #16
 8008632:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008636:	bf3c      	itt	cc
 8008638:	021b      	lslcc	r3, r3, #8
 800863a:	3008      	addcc	r0, #8
 800863c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008640:	bf3c      	itt	cc
 8008642:	011b      	lslcc	r3, r3, #4
 8008644:	3004      	addcc	r0, #4
 8008646:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800864a:	bf3c      	itt	cc
 800864c:	009b      	lslcc	r3, r3, #2
 800864e:	3002      	addcc	r0, #2
 8008650:	2b00      	cmp	r3, #0
 8008652:	db05      	blt.n	8008660 <__hi0bits+0x3c>
 8008654:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008658:	f100 0001 	add.w	r0, r0, #1
 800865c:	bf08      	it	eq
 800865e:	2020      	moveq	r0, #32
 8008660:	4770      	bx	lr

08008662 <__lo0bits>:
 8008662:	6803      	ldr	r3, [r0, #0]
 8008664:	4602      	mov	r2, r0
 8008666:	f013 0007 	ands.w	r0, r3, #7
 800866a:	d00b      	beq.n	8008684 <__lo0bits+0x22>
 800866c:	07d9      	lsls	r1, r3, #31
 800866e:	d421      	bmi.n	80086b4 <__lo0bits+0x52>
 8008670:	0798      	lsls	r0, r3, #30
 8008672:	bf49      	itett	mi
 8008674:	085b      	lsrmi	r3, r3, #1
 8008676:	089b      	lsrpl	r3, r3, #2
 8008678:	2001      	movmi	r0, #1
 800867a:	6013      	strmi	r3, [r2, #0]
 800867c:	bf5c      	itt	pl
 800867e:	6013      	strpl	r3, [r2, #0]
 8008680:	2002      	movpl	r0, #2
 8008682:	4770      	bx	lr
 8008684:	b299      	uxth	r1, r3
 8008686:	b909      	cbnz	r1, 800868c <__lo0bits+0x2a>
 8008688:	0c1b      	lsrs	r3, r3, #16
 800868a:	2010      	movs	r0, #16
 800868c:	b2d9      	uxtb	r1, r3
 800868e:	b909      	cbnz	r1, 8008694 <__lo0bits+0x32>
 8008690:	3008      	adds	r0, #8
 8008692:	0a1b      	lsrs	r3, r3, #8
 8008694:	0719      	lsls	r1, r3, #28
 8008696:	bf04      	itt	eq
 8008698:	091b      	lsreq	r3, r3, #4
 800869a:	3004      	addeq	r0, #4
 800869c:	0799      	lsls	r1, r3, #30
 800869e:	bf04      	itt	eq
 80086a0:	089b      	lsreq	r3, r3, #2
 80086a2:	3002      	addeq	r0, #2
 80086a4:	07d9      	lsls	r1, r3, #31
 80086a6:	d403      	bmi.n	80086b0 <__lo0bits+0x4e>
 80086a8:	085b      	lsrs	r3, r3, #1
 80086aa:	f100 0001 	add.w	r0, r0, #1
 80086ae:	d003      	beq.n	80086b8 <__lo0bits+0x56>
 80086b0:	6013      	str	r3, [r2, #0]
 80086b2:	4770      	bx	lr
 80086b4:	2000      	movs	r0, #0
 80086b6:	4770      	bx	lr
 80086b8:	2020      	movs	r0, #32
 80086ba:	4770      	bx	lr

080086bc <__i2b>:
 80086bc:	b510      	push	{r4, lr}
 80086be:	460c      	mov	r4, r1
 80086c0:	2101      	movs	r1, #1
 80086c2:	f7ff febd 	bl	8008440 <_Balloc>
 80086c6:	4602      	mov	r2, r0
 80086c8:	b928      	cbnz	r0, 80086d6 <__i2b+0x1a>
 80086ca:	4b05      	ldr	r3, [pc, #20]	@ (80086e0 <__i2b+0x24>)
 80086cc:	4805      	ldr	r0, [pc, #20]	@ (80086e4 <__i2b+0x28>)
 80086ce:	f240 1145 	movw	r1, #325	@ 0x145
 80086d2:	f001 fdf9 	bl	800a2c8 <__assert_func>
 80086d6:	2301      	movs	r3, #1
 80086d8:	6144      	str	r4, [r0, #20]
 80086da:	6103      	str	r3, [r0, #16]
 80086dc:	bd10      	pop	{r4, pc}
 80086de:	bf00      	nop
 80086e0:	08015429 	.word	0x08015429
 80086e4:	0801543a 	.word	0x0801543a

080086e8 <__multiply>:
 80086e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086ec:	4614      	mov	r4, r2
 80086ee:	690a      	ldr	r2, [r1, #16]
 80086f0:	6923      	ldr	r3, [r4, #16]
 80086f2:	429a      	cmp	r2, r3
 80086f4:	bfa8      	it	ge
 80086f6:	4623      	movge	r3, r4
 80086f8:	460f      	mov	r7, r1
 80086fa:	bfa4      	itt	ge
 80086fc:	460c      	movge	r4, r1
 80086fe:	461f      	movge	r7, r3
 8008700:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008704:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008708:	68a3      	ldr	r3, [r4, #8]
 800870a:	6861      	ldr	r1, [r4, #4]
 800870c:	eb0a 0609 	add.w	r6, sl, r9
 8008710:	42b3      	cmp	r3, r6
 8008712:	b085      	sub	sp, #20
 8008714:	bfb8      	it	lt
 8008716:	3101      	addlt	r1, #1
 8008718:	f7ff fe92 	bl	8008440 <_Balloc>
 800871c:	b930      	cbnz	r0, 800872c <__multiply+0x44>
 800871e:	4602      	mov	r2, r0
 8008720:	4b44      	ldr	r3, [pc, #272]	@ (8008834 <__multiply+0x14c>)
 8008722:	4845      	ldr	r0, [pc, #276]	@ (8008838 <__multiply+0x150>)
 8008724:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008728:	f001 fdce 	bl	800a2c8 <__assert_func>
 800872c:	f100 0514 	add.w	r5, r0, #20
 8008730:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008734:	462b      	mov	r3, r5
 8008736:	2200      	movs	r2, #0
 8008738:	4543      	cmp	r3, r8
 800873a:	d321      	bcc.n	8008780 <__multiply+0x98>
 800873c:	f107 0114 	add.w	r1, r7, #20
 8008740:	f104 0214 	add.w	r2, r4, #20
 8008744:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008748:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800874c:	9302      	str	r3, [sp, #8]
 800874e:	1b13      	subs	r3, r2, r4
 8008750:	3b15      	subs	r3, #21
 8008752:	f023 0303 	bic.w	r3, r3, #3
 8008756:	3304      	adds	r3, #4
 8008758:	f104 0715 	add.w	r7, r4, #21
 800875c:	42ba      	cmp	r2, r7
 800875e:	bf38      	it	cc
 8008760:	2304      	movcc	r3, #4
 8008762:	9301      	str	r3, [sp, #4]
 8008764:	9b02      	ldr	r3, [sp, #8]
 8008766:	9103      	str	r1, [sp, #12]
 8008768:	428b      	cmp	r3, r1
 800876a:	d80c      	bhi.n	8008786 <__multiply+0x9e>
 800876c:	2e00      	cmp	r6, #0
 800876e:	dd03      	ble.n	8008778 <__multiply+0x90>
 8008770:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008774:	2b00      	cmp	r3, #0
 8008776:	d05b      	beq.n	8008830 <__multiply+0x148>
 8008778:	6106      	str	r6, [r0, #16]
 800877a:	b005      	add	sp, #20
 800877c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008780:	f843 2b04 	str.w	r2, [r3], #4
 8008784:	e7d8      	b.n	8008738 <__multiply+0x50>
 8008786:	f8b1 a000 	ldrh.w	sl, [r1]
 800878a:	f1ba 0f00 	cmp.w	sl, #0
 800878e:	d024      	beq.n	80087da <__multiply+0xf2>
 8008790:	f104 0e14 	add.w	lr, r4, #20
 8008794:	46a9      	mov	r9, r5
 8008796:	f04f 0c00 	mov.w	ip, #0
 800879a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800879e:	f8d9 3000 	ldr.w	r3, [r9]
 80087a2:	fa1f fb87 	uxth.w	fp, r7
 80087a6:	b29b      	uxth	r3, r3
 80087a8:	fb0a 330b 	mla	r3, sl, fp, r3
 80087ac:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80087b0:	f8d9 7000 	ldr.w	r7, [r9]
 80087b4:	4463      	add	r3, ip
 80087b6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80087ba:	fb0a c70b 	mla	r7, sl, fp, ip
 80087be:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80087c2:	b29b      	uxth	r3, r3
 80087c4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80087c8:	4572      	cmp	r2, lr
 80087ca:	f849 3b04 	str.w	r3, [r9], #4
 80087ce:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80087d2:	d8e2      	bhi.n	800879a <__multiply+0xb2>
 80087d4:	9b01      	ldr	r3, [sp, #4]
 80087d6:	f845 c003 	str.w	ip, [r5, r3]
 80087da:	9b03      	ldr	r3, [sp, #12]
 80087dc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80087e0:	3104      	adds	r1, #4
 80087e2:	f1b9 0f00 	cmp.w	r9, #0
 80087e6:	d021      	beq.n	800882c <__multiply+0x144>
 80087e8:	682b      	ldr	r3, [r5, #0]
 80087ea:	f104 0c14 	add.w	ip, r4, #20
 80087ee:	46ae      	mov	lr, r5
 80087f0:	f04f 0a00 	mov.w	sl, #0
 80087f4:	f8bc b000 	ldrh.w	fp, [ip]
 80087f8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80087fc:	fb09 770b 	mla	r7, r9, fp, r7
 8008800:	4457      	add	r7, sl
 8008802:	b29b      	uxth	r3, r3
 8008804:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008808:	f84e 3b04 	str.w	r3, [lr], #4
 800880c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008810:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008814:	f8be 3000 	ldrh.w	r3, [lr]
 8008818:	fb09 330a 	mla	r3, r9, sl, r3
 800881c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008820:	4562      	cmp	r2, ip
 8008822:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008826:	d8e5      	bhi.n	80087f4 <__multiply+0x10c>
 8008828:	9f01      	ldr	r7, [sp, #4]
 800882a:	51eb      	str	r3, [r5, r7]
 800882c:	3504      	adds	r5, #4
 800882e:	e799      	b.n	8008764 <__multiply+0x7c>
 8008830:	3e01      	subs	r6, #1
 8008832:	e79b      	b.n	800876c <__multiply+0x84>
 8008834:	08015429 	.word	0x08015429
 8008838:	0801543a 	.word	0x0801543a

0800883c <__pow5mult>:
 800883c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008840:	4615      	mov	r5, r2
 8008842:	f012 0203 	ands.w	r2, r2, #3
 8008846:	4607      	mov	r7, r0
 8008848:	460e      	mov	r6, r1
 800884a:	d007      	beq.n	800885c <__pow5mult+0x20>
 800884c:	4c25      	ldr	r4, [pc, #148]	@ (80088e4 <__pow5mult+0xa8>)
 800884e:	3a01      	subs	r2, #1
 8008850:	2300      	movs	r3, #0
 8008852:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008856:	f7ff fe55 	bl	8008504 <__multadd>
 800885a:	4606      	mov	r6, r0
 800885c:	10ad      	asrs	r5, r5, #2
 800885e:	d03d      	beq.n	80088dc <__pow5mult+0xa0>
 8008860:	69fc      	ldr	r4, [r7, #28]
 8008862:	b97c      	cbnz	r4, 8008884 <__pow5mult+0x48>
 8008864:	2010      	movs	r0, #16
 8008866:	f7ff fd35 	bl	80082d4 <malloc>
 800886a:	4602      	mov	r2, r0
 800886c:	61f8      	str	r0, [r7, #28]
 800886e:	b928      	cbnz	r0, 800887c <__pow5mult+0x40>
 8008870:	4b1d      	ldr	r3, [pc, #116]	@ (80088e8 <__pow5mult+0xac>)
 8008872:	481e      	ldr	r0, [pc, #120]	@ (80088ec <__pow5mult+0xb0>)
 8008874:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008878:	f001 fd26 	bl	800a2c8 <__assert_func>
 800887c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008880:	6004      	str	r4, [r0, #0]
 8008882:	60c4      	str	r4, [r0, #12]
 8008884:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008888:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800888c:	b94c      	cbnz	r4, 80088a2 <__pow5mult+0x66>
 800888e:	f240 2171 	movw	r1, #625	@ 0x271
 8008892:	4638      	mov	r0, r7
 8008894:	f7ff ff12 	bl	80086bc <__i2b>
 8008898:	2300      	movs	r3, #0
 800889a:	f8c8 0008 	str.w	r0, [r8, #8]
 800889e:	4604      	mov	r4, r0
 80088a0:	6003      	str	r3, [r0, #0]
 80088a2:	f04f 0900 	mov.w	r9, #0
 80088a6:	07eb      	lsls	r3, r5, #31
 80088a8:	d50a      	bpl.n	80088c0 <__pow5mult+0x84>
 80088aa:	4631      	mov	r1, r6
 80088ac:	4622      	mov	r2, r4
 80088ae:	4638      	mov	r0, r7
 80088b0:	f7ff ff1a 	bl	80086e8 <__multiply>
 80088b4:	4631      	mov	r1, r6
 80088b6:	4680      	mov	r8, r0
 80088b8:	4638      	mov	r0, r7
 80088ba:	f7ff fe01 	bl	80084c0 <_Bfree>
 80088be:	4646      	mov	r6, r8
 80088c0:	106d      	asrs	r5, r5, #1
 80088c2:	d00b      	beq.n	80088dc <__pow5mult+0xa0>
 80088c4:	6820      	ldr	r0, [r4, #0]
 80088c6:	b938      	cbnz	r0, 80088d8 <__pow5mult+0x9c>
 80088c8:	4622      	mov	r2, r4
 80088ca:	4621      	mov	r1, r4
 80088cc:	4638      	mov	r0, r7
 80088ce:	f7ff ff0b 	bl	80086e8 <__multiply>
 80088d2:	6020      	str	r0, [r4, #0]
 80088d4:	f8c0 9000 	str.w	r9, [r0]
 80088d8:	4604      	mov	r4, r0
 80088da:	e7e4      	b.n	80088a6 <__pow5mult+0x6a>
 80088dc:	4630      	mov	r0, r6
 80088de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088e2:	bf00      	nop
 80088e4:	08015494 	.word	0x08015494
 80088e8:	080153ba 	.word	0x080153ba
 80088ec:	0801543a 	.word	0x0801543a

080088f0 <__lshift>:
 80088f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088f4:	460c      	mov	r4, r1
 80088f6:	6849      	ldr	r1, [r1, #4]
 80088f8:	6923      	ldr	r3, [r4, #16]
 80088fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80088fe:	68a3      	ldr	r3, [r4, #8]
 8008900:	4607      	mov	r7, r0
 8008902:	4691      	mov	r9, r2
 8008904:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008908:	f108 0601 	add.w	r6, r8, #1
 800890c:	42b3      	cmp	r3, r6
 800890e:	db0b      	blt.n	8008928 <__lshift+0x38>
 8008910:	4638      	mov	r0, r7
 8008912:	f7ff fd95 	bl	8008440 <_Balloc>
 8008916:	4605      	mov	r5, r0
 8008918:	b948      	cbnz	r0, 800892e <__lshift+0x3e>
 800891a:	4602      	mov	r2, r0
 800891c:	4b28      	ldr	r3, [pc, #160]	@ (80089c0 <__lshift+0xd0>)
 800891e:	4829      	ldr	r0, [pc, #164]	@ (80089c4 <__lshift+0xd4>)
 8008920:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008924:	f001 fcd0 	bl	800a2c8 <__assert_func>
 8008928:	3101      	adds	r1, #1
 800892a:	005b      	lsls	r3, r3, #1
 800892c:	e7ee      	b.n	800890c <__lshift+0x1c>
 800892e:	2300      	movs	r3, #0
 8008930:	f100 0114 	add.w	r1, r0, #20
 8008934:	f100 0210 	add.w	r2, r0, #16
 8008938:	4618      	mov	r0, r3
 800893a:	4553      	cmp	r3, sl
 800893c:	db33      	blt.n	80089a6 <__lshift+0xb6>
 800893e:	6920      	ldr	r0, [r4, #16]
 8008940:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008944:	f104 0314 	add.w	r3, r4, #20
 8008948:	f019 091f 	ands.w	r9, r9, #31
 800894c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008950:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008954:	d02b      	beq.n	80089ae <__lshift+0xbe>
 8008956:	f1c9 0e20 	rsb	lr, r9, #32
 800895a:	468a      	mov	sl, r1
 800895c:	2200      	movs	r2, #0
 800895e:	6818      	ldr	r0, [r3, #0]
 8008960:	fa00 f009 	lsl.w	r0, r0, r9
 8008964:	4310      	orrs	r0, r2
 8008966:	f84a 0b04 	str.w	r0, [sl], #4
 800896a:	f853 2b04 	ldr.w	r2, [r3], #4
 800896e:	459c      	cmp	ip, r3
 8008970:	fa22 f20e 	lsr.w	r2, r2, lr
 8008974:	d8f3      	bhi.n	800895e <__lshift+0x6e>
 8008976:	ebac 0304 	sub.w	r3, ip, r4
 800897a:	3b15      	subs	r3, #21
 800897c:	f023 0303 	bic.w	r3, r3, #3
 8008980:	3304      	adds	r3, #4
 8008982:	f104 0015 	add.w	r0, r4, #21
 8008986:	4584      	cmp	ip, r0
 8008988:	bf38      	it	cc
 800898a:	2304      	movcc	r3, #4
 800898c:	50ca      	str	r2, [r1, r3]
 800898e:	b10a      	cbz	r2, 8008994 <__lshift+0xa4>
 8008990:	f108 0602 	add.w	r6, r8, #2
 8008994:	3e01      	subs	r6, #1
 8008996:	4638      	mov	r0, r7
 8008998:	612e      	str	r6, [r5, #16]
 800899a:	4621      	mov	r1, r4
 800899c:	f7ff fd90 	bl	80084c0 <_Bfree>
 80089a0:	4628      	mov	r0, r5
 80089a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089a6:	f842 0f04 	str.w	r0, [r2, #4]!
 80089aa:	3301      	adds	r3, #1
 80089ac:	e7c5      	b.n	800893a <__lshift+0x4a>
 80089ae:	3904      	subs	r1, #4
 80089b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80089b4:	f841 2f04 	str.w	r2, [r1, #4]!
 80089b8:	459c      	cmp	ip, r3
 80089ba:	d8f9      	bhi.n	80089b0 <__lshift+0xc0>
 80089bc:	e7ea      	b.n	8008994 <__lshift+0xa4>
 80089be:	bf00      	nop
 80089c0:	08015429 	.word	0x08015429
 80089c4:	0801543a 	.word	0x0801543a

080089c8 <__mcmp>:
 80089c8:	690a      	ldr	r2, [r1, #16]
 80089ca:	4603      	mov	r3, r0
 80089cc:	6900      	ldr	r0, [r0, #16]
 80089ce:	1a80      	subs	r0, r0, r2
 80089d0:	b530      	push	{r4, r5, lr}
 80089d2:	d10e      	bne.n	80089f2 <__mcmp+0x2a>
 80089d4:	3314      	adds	r3, #20
 80089d6:	3114      	adds	r1, #20
 80089d8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80089dc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80089e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80089e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80089e8:	4295      	cmp	r5, r2
 80089ea:	d003      	beq.n	80089f4 <__mcmp+0x2c>
 80089ec:	d205      	bcs.n	80089fa <__mcmp+0x32>
 80089ee:	f04f 30ff 	mov.w	r0, #4294967295
 80089f2:	bd30      	pop	{r4, r5, pc}
 80089f4:	42a3      	cmp	r3, r4
 80089f6:	d3f3      	bcc.n	80089e0 <__mcmp+0x18>
 80089f8:	e7fb      	b.n	80089f2 <__mcmp+0x2a>
 80089fa:	2001      	movs	r0, #1
 80089fc:	e7f9      	b.n	80089f2 <__mcmp+0x2a>
	...

08008a00 <__mdiff>:
 8008a00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a04:	4689      	mov	r9, r1
 8008a06:	4606      	mov	r6, r0
 8008a08:	4611      	mov	r1, r2
 8008a0a:	4648      	mov	r0, r9
 8008a0c:	4614      	mov	r4, r2
 8008a0e:	f7ff ffdb 	bl	80089c8 <__mcmp>
 8008a12:	1e05      	subs	r5, r0, #0
 8008a14:	d112      	bne.n	8008a3c <__mdiff+0x3c>
 8008a16:	4629      	mov	r1, r5
 8008a18:	4630      	mov	r0, r6
 8008a1a:	f7ff fd11 	bl	8008440 <_Balloc>
 8008a1e:	4602      	mov	r2, r0
 8008a20:	b928      	cbnz	r0, 8008a2e <__mdiff+0x2e>
 8008a22:	4b3f      	ldr	r3, [pc, #252]	@ (8008b20 <__mdiff+0x120>)
 8008a24:	f240 2137 	movw	r1, #567	@ 0x237
 8008a28:	483e      	ldr	r0, [pc, #248]	@ (8008b24 <__mdiff+0x124>)
 8008a2a:	f001 fc4d 	bl	800a2c8 <__assert_func>
 8008a2e:	2301      	movs	r3, #1
 8008a30:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008a34:	4610      	mov	r0, r2
 8008a36:	b003      	add	sp, #12
 8008a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a3c:	bfbc      	itt	lt
 8008a3e:	464b      	movlt	r3, r9
 8008a40:	46a1      	movlt	r9, r4
 8008a42:	4630      	mov	r0, r6
 8008a44:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008a48:	bfba      	itte	lt
 8008a4a:	461c      	movlt	r4, r3
 8008a4c:	2501      	movlt	r5, #1
 8008a4e:	2500      	movge	r5, #0
 8008a50:	f7ff fcf6 	bl	8008440 <_Balloc>
 8008a54:	4602      	mov	r2, r0
 8008a56:	b918      	cbnz	r0, 8008a60 <__mdiff+0x60>
 8008a58:	4b31      	ldr	r3, [pc, #196]	@ (8008b20 <__mdiff+0x120>)
 8008a5a:	f240 2145 	movw	r1, #581	@ 0x245
 8008a5e:	e7e3      	b.n	8008a28 <__mdiff+0x28>
 8008a60:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008a64:	6926      	ldr	r6, [r4, #16]
 8008a66:	60c5      	str	r5, [r0, #12]
 8008a68:	f109 0310 	add.w	r3, r9, #16
 8008a6c:	f109 0514 	add.w	r5, r9, #20
 8008a70:	f104 0e14 	add.w	lr, r4, #20
 8008a74:	f100 0b14 	add.w	fp, r0, #20
 8008a78:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008a7c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008a80:	9301      	str	r3, [sp, #4]
 8008a82:	46d9      	mov	r9, fp
 8008a84:	f04f 0c00 	mov.w	ip, #0
 8008a88:	9b01      	ldr	r3, [sp, #4]
 8008a8a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008a8e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008a92:	9301      	str	r3, [sp, #4]
 8008a94:	fa1f f38a 	uxth.w	r3, sl
 8008a98:	4619      	mov	r1, r3
 8008a9a:	b283      	uxth	r3, r0
 8008a9c:	1acb      	subs	r3, r1, r3
 8008a9e:	0c00      	lsrs	r0, r0, #16
 8008aa0:	4463      	add	r3, ip
 8008aa2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008aa6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008aaa:	b29b      	uxth	r3, r3
 8008aac:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008ab0:	4576      	cmp	r6, lr
 8008ab2:	f849 3b04 	str.w	r3, [r9], #4
 8008ab6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008aba:	d8e5      	bhi.n	8008a88 <__mdiff+0x88>
 8008abc:	1b33      	subs	r3, r6, r4
 8008abe:	3b15      	subs	r3, #21
 8008ac0:	f023 0303 	bic.w	r3, r3, #3
 8008ac4:	3415      	adds	r4, #21
 8008ac6:	3304      	adds	r3, #4
 8008ac8:	42a6      	cmp	r6, r4
 8008aca:	bf38      	it	cc
 8008acc:	2304      	movcc	r3, #4
 8008ace:	441d      	add	r5, r3
 8008ad0:	445b      	add	r3, fp
 8008ad2:	461e      	mov	r6, r3
 8008ad4:	462c      	mov	r4, r5
 8008ad6:	4544      	cmp	r4, r8
 8008ad8:	d30e      	bcc.n	8008af8 <__mdiff+0xf8>
 8008ada:	f108 0103 	add.w	r1, r8, #3
 8008ade:	1b49      	subs	r1, r1, r5
 8008ae0:	f021 0103 	bic.w	r1, r1, #3
 8008ae4:	3d03      	subs	r5, #3
 8008ae6:	45a8      	cmp	r8, r5
 8008ae8:	bf38      	it	cc
 8008aea:	2100      	movcc	r1, #0
 8008aec:	440b      	add	r3, r1
 8008aee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008af2:	b191      	cbz	r1, 8008b1a <__mdiff+0x11a>
 8008af4:	6117      	str	r7, [r2, #16]
 8008af6:	e79d      	b.n	8008a34 <__mdiff+0x34>
 8008af8:	f854 1b04 	ldr.w	r1, [r4], #4
 8008afc:	46e6      	mov	lr, ip
 8008afe:	0c08      	lsrs	r0, r1, #16
 8008b00:	fa1c fc81 	uxtah	ip, ip, r1
 8008b04:	4471      	add	r1, lr
 8008b06:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008b0a:	b289      	uxth	r1, r1
 8008b0c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008b10:	f846 1b04 	str.w	r1, [r6], #4
 8008b14:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008b18:	e7dd      	b.n	8008ad6 <__mdiff+0xd6>
 8008b1a:	3f01      	subs	r7, #1
 8008b1c:	e7e7      	b.n	8008aee <__mdiff+0xee>
 8008b1e:	bf00      	nop
 8008b20:	08015429 	.word	0x08015429
 8008b24:	0801543a 	.word	0x0801543a

08008b28 <__ulp>:
 8008b28:	b082      	sub	sp, #8
 8008b2a:	ed8d 0b00 	vstr	d0, [sp]
 8008b2e:	9a01      	ldr	r2, [sp, #4]
 8008b30:	4b0f      	ldr	r3, [pc, #60]	@ (8008b70 <__ulp+0x48>)
 8008b32:	4013      	ands	r3, r2
 8008b34:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	dc08      	bgt.n	8008b4e <__ulp+0x26>
 8008b3c:	425b      	negs	r3, r3
 8008b3e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008b42:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008b46:	da04      	bge.n	8008b52 <__ulp+0x2a>
 8008b48:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008b4c:	4113      	asrs	r3, r2
 8008b4e:	2200      	movs	r2, #0
 8008b50:	e008      	b.n	8008b64 <__ulp+0x3c>
 8008b52:	f1a2 0314 	sub.w	r3, r2, #20
 8008b56:	2b1e      	cmp	r3, #30
 8008b58:	bfda      	itte	le
 8008b5a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008b5e:	40da      	lsrle	r2, r3
 8008b60:	2201      	movgt	r2, #1
 8008b62:	2300      	movs	r3, #0
 8008b64:	4619      	mov	r1, r3
 8008b66:	4610      	mov	r0, r2
 8008b68:	ec41 0b10 	vmov	d0, r0, r1
 8008b6c:	b002      	add	sp, #8
 8008b6e:	4770      	bx	lr
 8008b70:	7ff00000 	.word	0x7ff00000

08008b74 <__b2d>:
 8008b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b78:	6906      	ldr	r6, [r0, #16]
 8008b7a:	f100 0814 	add.w	r8, r0, #20
 8008b7e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008b82:	1f37      	subs	r7, r6, #4
 8008b84:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008b88:	4610      	mov	r0, r2
 8008b8a:	f7ff fd4b 	bl	8008624 <__hi0bits>
 8008b8e:	f1c0 0320 	rsb	r3, r0, #32
 8008b92:	280a      	cmp	r0, #10
 8008b94:	600b      	str	r3, [r1, #0]
 8008b96:	491b      	ldr	r1, [pc, #108]	@ (8008c04 <__b2d+0x90>)
 8008b98:	dc15      	bgt.n	8008bc6 <__b2d+0x52>
 8008b9a:	f1c0 0c0b 	rsb	ip, r0, #11
 8008b9e:	fa22 f30c 	lsr.w	r3, r2, ip
 8008ba2:	45b8      	cmp	r8, r7
 8008ba4:	ea43 0501 	orr.w	r5, r3, r1
 8008ba8:	bf34      	ite	cc
 8008baa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008bae:	2300      	movcs	r3, #0
 8008bb0:	3015      	adds	r0, #21
 8008bb2:	fa02 f000 	lsl.w	r0, r2, r0
 8008bb6:	fa23 f30c 	lsr.w	r3, r3, ip
 8008bba:	4303      	orrs	r3, r0
 8008bbc:	461c      	mov	r4, r3
 8008bbe:	ec45 4b10 	vmov	d0, r4, r5
 8008bc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bc6:	45b8      	cmp	r8, r7
 8008bc8:	bf3a      	itte	cc
 8008bca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008bce:	f1a6 0708 	subcc.w	r7, r6, #8
 8008bd2:	2300      	movcs	r3, #0
 8008bd4:	380b      	subs	r0, #11
 8008bd6:	d012      	beq.n	8008bfe <__b2d+0x8a>
 8008bd8:	f1c0 0120 	rsb	r1, r0, #32
 8008bdc:	fa23 f401 	lsr.w	r4, r3, r1
 8008be0:	4082      	lsls	r2, r0
 8008be2:	4322      	orrs	r2, r4
 8008be4:	4547      	cmp	r7, r8
 8008be6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008bea:	bf8c      	ite	hi
 8008bec:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008bf0:	2200      	movls	r2, #0
 8008bf2:	4083      	lsls	r3, r0
 8008bf4:	40ca      	lsrs	r2, r1
 8008bf6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	e7de      	b.n	8008bbc <__b2d+0x48>
 8008bfe:	ea42 0501 	orr.w	r5, r2, r1
 8008c02:	e7db      	b.n	8008bbc <__b2d+0x48>
 8008c04:	3ff00000 	.word	0x3ff00000

08008c08 <__d2b>:
 8008c08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008c0c:	460f      	mov	r7, r1
 8008c0e:	2101      	movs	r1, #1
 8008c10:	ec59 8b10 	vmov	r8, r9, d0
 8008c14:	4616      	mov	r6, r2
 8008c16:	f7ff fc13 	bl	8008440 <_Balloc>
 8008c1a:	4604      	mov	r4, r0
 8008c1c:	b930      	cbnz	r0, 8008c2c <__d2b+0x24>
 8008c1e:	4602      	mov	r2, r0
 8008c20:	4b23      	ldr	r3, [pc, #140]	@ (8008cb0 <__d2b+0xa8>)
 8008c22:	4824      	ldr	r0, [pc, #144]	@ (8008cb4 <__d2b+0xac>)
 8008c24:	f240 310f 	movw	r1, #783	@ 0x30f
 8008c28:	f001 fb4e 	bl	800a2c8 <__assert_func>
 8008c2c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008c30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008c34:	b10d      	cbz	r5, 8008c3a <__d2b+0x32>
 8008c36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008c3a:	9301      	str	r3, [sp, #4]
 8008c3c:	f1b8 0300 	subs.w	r3, r8, #0
 8008c40:	d023      	beq.n	8008c8a <__d2b+0x82>
 8008c42:	4668      	mov	r0, sp
 8008c44:	9300      	str	r3, [sp, #0]
 8008c46:	f7ff fd0c 	bl	8008662 <__lo0bits>
 8008c4a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008c4e:	b1d0      	cbz	r0, 8008c86 <__d2b+0x7e>
 8008c50:	f1c0 0320 	rsb	r3, r0, #32
 8008c54:	fa02 f303 	lsl.w	r3, r2, r3
 8008c58:	430b      	orrs	r3, r1
 8008c5a:	40c2      	lsrs	r2, r0
 8008c5c:	6163      	str	r3, [r4, #20]
 8008c5e:	9201      	str	r2, [sp, #4]
 8008c60:	9b01      	ldr	r3, [sp, #4]
 8008c62:	61a3      	str	r3, [r4, #24]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	bf0c      	ite	eq
 8008c68:	2201      	moveq	r2, #1
 8008c6a:	2202      	movne	r2, #2
 8008c6c:	6122      	str	r2, [r4, #16]
 8008c6e:	b1a5      	cbz	r5, 8008c9a <__d2b+0x92>
 8008c70:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008c74:	4405      	add	r5, r0
 8008c76:	603d      	str	r5, [r7, #0]
 8008c78:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008c7c:	6030      	str	r0, [r6, #0]
 8008c7e:	4620      	mov	r0, r4
 8008c80:	b003      	add	sp, #12
 8008c82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c86:	6161      	str	r1, [r4, #20]
 8008c88:	e7ea      	b.n	8008c60 <__d2b+0x58>
 8008c8a:	a801      	add	r0, sp, #4
 8008c8c:	f7ff fce9 	bl	8008662 <__lo0bits>
 8008c90:	9b01      	ldr	r3, [sp, #4]
 8008c92:	6163      	str	r3, [r4, #20]
 8008c94:	3020      	adds	r0, #32
 8008c96:	2201      	movs	r2, #1
 8008c98:	e7e8      	b.n	8008c6c <__d2b+0x64>
 8008c9a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008c9e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008ca2:	6038      	str	r0, [r7, #0]
 8008ca4:	6918      	ldr	r0, [r3, #16]
 8008ca6:	f7ff fcbd 	bl	8008624 <__hi0bits>
 8008caa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008cae:	e7e5      	b.n	8008c7c <__d2b+0x74>
 8008cb0:	08015429 	.word	0x08015429
 8008cb4:	0801543a 	.word	0x0801543a

08008cb8 <__ratio>:
 8008cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cbc:	b085      	sub	sp, #20
 8008cbe:	e9cd 1000 	strd	r1, r0, [sp]
 8008cc2:	a902      	add	r1, sp, #8
 8008cc4:	f7ff ff56 	bl	8008b74 <__b2d>
 8008cc8:	9800      	ldr	r0, [sp, #0]
 8008cca:	a903      	add	r1, sp, #12
 8008ccc:	ec55 4b10 	vmov	r4, r5, d0
 8008cd0:	f7ff ff50 	bl	8008b74 <__b2d>
 8008cd4:	9b01      	ldr	r3, [sp, #4]
 8008cd6:	6919      	ldr	r1, [r3, #16]
 8008cd8:	9b00      	ldr	r3, [sp, #0]
 8008cda:	691b      	ldr	r3, [r3, #16]
 8008cdc:	1ac9      	subs	r1, r1, r3
 8008cde:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008ce2:	1a9b      	subs	r3, r3, r2
 8008ce4:	ec5b ab10 	vmov	sl, fp, d0
 8008ce8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	bfce      	itee	gt
 8008cf0:	462a      	movgt	r2, r5
 8008cf2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008cf6:	465a      	movle	r2, fp
 8008cf8:	462f      	mov	r7, r5
 8008cfa:	46d9      	mov	r9, fp
 8008cfc:	bfcc      	ite	gt
 8008cfe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008d02:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008d06:	464b      	mov	r3, r9
 8008d08:	4652      	mov	r2, sl
 8008d0a:	4620      	mov	r0, r4
 8008d0c:	4639      	mov	r1, r7
 8008d0e:	f7f7 fd9d 	bl	800084c <__aeabi_ddiv>
 8008d12:	ec41 0b10 	vmov	d0, r0, r1
 8008d16:	b005      	add	sp, #20
 8008d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008d1c <__copybits>:
 8008d1c:	3901      	subs	r1, #1
 8008d1e:	b570      	push	{r4, r5, r6, lr}
 8008d20:	1149      	asrs	r1, r1, #5
 8008d22:	6914      	ldr	r4, [r2, #16]
 8008d24:	3101      	adds	r1, #1
 8008d26:	f102 0314 	add.w	r3, r2, #20
 8008d2a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008d2e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008d32:	1f05      	subs	r5, r0, #4
 8008d34:	42a3      	cmp	r3, r4
 8008d36:	d30c      	bcc.n	8008d52 <__copybits+0x36>
 8008d38:	1aa3      	subs	r3, r4, r2
 8008d3a:	3b11      	subs	r3, #17
 8008d3c:	f023 0303 	bic.w	r3, r3, #3
 8008d40:	3211      	adds	r2, #17
 8008d42:	42a2      	cmp	r2, r4
 8008d44:	bf88      	it	hi
 8008d46:	2300      	movhi	r3, #0
 8008d48:	4418      	add	r0, r3
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	4288      	cmp	r0, r1
 8008d4e:	d305      	bcc.n	8008d5c <__copybits+0x40>
 8008d50:	bd70      	pop	{r4, r5, r6, pc}
 8008d52:	f853 6b04 	ldr.w	r6, [r3], #4
 8008d56:	f845 6f04 	str.w	r6, [r5, #4]!
 8008d5a:	e7eb      	b.n	8008d34 <__copybits+0x18>
 8008d5c:	f840 3b04 	str.w	r3, [r0], #4
 8008d60:	e7f4      	b.n	8008d4c <__copybits+0x30>

08008d62 <__any_on>:
 8008d62:	f100 0214 	add.w	r2, r0, #20
 8008d66:	6900      	ldr	r0, [r0, #16]
 8008d68:	114b      	asrs	r3, r1, #5
 8008d6a:	4298      	cmp	r0, r3
 8008d6c:	b510      	push	{r4, lr}
 8008d6e:	db11      	blt.n	8008d94 <__any_on+0x32>
 8008d70:	dd0a      	ble.n	8008d88 <__any_on+0x26>
 8008d72:	f011 011f 	ands.w	r1, r1, #31
 8008d76:	d007      	beq.n	8008d88 <__any_on+0x26>
 8008d78:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008d7c:	fa24 f001 	lsr.w	r0, r4, r1
 8008d80:	fa00 f101 	lsl.w	r1, r0, r1
 8008d84:	428c      	cmp	r4, r1
 8008d86:	d10b      	bne.n	8008da0 <__any_on+0x3e>
 8008d88:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d803      	bhi.n	8008d98 <__any_on+0x36>
 8008d90:	2000      	movs	r0, #0
 8008d92:	bd10      	pop	{r4, pc}
 8008d94:	4603      	mov	r3, r0
 8008d96:	e7f7      	b.n	8008d88 <__any_on+0x26>
 8008d98:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008d9c:	2900      	cmp	r1, #0
 8008d9e:	d0f5      	beq.n	8008d8c <__any_on+0x2a>
 8008da0:	2001      	movs	r0, #1
 8008da2:	e7f6      	b.n	8008d92 <__any_on+0x30>

08008da4 <sulp>:
 8008da4:	b570      	push	{r4, r5, r6, lr}
 8008da6:	4604      	mov	r4, r0
 8008da8:	460d      	mov	r5, r1
 8008daa:	ec45 4b10 	vmov	d0, r4, r5
 8008dae:	4616      	mov	r6, r2
 8008db0:	f7ff feba 	bl	8008b28 <__ulp>
 8008db4:	ec51 0b10 	vmov	r0, r1, d0
 8008db8:	b17e      	cbz	r6, 8008dda <sulp+0x36>
 8008dba:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008dbe:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	dd09      	ble.n	8008dda <sulp+0x36>
 8008dc6:	051b      	lsls	r3, r3, #20
 8008dc8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008dcc:	2400      	movs	r4, #0
 8008dce:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008dd2:	4622      	mov	r2, r4
 8008dd4:	462b      	mov	r3, r5
 8008dd6:	f7f7 fc0f 	bl	80005f8 <__aeabi_dmul>
 8008dda:	ec41 0b10 	vmov	d0, r0, r1
 8008dde:	bd70      	pop	{r4, r5, r6, pc}

08008de0 <_strtod_l>:
 8008de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008de4:	b09f      	sub	sp, #124	@ 0x7c
 8008de6:	460c      	mov	r4, r1
 8008de8:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008dea:	2200      	movs	r2, #0
 8008dec:	921a      	str	r2, [sp, #104]	@ 0x68
 8008dee:	9005      	str	r0, [sp, #20]
 8008df0:	f04f 0a00 	mov.w	sl, #0
 8008df4:	f04f 0b00 	mov.w	fp, #0
 8008df8:	460a      	mov	r2, r1
 8008dfa:	9219      	str	r2, [sp, #100]	@ 0x64
 8008dfc:	7811      	ldrb	r1, [r2, #0]
 8008dfe:	292b      	cmp	r1, #43	@ 0x2b
 8008e00:	d04a      	beq.n	8008e98 <_strtod_l+0xb8>
 8008e02:	d838      	bhi.n	8008e76 <_strtod_l+0x96>
 8008e04:	290d      	cmp	r1, #13
 8008e06:	d832      	bhi.n	8008e6e <_strtod_l+0x8e>
 8008e08:	2908      	cmp	r1, #8
 8008e0a:	d832      	bhi.n	8008e72 <_strtod_l+0x92>
 8008e0c:	2900      	cmp	r1, #0
 8008e0e:	d03b      	beq.n	8008e88 <_strtod_l+0xa8>
 8008e10:	2200      	movs	r2, #0
 8008e12:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008e14:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008e16:	782a      	ldrb	r2, [r5, #0]
 8008e18:	2a30      	cmp	r2, #48	@ 0x30
 8008e1a:	f040 80b3 	bne.w	8008f84 <_strtod_l+0x1a4>
 8008e1e:	786a      	ldrb	r2, [r5, #1]
 8008e20:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008e24:	2a58      	cmp	r2, #88	@ 0x58
 8008e26:	d16e      	bne.n	8008f06 <_strtod_l+0x126>
 8008e28:	9302      	str	r3, [sp, #8]
 8008e2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e2c:	9301      	str	r3, [sp, #4]
 8008e2e:	ab1a      	add	r3, sp, #104	@ 0x68
 8008e30:	9300      	str	r3, [sp, #0]
 8008e32:	4a8e      	ldr	r2, [pc, #568]	@ (800906c <_strtod_l+0x28c>)
 8008e34:	9805      	ldr	r0, [sp, #20]
 8008e36:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008e38:	a919      	add	r1, sp, #100	@ 0x64
 8008e3a:	f001 fadf 	bl	800a3fc <__gethex>
 8008e3e:	f010 060f 	ands.w	r6, r0, #15
 8008e42:	4604      	mov	r4, r0
 8008e44:	d005      	beq.n	8008e52 <_strtod_l+0x72>
 8008e46:	2e06      	cmp	r6, #6
 8008e48:	d128      	bne.n	8008e9c <_strtod_l+0xbc>
 8008e4a:	3501      	adds	r5, #1
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	9519      	str	r5, [sp, #100]	@ 0x64
 8008e50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008e52:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	f040 858e 	bne.w	8009976 <_strtod_l+0xb96>
 8008e5a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e5c:	b1cb      	cbz	r3, 8008e92 <_strtod_l+0xb2>
 8008e5e:	4652      	mov	r2, sl
 8008e60:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008e64:	ec43 2b10 	vmov	d0, r2, r3
 8008e68:	b01f      	add	sp, #124	@ 0x7c
 8008e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e6e:	2920      	cmp	r1, #32
 8008e70:	d1ce      	bne.n	8008e10 <_strtod_l+0x30>
 8008e72:	3201      	adds	r2, #1
 8008e74:	e7c1      	b.n	8008dfa <_strtod_l+0x1a>
 8008e76:	292d      	cmp	r1, #45	@ 0x2d
 8008e78:	d1ca      	bne.n	8008e10 <_strtod_l+0x30>
 8008e7a:	2101      	movs	r1, #1
 8008e7c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008e7e:	1c51      	adds	r1, r2, #1
 8008e80:	9119      	str	r1, [sp, #100]	@ 0x64
 8008e82:	7852      	ldrb	r2, [r2, #1]
 8008e84:	2a00      	cmp	r2, #0
 8008e86:	d1c5      	bne.n	8008e14 <_strtod_l+0x34>
 8008e88:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008e8a:	9419      	str	r4, [sp, #100]	@ 0x64
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	f040 8570 	bne.w	8009972 <_strtod_l+0xb92>
 8008e92:	4652      	mov	r2, sl
 8008e94:	465b      	mov	r3, fp
 8008e96:	e7e5      	b.n	8008e64 <_strtod_l+0x84>
 8008e98:	2100      	movs	r1, #0
 8008e9a:	e7ef      	b.n	8008e7c <_strtod_l+0x9c>
 8008e9c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008e9e:	b13a      	cbz	r2, 8008eb0 <_strtod_l+0xd0>
 8008ea0:	2135      	movs	r1, #53	@ 0x35
 8008ea2:	a81c      	add	r0, sp, #112	@ 0x70
 8008ea4:	f7ff ff3a 	bl	8008d1c <__copybits>
 8008ea8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008eaa:	9805      	ldr	r0, [sp, #20]
 8008eac:	f7ff fb08 	bl	80084c0 <_Bfree>
 8008eb0:	3e01      	subs	r6, #1
 8008eb2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008eb4:	2e04      	cmp	r6, #4
 8008eb6:	d806      	bhi.n	8008ec6 <_strtod_l+0xe6>
 8008eb8:	e8df f006 	tbb	[pc, r6]
 8008ebc:	201d0314 	.word	0x201d0314
 8008ec0:	14          	.byte	0x14
 8008ec1:	00          	.byte	0x00
 8008ec2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008ec6:	05e1      	lsls	r1, r4, #23
 8008ec8:	bf48      	it	mi
 8008eca:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008ece:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008ed2:	0d1b      	lsrs	r3, r3, #20
 8008ed4:	051b      	lsls	r3, r3, #20
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d1bb      	bne.n	8008e52 <_strtod_l+0x72>
 8008eda:	f7fe fb23 	bl	8007524 <__errno>
 8008ede:	2322      	movs	r3, #34	@ 0x22
 8008ee0:	6003      	str	r3, [r0, #0]
 8008ee2:	e7b6      	b.n	8008e52 <_strtod_l+0x72>
 8008ee4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008ee8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008eec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008ef0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008ef4:	e7e7      	b.n	8008ec6 <_strtod_l+0xe6>
 8008ef6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8009074 <_strtod_l+0x294>
 8008efa:	e7e4      	b.n	8008ec6 <_strtod_l+0xe6>
 8008efc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008f00:	f04f 3aff 	mov.w	sl, #4294967295
 8008f04:	e7df      	b.n	8008ec6 <_strtod_l+0xe6>
 8008f06:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f08:	1c5a      	adds	r2, r3, #1
 8008f0a:	9219      	str	r2, [sp, #100]	@ 0x64
 8008f0c:	785b      	ldrb	r3, [r3, #1]
 8008f0e:	2b30      	cmp	r3, #48	@ 0x30
 8008f10:	d0f9      	beq.n	8008f06 <_strtod_l+0x126>
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d09d      	beq.n	8008e52 <_strtod_l+0x72>
 8008f16:	2301      	movs	r3, #1
 8008f18:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f1a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f1c:	930c      	str	r3, [sp, #48]	@ 0x30
 8008f1e:	2300      	movs	r3, #0
 8008f20:	9308      	str	r3, [sp, #32]
 8008f22:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f24:	461f      	mov	r7, r3
 8008f26:	220a      	movs	r2, #10
 8008f28:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008f2a:	7805      	ldrb	r5, [r0, #0]
 8008f2c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008f30:	b2d9      	uxtb	r1, r3
 8008f32:	2909      	cmp	r1, #9
 8008f34:	d928      	bls.n	8008f88 <_strtod_l+0x1a8>
 8008f36:	494e      	ldr	r1, [pc, #312]	@ (8009070 <_strtod_l+0x290>)
 8008f38:	2201      	movs	r2, #1
 8008f3a:	f001 f979 	bl	800a230 <strncmp>
 8008f3e:	2800      	cmp	r0, #0
 8008f40:	d032      	beq.n	8008fa8 <_strtod_l+0x1c8>
 8008f42:	2000      	movs	r0, #0
 8008f44:	462a      	mov	r2, r5
 8008f46:	4681      	mov	r9, r0
 8008f48:	463d      	mov	r5, r7
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	2a65      	cmp	r2, #101	@ 0x65
 8008f4e:	d001      	beq.n	8008f54 <_strtod_l+0x174>
 8008f50:	2a45      	cmp	r2, #69	@ 0x45
 8008f52:	d114      	bne.n	8008f7e <_strtod_l+0x19e>
 8008f54:	b91d      	cbnz	r5, 8008f5e <_strtod_l+0x17e>
 8008f56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f58:	4302      	orrs	r2, r0
 8008f5a:	d095      	beq.n	8008e88 <_strtod_l+0xa8>
 8008f5c:	2500      	movs	r5, #0
 8008f5e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008f60:	1c62      	adds	r2, r4, #1
 8008f62:	9219      	str	r2, [sp, #100]	@ 0x64
 8008f64:	7862      	ldrb	r2, [r4, #1]
 8008f66:	2a2b      	cmp	r2, #43	@ 0x2b
 8008f68:	d077      	beq.n	800905a <_strtod_l+0x27a>
 8008f6a:	2a2d      	cmp	r2, #45	@ 0x2d
 8008f6c:	d07b      	beq.n	8009066 <_strtod_l+0x286>
 8008f6e:	f04f 0c00 	mov.w	ip, #0
 8008f72:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008f76:	2909      	cmp	r1, #9
 8008f78:	f240 8082 	bls.w	8009080 <_strtod_l+0x2a0>
 8008f7c:	9419      	str	r4, [sp, #100]	@ 0x64
 8008f7e:	f04f 0800 	mov.w	r8, #0
 8008f82:	e0a2      	b.n	80090ca <_strtod_l+0x2ea>
 8008f84:	2300      	movs	r3, #0
 8008f86:	e7c7      	b.n	8008f18 <_strtod_l+0x138>
 8008f88:	2f08      	cmp	r7, #8
 8008f8a:	bfd5      	itete	le
 8008f8c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8008f8e:	9908      	ldrgt	r1, [sp, #32]
 8008f90:	fb02 3301 	mlale	r3, r2, r1, r3
 8008f94:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008f98:	f100 0001 	add.w	r0, r0, #1
 8008f9c:	bfd4      	ite	le
 8008f9e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008fa0:	9308      	strgt	r3, [sp, #32]
 8008fa2:	3701      	adds	r7, #1
 8008fa4:	9019      	str	r0, [sp, #100]	@ 0x64
 8008fa6:	e7bf      	b.n	8008f28 <_strtod_l+0x148>
 8008fa8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008faa:	1c5a      	adds	r2, r3, #1
 8008fac:	9219      	str	r2, [sp, #100]	@ 0x64
 8008fae:	785a      	ldrb	r2, [r3, #1]
 8008fb0:	b37f      	cbz	r7, 8009012 <_strtod_l+0x232>
 8008fb2:	4681      	mov	r9, r0
 8008fb4:	463d      	mov	r5, r7
 8008fb6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008fba:	2b09      	cmp	r3, #9
 8008fbc:	d912      	bls.n	8008fe4 <_strtod_l+0x204>
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	e7c4      	b.n	8008f4c <_strtod_l+0x16c>
 8008fc2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008fc4:	1c5a      	adds	r2, r3, #1
 8008fc6:	9219      	str	r2, [sp, #100]	@ 0x64
 8008fc8:	785a      	ldrb	r2, [r3, #1]
 8008fca:	3001      	adds	r0, #1
 8008fcc:	2a30      	cmp	r2, #48	@ 0x30
 8008fce:	d0f8      	beq.n	8008fc2 <_strtod_l+0x1e2>
 8008fd0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008fd4:	2b08      	cmp	r3, #8
 8008fd6:	f200 84d3 	bhi.w	8009980 <_strtod_l+0xba0>
 8008fda:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008fdc:	930c      	str	r3, [sp, #48]	@ 0x30
 8008fde:	4681      	mov	r9, r0
 8008fe0:	2000      	movs	r0, #0
 8008fe2:	4605      	mov	r5, r0
 8008fe4:	3a30      	subs	r2, #48	@ 0x30
 8008fe6:	f100 0301 	add.w	r3, r0, #1
 8008fea:	d02a      	beq.n	8009042 <_strtod_l+0x262>
 8008fec:	4499      	add	r9, r3
 8008fee:	eb00 0c05 	add.w	ip, r0, r5
 8008ff2:	462b      	mov	r3, r5
 8008ff4:	210a      	movs	r1, #10
 8008ff6:	4563      	cmp	r3, ip
 8008ff8:	d10d      	bne.n	8009016 <_strtod_l+0x236>
 8008ffa:	1c69      	adds	r1, r5, #1
 8008ffc:	4401      	add	r1, r0
 8008ffe:	4428      	add	r0, r5
 8009000:	2808      	cmp	r0, #8
 8009002:	dc16      	bgt.n	8009032 <_strtod_l+0x252>
 8009004:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009006:	230a      	movs	r3, #10
 8009008:	fb03 2300 	mla	r3, r3, r0, r2
 800900c:	930a      	str	r3, [sp, #40]	@ 0x28
 800900e:	2300      	movs	r3, #0
 8009010:	e018      	b.n	8009044 <_strtod_l+0x264>
 8009012:	4638      	mov	r0, r7
 8009014:	e7da      	b.n	8008fcc <_strtod_l+0x1ec>
 8009016:	2b08      	cmp	r3, #8
 8009018:	f103 0301 	add.w	r3, r3, #1
 800901c:	dc03      	bgt.n	8009026 <_strtod_l+0x246>
 800901e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009020:	434e      	muls	r6, r1
 8009022:	960a      	str	r6, [sp, #40]	@ 0x28
 8009024:	e7e7      	b.n	8008ff6 <_strtod_l+0x216>
 8009026:	2b10      	cmp	r3, #16
 8009028:	bfde      	ittt	le
 800902a:	9e08      	ldrle	r6, [sp, #32]
 800902c:	434e      	mulle	r6, r1
 800902e:	9608      	strle	r6, [sp, #32]
 8009030:	e7e1      	b.n	8008ff6 <_strtod_l+0x216>
 8009032:	280f      	cmp	r0, #15
 8009034:	dceb      	bgt.n	800900e <_strtod_l+0x22e>
 8009036:	9808      	ldr	r0, [sp, #32]
 8009038:	230a      	movs	r3, #10
 800903a:	fb03 2300 	mla	r3, r3, r0, r2
 800903e:	9308      	str	r3, [sp, #32]
 8009040:	e7e5      	b.n	800900e <_strtod_l+0x22e>
 8009042:	4629      	mov	r1, r5
 8009044:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009046:	1c50      	adds	r0, r2, #1
 8009048:	9019      	str	r0, [sp, #100]	@ 0x64
 800904a:	7852      	ldrb	r2, [r2, #1]
 800904c:	4618      	mov	r0, r3
 800904e:	460d      	mov	r5, r1
 8009050:	e7b1      	b.n	8008fb6 <_strtod_l+0x1d6>
 8009052:	f04f 0900 	mov.w	r9, #0
 8009056:	2301      	movs	r3, #1
 8009058:	e77d      	b.n	8008f56 <_strtod_l+0x176>
 800905a:	f04f 0c00 	mov.w	ip, #0
 800905e:	1ca2      	adds	r2, r4, #2
 8009060:	9219      	str	r2, [sp, #100]	@ 0x64
 8009062:	78a2      	ldrb	r2, [r4, #2]
 8009064:	e785      	b.n	8008f72 <_strtod_l+0x192>
 8009066:	f04f 0c01 	mov.w	ip, #1
 800906a:	e7f8      	b.n	800905e <_strtod_l+0x27e>
 800906c:	080155a8 	.word	0x080155a8
 8009070:	08015590 	.word	0x08015590
 8009074:	7ff00000 	.word	0x7ff00000
 8009078:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800907a:	1c51      	adds	r1, r2, #1
 800907c:	9119      	str	r1, [sp, #100]	@ 0x64
 800907e:	7852      	ldrb	r2, [r2, #1]
 8009080:	2a30      	cmp	r2, #48	@ 0x30
 8009082:	d0f9      	beq.n	8009078 <_strtod_l+0x298>
 8009084:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009088:	2908      	cmp	r1, #8
 800908a:	f63f af78 	bhi.w	8008f7e <_strtod_l+0x19e>
 800908e:	3a30      	subs	r2, #48	@ 0x30
 8009090:	920e      	str	r2, [sp, #56]	@ 0x38
 8009092:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009094:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009096:	f04f 080a 	mov.w	r8, #10
 800909a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800909c:	1c56      	adds	r6, r2, #1
 800909e:	9619      	str	r6, [sp, #100]	@ 0x64
 80090a0:	7852      	ldrb	r2, [r2, #1]
 80090a2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80090a6:	f1be 0f09 	cmp.w	lr, #9
 80090aa:	d939      	bls.n	8009120 <_strtod_l+0x340>
 80090ac:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80090ae:	1a76      	subs	r6, r6, r1
 80090b0:	2e08      	cmp	r6, #8
 80090b2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80090b6:	dc03      	bgt.n	80090c0 <_strtod_l+0x2e0>
 80090b8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80090ba:	4588      	cmp	r8, r1
 80090bc:	bfa8      	it	ge
 80090be:	4688      	movge	r8, r1
 80090c0:	f1bc 0f00 	cmp.w	ip, #0
 80090c4:	d001      	beq.n	80090ca <_strtod_l+0x2ea>
 80090c6:	f1c8 0800 	rsb	r8, r8, #0
 80090ca:	2d00      	cmp	r5, #0
 80090cc:	d14e      	bne.n	800916c <_strtod_l+0x38c>
 80090ce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80090d0:	4308      	orrs	r0, r1
 80090d2:	f47f aebe 	bne.w	8008e52 <_strtod_l+0x72>
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	f47f aed6 	bne.w	8008e88 <_strtod_l+0xa8>
 80090dc:	2a69      	cmp	r2, #105	@ 0x69
 80090de:	d028      	beq.n	8009132 <_strtod_l+0x352>
 80090e0:	dc25      	bgt.n	800912e <_strtod_l+0x34e>
 80090e2:	2a49      	cmp	r2, #73	@ 0x49
 80090e4:	d025      	beq.n	8009132 <_strtod_l+0x352>
 80090e6:	2a4e      	cmp	r2, #78	@ 0x4e
 80090e8:	f47f aece 	bne.w	8008e88 <_strtod_l+0xa8>
 80090ec:	499b      	ldr	r1, [pc, #620]	@ (800935c <_strtod_l+0x57c>)
 80090ee:	a819      	add	r0, sp, #100	@ 0x64
 80090f0:	f001 fba6 	bl	800a840 <__match>
 80090f4:	2800      	cmp	r0, #0
 80090f6:	f43f aec7 	beq.w	8008e88 <_strtod_l+0xa8>
 80090fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80090fc:	781b      	ldrb	r3, [r3, #0]
 80090fe:	2b28      	cmp	r3, #40	@ 0x28
 8009100:	d12e      	bne.n	8009160 <_strtod_l+0x380>
 8009102:	4997      	ldr	r1, [pc, #604]	@ (8009360 <_strtod_l+0x580>)
 8009104:	aa1c      	add	r2, sp, #112	@ 0x70
 8009106:	a819      	add	r0, sp, #100	@ 0x64
 8009108:	f001 fbae 	bl	800a868 <__hexnan>
 800910c:	2805      	cmp	r0, #5
 800910e:	d127      	bne.n	8009160 <_strtod_l+0x380>
 8009110:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009112:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009116:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800911a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800911e:	e698      	b.n	8008e52 <_strtod_l+0x72>
 8009120:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009122:	fb08 2101 	mla	r1, r8, r1, r2
 8009126:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800912a:	920e      	str	r2, [sp, #56]	@ 0x38
 800912c:	e7b5      	b.n	800909a <_strtod_l+0x2ba>
 800912e:	2a6e      	cmp	r2, #110	@ 0x6e
 8009130:	e7da      	b.n	80090e8 <_strtod_l+0x308>
 8009132:	498c      	ldr	r1, [pc, #560]	@ (8009364 <_strtod_l+0x584>)
 8009134:	a819      	add	r0, sp, #100	@ 0x64
 8009136:	f001 fb83 	bl	800a840 <__match>
 800913a:	2800      	cmp	r0, #0
 800913c:	f43f aea4 	beq.w	8008e88 <_strtod_l+0xa8>
 8009140:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009142:	4989      	ldr	r1, [pc, #548]	@ (8009368 <_strtod_l+0x588>)
 8009144:	3b01      	subs	r3, #1
 8009146:	a819      	add	r0, sp, #100	@ 0x64
 8009148:	9319      	str	r3, [sp, #100]	@ 0x64
 800914a:	f001 fb79 	bl	800a840 <__match>
 800914e:	b910      	cbnz	r0, 8009156 <_strtod_l+0x376>
 8009150:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009152:	3301      	adds	r3, #1
 8009154:	9319      	str	r3, [sp, #100]	@ 0x64
 8009156:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009378 <_strtod_l+0x598>
 800915a:	f04f 0a00 	mov.w	sl, #0
 800915e:	e678      	b.n	8008e52 <_strtod_l+0x72>
 8009160:	4882      	ldr	r0, [pc, #520]	@ (800936c <_strtod_l+0x58c>)
 8009162:	f001 f8a9 	bl	800a2b8 <nan>
 8009166:	ec5b ab10 	vmov	sl, fp, d0
 800916a:	e672      	b.n	8008e52 <_strtod_l+0x72>
 800916c:	eba8 0309 	sub.w	r3, r8, r9
 8009170:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009172:	9309      	str	r3, [sp, #36]	@ 0x24
 8009174:	2f00      	cmp	r7, #0
 8009176:	bf08      	it	eq
 8009178:	462f      	moveq	r7, r5
 800917a:	2d10      	cmp	r5, #16
 800917c:	462c      	mov	r4, r5
 800917e:	bfa8      	it	ge
 8009180:	2410      	movge	r4, #16
 8009182:	f7f7 f9bf 	bl	8000504 <__aeabi_ui2d>
 8009186:	2d09      	cmp	r5, #9
 8009188:	4682      	mov	sl, r0
 800918a:	468b      	mov	fp, r1
 800918c:	dc13      	bgt.n	80091b6 <_strtod_l+0x3d6>
 800918e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009190:	2b00      	cmp	r3, #0
 8009192:	f43f ae5e 	beq.w	8008e52 <_strtod_l+0x72>
 8009196:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009198:	dd78      	ble.n	800928c <_strtod_l+0x4ac>
 800919a:	2b16      	cmp	r3, #22
 800919c:	dc5f      	bgt.n	800925e <_strtod_l+0x47e>
 800919e:	4974      	ldr	r1, [pc, #464]	@ (8009370 <_strtod_l+0x590>)
 80091a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80091a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80091a8:	4652      	mov	r2, sl
 80091aa:	465b      	mov	r3, fp
 80091ac:	f7f7 fa24 	bl	80005f8 <__aeabi_dmul>
 80091b0:	4682      	mov	sl, r0
 80091b2:	468b      	mov	fp, r1
 80091b4:	e64d      	b.n	8008e52 <_strtod_l+0x72>
 80091b6:	4b6e      	ldr	r3, [pc, #440]	@ (8009370 <_strtod_l+0x590>)
 80091b8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80091bc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80091c0:	f7f7 fa1a 	bl	80005f8 <__aeabi_dmul>
 80091c4:	4682      	mov	sl, r0
 80091c6:	9808      	ldr	r0, [sp, #32]
 80091c8:	468b      	mov	fp, r1
 80091ca:	f7f7 f99b 	bl	8000504 <__aeabi_ui2d>
 80091ce:	4602      	mov	r2, r0
 80091d0:	460b      	mov	r3, r1
 80091d2:	4650      	mov	r0, sl
 80091d4:	4659      	mov	r1, fp
 80091d6:	f7f7 f859 	bl	800028c <__adddf3>
 80091da:	2d0f      	cmp	r5, #15
 80091dc:	4682      	mov	sl, r0
 80091de:	468b      	mov	fp, r1
 80091e0:	ddd5      	ble.n	800918e <_strtod_l+0x3ae>
 80091e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091e4:	1b2c      	subs	r4, r5, r4
 80091e6:	441c      	add	r4, r3
 80091e8:	2c00      	cmp	r4, #0
 80091ea:	f340 8096 	ble.w	800931a <_strtod_l+0x53a>
 80091ee:	f014 030f 	ands.w	r3, r4, #15
 80091f2:	d00a      	beq.n	800920a <_strtod_l+0x42a>
 80091f4:	495e      	ldr	r1, [pc, #376]	@ (8009370 <_strtod_l+0x590>)
 80091f6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80091fa:	4652      	mov	r2, sl
 80091fc:	465b      	mov	r3, fp
 80091fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009202:	f7f7 f9f9 	bl	80005f8 <__aeabi_dmul>
 8009206:	4682      	mov	sl, r0
 8009208:	468b      	mov	fp, r1
 800920a:	f034 040f 	bics.w	r4, r4, #15
 800920e:	d073      	beq.n	80092f8 <_strtod_l+0x518>
 8009210:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009214:	dd48      	ble.n	80092a8 <_strtod_l+0x4c8>
 8009216:	2400      	movs	r4, #0
 8009218:	46a0      	mov	r8, r4
 800921a:	940a      	str	r4, [sp, #40]	@ 0x28
 800921c:	46a1      	mov	r9, r4
 800921e:	9a05      	ldr	r2, [sp, #20]
 8009220:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009378 <_strtod_l+0x598>
 8009224:	2322      	movs	r3, #34	@ 0x22
 8009226:	6013      	str	r3, [r2, #0]
 8009228:	f04f 0a00 	mov.w	sl, #0
 800922c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800922e:	2b00      	cmp	r3, #0
 8009230:	f43f ae0f 	beq.w	8008e52 <_strtod_l+0x72>
 8009234:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009236:	9805      	ldr	r0, [sp, #20]
 8009238:	f7ff f942 	bl	80084c0 <_Bfree>
 800923c:	9805      	ldr	r0, [sp, #20]
 800923e:	4649      	mov	r1, r9
 8009240:	f7ff f93e 	bl	80084c0 <_Bfree>
 8009244:	9805      	ldr	r0, [sp, #20]
 8009246:	4641      	mov	r1, r8
 8009248:	f7ff f93a 	bl	80084c0 <_Bfree>
 800924c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800924e:	9805      	ldr	r0, [sp, #20]
 8009250:	f7ff f936 	bl	80084c0 <_Bfree>
 8009254:	9805      	ldr	r0, [sp, #20]
 8009256:	4621      	mov	r1, r4
 8009258:	f7ff f932 	bl	80084c0 <_Bfree>
 800925c:	e5f9      	b.n	8008e52 <_strtod_l+0x72>
 800925e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009260:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009264:	4293      	cmp	r3, r2
 8009266:	dbbc      	blt.n	80091e2 <_strtod_l+0x402>
 8009268:	4c41      	ldr	r4, [pc, #260]	@ (8009370 <_strtod_l+0x590>)
 800926a:	f1c5 050f 	rsb	r5, r5, #15
 800926e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009272:	4652      	mov	r2, sl
 8009274:	465b      	mov	r3, fp
 8009276:	e9d1 0100 	ldrd	r0, r1, [r1]
 800927a:	f7f7 f9bd 	bl	80005f8 <__aeabi_dmul>
 800927e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009280:	1b5d      	subs	r5, r3, r5
 8009282:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009286:	e9d4 2300 	ldrd	r2, r3, [r4]
 800928a:	e78f      	b.n	80091ac <_strtod_l+0x3cc>
 800928c:	3316      	adds	r3, #22
 800928e:	dba8      	blt.n	80091e2 <_strtod_l+0x402>
 8009290:	4b37      	ldr	r3, [pc, #220]	@ (8009370 <_strtod_l+0x590>)
 8009292:	eba9 0808 	sub.w	r8, r9, r8
 8009296:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800929a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800929e:	4650      	mov	r0, sl
 80092a0:	4659      	mov	r1, fp
 80092a2:	f7f7 fad3 	bl	800084c <__aeabi_ddiv>
 80092a6:	e783      	b.n	80091b0 <_strtod_l+0x3d0>
 80092a8:	4b32      	ldr	r3, [pc, #200]	@ (8009374 <_strtod_l+0x594>)
 80092aa:	9308      	str	r3, [sp, #32]
 80092ac:	2300      	movs	r3, #0
 80092ae:	1124      	asrs	r4, r4, #4
 80092b0:	4650      	mov	r0, sl
 80092b2:	4659      	mov	r1, fp
 80092b4:	461e      	mov	r6, r3
 80092b6:	2c01      	cmp	r4, #1
 80092b8:	dc21      	bgt.n	80092fe <_strtod_l+0x51e>
 80092ba:	b10b      	cbz	r3, 80092c0 <_strtod_l+0x4e0>
 80092bc:	4682      	mov	sl, r0
 80092be:	468b      	mov	fp, r1
 80092c0:	492c      	ldr	r1, [pc, #176]	@ (8009374 <_strtod_l+0x594>)
 80092c2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80092c6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80092ca:	4652      	mov	r2, sl
 80092cc:	465b      	mov	r3, fp
 80092ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092d2:	f7f7 f991 	bl	80005f8 <__aeabi_dmul>
 80092d6:	4b28      	ldr	r3, [pc, #160]	@ (8009378 <_strtod_l+0x598>)
 80092d8:	460a      	mov	r2, r1
 80092da:	400b      	ands	r3, r1
 80092dc:	4927      	ldr	r1, [pc, #156]	@ (800937c <_strtod_l+0x59c>)
 80092de:	428b      	cmp	r3, r1
 80092e0:	4682      	mov	sl, r0
 80092e2:	d898      	bhi.n	8009216 <_strtod_l+0x436>
 80092e4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80092e8:	428b      	cmp	r3, r1
 80092ea:	bf86      	itte	hi
 80092ec:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009380 <_strtod_l+0x5a0>
 80092f0:	f04f 3aff 	movhi.w	sl, #4294967295
 80092f4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80092f8:	2300      	movs	r3, #0
 80092fa:	9308      	str	r3, [sp, #32]
 80092fc:	e07a      	b.n	80093f4 <_strtod_l+0x614>
 80092fe:	07e2      	lsls	r2, r4, #31
 8009300:	d505      	bpl.n	800930e <_strtod_l+0x52e>
 8009302:	9b08      	ldr	r3, [sp, #32]
 8009304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009308:	f7f7 f976 	bl	80005f8 <__aeabi_dmul>
 800930c:	2301      	movs	r3, #1
 800930e:	9a08      	ldr	r2, [sp, #32]
 8009310:	3208      	adds	r2, #8
 8009312:	3601      	adds	r6, #1
 8009314:	1064      	asrs	r4, r4, #1
 8009316:	9208      	str	r2, [sp, #32]
 8009318:	e7cd      	b.n	80092b6 <_strtod_l+0x4d6>
 800931a:	d0ed      	beq.n	80092f8 <_strtod_l+0x518>
 800931c:	4264      	negs	r4, r4
 800931e:	f014 020f 	ands.w	r2, r4, #15
 8009322:	d00a      	beq.n	800933a <_strtod_l+0x55a>
 8009324:	4b12      	ldr	r3, [pc, #72]	@ (8009370 <_strtod_l+0x590>)
 8009326:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800932a:	4650      	mov	r0, sl
 800932c:	4659      	mov	r1, fp
 800932e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009332:	f7f7 fa8b 	bl	800084c <__aeabi_ddiv>
 8009336:	4682      	mov	sl, r0
 8009338:	468b      	mov	fp, r1
 800933a:	1124      	asrs	r4, r4, #4
 800933c:	d0dc      	beq.n	80092f8 <_strtod_l+0x518>
 800933e:	2c1f      	cmp	r4, #31
 8009340:	dd20      	ble.n	8009384 <_strtod_l+0x5a4>
 8009342:	2400      	movs	r4, #0
 8009344:	46a0      	mov	r8, r4
 8009346:	940a      	str	r4, [sp, #40]	@ 0x28
 8009348:	46a1      	mov	r9, r4
 800934a:	9a05      	ldr	r2, [sp, #20]
 800934c:	2322      	movs	r3, #34	@ 0x22
 800934e:	f04f 0a00 	mov.w	sl, #0
 8009352:	f04f 0b00 	mov.w	fp, #0
 8009356:	6013      	str	r3, [r2, #0]
 8009358:	e768      	b.n	800922c <_strtod_l+0x44c>
 800935a:	bf00      	nop
 800935c:	08015381 	.word	0x08015381
 8009360:	08015594 	.word	0x08015594
 8009364:	08015379 	.word	0x08015379
 8009368:	080153b0 	.word	0x080153b0
 800936c:	0801573d 	.word	0x0801573d
 8009370:	080154c8 	.word	0x080154c8
 8009374:	080154a0 	.word	0x080154a0
 8009378:	7ff00000 	.word	0x7ff00000
 800937c:	7ca00000 	.word	0x7ca00000
 8009380:	7fefffff 	.word	0x7fefffff
 8009384:	f014 0310 	ands.w	r3, r4, #16
 8009388:	bf18      	it	ne
 800938a:	236a      	movne	r3, #106	@ 0x6a
 800938c:	4ea9      	ldr	r6, [pc, #676]	@ (8009634 <_strtod_l+0x854>)
 800938e:	9308      	str	r3, [sp, #32]
 8009390:	4650      	mov	r0, sl
 8009392:	4659      	mov	r1, fp
 8009394:	2300      	movs	r3, #0
 8009396:	07e2      	lsls	r2, r4, #31
 8009398:	d504      	bpl.n	80093a4 <_strtod_l+0x5c4>
 800939a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800939e:	f7f7 f92b 	bl	80005f8 <__aeabi_dmul>
 80093a2:	2301      	movs	r3, #1
 80093a4:	1064      	asrs	r4, r4, #1
 80093a6:	f106 0608 	add.w	r6, r6, #8
 80093aa:	d1f4      	bne.n	8009396 <_strtod_l+0x5b6>
 80093ac:	b10b      	cbz	r3, 80093b2 <_strtod_l+0x5d2>
 80093ae:	4682      	mov	sl, r0
 80093b0:	468b      	mov	fp, r1
 80093b2:	9b08      	ldr	r3, [sp, #32]
 80093b4:	b1b3      	cbz	r3, 80093e4 <_strtod_l+0x604>
 80093b6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80093ba:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80093be:	2b00      	cmp	r3, #0
 80093c0:	4659      	mov	r1, fp
 80093c2:	dd0f      	ble.n	80093e4 <_strtod_l+0x604>
 80093c4:	2b1f      	cmp	r3, #31
 80093c6:	dd55      	ble.n	8009474 <_strtod_l+0x694>
 80093c8:	2b34      	cmp	r3, #52	@ 0x34
 80093ca:	bfde      	ittt	le
 80093cc:	f04f 33ff 	movle.w	r3, #4294967295
 80093d0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80093d4:	4093      	lslle	r3, r2
 80093d6:	f04f 0a00 	mov.w	sl, #0
 80093da:	bfcc      	ite	gt
 80093dc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80093e0:	ea03 0b01 	andle.w	fp, r3, r1
 80093e4:	2200      	movs	r2, #0
 80093e6:	2300      	movs	r3, #0
 80093e8:	4650      	mov	r0, sl
 80093ea:	4659      	mov	r1, fp
 80093ec:	f7f7 fb6c 	bl	8000ac8 <__aeabi_dcmpeq>
 80093f0:	2800      	cmp	r0, #0
 80093f2:	d1a6      	bne.n	8009342 <_strtod_l+0x562>
 80093f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80093f6:	9300      	str	r3, [sp, #0]
 80093f8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80093fa:	9805      	ldr	r0, [sp, #20]
 80093fc:	462b      	mov	r3, r5
 80093fe:	463a      	mov	r2, r7
 8009400:	f7ff f8c6 	bl	8008590 <__s2b>
 8009404:	900a      	str	r0, [sp, #40]	@ 0x28
 8009406:	2800      	cmp	r0, #0
 8009408:	f43f af05 	beq.w	8009216 <_strtod_l+0x436>
 800940c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800940e:	2a00      	cmp	r2, #0
 8009410:	eba9 0308 	sub.w	r3, r9, r8
 8009414:	bfa8      	it	ge
 8009416:	2300      	movge	r3, #0
 8009418:	9312      	str	r3, [sp, #72]	@ 0x48
 800941a:	2400      	movs	r4, #0
 800941c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009420:	9316      	str	r3, [sp, #88]	@ 0x58
 8009422:	46a0      	mov	r8, r4
 8009424:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009426:	9805      	ldr	r0, [sp, #20]
 8009428:	6859      	ldr	r1, [r3, #4]
 800942a:	f7ff f809 	bl	8008440 <_Balloc>
 800942e:	4681      	mov	r9, r0
 8009430:	2800      	cmp	r0, #0
 8009432:	f43f aef4 	beq.w	800921e <_strtod_l+0x43e>
 8009436:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009438:	691a      	ldr	r2, [r3, #16]
 800943a:	3202      	adds	r2, #2
 800943c:	f103 010c 	add.w	r1, r3, #12
 8009440:	0092      	lsls	r2, r2, #2
 8009442:	300c      	adds	r0, #12
 8009444:	f7fe f89b 	bl	800757e <memcpy>
 8009448:	ec4b ab10 	vmov	d0, sl, fp
 800944c:	9805      	ldr	r0, [sp, #20]
 800944e:	aa1c      	add	r2, sp, #112	@ 0x70
 8009450:	a91b      	add	r1, sp, #108	@ 0x6c
 8009452:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009456:	f7ff fbd7 	bl	8008c08 <__d2b>
 800945a:	901a      	str	r0, [sp, #104]	@ 0x68
 800945c:	2800      	cmp	r0, #0
 800945e:	f43f aede 	beq.w	800921e <_strtod_l+0x43e>
 8009462:	9805      	ldr	r0, [sp, #20]
 8009464:	2101      	movs	r1, #1
 8009466:	f7ff f929 	bl	80086bc <__i2b>
 800946a:	4680      	mov	r8, r0
 800946c:	b948      	cbnz	r0, 8009482 <_strtod_l+0x6a2>
 800946e:	f04f 0800 	mov.w	r8, #0
 8009472:	e6d4      	b.n	800921e <_strtod_l+0x43e>
 8009474:	f04f 32ff 	mov.w	r2, #4294967295
 8009478:	fa02 f303 	lsl.w	r3, r2, r3
 800947c:	ea03 0a0a 	and.w	sl, r3, sl
 8009480:	e7b0      	b.n	80093e4 <_strtod_l+0x604>
 8009482:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009484:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009486:	2d00      	cmp	r5, #0
 8009488:	bfab      	itete	ge
 800948a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800948c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800948e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009490:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009492:	bfac      	ite	ge
 8009494:	18ef      	addge	r7, r5, r3
 8009496:	1b5e      	sublt	r6, r3, r5
 8009498:	9b08      	ldr	r3, [sp, #32]
 800949a:	1aed      	subs	r5, r5, r3
 800949c:	4415      	add	r5, r2
 800949e:	4b66      	ldr	r3, [pc, #408]	@ (8009638 <_strtod_l+0x858>)
 80094a0:	3d01      	subs	r5, #1
 80094a2:	429d      	cmp	r5, r3
 80094a4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80094a8:	da50      	bge.n	800954c <_strtod_l+0x76c>
 80094aa:	1b5b      	subs	r3, r3, r5
 80094ac:	2b1f      	cmp	r3, #31
 80094ae:	eba2 0203 	sub.w	r2, r2, r3
 80094b2:	f04f 0101 	mov.w	r1, #1
 80094b6:	dc3d      	bgt.n	8009534 <_strtod_l+0x754>
 80094b8:	fa01 f303 	lsl.w	r3, r1, r3
 80094bc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80094be:	2300      	movs	r3, #0
 80094c0:	9310      	str	r3, [sp, #64]	@ 0x40
 80094c2:	18bd      	adds	r5, r7, r2
 80094c4:	9b08      	ldr	r3, [sp, #32]
 80094c6:	42af      	cmp	r7, r5
 80094c8:	4416      	add	r6, r2
 80094ca:	441e      	add	r6, r3
 80094cc:	463b      	mov	r3, r7
 80094ce:	bfa8      	it	ge
 80094d0:	462b      	movge	r3, r5
 80094d2:	42b3      	cmp	r3, r6
 80094d4:	bfa8      	it	ge
 80094d6:	4633      	movge	r3, r6
 80094d8:	2b00      	cmp	r3, #0
 80094da:	bfc2      	ittt	gt
 80094dc:	1aed      	subgt	r5, r5, r3
 80094de:	1af6      	subgt	r6, r6, r3
 80094e0:	1aff      	subgt	r7, r7, r3
 80094e2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	dd16      	ble.n	8009516 <_strtod_l+0x736>
 80094e8:	4641      	mov	r1, r8
 80094ea:	9805      	ldr	r0, [sp, #20]
 80094ec:	461a      	mov	r2, r3
 80094ee:	f7ff f9a5 	bl	800883c <__pow5mult>
 80094f2:	4680      	mov	r8, r0
 80094f4:	2800      	cmp	r0, #0
 80094f6:	d0ba      	beq.n	800946e <_strtod_l+0x68e>
 80094f8:	4601      	mov	r1, r0
 80094fa:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80094fc:	9805      	ldr	r0, [sp, #20]
 80094fe:	f7ff f8f3 	bl	80086e8 <__multiply>
 8009502:	900e      	str	r0, [sp, #56]	@ 0x38
 8009504:	2800      	cmp	r0, #0
 8009506:	f43f ae8a 	beq.w	800921e <_strtod_l+0x43e>
 800950a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800950c:	9805      	ldr	r0, [sp, #20]
 800950e:	f7fe ffd7 	bl	80084c0 <_Bfree>
 8009512:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009514:	931a      	str	r3, [sp, #104]	@ 0x68
 8009516:	2d00      	cmp	r5, #0
 8009518:	dc1d      	bgt.n	8009556 <_strtod_l+0x776>
 800951a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800951c:	2b00      	cmp	r3, #0
 800951e:	dd23      	ble.n	8009568 <_strtod_l+0x788>
 8009520:	4649      	mov	r1, r9
 8009522:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009524:	9805      	ldr	r0, [sp, #20]
 8009526:	f7ff f989 	bl	800883c <__pow5mult>
 800952a:	4681      	mov	r9, r0
 800952c:	b9e0      	cbnz	r0, 8009568 <_strtod_l+0x788>
 800952e:	f04f 0900 	mov.w	r9, #0
 8009532:	e674      	b.n	800921e <_strtod_l+0x43e>
 8009534:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009538:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800953c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009540:	35e2      	adds	r5, #226	@ 0xe2
 8009542:	fa01 f305 	lsl.w	r3, r1, r5
 8009546:	9310      	str	r3, [sp, #64]	@ 0x40
 8009548:	9113      	str	r1, [sp, #76]	@ 0x4c
 800954a:	e7ba      	b.n	80094c2 <_strtod_l+0x6e2>
 800954c:	2300      	movs	r3, #0
 800954e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009550:	2301      	movs	r3, #1
 8009552:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009554:	e7b5      	b.n	80094c2 <_strtod_l+0x6e2>
 8009556:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009558:	9805      	ldr	r0, [sp, #20]
 800955a:	462a      	mov	r2, r5
 800955c:	f7ff f9c8 	bl	80088f0 <__lshift>
 8009560:	901a      	str	r0, [sp, #104]	@ 0x68
 8009562:	2800      	cmp	r0, #0
 8009564:	d1d9      	bne.n	800951a <_strtod_l+0x73a>
 8009566:	e65a      	b.n	800921e <_strtod_l+0x43e>
 8009568:	2e00      	cmp	r6, #0
 800956a:	dd07      	ble.n	800957c <_strtod_l+0x79c>
 800956c:	4649      	mov	r1, r9
 800956e:	9805      	ldr	r0, [sp, #20]
 8009570:	4632      	mov	r2, r6
 8009572:	f7ff f9bd 	bl	80088f0 <__lshift>
 8009576:	4681      	mov	r9, r0
 8009578:	2800      	cmp	r0, #0
 800957a:	d0d8      	beq.n	800952e <_strtod_l+0x74e>
 800957c:	2f00      	cmp	r7, #0
 800957e:	dd08      	ble.n	8009592 <_strtod_l+0x7b2>
 8009580:	4641      	mov	r1, r8
 8009582:	9805      	ldr	r0, [sp, #20]
 8009584:	463a      	mov	r2, r7
 8009586:	f7ff f9b3 	bl	80088f0 <__lshift>
 800958a:	4680      	mov	r8, r0
 800958c:	2800      	cmp	r0, #0
 800958e:	f43f ae46 	beq.w	800921e <_strtod_l+0x43e>
 8009592:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009594:	9805      	ldr	r0, [sp, #20]
 8009596:	464a      	mov	r2, r9
 8009598:	f7ff fa32 	bl	8008a00 <__mdiff>
 800959c:	4604      	mov	r4, r0
 800959e:	2800      	cmp	r0, #0
 80095a0:	f43f ae3d 	beq.w	800921e <_strtod_l+0x43e>
 80095a4:	68c3      	ldr	r3, [r0, #12]
 80095a6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80095a8:	2300      	movs	r3, #0
 80095aa:	60c3      	str	r3, [r0, #12]
 80095ac:	4641      	mov	r1, r8
 80095ae:	f7ff fa0b 	bl	80089c8 <__mcmp>
 80095b2:	2800      	cmp	r0, #0
 80095b4:	da46      	bge.n	8009644 <_strtod_l+0x864>
 80095b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80095b8:	ea53 030a 	orrs.w	r3, r3, sl
 80095bc:	d16c      	bne.n	8009698 <_strtod_l+0x8b8>
 80095be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d168      	bne.n	8009698 <_strtod_l+0x8b8>
 80095c6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80095ca:	0d1b      	lsrs	r3, r3, #20
 80095cc:	051b      	lsls	r3, r3, #20
 80095ce:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80095d2:	d961      	bls.n	8009698 <_strtod_l+0x8b8>
 80095d4:	6963      	ldr	r3, [r4, #20]
 80095d6:	b913      	cbnz	r3, 80095de <_strtod_l+0x7fe>
 80095d8:	6923      	ldr	r3, [r4, #16]
 80095da:	2b01      	cmp	r3, #1
 80095dc:	dd5c      	ble.n	8009698 <_strtod_l+0x8b8>
 80095de:	4621      	mov	r1, r4
 80095e0:	2201      	movs	r2, #1
 80095e2:	9805      	ldr	r0, [sp, #20]
 80095e4:	f7ff f984 	bl	80088f0 <__lshift>
 80095e8:	4641      	mov	r1, r8
 80095ea:	4604      	mov	r4, r0
 80095ec:	f7ff f9ec 	bl	80089c8 <__mcmp>
 80095f0:	2800      	cmp	r0, #0
 80095f2:	dd51      	ble.n	8009698 <_strtod_l+0x8b8>
 80095f4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80095f8:	9a08      	ldr	r2, [sp, #32]
 80095fa:	0d1b      	lsrs	r3, r3, #20
 80095fc:	051b      	lsls	r3, r3, #20
 80095fe:	2a00      	cmp	r2, #0
 8009600:	d06b      	beq.n	80096da <_strtod_l+0x8fa>
 8009602:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009606:	d868      	bhi.n	80096da <_strtod_l+0x8fa>
 8009608:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800960c:	f67f ae9d 	bls.w	800934a <_strtod_l+0x56a>
 8009610:	4b0a      	ldr	r3, [pc, #40]	@ (800963c <_strtod_l+0x85c>)
 8009612:	4650      	mov	r0, sl
 8009614:	4659      	mov	r1, fp
 8009616:	2200      	movs	r2, #0
 8009618:	f7f6 ffee 	bl	80005f8 <__aeabi_dmul>
 800961c:	4b08      	ldr	r3, [pc, #32]	@ (8009640 <_strtod_l+0x860>)
 800961e:	400b      	ands	r3, r1
 8009620:	4682      	mov	sl, r0
 8009622:	468b      	mov	fp, r1
 8009624:	2b00      	cmp	r3, #0
 8009626:	f47f ae05 	bne.w	8009234 <_strtod_l+0x454>
 800962a:	9a05      	ldr	r2, [sp, #20]
 800962c:	2322      	movs	r3, #34	@ 0x22
 800962e:	6013      	str	r3, [r2, #0]
 8009630:	e600      	b.n	8009234 <_strtod_l+0x454>
 8009632:	bf00      	nop
 8009634:	080155c0 	.word	0x080155c0
 8009638:	fffffc02 	.word	0xfffffc02
 800963c:	39500000 	.word	0x39500000
 8009640:	7ff00000 	.word	0x7ff00000
 8009644:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009648:	d165      	bne.n	8009716 <_strtod_l+0x936>
 800964a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800964c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009650:	b35a      	cbz	r2, 80096aa <_strtod_l+0x8ca>
 8009652:	4a9f      	ldr	r2, [pc, #636]	@ (80098d0 <_strtod_l+0xaf0>)
 8009654:	4293      	cmp	r3, r2
 8009656:	d12b      	bne.n	80096b0 <_strtod_l+0x8d0>
 8009658:	9b08      	ldr	r3, [sp, #32]
 800965a:	4651      	mov	r1, sl
 800965c:	b303      	cbz	r3, 80096a0 <_strtod_l+0x8c0>
 800965e:	4b9d      	ldr	r3, [pc, #628]	@ (80098d4 <_strtod_l+0xaf4>)
 8009660:	465a      	mov	r2, fp
 8009662:	4013      	ands	r3, r2
 8009664:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009668:	f04f 32ff 	mov.w	r2, #4294967295
 800966c:	d81b      	bhi.n	80096a6 <_strtod_l+0x8c6>
 800966e:	0d1b      	lsrs	r3, r3, #20
 8009670:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009674:	fa02 f303 	lsl.w	r3, r2, r3
 8009678:	4299      	cmp	r1, r3
 800967a:	d119      	bne.n	80096b0 <_strtod_l+0x8d0>
 800967c:	4b96      	ldr	r3, [pc, #600]	@ (80098d8 <_strtod_l+0xaf8>)
 800967e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009680:	429a      	cmp	r2, r3
 8009682:	d102      	bne.n	800968a <_strtod_l+0x8aa>
 8009684:	3101      	adds	r1, #1
 8009686:	f43f adca 	beq.w	800921e <_strtod_l+0x43e>
 800968a:	4b92      	ldr	r3, [pc, #584]	@ (80098d4 <_strtod_l+0xaf4>)
 800968c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800968e:	401a      	ands	r2, r3
 8009690:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009694:	f04f 0a00 	mov.w	sl, #0
 8009698:	9b08      	ldr	r3, [sp, #32]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d1b8      	bne.n	8009610 <_strtod_l+0x830>
 800969e:	e5c9      	b.n	8009234 <_strtod_l+0x454>
 80096a0:	f04f 33ff 	mov.w	r3, #4294967295
 80096a4:	e7e8      	b.n	8009678 <_strtod_l+0x898>
 80096a6:	4613      	mov	r3, r2
 80096a8:	e7e6      	b.n	8009678 <_strtod_l+0x898>
 80096aa:	ea53 030a 	orrs.w	r3, r3, sl
 80096ae:	d0a1      	beq.n	80095f4 <_strtod_l+0x814>
 80096b0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80096b2:	b1db      	cbz	r3, 80096ec <_strtod_l+0x90c>
 80096b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80096b6:	4213      	tst	r3, r2
 80096b8:	d0ee      	beq.n	8009698 <_strtod_l+0x8b8>
 80096ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80096bc:	9a08      	ldr	r2, [sp, #32]
 80096be:	4650      	mov	r0, sl
 80096c0:	4659      	mov	r1, fp
 80096c2:	b1bb      	cbz	r3, 80096f4 <_strtod_l+0x914>
 80096c4:	f7ff fb6e 	bl	8008da4 <sulp>
 80096c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80096cc:	ec53 2b10 	vmov	r2, r3, d0
 80096d0:	f7f6 fddc 	bl	800028c <__adddf3>
 80096d4:	4682      	mov	sl, r0
 80096d6:	468b      	mov	fp, r1
 80096d8:	e7de      	b.n	8009698 <_strtod_l+0x8b8>
 80096da:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80096de:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80096e2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80096e6:	f04f 3aff 	mov.w	sl, #4294967295
 80096ea:	e7d5      	b.n	8009698 <_strtod_l+0x8b8>
 80096ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80096ee:	ea13 0f0a 	tst.w	r3, sl
 80096f2:	e7e1      	b.n	80096b8 <_strtod_l+0x8d8>
 80096f4:	f7ff fb56 	bl	8008da4 <sulp>
 80096f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80096fc:	ec53 2b10 	vmov	r2, r3, d0
 8009700:	f7f6 fdc2 	bl	8000288 <__aeabi_dsub>
 8009704:	2200      	movs	r2, #0
 8009706:	2300      	movs	r3, #0
 8009708:	4682      	mov	sl, r0
 800970a:	468b      	mov	fp, r1
 800970c:	f7f7 f9dc 	bl	8000ac8 <__aeabi_dcmpeq>
 8009710:	2800      	cmp	r0, #0
 8009712:	d0c1      	beq.n	8009698 <_strtod_l+0x8b8>
 8009714:	e619      	b.n	800934a <_strtod_l+0x56a>
 8009716:	4641      	mov	r1, r8
 8009718:	4620      	mov	r0, r4
 800971a:	f7ff facd 	bl	8008cb8 <__ratio>
 800971e:	ec57 6b10 	vmov	r6, r7, d0
 8009722:	2200      	movs	r2, #0
 8009724:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009728:	4630      	mov	r0, r6
 800972a:	4639      	mov	r1, r7
 800972c:	f7f7 f9e0 	bl	8000af0 <__aeabi_dcmple>
 8009730:	2800      	cmp	r0, #0
 8009732:	d06f      	beq.n	8009814 <_strtod_l+0xa34>
 8009734:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009736:	2b00      	cmp	r3, #0
 8009738:	d17a      	bne.n	8009830 <_strtod_l+0xa50>
 800973a:	f1ba 0f00 	cmp.w	sl, #0
 800973e:	d158      	bne.n	80097f2 <_strtod_l+0xa12>
 8009740:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009742:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009746:	2b00      	cmp	r3, #0
 8009748:	d15a      	bne.n	8009800 <_strtod_l+0xa20>
 800974a:	4b64      	ldr	r3, [pc, #400]	@ (80098dc <_strtod_l+0xafc>)
 800974c:	2200      	movs	r2, #0
 800974e:	4630      	mov	r0, r6
 8009750:	4639      	mov	r1, r7
 8009752:	f7f7 f9c3 	bl	8000adc <__aeabi_dcmplt>
 8009756:	2800      	cmp	r0, #0
 8009758:	d159      	bne.n	800980e <_strtod_l+0xa2e>
 800975a:	4630      	mov	r0, r6
 800975c:	4639      	mov	r1, r7
 800975e:	4b60      	ldr	r3, [pc, #384]	@ (80098e0 <_strtod_l+0xb00>)
 8009760:	2200      	movs	r2, #0
 8009762:	f7f6 ff49 	bl	80005f8 <__aeabi_dmul>
 8009766:	4606      	mov	r6, r0
 8009768:	460f      	mov	r7, r1
 800976a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800976e:	9606      	str	r6, [sp, #24]
 8009770:	9307      	str	r3, [sp, #28]
 8009772:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009776:	4d57      	ldr	r5, [pc, #348]	@ (80098d4 <_strtod_l+0xaf4>)
 8009778:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800977c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800977e:	401d      	ands	r5, r3
 8009780:	4b58      	ldr	r3, [pc, #352]	@ (80098e4 <_strtod_l+0xb04>)
 8009782:	429d      	cmp	r5, r3
 8009784:	f040 80b2 	bne.w	80098ec <_strtod_l+0xb0c>
 8009788:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800978a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800978e:	ec4b ab10 	vmov	d0, sl, fp
 8009792:	f7ff f9c9 	bl	8008b28 <__ulp>
 8009796:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800979a:	ec51 0b10 	vmov	r0, r1, d0
 800979e:	f7f6 ff2b 	bl	80005f8 <__aeabi_dmul>
 80097a2:	4652      	mov	r2, sl
 80097a4:	465b      	mov	r3, fp
 80097a6:	f7f6 fd71 	bl	800028c <__adddf3>
 80097aa:	460b      	mov	r3, r1
 80097ac:	4949      	ldr	r1, [pc, #292]	@ (80098d4 <_strtod_l+0xaf4>)
 80097ae:	4a4e      	ldr	r2, [pc, #312]	@ (80098e8 <_strtod_l+0xb08>)
 80097b0:	4019      	ands	r1, r3
 80097b2:	4291      	cmp	r1, r2
 80097b4:	4682      	mov	sl, r0
 80097b6:	d942      	bls.n	800983e <_strtod_l+0xa5e>
 80097b8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80097ba:	4b47      	ldr	r3, [pc, #284]	@ (80098d8 <_strtod_l+0xaf8>)
 80097bc:	429a      	cmp	r2, r3
 80097be:	d103      	bne.n	80097c8 <_strtod_l+0x9e8>
 80097c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80097c2:	3301      	adds	r3, #1
 80097c4:	f43f ad2b 	beq.w	800921e <_strtod_l+0x43e>
 80097c8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80098d8 <_strtod_l+0xaf8>
 80097cc:	f04f 3aff 	mov.w	sl, #4294967295
 80097d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80097d2:	9805      	ldr	r0, [sp, #20]
 80097d4:	f7fe fe74 	bl	80084c0 <_Bfree>
 80097d8:	9805      	ldr	r0, [sp, #20]
 80097da:	4649      	mov	r1, r9
 80097dc:	f7fe fe70 	bl	80084c0 <_Bfree>
 80097e0:	9805      	ldr	r0, [sp, #20]
 80097e2:	4641      	mov	r1, r8
 80097e4:	f7fe fe6c 	bl	80084c0 <_Bfree>
 80097e8:	9805      	ldr	r0, [sp, #20]
 80097ea:	4621      	mov	r1, r4
 80097ec:	f7fe fe68 	bl	80084c0 <_Bfree>
 80097f0:	e618      	b.n	8009424 <_strtod_l+0x644>
 80097f2:	f1ba 0f01 	cmp.w	sl, #1
 80097f6:	d103      	bne.n	8009800 <_strtod_l+0xa20>
 80097f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	f43f ada5 	beq.w	800934a <_strtod_l+0x56a>
 8009800:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80098b0 <_strtod_l+0xad0>
 8009804:	4f35      	ldr	r7, [pc, #212]	@ (80098dc <_strtod_l+0xafc>)
 8009806:	ed8d 7b06 	vstr	d7, [sp, #24]
 800980a:	2600      	movs	r6, #0
 800980c:	e7b1      	b.n	8009772 <_strtod_l+0x992>
 800980e:	4f34      	ldr	r7, [pc, #208]	@ (80098e0 <_strtod_l+0xb00>)
 8009810:	2600      	movs	r6, #0
 8009812:	e7aa      	b.n	800976a <_strtod_l+0x98a>
 8009814:	4b32      	ldr	r3, [pc, #200]	@ (80098e0 <_strtod_l+0xb00>)
 8009816:	4630      	mov	r0, r6
 8009818:	4639      	mov	r1, r7
 800981a:	2200      	movs	r2, #0
 800981c:	f7f6 feec 	bl	80005f8 <__aeabi_dmul>
 8009820:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009822:	4606      	mov	r6, r0
 8009824:	460f      	mov	r7, r1
 8009826:	2b00      	cmp	r3, #0
 8009828:	d09f      	beq.n	800976a <_strtod_l+0x98a>
 800982a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800982e:	e7a0      	b.n	8009772 <_strtod_l+0x992>
 8009830:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80098b8 <_strtod_l+0xad8>
 8009834:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009838:	ec57 6b17 	vmov	r6, r7, d7
 800983c:	e799      	b.n	8009772 <_strtod_l+0x992>
 800983e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009842:	9b08      	ldr	r3, [sp, #32]
 8009844:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009848:	2b00      	cmp	r3, #0
 800984a:	d1c1      	bne.n	80097d0 <_strtod_l+0x9f0>
 800984c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009850:	0d1b      	lsrs	r3, r3, #20
 8009852:	051b      	lsls	r3, r3, #20
 8009854:	429d      	cmp	r5, r3
 8009856:	d1bb      	bne.n	80097d0 <_strtod_l+0x9f0>
 8009858:	4630      	mov	r0, r6
 800985a:	4639      	mov	r1, r7
 800985c:	f7f7 fa2c 	bl	8000cb8 <__aeabi_d2lz>
 8009860:	f7f6 fe9c 	bl	800059c <__aeabi_l2d>
 8009864:	4602      	mov	r2, r0
 8009866:	460b      	mov	r3, r1
 8009868:	4630      	mov	r0, r6
 800986a:	4639      	mov	r1, r7
 800986c:	f7f6 fd0c 	bl	8000288 <__aeabi_dsub>
 8009870:	460b      	mov	r3, r1
 8009872:	4602      	mov	r2, r0
 8009874:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009878:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800987c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800987e:	ea46 060a 	orr.w	r6, r6, sl
 8009882:	431e      	orrs	r6, r3
 8009884:	d06f      	beq.n	8009966 <_strtod_l+0xb86>
 8009886:	a30e      	add	r3, pc, #56	@ (adr r3, 80098c0 <_strtod_l+0xae0>)
 8009888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800988c:	f7f7 f926 	bl	8000adc <__aeabi_dcmplt>
 8009890:	2800      	cmp	r0, #0
 8009892:	f47f accf 	bne.w	8009234 <_strtod_l+0x454>
 8009896:	a30c      	add	r3, pc, #48	@ (adr r3, 80098c8 <_strtod_l+0xae8>)
 8009898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800989c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80098a0:	f7f7 f93a 	bl	8000b18 <__aeabi_dcmpgt>
 80098a4:	2800      	cmp	r0, #0
 80098a6:	d093      	beq.n	80097d0 <_strtod_l+0x9f0>
 80098a8:	e4c4      	b.n	8009234 <_strtod_l+0x454>
 80098aa:	bf00      	nop
 80098ac:	f3af 8000 	nop.w
 80098b0:	00000000 	.word	0x00000000
 80098b4:	bff00000 	.word	0xbff00000
 80098b8:	00000000 	.word	0x00000000
 80098bc:	3ff00000 	.word	0x3ff00000
 80098c0:	94a03595 	.word	0x94a03595
 80098c4:	3fdfffff 	.word	0x3fdfffff
 80098c8:	35afe535 	.word	0x35afe535
 80098cc:	3fe00000 	.word	0x3fe00000
 80098d0:	000fffff 	.word	0x000fffff
 80098d4:	7ff00000 	.word	0x7ff00000
 80098d8:	7fefffff 	.word	0x7fefffff
 80098dc:	3ff00000 	.word	0x3ff00000
 80098e0:	3fe00000 	.word	0x3fe00000
 80098e4:	7fe00000 	.word	0x7fe00000
 80098e8:	7c9fffff 	.word	0x7c9fffff
 80098ec:	9b08      	ldr	r3, [sp, #32]
 80098ee:	b323      	cbz	r3, 800993a <_strtod_l+0xb5a>
 80098f0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80098f4:	d821      	bhi.n	800993a <_strtod_l+0xb5a>
 80098f6:	a328      	add	r3, pc, #160	@ (adr r3, 8009998 <_strtod_l+0xbb8>)
 80098f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098fc:	4630      	mov	r0, r6
 80098fe:	4639      	mov	r1, r7
 8009900:	f7f7 f8f6 	bl	8000af0 <__aeabi_dcmple>
 8009904:	b1a0      	cbz	r0, 8009930 <_strtod_l+0xb50>
 8009906:	4639      	mov	r1, r7
 8009908:	4630      	mov	r0, r6
 800990a:	f7f7 f94d 	bl	8000ba8 <__aeabi_d2uiz>
 800990e:	2801      	cmp	r0, #1
 8009910:	bf38      	it	cc
 8009912:	2001      	movcc	r0, #1
 8009914:	f7f6 fdf6 	bl	8000504 <__aeabi_ui2d>
 8009918:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800991a:	4606      	mov	r6, r0
 800991c:	460f      	mov	r7, r1
 800991e:	b9fb      	cbnz	r3, 8009960 <_strtod_l+0xb80>
 8009920:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009924:	9014      	str	r0, [sp, #80]	@ 0x50
 8009926:	9315      	str	r3, [sp, #84]	@ 0x54
 8009928:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800992c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009930:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009932:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009936:	1b5b      	subs	r3, r3, r5
 8009938:	9311      	str	r3, [sp, #68]	@ 0x44
 800993a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800993e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009942:	f7ff f8f1 	bl	8008b28 <__ulp>
 8009946:	4650      	mov	r0, sl
 8009948:	ec53 2b10 	vmov	r2, r3, d0
 800994c:	4659      	mov	r1, fp
 800994e:	f7f6 fe53 	bl	80005f8 <__aeabi_dmul>
 8009952:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009956:	f7f6 fc99 	bl	800028c <__adddf3>
 800995a:	4682      	mov	sl, r0
 800995c:	468b      	mov	fp, r1
 800995e:	e770      	b.n	8009842 <_strtod_l+0xa62>
 8009960:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009964:	e7e0      	b.n	8009928 <_strtod_l+0xb48>
 8009966:	a30e      	add	r3, pc, #56	@ (adr r3, 80099a0 <_strtod_l+0xbc0>)
 8009968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800996c:	f7f7 f8b6 	bl	8000adc <__aeabi_dcmplt>
 8009970:	e798      	b.n	80098a4 <_strtod_l+0xac4>
 8009972:	2300      	movs	r3, #0
 8009974:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009976:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009978:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800997a:	6013      	str	r3, [r2, #0]
 800997c:	f7ff ba6d 	b.w	8008e5a <_strtod_l+0x7a>
 8009980:	2a65      	cmp	r2, #101	@ 0x65
 8009982:	f43f ab66 	beq.w	8009052 <_strtod_l+0x272>
 8009986:	2a45      	cmp	r2, #69	@ 0x45
 8009988:	f43f ab63 	beq.w	8009052 <_strtod_l+0x272>
 800998c:	2301      	movs	r3, #1
 800998e:	f7ff bb9e 	b.w	80090ce <_strtod_l+0x2ee>
 8009992:	bf00      	nop
 8009994:	f3af 8000 	nop.w
 8009998:	ffc00000 	.word	0xffc00000
 800999c:	41dfffff 	.word	0x41dfffff
 80099a0:	94a03595 	.word	0x94a03595
 80099a4:	3fcfffff 	.word	0x3fcfffff

080099a8 <_strtod_r>:
 80099a8:	4b01      	ldr	r3, [pc, #4]	@ (80099b0 <_strtod_r+0x8>)
 80099aa:	f7ff ba19 	b.w	8008de0 <_strtod_l>
 80099ae:	bf00      	nop
 80099b0:	20000068 	.word	0x20000068

080099b4 <_strtol_l.constprop.0>:
 80099b4:	2b24      	cmp	r3, #36	@ 0x24
 80099b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099ba:	4686      	mov	lr, r0
 80099bc:	4690      	mov	r8, r2
 80099be:	d801      	bhi.n	80099c4 <_strtol_l.constprop.0+0x10>
 80099c0:	2b01      	cmp	r3, #1
 80099c2:	d106      	bne.n	80099d2 <_strtol_l.constprop.0+0x1e>
 80099c4:	f7fd fdae 	bl	8007524 <__errno>
 80099c8:	2316      	movs	r3, #22
 80099ca:	6003      	str	r3, [r0, #0]
 80099cc:	2000      	movs	r0, #0
 80099ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099d2:	4834      	ldr	r0, [pc, #208]	@ (8009aa4 <_strtol_l.constprop.0+0xf0>)
 80099d4:	460d      	mov	r5, r1
 80099d6:	462a      	mov	r2, r5
 80099d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80099dc:	5d06      	ldrb	r6, [r0, r4]
 80099de:	f016 0608 	ands.w	r6, r6, #8
 80099e2:	d1f8      	bne.n	80099d6 <_strtol_l.constprop.0+0x22>
 80099e4:	2c2d      	cmp	r4, #45	@ 0x2d
 80099e6:	d12d      	bne.n	8009a44 <_strtol_l.constprop.0+0x90>
 80099e8:	782c      	ldrb	r4, [r5, #0]
 80099ea:	2601      	movs	r6, #1
 80099ec:	1c95      	adds	r5, r2, #2
 80099ee:	f033 0210 	bics.w	r2, r3, #16
 80099f2:	d109      	bne.n	8009a08 <_strtol_l.constprop.0+0x54>
 80099f4:	2c30      	cmp	r4, #48	@ 0x30
 80099f6:	d12a      	bne.n	8009a4e <_strtol_l.constprop.0+0x9a>
 80099f8:	782a      	ldrb	r2, [r5, #0]
 80099fa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80099fe:	2a58      	cmp	r2, #88	@ 0x58
 8009a00:	d125      	bne.n	8009a4e <_strtol_l.constprop.0+0x9a>
 8009a02:	786c      	ldrb	r4, [r5, #1]
 8009a04:	2310      	movs	r3, #16
 8009a06:	3502      	adds	r5, #2
 8009a08:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009a0c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009a10:	2200      	movs	r2, #0
 8009a12:	fbbc f9f3 	udiv	r9, ip, r3
 8009a16:	4610      	mov	r0, r2
 8009a18:	fb03 ca19 	mls	sl, r3, r9, ip
 8009a1c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009a20:	2f09      	cmp	r7, #9
 8009a22:	d81b      	bhi.n	8009a5c <_strtol_l.constprop.0+0xa8>
 8009a24:	463c      	mov	r4, r7
 8009a26:	42a3      	cmp	r3, r4
 8009a28:	dd27      	ble.n	8009a7a <_strtol_l.constprop.0+0xc6>
 8009a2a:	1c57      	adds	r7, r2, #1
 8009a2c:	d007      	beq.n	8009a3e <_strtol_l.constprop.0+0x8a>
 8009a2e:	4581      	cmp	r9, r0
 8009a30:	d320      	bcc.n	8009a74 <_strtol_l.constprop.0+0xc0>
 8009a32:	d101      	bne.n	8009a38 <_strtol_l.constprop.0+0x84>
 8009a34:	45a2      	cmp	sl, r4
 8009a36:	db1d      	blt.n	8009a74 <_strtol_l.constprop.0+0xc0>
 8009a38:	fb00 4003 	mla	r0, r0, r3, r4
 8009a3c:	2201      	movs	r2, #1
 8009a3e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009a42:	e7eb      	b.n	8009a1c <_strtol_l.constprop.0+0x68>
 8009a44:	2c2b      	cmp	r4, #43	@ 0x2b
 8009a46:	bf04      	itt	eq
 8009a48:	782c      	ldrbeq	r4, [r5, #0]
 8009a4a:	1c95      	addeq	r5, r2, #2
 8009a4c:	e7cf      	b.n	80099ee <_strtol_l.constprop.0+0x3a>
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d1da      	bne.n	8009a08 <_strtol_l.constprop.0+0x54>
 8009a52:	2c30      	cmp	r4, #48	@ 0x30
 8009a54:	bf0c      	ite	eq
 8009a56:	2308      	moveq	r3, #8
 8009a58:	230a      	movne	r3, #10
 8009a5a:	e7d5      	b.n	8009a08 <_strtol_l.constprop.0+0x54>
 8009a5c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009a60:	2f19      	cmp	r7, #25
 8009a62:	d801      	bhi.n	8009a68 <_strtol_l.constprop.0+0xb4>
 8009a64:	3c37      	subs	r4, #55	@ 0x37
 8009a66:	e7de      	b.n	8009a26 <_strtol_l.constprop.0+0x72>
 8009a68:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009a6c:	2f19      	cmp	r7, #25
 8009a6e:	d804      	bhi.n	8009a7a <_strtol_l.constprop.0+0xc6>
 8009a70:	3c57      	subs	r4, #87	@ 0x57
 8009a72:	e7d8      	b.n	8009a26 <_strtol_l.constprop.0+0x72>
 8009a74:	f04f 32ff 	mov.w	r2, #4294967295
 8009a78:	e7e1      	b.n	8009a3e <_strtol_l.constprop.0+0x8a>
 8009a7a:	1c53      	adds	r3, r2, #1
 8009a7c:	d108      	bne.n	8009a90 <_strtol_l.constprop.0+0xdc>
 8009a7e:	2322      	movs	r3, #34	@ 0x22
 8009a80:	f8ce 3000 	str.w	r3, [lr]
 8009a84:	4660      	mov	r0, ip
 8009a86:	f1b8 0f00 	cmp.w	r8, #0
 8009a8a:	d0a0      	beq.n	80099ce <_strtol_l.constprop.0+0x1a>
 8009a8c:	1e69      	subs	r1, r5, #1
 8009a8e:	e006      	b.n	8009a9e <_strtol_l.constprop.0+0xea>
 8009a90:	b106      	cbz	r6, 8009a94 <_strtol_l.constprop.0+0xe0>
 8009a92:	4240      	negs	r0, r0
 8009a94:	f1b8 0f00 	cmp.w	r8, #0
 8009a98:	d099      	beq.n	80099ce <_strtol_l.constprop.0+0x1a>
 8009a9a:	2a00      	cmp	r2, #0
 8009a9c:	d1f6      	bne.n	8009a8c <_strtol_l.constprop.0+0xd8>
 8009a9e:	f8c8 1000 	str.w	r1, [r8]
 8009aa2:	e794      	b.n	80099ce <_strtol_l.constprop.0+0x1a>
 8009aa4:	080155e9 	.word	0x080155e9

08009aa8 <_strtol_r>:
 8009aa8:	f7ff bf84 	b.w	80099b4 <_strtol_l.constprop.0>

08009aac <__ssputs_r>:
 8009aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ab0:	688e      	ldr	r6, [r1, #8]
 8009ab2:	461f      	mov	r7, r3
 8009ab4:	42be      	cmp	r6, r7
 8009ab6:	680b      	ldr	r3, [r1, #0]
 8009ab8:	4682      	mov	sl, r0
 8009aba:	460c      	mov	r4, r1
 8009abc:	4690      	mov	r8, r2
 8009abe:	d82d      	bhi.n	8009b1c <__ssputs_r+0x70>
 8009ac0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009ac4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009ac8:	d026      	beq.n	8009b18 <__ssputs_r+0x6c>
 8009aca:	6965      	ldr	r5, [r4, #20]
 8009acc:	6909      	ldr	r1, [r1, #16]
 8009ace:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009ad2:	eba3 0901 	sub.w	r9, r3, r1
 8009ad6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009ada:	1c7b      	adds	r3, r7, #1
 8009adc:	444b      	add	r3, r9
 8009ade:	106d      	asrs	r5, r5, #1
 8009ae0:	429d      	cmp	r5, r3
 8009ae2:	bf38      	it	cc
 8009ae4:	461d      	movcc	r5, r3
 8009ae6:	0553      	lsls	r3, r2, #21
 8009ae8:	d527      	bpl.n	8009b3a <__ssputs_r+0x8e>
 8009aea:	4629      	mov	r1, r5
 8009aec:	f7fe fc1c 	bl	8008328 <_malloc_r>
 8009af0:	4606      	mov	r6, r0
 8009af2:	b360      	cbz	r0, 8009b4e <__ssputs_r+0xa2>
 8009af4:	6921      	ldr	r1, [r4, #16]
 8009af6:	464a      	mov	r2, r9
 8009af8:	f7fd fd41 	bl	800757e <memcpy>
 8009afc:	89a3      	ldrh	r3, [r4, #12]
 8009afe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009b02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b06:	81a3      	strh	r3, [r4, #12]
 8009b08:	6126      	str	r6, [r4, #16]
 8009b0a:	6165      	str	r5, [r4, #20]
 8009b0c:	444e      	add	r6, r9
 8009b0e:	eba5 0509 	sub.w	r5, r5, r9
 8009b12:	6026      	str	r6, [r4, #0]
 8009b14:	60a5      	str	r5, [r4, #8]
 8009b16:	463e      	mov	r6, r7
 8009b18:	42be      	cmp	r6, r7
 8009b1a:	d900      	bls.n	8009b1e <__ssputs_r+0x72>
 8009b1c:	463e      	mov	r6, r7
 8009b1e:	6820      	ldr	r0, [r4, #0]
 8009b20:	4632      	mov	r2, r6
 8009b22:	4641      	mov	r1, r8
 8009b24:	f000 fb6a 	bl	800a1fc <memmove>
 8009b28:	68a3      	ldr	r3, [r4, #8]
 8009b2a:	1b9b      	subs	r3, r3, r6
 8009b2c:	60a3      	str	r3, [r4, #8]
 8009b2e:	6823      	ldr	r3, [r4, #0]
 8009b30:	4433      	add	r3, r6
 8009b32:	6023      	str	r3, [r4, #0]
 8009b34:	2000      	movs	r0, #0
 8009b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b3a:	462a      	mov	r2, r5
 8009b3c:	f000 ff41 	bl	800a9c2 <_realloc_r>
 8009b40:	4606      	mov	r6, r0
 8009b42:	2800      	cmp	r0, #0
 8009b44:	d1e0      	bne.n	8009b08 <__ssputs_r+0x5c>
 8009b46:	6921      	ldr	r1, [r4, #16]
 8009b48:	4650      	mov	r0, sl
 8009b4a:	f7fe fb79 	bl	8008240 <_free_r>
 8009b4e:	230c      	movs	r3, #12
 8009b50:	f8ca 3000 	str.w	r3, [sl]
 8009b54:	89a3      	ldrh	r3, [r4, #12]
 8009b56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b5a:	81a3      	strh	r3, [r4, #12]
 8009b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b60:	e7e9      	b.n	8009b36 <__ssputs_r+0x8a>
	...

08009b64 <_svfiprintf_r>:
 8009b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b68:	4698      	mov	r8, r3
 8009b6a:	898b      	ldrh	r3, [r1, #12]
 8009b6c:	061b      	lsls	r3, r3, #24
 8009b6e:	b09d      	sub	sp, #116	@ 0x74
 8009b70:	4607      	mov	r7, r0
 8009b72:	460d      	mov	r5, r1
 8009b74:	4614      	mov	r4, r2
 8009b76:	d510      	bpl.n	8009b9a <_svfiprintf_r+0x36>
 8009b78:	690b      	ldr	r3, [r1, #16]
 8009b7a:	b973      	cbnz	r3, 8009b9a <_svfiprintf_r+0x36>
 8009b7c:	2140      	movs	r1, #64	@ 0x40
 8009b7e:	f7fe fbd3 	bl	8008328 <_malloc_r>
 8009b82:	6028      	str	r0, [r5, #0]
 8009b84:	6128      	str	r0, [r5, #16]
 8009b86:	b930      	cbnz	r0, 8009b96 <_svfiprintf_r+0x32>
 8009b88:	230c      	movs	r3, #12
 8009b8a:	603b      	str	r3, [r7, #0]
 8009b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b90:	b01d      	add	sp, #116	@ 0x74
 8009b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b96:	2340      	movs	r3, #64	@ 0x40
 8009b98:	616b      	str	r3, [r5, #20]
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b9e:	2320      	movs	r3, #32
 8009ba0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009ba4:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ba8:	2330      	movs	r3, #48	@ 0x30
 8009baa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009d48 <_svfiprintf_r+0x1e4>
 8009bae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009bb2:	f04f 0901 	mov.w	r9, #1
 8009bb6:	4623      	mov	r3, r4
 8009bb8:	469a      	mov	sl, r3
 8009bba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009bbe:	b10a      	cbz	r2, 8009bc4 <_svfiprintf_r+0x60>
 8009bc0:	2a25      	cmp	r2, #37	@ 0x25
 8009bc2:	d1f9      	bne.n	8009bb8 <_svfiprintf_r+0x54>
 8009bc4:	ebba 0b04 	subs.w	fp, sl, r4
 8009bc8:	d00b      	beq.n	8009be2 <_svfiprintf_r+0x7e>
 8009bca:	465b      	mov	r3, fp
 8009bcc:	4622      	mov	r2, r4
 8009bce:	4629      	mov	r1, r5
 8009bd0:	4638      	mov	r0, r7
 8009bd2:	f7ff ff6b 	bl	8009aac <__ssputs_r>
 8009bd6:	3001      	adds	r0, #1
 8009bd8:	f000 80a7 	beq.w	8009d2a <_svfiprintf_r+0x1c6>
 8009bdc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009bde:	445a      	add	r2, fp
 8009be0:	9209      	str	r2, [sp, #36]	@ 0x24
 8009be2:	f89a 3000 	ldrb.w	r3, [sl]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	f000 809f 	beq.w	8009d2a <_svfiprintf_r+0x1c6>
 8009bec:	2300      	movs	r3, #0
 8009bee:	f04f 32ff 	mov.w	r2, #4294967295
 8009bf2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009bf6:	f10a 0a01 	add.w	sl, sl, #1
 8009bfa:	9304      	str	r3, [sp, #16]
 8009bfc:	9307      	str	r3, [sp, #28]
 8009bfe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009c02:	931a      	str	r3, [sp, #104]	@ 0x68
 8009c04:	4654      	mov	r4, sl
 8009c06:	2205      	movs	r2, #5
 8009c08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c0c:	484e      	ldr	r0, [pc, #312]	@ (8009d48 <_svfiprintf_r+0x1e4>)
 8009c0e:	f7f6 fadf 	bl	80001d0 <memchr>
 8009c12:	9a04      	ldr	r2, [sp, #16]
 8009c14:	b9d8      	cbnz	r0, 8009c4e <_svfiprintf_r+0xea>
 8009c16:	06d0      	lsls	r0, r2, #27
 8009c18:	bf44      	itt	mi
 8009c1a:	2320      	movmi	r3, #32
 8009c1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c20:	0711      	lsls	r1, r2, #28
 8009c22:	bf44      	itt	mi
 8009c24:	232b      	movmi	r3, #43	@ 0x2b
 8009c26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c2a:	f89a 3000 	ldrb.w	r3, [sl]
 8009c2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c30:	d015      	beq.n	8009c5e <_svfiprintf_r+0xfa>
 8009c32:	9a07      	ldr	r2, [sp, #28]
 8009c34:	4654      	mov	r4, sl
 8009c36:	2000      	movs	r0, #0
 8009c38:	f04f 0c0a 	mov.w	ip, #10
 8009c3c:	4621      	mov	r1, r4
 8009c3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c42:	3b30      	subs	r3, #48	@ 0x30
 8009c44:	2b09      	cmp	r3, #9
 8009c46:	d94b      	bls.n	8009ce0 <_svfiprintf_r+0x17c>
 8009c48:	b1b0      	cbz	r0, 8009c78 <_svfiprintf_r+0x114>
 8009c4a:	9207      	str	r2, [sp, #28]
 8009c4c:	e014      	b.n	8009c78 <_svfiprintf_r+0x114>
 8009c4e:	eba0 0308 	sub.w	r3, r0, r8
 8009c52:	fa09 f303 	lsl.w	r3, r9, r3
 8009c56:	4313      	orrs	r3, r2
 8009c58:	9304      	str	r3, [sp, #16]
 8009c5a:	46a2      	mov	sl, r4
 8009c5c:	e7d2      	b.n	8009c04 <_svfiprintf_r+0xa0>
 8009c5e:	9b03      	ldr	r3, [sp, #12]
 8009c60:	1d19      	adds	r1, r3, #4
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	9103      	str	r1, [sp, #12]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	bfbb      	ittet	lt
 8009c6a:	425b      	neglt	r3, r3
 8009c6c:	f042 0202 	orrlt.w	r2, r2, #2
 8009c70:	9307      	strge	r3, [sp, #28]
 8009c72:	9307      	strlt	r3, [sp, #28]
 8009c74:	bfb8      	it	lt
 8009c76:	9204      	strlt	r2, [sp, #16]
 8009c78:	7823      	ldrb	r3, [r4, #0]
 8009c7a:	2b2e      	cmp	r3, #46	@ 0x2e
 8009c7c:	d10a      	bne.n	8009c94 <_svfiprintf_r+0x130>
 8009c7e:	7863      	ldrb	r3, [r4, #1]
 8009c80:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c82:	d132      	bne.n	8009cea <_svfiprintf_r+0x186>
 8009c84:	9b03      	ldr	r3, [sp, #12]
 8009c86:	1d1a      	adds	r2, r3, #4
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	9203      	str	r2, [sp, #12]
 8009c8c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009c90:	3402      	adds	r4, #2
 8009c92:	9305      	str	r3, [sp, #20]
 8009c94:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009d58 <_svfiprintf_r+0x1f4>
 8009c98:	7821      	ldrb	r1, [r4, #0]
 8009c9a:	2203      	movs	r2, #3
 8009c9c:	4650      	mov	r0, sl
 8009c9e:	f7f6 fa97 	bl	80001d0 <memchr>
 8009ca2:	b138      	cbz	r0, 8009cb4 <_svfiprintf_r+0x150>
 8009ca4:	9b04      	ldr	r3, [sp, #16]
 8009ca6:	eba0 000a 	sub.w	r0, r0, sl
 8009caa:	2240      	movs	r2, #64	@ 0x40
 8009cac:	4082      	lsls	r2, r0
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	3401      	adds	r4, #1
 8009cb2:	9304      	str	r3, [sp, #16]
 8009cb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cb8:	4824      	ldr	r0, [pc, #144]	@ (8009d4c <_svfiprintf_r+0x1e8>)
 8009cba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009cbe:	2206      	movs	r2, #6
 8009cc0:	f7f6 fa86 	bl	80001d0 <memchr>
 8009cc4:	2800      	cmp	r0, #0
 8009cc6:	d036      	beq.n	8009d36 <_svfiprintf_r+0x1d2>
 8009cc8:	4b21      	ldr	r3, [pc, #132]	@ (8009d50 <_svfiprintf_r+0x1ec>)
 8009cca:	bb1b      	cbnz	r3, 8009d14 <_svfiprintf_r+0x1b0>
 8009ccc:	9b03      	ldr	r3, [sp, #12]
 8009cce:	3307      	adds	r3, #7
 8009cd0:	f023 0307 	bic.w	r3, r3, #7
 8009cd4:	3308      	adds	r3, #8
 8009cd6:	9303      	str	r3, [sp, #12]
 8009cd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cda:	4433      	add	r3, r6
 8009cdc:	9309      	str	r3, [sp, #36]	@ 0x24
 8009cde:	e76a      	b.n	8009bb6 <_svfiprintf_r+0x52>
 8009ce0:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ce4:	460c      	mov	r4, r1
 8009ce6:	2001      	movs	r0, #1
 8009ce8:	e7a8      	b.n	8009c3c <_svfiprintf_r+0xd8>
 8009cea:	2300      	movs	r3, #0
 8009cec:	3401      	adds	r4, #1
 8009cee:	9305      	str	r3, [sp, #20]
 8009cf0:	4619      	mov	r1, r3
 8009cf2:	f04f 0c0a 	mov.w	ip, #10
 8009cf6:	4620      	mov	r0, r4
 8009cf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009cfc:	3a30      	subs	r2, #48	@ 0x30
 8009cfe:	2a09      	cmp	r2, #9
 8009d00:	d903      	bls.n	8009d0a <_svfiprintf_r+0x1a6>
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d0c6      	beq.n	8009c94 <_svfiprintf_r+0x130>
 8009d06:	9105      	str	r1, [sp, #20]
 8009d08:	e7c4      	b.n	8009c94 <_svfiprintf_r+0x130>
 8009d0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d0e:	4604      	mov	r4, r0
 8009d10:	2301      	movs	r3, #1
 8009d12:	e7f0      	b.n	8009cf6 <_svfiprintf_r+0x192>
 8009d14:	ab03      	add	r3, sp, #12
 8009d16:	9300      	str	r3, [sp, #0]
 8009d18:	462a      	mov	r2, r5
 8009d1a:	4b0e      	ldr	r3, [pc, #56]	@ (8009d54 <_svfiprintf_r+0x1f0>)
 8009d1c:	a904      	add	r1, sp, #16
 8009d1e:	4638      	mov	r0, r7
 8009d20:	f7fc fba2 	bl	8006468 <_printf_float>
 8009d24:	1c42      	adds	r2, r0, #1
 8009d26:	4606      	mov	r6, r0
 8009d28:	d1d6      	bne.n	8009cd8 <_svfiprintf_r+0x174>
 8009d2a:	89ab      	ldrh	r3, [r5, #12]
 8009d2c:	065b      	lsls	r3, r3, #25
 8009d2e:	f53f af2d 	bmi.w	8009b8c <_svfiprintf_r+0x28>
 8009d32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009d34:	e72c      	b.n	8009b90 <_svfiprintf_r+0x2c>
 8009d36:	ab03      	add	r3, sp, #12
 8009d38:	9300      	str	r3, [sp, #0]
 8009d3a:	462a      	mov	r2, r5
 8009d3c:	4b05      	ldr	r3, [pc, #20]	@ (8009d54 <_svfiprintf_r+0x1f0>)
 8009d3e:	a904      	add	r1, sp, #16
 8009d40:	4638      	mov	r0, r7
 8009d42:	f7fc fe29 	bl	8006998 <_printf_i>
 8009d46:	e7ed      	b.n	8009d24 <_svfiprintf_r+0x1c0>
 8009d48:	080156e9 	.word	0x080156e9
 8009d4c:	080156f3 	.word	0x080156f3
 8009d50:	08006469 	.word	0x08006469
 8009d54:	08009aad 	.word	0x08009aad
 8009d58:	080156ef 	.word	0x080156ef

08009d5c <__sfputc_r>:
 8009d5c:	6893      	ldr	r3, [r2, #8]
 8009d5e:	3b01      	subs	r3, #1
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	b410      	push	{r4}
 8009d64:	6093      	str	r3, [r2, #8]
 8009d66:	da08      	bge.n	8009d7a <__sfputc_r+0x1e>
 8009d68:	6994      	ldr	r4, [r2, #24]
 8009d6a:	42a3      	cmp	r3, r4
 8009d6c:	db01      	blt.n	8009d72 <__sfputc_r+0x16>
 8009d6e:	290a      	cmp	r1, #10
 8009d70:	d103      	bne.n	8009d7a <__sfputc_r+0x1e>
 8009d72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d76:	f7fd bad8 	b.w	800732a <__swbuf_r>
 8009d7a:	6813      	ldr	r3, [r2, #0]
 8009d7c:	1c58      	adds	r0, r3, #1
 8009d7e:	6010      	str	r0, [r2, #0]
 8009d80:	7019      	strb	r1, [r3, #0]
 8009d82:	4608      	mov	r0, r1
 8009d84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d88:	4770      	bx	lr

08009d8a <__sfputs_r>:
 8009d8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d8c:	4606      	mov	r6, r0
 8009d8e:	460f      	mov	r7, r1
 8009d90:	4614      	mov	r4, r2
 8009d92:	18d5      	adds	r5, r2, r3
 8009d94:	42ac      	cmp	r4, r5
 8009d96:	d101      	bne.n	8009d9c <__sfputs_r+0x12>
 8009d98:	2000      	movs	r0, #0
 8009d9a:	e007      	b.n	8009dac <__sfputs_r+0x22>
 8009d9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009da0:	463a      	mov	r2, r7
 8009da2:	4630      	mov	r0, r6
 8009da4:	f7ff ffda 	bl	8009d5c <__sfputc_r>
 8009da8:	1c43      	adds	r3, r0, #1
 8009daa:	d1f3      	bne.n	8009d94 <__sfputs_r+0xa>
 8009dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009db0 <_vfiprintf_r>:
 8009db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009db4:	460d      	mov	r5, r1
 8009db6:	b09d      	sub	sp, #116	@ 0x74
 8009db8:	4614      	mov	r4, r2
 8009dba:	4698      	mov	r8, r3
 8009dbc:	4606      	mov	r6, r0
 8009dbe:	b118      	cbz	r0, 8009dc8 <_vfiprintf_r+0x18>
 8009dc0:	6a03      	ldr	r3, [r0, #32]
 8009dc2:	b90b      	cbnz	r3, 8009dc8 <_vfiprintf_r+0x18>
 8009dc4:	f7fd f9a8 	bl	8007118 <__sinit>
 8009dc8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009dca:	07d9      	lsls	r1, r3, #31
 8009dcc:	d405      	bmi.n	8009dda <_vfiprintf_r+0x2a>
 8009dce:	89ab      	ldrh	r3, [r5, #12]
 8009dd0:	059a      	lsls	r2, r3, #22
 8009dd2:	d402      	bmi.n	8009dda <_vfiprintf_r+0x2a>
 8009dd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009dd6:	f7fd fbd0 	bl	800757a <__retarget_lock_acquire_recursive>
 8009dda:	89ab      	ldrh	r3, [r5, #12]
 8009ddc:	071b      	lsls	r3, r3, #28
 8009dde:	d501      	bpl.n	8009de4 <_vfiprintf_r+0x34>
 8009de0:	692b      	ldr	r3, [r5, #16]
 8009de2:	b99b      	cbnz	r3, 8009e0c <_vfiprintf_r+0x5c>
 8009de4:	4629      	mov	r1, r5
 8009de6:	4630      	mov	r0, r6
 8009de8:	f7fd fade 	bl	80073a8 <__swsetup_r>
 8009dec:	b170      	cbz	r0, 8009e0c <_vfiprintf_r+0x5c>
 8009dee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009df0:	07dc      	lsls	r4, r3, #31
 8009df2:	d504      	bpl.n	8009dfe <_vfiprintf_r+0x4e>
 8009df4:	f04f 30ff 	mov.w	r0, #4294967295
 8009df8:	b01d      	add	sp, #116	@ 0x74
 8009dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dfe:	89ab      	ldrh	r3, [r5, #12]
 8009e00:	0598      	lsls	r0, r3, #22
 8009e02:	d4f7      	bmi.n	8009df4 <_vfiprintf_r+0x44>
 8009e04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009e06:	f7fd fbb9 	bl	800757c <__retarget_lock_release_recursive>
 8009e0a:	e7f3      	b.n	8009df4 <_vfiprintf_r+0x44>
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e10:	2320      	movs	r3, #32
 8009e12:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009e16:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e1a:	2330      	movs	r3, #48	@ 0x30
 8009e1c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009fcc <_vfiprintf_r+0x21c>
 8009e20:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009e24:	f04f 0901 	mov.w	r9, #1
 8009e28:	4623      	mov	r3, r4
 8009e2a:	469a      	mov	sl, r3
 8009e2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e30:	b10a      	cbz	r2, 8009e36 <_vfiprintf_r+0x86>
 8009e32:	2a25      	cmp	r2, #37	@ 0x25
 8009e34:	d1f9      	bne.n	8009e2a <_vfiprintf_r+0x7a>
 8009e36:	ebba 0b04 	subs.w	fp, sl, r4
 8009e3a:	d00b      	beq.n	8009e54 <_vfiprintf_r+0xa4>
 8009e3c:	465b      	mov	r3, fp
 8009e3e:	4622      	mov	r2, r4
 8009e40:	4629      	mov	r1, r5
 8009e42:	4630      	mov	r0, r6
 8009e44:	f7ff ffa1 	bl	8009d8a <__sfputs_r>
 8009e48:	3001      	adds	r0, #1
 8009e4a:	f000 80a7 	beq.w	8009f9c <_vfiprintf_r+0x1ec>
 8009e4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e50:	445a      	add	r2, fp
 8009e52:	9209      	str	r2, [sp, #36]	@ 0x24
 8009e54:	f89a 3000 	ldrb.w	r3, [sl]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	f000 809f 	beq.w	8009f9c <_vfiprintf_r+0x1ec>
 8009e5e:	2300      	movs	r3, #0
 8009e60:	f04f 32ff 	mov.w	r2, #4294967295
 8009e64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e68:	f10a 0a01 	add.w	sl, sl, #1
 8009e6c:	9304      	str	r3, [sp, #16]
 8009e6e:	9307      	str	r3, [sp, #28]
 8009e70:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009e74:	931a      	str	r3, [sp, #104]	@ 0x68
 8009e76:	4654      	mov	r4, sl
 8009e78:	2205      	movs	r2, #5
 8009e7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e7e:	4853      	ldr	r0, [pc, #332]	@ (8009fcc <_vfiprintf_r+0x21c>)
 8009e80:	f7f6 f9a6 	bl	80001d0 <memchr>
 8009e84:	9a04      	ldr	r2, [sp, #16]
 8009e86:	b9d8      	cbnz	r0, 8009ec0 <_vfiprintf_r+0x110>
 8009e88:	06d1      	lsls	r1, r2, #27
 8009e8a:	bf44      	itt	mi
 8009e8c:	2320      	movmi	r3, #32
 8009e8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e92:	0713      	lsls	r3, r2, #28
 8009e94:	bf44      	itt	mi
 8009e96:	232b      	movmi	r3, #43	@ 0x2b
 8009e98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e9c:	f89a 3000 	ldrb.w	r3, [sl]
 8009ea0:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ea2:	d015      	beq.n	8009ed0 <_vfiprintf_r+0x120>
 8009ea4:	9a07      	ldr	r2, [sp, #28]
 8009ea6:	4654      	mov	r4, sl
 8009ea8:	2000      	movs	r0, #0
 8009eaa:	f04f 0c0a 	mov.w	ip, #10
 8009eae:	4621      	mov	r1, r4
 8009eb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009eb4:	3b30      	subs	r3, #48	@ 0x30
 8009eb6:	2b09      	cmp	r3, #9
 8009eb8:	d94b      	bls.n	8009f52 <_vfiprintf_r+0x1a2>
 8009eba:	b1b0      	cbz	r0, 8009eea <_vfiprintf_r+0x13a>
 8009ebc:	9207      	str	r2, [sp, #28]
 8009ebe:	e014      	b.n	8009eea <_vfiprintf_r+0x13a>
 8009ec0:	eba0 0308 	sub.w	r3, r0, r8
 8009ec4:	fa09 f303 	lsl.w	r3, r9, r3
 8009ec8:	4313      	orrs	r3, r2
 8009eca:	9304      	str	r3, [sp, #16]
 8009ecc:	46a2      	mov	sl, r4
 8009ece:	e7d2      	b.n	8009e76 <_vfiprintf_r+0xc6>
 8009ed0:	9b03      	ldr	r3, [sp, #12]
 8009ed2:	1d19      	adds	r1, r3, #4
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	9103      	str	r1, [sp, #12]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	bfbb      	ittet	lt
 8009edc:	425b      	neglt	r3, r3
 8009ede:	f042 0202 	orrlt.w	r2, r2, #2
 8009ee2:	9307      	strge	r3, [sp, #28]
 8009ee4:	9307      	strlt	r3, [sp, #28]
 8009ee6:	bfb8      	it	lt
 8009ee8:	9204      	strlt	r2, [sp, #16]
 8009eea:	7823      	ldrb	r3, [r4, #0]
 8009eec:	2b2e      	cmp	r3, #46	@ 0x2e
 8009eee:	d10a      	bne.n	8009f06 <_vfiprintf_r+0x156>
 8009ef0:	7863      	ldrb	r3, [r4, #1]
 8009ef2:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ef4:	d132      	bne.n	8009f5c <_vfiprintf_r+0x1ac>
 8009ef6:	9b03      	ldr	r3, [sp, #12]
 8009ef8:	1d1a      	adds	r2, r3, #4
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	9203      	str	r2, [sp, #12]
 8009efe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009f02:	3402      	adds	r4, #2
 8009f04:	9305      	str	r3, [sp, #20]
 8009f06:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009fdc <_vfiprintf_r+0x22c>
 8009f0a:	7821      	ldrb	r1, [r4, #0]
 8009f0c:	2203      	movs	r2, #3
 8009f0e:	4650      	mov	r0, sl
 8009f10:	f7f6 f95e 	bl	80001d0 <memchr>
 8009f14:	b138      	cbz	r0, 8009f26 <_vfiprintf_r+0x176>
 8009f16:	9b04      	ldr	r3, [sp, #16]
 8009f18:	eba0 000a 	sub.w	r0, r0, sl
 8009f1c:	2240      	movs	r2, #64	@ 0x40
 8009f1e:	4082      	lsls	r2, r0
 8009f20:	4313      	orrs	r3, r2
 8009f22:	3401      	adds	r4, #1
 8009f24:	9304      	str	r3, [sp, #16]
 8009f26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f2a:	4829      	ldr	r0, [pc, #164]	@ (8009fd0 <_vfiprintf_r+0x220>)
 8009f2c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009f30:	2206      	movs	r2, #6
 8009f32:	f7f6 f94d 	bl	80001d0 <memchr>
 8009f36:	2800      	cmp	r0, #0
 8009f38:	d03f      	beq.n	8009fba <_vfiprintf_r+0x20a>
 8009f3a:	4b26      	ldr	r3, [pc, #152]	@ (8009fd4 <_vfiprintf_r+0x224>)
 8009f3c:	bb1b      	cbnz	r3, 8009f86 <_vfiprintf_r+0x1d6>
 8009f3e:	9b03      	ldr	r3, [sp, #12]
 8009f40:	3307      	adds	r3, #7
 8009f42:	f023 0307 	bic.w	r3, r3, #7
 8009f46:	3308      	adds	r3, #8
 8009f48:	9303      	str	r3, [sp, #12]
 8009f4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f4c:	443b      	add	r3, r7
 8009f4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f50:	e76a      	b.n	8009e28 <_vfiprintf_r+0x78>
 8009f52:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f56:	460c      	mov	r4, r1
 8009f58:	2001      	movs	r0, #1
 8009f5a:	e7a8      	b.n	8009eae <_vfiprintf_r+0xfe>
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	3401      	adds	r4, #1
 8009f60:	9305      	str	r3, [sp, #20]
 8009f62:	4619      	mov	r1, r3
 8009f64:	f04f 0c0a 	mov.w	ip, #10
 8009f68:	4620      	mov	r0, r4
 8009f6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f6e:	3a30      	subs	r2, #48	@ 0x30
 8009f70:	2a09      	cmp	r2, #9
 8009f72:	d903      	bls.n	8009f7c <_vfiprintf_r+0x1cc>
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d0c6      	beq.n	8009f06 <_vfiprintf_r+0x156>
 8009f78:	9105      	str	r1, [sp, #20]
 8009f7a:	e7c4      	b.n	8009f06 <_vfiprintf_r+0x156>
 8009f7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f80:	4604      	mov	r4, r0
 8009f82:	2301      	movs	r3, #1
 8009f84:	e7f0      	b.n	8009f68 <_vfiprintf_r+0x1b8>
 8009f86:	ab03      	add	r3, sp, #12
 8009f88:	9300      	str	r3, [sp, #0]
 8009f8a:	462a      	mov	r2, r5
 8009f8c:	4b12      	ldr	r3, [pc, #72]	@ (8009fd8 <_vfiprintf_r+0x228>)
 8009f8e:	a904      	add	r1, sp, #16
 8009f90:	4630      	mov	r0, r6
 8009f92:	f7fc fa69 	bl	8006468 <_printf_float>
 8009f96:	4607      	mov	r7, r0
 8009f98:	1c78      	adds	r0, r7, #1
 8009f9a:	d1d6      	bne.n	8009f4a <_vfiprintf_r+0x19a>
 8009f9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009f9e:	07d9      	lsls	r1, r3, #31
 8009fa0:	d405      	bmi.n	8009fae <_vfiprintf_r+0x1fe>
 8009fa2:	89ab      	ldrh	r3, [r5, #12]
 8009fa4:	059a      	lsls	r2, r3, #22
 8009fa6:	d402      	bmi.n	8009fae <_vfiprintf_r+0x1fe>
 8009fa8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009faa:	f7fd fae7 	bl	800757c <__retarget_lock_release_recursive>
 8009fae:	89ab      	ldrh	r3, [r5, #12]
 8009fb0:	065b      	lsls	r3, r3, #25
 8009fb2:	f53f af1f 	bmi.w	8009df4 <_vfiprintf_r+0x44>
 8009fb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009fb8:	e71e      	b.n	8009df8 <_vfiprintf_r+0x48>
 8009fba:	ab03      	add	r3, sp, #12
 8009fbc:	9300      	str	r3, [sp, #0]
 8009fbe:	462a      	mov	r2, r5
 8009fc0:	4b05      	ldr	r3, [pc, #20]	@ (8009fd8 <_vfiprintf_r+0x228>)
 8009fc2:	a904      	add	r1, sp, #16
 8009fc4:	4630      	mov	r0, r6
 8009fc6:	f7fc fce7 	bl	8006998 <_printf_i>
 8009fca:	e7e4      	b.n	8009f96 <_vfiprintf_r+0x1e6>
 8009fcc:	080156e9 	.word	0x080156e9
 8009fd0:	080156f3 	.word	0x080156f3
 8009fd4:	08006469 	.word	0x08006469
 8009fd8:	08009d8b 	.word	0x08009d8b
 8009fdc:	080156ef 	.word	0x080156ef

08009fe0 <__sflush_r>:
 8009fe0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fe8:	0716      	lsls	r6, r2, #28
 8009fea:	4605      	mov	r5, r0
 8009fec:	460c      	mov	r4, r1
 8009fee:	d454      	bmi.n	800a09a <__sflush_r+0xba>
 8009ff0:	684b      	ldr	r3, [r1, #4]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	dc02      	bgt.n	8009ffc <__sflush_r+0x1c>
 8009ff6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	dd48      	ble.n	800a08e <__sflush_r+0xae>
 8009ffc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009ffe:	2e00      	cmp	r6, #0
 800a000:	d045      	beq.n	800a08e <__sflush_r+0xae>
 800a002:	2300      	movs	r3, #0
 800a004:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a008:	682f      	ldr	r7, [r5, #0]
 800a00a:	6a21      	ldr	r1, [r4, #32]
 800a00c:	602b      	str	r3, [r5, #0]
 800a00e:	d030      	beq.n	800a072 <__sflush_r+0x92>
 800a010:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a012:	89a3      	ldrh	r3, [r4, #12]
 800a014:	0759      	lsls	r1, r3, #29
 800a016:	d505      	bpl.n	800a024 <__sflush_r+0x44>
 800a018:	6863      	ldr	r3, [r4, #4]
 800a01a:	1ad2      	subs	r2, r2, r3
 800a01c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a01e:	b10b      	cbz	r3, 800a024 <__sflush_r+0x44>
 800a020:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a022:	1ad2      	subs	r2, r2, r3
 800a024:	2300      	movs	r3, #0
 800a026:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a028:	6a21      	ldr	r1, [r4, #32]
 800a02a:	4628      	mov	r0, r5
 800a02c:	47b0      	blx	r6
 800a02e:	1c43      	adds	r3, r0, #1
 800a030:	89a3      	ldrh	r3, [r4, #12]
 800a032:	d106      	bne.n	800a042 <__sflush_r+0x62>
 800a034:	6829      	ldr	r1, [r5, #0]
 800a036:	291d      	cmp	r1, #29
 800a038:	d82b      	bhi.n	800a092 <__sflush_r+0xb2>
 800a03a:	4a2a      	ldr	r2, [pc, #168]	@ (800a0e4 <__sflush_r+0x104>)
 800a03c:	410a      	asrs	r2, r1
 800a03e:	07d6      	lsls	r6, r2, #31
 800a040:	d427      	bmi.n	800a092 <__sflush_r+0xb2>
 800a042:	2200      	movs	r2, #0
 800a044:	6062      	str	r2, [r4, #4]
 800a046:	04d9      	lsls	r1, r3, #19
 800a048:	6922      	ldr	r2, [r4, #16]
 800a04a:	6022      	str	r2, [r4, #0]
 800a04c:	d504      	bpl.n	800a058 <__sflush_r+0x78>
 800a04e:	1c42      	adds	r2, r0, #1
 800a050:	d101      	bne.n	800a056 <__sflush_r+0x76>
 800a052:	682b      	ldr	r3, [r5, #0]
 800a054:	b903      	cbnz	r3, 800a058 <__sflush_r+0x78>
 800a056:	6560      	str	r0, [r4, #84]	@ 0x54
 800a058:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a05a:	602f      	str	r7, [r5, #0]
 800a05c:	b1b9      	cbz	r1, 800a08e <__sflush_r+0xae>
 800a05e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a062:	4299      	cmp	r1, r3
 800a064:	d002      	beq.n	800a06c <__sflush_r+0x8c>
 800a066:	4628      	mov	r0, r5
 800a068:	f7fe f8ea 	bl	8008240 <_free_r>
 800a06c:	2300      	movs	r3, #0
 800a06e:	6363      	str	r3, [r4, #52]	@ 0x34
 800a070:	e00d      	b.n	800a08e <__sflush_r+0xae>
 800a072:	2301      	movs	r3, #1
 800a074:	4628      	mov	r0, r5
 800a076:	47b0      	blx	r6
 800a078:	4602      	mov	r2, r0
 800a07a:	1c50      	adds	r0, r2, #1
 800a07c:	d1c9      	bne.n	800a012 <__sflush_r+0x32>
 800a07e:	682b      	ldr	r3, [r5, #0]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d0c6      	beq.n	800a012 <__sflush_r+0x32>
 800a084:	2b1d      	cmp	r3, #29
 800a086:	d001      	beq.n	800a08c <__sflush_r+0xac>
 800a088:	2b16      	cmp	r3, #22
 800a08a:	d11e      	bne.n	800a0ca <__sflush_r+0xea>
 800a08c:	602f      	str	r7, [r5, #0]
 800a08e:	2000      	movs	r0, #0
 800a090:	e022      	b.n	800a0d8 <__sflush_r+0xf8>
 800a092:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a096:	b21b      	sxth	r3, r3
 800a098:	e01b      	b.n	800a0d2 <__sflush_r+0xf2>
 800a09a:	690f      	ldr	r7, [r1, #16]
 800a09c:	2f00      	cmp	r7, #0
 800a09e:	d0f6      	beq.n	800a08e <__sflush_r+0xae>
 800a0a0:	0793      	lsls	r3, r2, #30
 800a0a2:	680e      	ldr	r6, [r1, #0]
 800a0a4:	bf08      	it	eq
 800a0a6:	694b      	ldreq	r3, [r1, #20]
 800a0a8:	600f      	str	r7, [r1, #0]
 800a0aa:	bf18      	it	ne
 800a0ac:	2300      	movne	r3, #0
 800a0ae:	eba6 0807 	sub.w	r8, r6, r7
 800a0b2:	608b      	str	r3, [r1, #8]
 800a0b4:	f1b8 0f00 	cmp.w	r8, #0
 800a0b8:	dde9      	ble.n	800a08e <__sflush_r+0xae>
 800a0ba:	6a21      	ldr	r1, [r4, #32]
 800a0bc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a0be:	4643      	mov	r3, r8
 800a0c0:	463a      	mov	r2, r7
 800a0c2:	4628      	mov	r0, r5
 800a0c4:	47b0      	blx	r6
 800a0c6:	2800      	cmp	r0, #0
 800a0c8:	dc08      	bgt.n	800a0dc <__sflush_r+0xfc>
 800a0ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a0d2:	81a3      	strh	r3, [r4, #12]
 800a0d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a0d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0dc:	4407      	add	r7, r0
 800a0de:	eba8 0800 	sub.w	r8, r8, r0
 800a0e2:	e7e7      	b.n	800a0b4 <__sflush_r+0xd4>
 800a0e4:	dfbffffe 	.word	0xdfbffffe

0800a0e8 <_fflush_r>:
 800a0e8:	b538      	push	{r3, r4, r5, lr}
 800a0ea:	690b      	ldr	r3, [r1, #16]
 800a0ec:	4605      	mov	r5, r0
 800a0ee:	460c      	mov	r4, r1
 800a0f0:	b913      	cbnz	r3, 800a0f8 <_fflush_r+0x10>
 800a0f2:	2500      	movs	r5, #0
 800a0f4:	4628      	mov	r0, r5
 800a0f6:	bd38      	pop	{r3, r4, r5, pc}
 800a0f8:	b118      	cbz	r0, 800a102 <_fflush_r+0x1a>
 800a0fa:	6a03      	ldr	r3, [r0, #32]
 800a0fc:	b90b      	cbnz	r3, 800a102 <_fflush_r+0x1a>
 800a0fe:	f7fd f80b 	bl	8007118 <__sinit>
 800a102:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d0f3      	beq.n	800a0f2 <_fflush_r+0xa>
 800a10a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a10c:	07d0      	lsls	r0, r2, #31
 800a10e:	d404      	bmi.n	800a11a <_fflush_r+0x32>
 800a110:	0599      	lsls	r1, r3, #22
 800a112:	d402      	bmi.n	800a11a <_fflush_r+0x32>
 800a114:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a116:	f7fd fa30 	bl	800757a <__retarget_lock_acquire_recursive>
 800a11a:	4628      	mov	r0, r5
 800a11c:	4621      	mov	r1, r4
 800a11e:	f7ff ff5f 	bl	8009fe0 <__sflush_r>
 800a122:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a124:	07da      	lsls	r2, r3, #31
 800a126:	4605      	mov	r5, r0
 800a128:	d4e4      	bmi.n	800a0f4 <_fflush_r+0xc>
 800a12a:	89a3      	ldrh	r3, [r4, #12]
 800a12c:	059b      	lsls	r3, r3, #22
 800a12e:	d4e1      	bmi.n	800a0f4 <_fflush_r+0xc>
 800a130:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a132:	f7fd fa23 	bl	800757c <__retarget_lock_release_recursive>
 800a136:	e7dd      	b.n	800a0f4 <_fflush_r+0xc>

0800a138 <__swhatbuf_r>:
 800a138:	b570      	push	{r4, r5, r6, lr}
 800a13a:	460c      	mov	r4, r1
 800a13c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a140:	2900      	cmp	r1, #0
 800a142:	b096      	sub	sp, #88	@ 0x58
 800a144:	4615      	mov	r5, r2
 800a146:	461e      	mov	r6, r3
 800a148:	da0d      	bge.n	800a166 <__swhatbuf_r+0x2e>
 800a14a:	89a3      	ldrh	r3, [r4, #12]
 800a14c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a150:	f04f 0100 	mov.w	r1, #0
 800a154:	bf14      	ite	ne
 800a156:	2340      	movne	r3, #64	@ 0x40
 800a158:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a15c:	2000      	movs	r0, #0
 800a15e:	6031      	str	r1, [r6, #0]
 800a160:	602b      	str	r3, [r5, #0]
 800a162:	b016      	add	sp, #88	@ 0x58
 800a164:	bd70      	pop	{r4, r5, r6, pc}
 800a166:	466a      	mov	r2, sp
 800a168:	f000 f874 	bl	800a254 <_fstat_r>
 800a16c:	2800      	cmp	r0, #0
 800a16e:	dbec      	blt.n	800a14a <__swhatbuf_r+0x12>
 800a170:	9901      	ldr	r1, [sp, #4]
 800a172:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a176:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a17a:	4259      	negs	r1, r3
 800a17c:	4159      	adcs	r1, r3
 800a17e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a182:	e7eb      	b.n	800a15c <__swhatbuf_r+0x24>

0800a184 <__smakebuf_r>:
 800a184:	898b      	ldrh	r3, [r1, #12]
 800a186:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a188:	079d      	lsls	r5, r3, #30
 800a18a:	4606      	mov	r6, r0
 800a18c:	460c      	mov	r4, r1
 800a18e:	d507      	bpl.n	800a1a0 <__smakebuf_r+0x1c>
 800a190:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a194:	6023      	str	r3, [r4, #0]
 800a196:	6123      	str	r3, [r4, #16]
 800a198:	2301      	movs	r3, #1
 800a19a:	6163      	str	r3, [r4, #20]
 800a19c:	b003      	add	sp, #12
 800a19e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1a0:	ab01      	add	r3, sp, #4
 800a1a2:	466a      	mov	r2, sp
 800a1a4:	f7ff ffc8 	bl	800a138 <__swhatbuf_r>
 800a1a8:	9f00      	ldr	r7, [sp, #0]
 800a1aa:	4605      	mov	r5, r0
 800a1ac:	4639      	mov	r1, r7
 800a1ae:	4630      	mov	r0, r6
 800a1b0:	f7fe f8ba 	bl	8008328 <_malloc_r>
 800a1b4:	b948      	cbnz	r0, 800a1ca <__smakebuf_r+0x46>
 800a1b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1ba:	059a      	lsls	r2, r3, #22
 800a1bc:	d4ee      	bmi.n	800a19c <__smakebuf_r+0x18>
 800a1be:	f023 0303 	bic.w	r3, r3, #3
 800a1c2:	f043 0302 	orr.w	r3, r3, #2
 800a1c6:	81a3      	strh	r3, [r4, #12]
 800a1c8:	e7e2      	b.n	800a190 <__smakebuf_r+0xc>
 800a1ca:	89a3      	ldrh	r3, [r4, #12]
 800a1cc:	6020      	str	r0, [r4, #0]
 800a1ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a1d2:	81a3      	strh	r3, [r4, #12]
 800a1d4:	9b01      	ldr	r3, [sp, #4]
 800a1d6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a1da:	b15b      	cbz	r3, 800a1f4 <__smakebuf_r+0x70>
 800a1dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1e0:	4630      	mov	r0, r6
 800a1e2:	f000 f849 	bl	800a278 <_isatty_r>
 800a1e6:	b128      	cbz	r0, 800a1f4 <__smakebuf_r+0x70>
 800a1e8:	89a3      	ldrh	r3, [r4, #12]
 800a1ea:	f023 0303 	bic.w	r3, r3, #3
 800a1ee:	f043 0301 	orr.w	r3, r3, #1
 800a1f2:	81a3      	strh	r3, [r4, #12]
 800a1f4:	89a3      	ldrh	r3, [r4, #12]
 800a1f6:	431d      	orrs	r5, r3
 800a1f8:	81a5      	strh	r5, [r4, #12]
 800a1fa:	e7cf      	b.n	800a19c <__smakebuf_r+0x18>

0800a1fc <memmove>:
 800a1fc:	4288      	cmp	r0, r1
 800a1fe:	b510      	push	{r4, lr}
 800a200:	eb01 0402 	add.w	r4, r1, r2
 800a204:	d902      	bls.n	800a20c <memmove+0x10>
 800a206:	4284      	cmp	r4, r0
 800a208:	4623      	mov	r3, r4
 800a20a:	d807      	bhi.n	800a21c <memmove+0x20>
 800a20c:	1e43      	subs	r3, r0, #1
 800a20e:	42a1      	cmp	r1, r4
 800a210:	d008      	beq.n	800a224 <memmove+0x28>
 800a212:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a216:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a21a:	e7f8      	b.n	800a20e <memmove+0x12>
 800a21c:	4402      	add	r2, r0
 800a21e:	4601      	mov	r1, r0
 800a220:	428a      	cmp	r2, r1
 800a222:	d100      	bne.n	800a226 <memmove+0x2a>
 800a224:	bd10      	pop	{r4, pc}
 800a226:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a22a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a22e:	e7f7      	b.n	800a220 <memmove+0x24>

0800a230 <strncmp>:
 800a230:	b510      	push	{r4, lr}
 800a232:	b16a      	cbz	r2, 800a250 <strncmp+0x20>
 800a234:	3901      	subs	r1, #1
 800a236:	1884      	adds	r4, r0, r2
 800a238:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a23c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a240:	429a      	cmp	r2, r3
 800a242:	d103      	bne.n	800a24c <strncmp+0x1c>
 800a244:	42a0      	cmp	r0, r4
 800a246:	d001      	beq.n	800a24c <strncmp+0x1c>
 800a248:	2a00      	cmp	r2, #0
 800a24a:	d1f5      	bne.n	800a238 <strncmp+0x8>
 800a24c:	1ad0      	subs	r0, r2, r3
 800a24e:	bd10      	pop	{r4, pc}
 800a250:	4610      	mov	r0, r2
 800a252:	e7fc      	b.n	800a24e <strncmp+0x1e>

0800a254 <_fstat_r>:
 800a254:	b538      	push	{r3, r4, r5, lr}
 800a256:	4d07      	ldr	r5, [pc, #28]	@ (800a274 <_fstat_r+0x20>)
 800a258:	2300      	movs	r3, #0
 800a25a:	4604      	mov	r4, r0
 800a25c:	4608      	mov	r0, r1
 800a25e:	4611      	mov	r1, r2
 800a260:	602b      	str	r3, [r5, #0]
 800a262:	f7f7 fcd7 	bl	8001c14 <_fstat>
 800a266:	1c43      	adds	r3, r0, #1
 800a268:	d102      	bne.n	800a270 <_fstat_r+0x1c>
 800a26a:	682b      	ldr	r3, [r5, #0]
 800a26c:	b103      	cbz	r3, 800a270 <_fstat_r+0x1c>
 800a26e:	6023      	str	r3, [r4, #0]
 800a270:	bd38      	pop	{r3, r4, r5, pc}
 800a272:	bf00      	nop
 800a274:	20000908 	.word	0x20000908

0800a278 <_isatty_r>:
 800a278:	b538      	push	{r3, r4, r5, lr}
 800a27a:	4d06      	ldr	r5, [pc, #24]	@ (800a294 <_isatty_r+0x1c>)
 800a27c:	2300      	movs	r3, #0
 800a27e:	4604      	mov	r4, r0
 800a280:	4608      	mov	r0, r1
 800a282:	602b      	str	r3, [r5, #0]
 800a284:	f7f7 fcd6 	bl	8001c34 <_isatty>
 800a288:	1c43      	adds	r3, r0, #1
 800a28a:	d102      	bne.n	800a292 <_isatty_r+0x1a>
 800a28c:	682b      	ldr	r3, [r5, #0]
 800a28e:	b103      	cbz	r3, 800a292 <_isatty_r+0x1a>
 800a290:	6023      	str	r3, [r4, #0]
 800a292:	bd38      	pop	{r3, r4, r5, pc}
 800a294:	20000908 	.word	0x20000908

0800a298 <_sbrk_r>:
 800a298:	b538      	push	{r3, r4, r5, lr}
 800a29a:	4d06      	ldr	r5, [pc, #24]	@ (800a2b4 <_sbrk_r+0x1c>)
 800a29c:	2300      	movs	r3, #0
 800a29e:	4604      	mov	r4, r0
 800a2a0:	4608      	mov	r0, r1
 800a2a2:	602b      	str	r3, [r5, #0]
 800a2a4:	f7f7 fcde 	bl	8001c64 <_sbrk>
 800a2a8:	1c43      	adds	r3, r0, #1
 800a2aa:	d102      	bne.n	800a2b2 <_sbrk_r+0x1a>
 800a2ac:	682b      	ldr	r3, [r5, #0]
 800a2ae:	b103      	cbz	r3, 800a2b2 <_sbrk_r+0x1a>
 800a2b0:	6023      	str	r3, [r4, #0]
 800a2b2:	bd38      	pop	{r3, r4, r5, pc}
 800a2b4:	20000908 	.word	0x20000908

0800a2b8 <nan>:
 800a2b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a2c0 <nan+0x8>
 800a2bc:	4770      	bx	lr
 800a2be:	bf00      	nop
 800a2c0:	00000000 	.word	0x00000000
 800a2c4:	7ff80000 	.word	0x7ff80000

0800a2c8 <__assert_func>:
 800a2c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a2ca:	4614      	mov	r4, r2
 800a2cc:	461a      	mov	r2, r3
 800a2ce:	4b09      	ldr	r3, [pc, #36]	@ (800a2f4 <__assert_func+0x2c>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	4605      	mov	r5, r0
 800a2d4:	68d8      	ldr	r0, [r3, #12]
 800a2d6:	b954      	cbnz	r4, 800a2ee <__assert_func+0x26>
 800a2d8:	4b07      	ldr	r3, [pc, #28]	@ (800a2f8 <__assert_func+0x30>)
 800a2da:	461c      	mov	r4, r3
 800a2dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a2e0:	9100      	str	r1, [sp, #0]
 800a2e2:	462b      	mov	r3, r5
 800a2e4:	4905      	ldr	r1, [pc, #20]	@ (800a2fc <__assert_func+0x34>)
 800a2e6:	f000 fba7 	bl	800aa38 <fiprintf>
 800a2ea:	f000 fbb7 	bl	800aa5c <abort>
 800a2ee:	4b04      	ldr	r3, [pc, #16]	@ (800a300 <__assert_func+0x38>)
 800a2f0:	e7f4      	b.n	800a2dc <__assert_func+0x14>
 800a2f2:	bf00      	nop
 800a2f4:	20000018 	.word	0x20000018
 800a2f8:	0801573d 	.word	0x0801573d
 800a2fc:	0801570f 	.word	0x0801570f
 800a300:	08015702 	.word	0x08015702

0800a304 <_calloc_r>:
 800a304:	b570      	push	{r4, r5, r6, lr}
 800a306:	fba1 5402 	umull	r5, r4, r1, r2
 800a30a:	b93c      	cbnz	r4, 800a31c <_calloc_r+0x18>
 800a30c:	4629      	mov	r1, r5
 800a30e:	f7fe f80b 	bl	8008328 <_malloc_r>
 800a312:	4606      	mov	r6, r0
 800a314:	b928      	cbnz	r0, 800a322 <_calloc_r+0x1e>
 800a316:	2600      	movs	r6, #0
 800a318:	4630      	mov	r0, r6
 800a31a:	bd70      	pop	{r4, r5, r6, pc}
 800a31c:	220c      	movs	r2, #12
 800a31e:	6002      	str	r2, [r0, #0]
 800a320:	e7f9      	b.n	800a316 <_calloc_r+0x12>
 800a322:	462a      	mov	r2, r5
 800a324:	4621      	mov	r1, r4
 800a326:	f7fd f895 	bl	8007454 <memset>
 800a32a:	e7f5      	b.n	800a318 <_calloc_r+0x14>

0800a32c <rshift>:
 800a32c:	6903      	ldr	r3, [r0, #16]
 800a32e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a332:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a336:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a33a:	f100 0414 	add.w	r4, r0, #20
 800a33e:	dd45      	ble.n	800a3cc <rshift+0xa0>
 800a340:	f011 011f 	ands.w	r1, r1, #31
 800a344:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a348:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a34c:	d10c      	bne.n	800a368 <rshift+0x3c>
 800a34e:	f100 0710 	add.w	r7, r0, #16
 800a352:	4629      	mov	r1, r5
 800a354:	42b1      	cmp	r1, r6
 800a356:	d334      	bcc.n	800a3c2 <rshift+0x96>
 800a358:	1a9b      	subs	r3, r3, r2
 800a35a:	009b      	lsls	r3, r3, #2
 800a35c:	1eea      	subs	r2, r5, #3
 800a35e:	4296      	cmp	r6, r2
 800a360:	bf38      	it	cc
 800a362:	2300      	movcc	r3, #0
 800a364:	4423      	add	r3, r4
 800a366:	e015      	b.n	800a394 <rshift+0x68>
 800a368:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a36c:	f1c1 0820 	rsb	r8, r1, #32
 800a370:	40cf      	lsrs	r7, r1
 800a372:	f105 0e04 	add.w	lr, r5, #4
 800a376:	46a1      	mov	r9, r4
 800a378:	4576      	cmp	r6, lr
 800a37a:	46f4      	mov	ip, lr
 800a37c:	d815      	bhi.n	800a3aa <rshift+0x7e>
 800a37e:	1a9a      	subs	r2, r3, r2
 800a380:	0092      	lsls	r2, r2, #2
 800a382:	3a04      	subs	r2, #4
 800a384:	3501      	adds	r5, #1
 800a386:	42ae      	cmp	r6, r5
 800a388:	bf38      	it	cc
 800a38a:	2200      	movcc	r2, #0
 800a38c:	18a3      	adds	r3, r4, r2
 800a38e:	50a7      	str	r7, [r4, r2]
 800a390:	b107      	cbz	r7, 800a394 <rshift+0x68>
 800a392:	3304      	adds	r3, #4
 800a394:	1b1a      	subs	r2, r3, r4
 800a396:	42a3      	cmp	r3, r4
 800a398:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a39c:	bf08      	it	eq
 800a39e:	2300      	moveq	r3, #0
 800a3a0:	6102      	str	r2, [r0, #16]
 800a3a2:	bf08      	it	eq
 800a3a4:	6143      	streq	r3, [r0, #20]
 800a3a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a3aa:	f8dc c000 	ldr.w	ip, [ip]
 800a3ae:	fa0c fc08 	lsl.w	ip, ip, r8
 800a3b2:	ea4c 0707 	orr.w	r7, ip, r7
 800a3b6:	f849 7b04 	str.w	r7, [r9], #4
 800a3ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a3be:	40cf      	lsrs	r7, r1
 800a3c0:	e7da      	b.n	800a378 <rshift+0x4c>
 800a3c2:	f851 cb04 	ldr.w	ip, [r1], #4
 800a3c6:	f847 cf04 	str.w	ip, [r7, #4]!
 800a3ca:	e7c3      	b.n	800a354 <rshift+0x28>
 800a3cc:	4623      	mov	r3, r4
 800a3ce:	e7e1      	b.n	800a394 <rshift+0x68>

0800a3d0 <__hexdig_fun>:
 800a3d0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a3d4:	2b09      	cmp	r3, #9
 800a3d6:	d802      	bhi.n	800a3de <__hexdig_fun+0xe>
 800a3d8:	3820      	subs	r0, #32
 800a3da:	b2c0      	uxtb	r0, r0
 800a3dc:	4770      	bx	lr
 800a3de:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a3e2:	2b05      	cmp	r3, #5
 800a3e4:	d801      	bhi.n	800a3ea <__hexdig_fun+0x1a>
 800a3e6:	3847      	subs	r0, #71	@ 0x47
 800a3e8:	e7f7      	b.n	800a3da <__hexdig_fun+0xa>
 800a3ea:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a3ee:	2b05      	cmp	r3, #5
 800a3f0:	d801      	bhi.n	800a3f6 <__hexdig_fun+0x26>
 800a3f2:	3827      	subs	r0, #39	@ 0x27
 800a3f4:	e7f1      	b.n	800a3da <__hexdig_fun+0xa>
 800a3f6:	2000      	movs	r0, #0
 800a3f8:	4770      	bx	lr
	...

0800a3fc <__gethex>:
 800a3fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a400:	b085      	sub	sp, #20
 800a402:	468a      	mov	sl, r1
 800a404:	9302      	str	r3, [sp, #8]
 800a406:	680b      	ldr	r3, [r1, #0]
 800a408:	9001      	str	r0, [sp, #4]
 800a40a:	4690      	mov	r8, r2
 800a40c:	1c9c      	adds	r4, r3, #2
 800a40e:	46a1      	mov	r9, r4
 800a410:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a414:	2830      	cmp	r0, #48	@ 0x30
 800a416:	d0fa      	beq.n	800a40e <__gethex+0x12>
 800a418:	eba9 0303 	sub.w	r3, r9, r3
 800a41c:	f1a3 0b02 	sub.w	fp, r3, #2
 800a420:	f7ff ffd6 	bl	800a3d0 <__hexdig_fun>
 800a424:	4605      	mov	r5, r0
 800a426:	2800      	cmp	r0, #0
 800a428:	d168      	bne.n	800a4fc <__gethex+0x100>
 800a42a:	49a0      	ldr	r1, [pc, #640]	@ (800a6ac <__gethex+0x2b0>)
 800a42c:	2201      	movs	r2, #1
 800a42e:	4648      	mov	r0, r9
 800a430:	f7ff fefe 	bl	800a230 <strncmp>
 800a434:	4607      	mov	r7, r0
 800a436:	2800      	cmp	r0, #0
 800a438:	d167      	bne.n	800a50a <__gethex+0x10e>
 800a43a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a43e:	4626      	mov	r6, r4
 800a440:	f7ff ffc6 	bl	800a3d0 <__hexdig_fun>
 800a444:	2800      	cmp	r0, #0
 800a446:	d062      	beq.n	800a50e <__gethex+0x112>
 800a448:	4623      	mov	r3, r4
 800a44a:	7818      	ldrb	r0, [r3, #0]
 800a44c:	2830      	cmp	r0, #48	@ 0x30
 800a44e:	4699      	mov	r9, r3
 800a450:	f103 0301 	add.w	r3, r3, #1
 800a454:	d0f9      	beq.n	800a44a <__gethex+0x4e>
 800a456:	f7ff ffbb 	bl	800a3d0 <__hexdig_fun>
 800a45a:	fab0 f580 	clz	r5, r0
 800a45e:	096d      	lsrs	r5, r5, #5
 800a460:	f04f 0b01 	mov.w	fp, #1
 800a464:	464a      	mov	r2, r9
 800a466:	4616      	mov	r6, r2
 800a468:	3201      	adds	r2, #1
 800a46a:	7830      	ldrb	r0, [r6, #0]
 800a46c:	f7ff ffb0 	bl	800a3d0 <__hexdig_fun>
 800a470:	2800      	cmp	r0, #0
 800a472:	d1f8      	bne.n	800a466 <__gethex+0x6a>
 800a474:	498d      	ldr	r1, [pc, #564]	@ (800a6ac <__gethex+0x2b0>)
 800a476:	2201      	movs	r2, #1
 800a478:	4630      	mov	r0, r6
 800a47a:	f7ff fed9 	bl	800a230 <strncmp>
 800a47e:	2800      	cmp	r0, #0
 800a480:	d13f      	bne.n	800a502 <__gethex+0x106>
 800a482:	b944      	cbnz	r4, 800a496 <__gethex+0x9a>
 800a484:	1c74      	adds	r4, r6, #1
 800a486:	4622      	mov	r2, r4
 800a488:	4616      	mov	r6, r2
 800a48a:	3201      	adds	r2, #1
 800a48c:	7830      	ldrb	r0, [r6, #0]
 800a48e:	f7ff ff9f 	bl	800a3d0 <__hexdig_fun>
 800a492:	2800      	cmp	r0, #0
 800a494:	d1f8      	bne.n	800a488 <__gethex+0x8c>
 800a496:	1ba4      	subs	r4, r4, r6
 800a498:	00a7      	lsls	r7, r4, #2
 800a49a:	7833      	ldrb	r3, [r6, #0]
 800a49c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a4a0:	2b50      	cmp	r3, #80	@ 0x50
 800a4a2:	d13e      	bne.n	800a522 <__gethex+0x126>
 800a4a4:	7873      	ldrb	r3, [r6, #1]
 800a4a6:	2b2b      	cmp	r3, #43	@ 0x2b
 800a4a8:	d033      	beq.n	800a512 <__gethex+0x116>
 800a4aa:	2b2d      	cmp	r3, #45	@ 0x2d
 800a4ac:	d034      	beq.n	800a518 <__gethex+0x11c>
 800a4ae:	1c71      	adds	r1, r6, #1
 800a4b0:	2400      	movs	r4, #0
 800a4b2:	7808      	ldrb	r0, [r1, #0]
 800a4b4:	f7ff ff8c 	bl	800a3d0 <__hexdig_fun>
 800a4b8:	1e43      	subs	r3, r0, #1
 800a4ba:	b2db      	uxtb	r3, r3
 800a4bc:	2b18      	cmp	r3, #24
 800a4be:	d830      	bhi.n	800a522 <__gethex+0x126>
 800a4c0:	f1a0 0210 	sub.w	r2, r0, #16
 800a4c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a4c8:	f7ff ff82 	bl	800a3d0 <__hexdig_fun>
 800a4cc:	f100 3cff 	add.w	ip, r0, #4294967295
 800a4d0:	fa5f fc8c 	uxtb.w	ip, ip
 800a4d4:	f1bc 0f18 	cmp.w	ip, #24
 800a4d8:	f04f 030a 	mov.w	r3, #10
 800a4dc:	d91e      	bls.n	800a51c <__gethex+0x120>
 800a4de:	b104      	cbz	r4, 800a4e2 <__gethex+0xe6>
 800a4e0:	4252      	negs	r2, r2
 800a4e2:	4417      	add	r7, r2
 800a4e4:	f8ca 1000 	str.w	r1, [sl]
 800a4e8:	b1ed      	cbz	r5, 800a526 <__gethex+0x12a>
 800a4ea:	f1bb 0f00 	cmp.w	fp, #0
 800a4ee:	bf0c      	ite	eq
 800a4f0:	2506      	moveq	r5, #6
 800a4f2:	2500      	movne	r5, #0
 800a4f4:	4628      	mov	r0, r5
 800a4f6:	b005      	add	sp, #20
 800a4f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4fc:	2500      	movs	r5, #0
 800a4fe:	462c      	mov	r4, r5
 800a500:	e7b0      	b.n	800a464 <__gethex+0x68>
 800a502:	2c00      	cmp	r4, #0
 800a504:	d1c7      	bne.n	800a496 <__gethex+0x9a>
 800a506:	4627      	mov	r7, r4
 800a508:	e7c7      	b.n	800a49a <__gethex+0x9e>
 800a50a:	464e      	mov	r6, r9
 800a50c:	462f      	mov	r7, r5
 800a50e:	2501      	movs	r5, #1
 800a510:	e7c3      	b.n	800a49a <__gethex+0x9e>
 800a512:	2400      	movs	r4, #0
 800a514:	1cb1      	adds	r1, r6, #2
 800a516:	e7cc      	b.n	800a4b2 <__gethex+0xb6>
 800a518:	2401      	movs	r4, #1
 800a51a:	e7fb      	b.n	800a514 <__gethex+0x118>
 800a51c:	fb03 0002 	mla	r0, r3, r2, r0
 800a520:	e7ce      	b.n	800a4c0 <__gethex+0xc4>
 800a522:	4631      	mov	r1, r6
 800a524:	e7de      	b.n	800a4e4 <__gethex+0xe8>
 800a526:	eba6 0309 	sub.w	r3, r6, r9
 800a52a:	3b01      	subs	r3, #1
 800a52c:	4629      	mov	r1, r5
 800a52e:	2b07      	cmp	r3, #7
 800a530:	dc0a      	bgt.n	800a548 <__gethex+0x14c>
 800a532:	9801      	ldr	r0, [sp, #4]
 800a534:	f7fd ff84 	bl	8008440 <_Balloc>
 800a538:	4604      	mov	r4, r0
 800a53a:	b940      	cbnz	r0, 800a54e <__gethex+0x152>
 800a53c:	4b5c      	ldr	r3, [pc, #368]	@ (800a6b0 <__gethex+0x2b4>)
 800a53e:	4602      	mov	r2, r0
 800a540:	21e4      	movs	r1, #228	@ 0xe4
 800a542:	485c      	ldr	r0, [pc, #368]	@ (800a6b4 <__gethex+0x2b8>)
 800a544:	f7ff fec0 	bl	800a2c8 <__assert_func>
 800a548:	3101      	adds	r1, #1
 800a54a:	105b      	asrs	r3, r3, #1
 800a54c:	e7ef      	b.n	800a52e <__gethex+0x132>
 800a54e:	f100 0a14 	add.w	sl, r0, #20
 800a552:	2300      	movs	r3, #0
 800a554:	4655      	mov	r5, sl
 800a556:	469b      	mov	fp, r3
 800a558:	45b1      	cmp	r9, r6
 800a55a:	d337      	bcc.n	800a5cc <__gethex+0x1d0>
 800a55c:	f845 bb04 	str.w	fp, [r5], #4
 800a560:	eba5 050a 	sub.w	r5, r5, sl
 800a564:	10ad      	asrs	r5, r5, #2
 800a566:	6125      	str	r5, [r4, #16]
 800a568:	4658      	mov	r0, fp
 800a56a:	f7fe f85b 	bl	8008624 <__hi0bits>
 800a56e:	016d      	lsls	r5, r5, #5
 800a570:	f8d8 6000 	ldr.w	r6, [r8]
 800a574:	1a2d      	subs	r5, r5, r0
 800a576:	42b5      	cmp	r5, r6
 800a578:	dd54      	ble.n	800a624 <__gethex+0x228>
 800a57a:	1bad      	subs	r5, r5, r6
 800a57c:	4629      	mov	r1, r5
 800a57e:	4620      	mov	r0, r4
 800a580:	f7fe fbef 	bl	8008d62 <__any_on>
 800a584:	4681      	mov	r9, r0
 800a586:	b178      	cbz	r0, 800a5a8 <__gethex+0x1ac>
 800a588:	1e6b      	subs	r3, r5, #1
 800a58a:	1159      	asrs	r1, r3, #5
 800a58c:	f003 021f 	and.w	r2, r3, #31
 800a590:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a594:	f04f 0901 	mov.w	r9, #1
 800a598:	fa09 f202 	lsl.w	r2, r9, r2
 800a59c:	420a      	tst	r2, r1
 800a59e:	d003      	beq.n	800a5a8 <__gethex+0x1ac>
 800a5a0:	454b      	cmp	r3, r9
 800a5a2:	dc36      	bgt.n	800a612 <__gethex+0x216>
 800a5a4:	f04f 0902 	mov.w	r9, #2
 800a5a8:	4629      	mov	r1, r5
 800a5aa:	4620      	mov	r0, r4
 800a5ac:	f7ff febe 	bl	800a32c <rshift>
 800a5b0:	442f      	add	r7, r5
 800a5b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a5b6:	42bb      	cmp	r3, r7
 800a5b8:	da42      	bge.n	800a640 <__gethex+0x244>
 800a5ba:	9801      	ldr	r0, [sp, #4]
 800a5bc:	4621      	mov	r1, r4
 800a5be:	f7fd ff7f 	bl	80084c0 <_Bfree>
 800a5c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	6013      	str	r3, [r2, #0]
 800a5c8:	25a3      	movs	r5, #163	@ 0xa3
 800a5ca:	e793      	b.n	800a4f4 <__gethex+0xf8>
 800a5cc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a5d0:	2a2e      	cmp	r2, #46	@ 0x2e
 800a5d2:	d012      	beq.n	800a5fa <__gethex+0x1fe>
 800a5d4:	2b20      	cmp	r3, #32
 800a5d6:	d104      	bne.n	800a5e2 <__gethex+0x1e6>
 800a5d8:	f845 bb04 	str.w	fp, [r5], #4
 800a5dc:	f04f 0b00 	mov.w	fp, #0
 800a5e0:	465b      	mov	r3, fp
 800a5e2:	7830      	ldrb	r0, [r6, #0]
 800a5e4:	9303      	str	r3, [sp, #12]
 800a5e6:	f7ff fef3 	bl	800a3d0 <__hexdig_fun>
 800a5ea:	9b03      	ldr	r3, [sp, #12]
 800a5ec:	f000 000f 	and.w	r0, r0, #15
 800a5f0:	4098      	lsls	r0, r3
 800a5f2:	ea4b 0b00 	orr.w	fp, fp, r0
 800a5f6:	3304      	adds	r3, #4
 800a5f8:	e7ae      	b.n	800a558 <__gethex+0x15c>
 800a5fa:	45b1      	cmp	r9, r6
 800a5fc:	d8ea      	bhi.n	800a5d4 <__gethex+0x1d8>
 800a5fe:	492b      	ldr	r1, [pc, #172]	@ (800a6ac <__gethex+0x2b0>)
 800a600:	9303      	str	r3, [sp, #12]
 800a602:	2201      	movs	r2, #1
 800a604:	4630      	mov	r0, r6
 800a606:	f7ff fe13 	bl	800a230 <strncmp>
 800a60a:	9b03      	ldr	r3, [sp, #12]
 800a60c:	2800      	cmp	r0, #0
 800a60e:	d1e1      	bne.n	800a5d4 <__gethex+0x1d8>
 800a610:	e7a2      	b.n	800a558 <__gethex+0x15c>
 800a612:	1ea9      	subs	r1, r5, #2
 800a614:	4620      	mov	r0, r4
 800a616:	f7fe fba4 	bl	8008d62 <__any_on>
 800a61a:	2800      	cmp	r0, #0
 800a61c:	d0c2      	beq.n	800a5a4 <__gethex+0x1a8>
 800a61e:	f04f 0903 	mov.w	r9, #3
 800a622:	e7c1      	b.n	800a5a8 <__gethex+0x1ac>
 800a624:	da09      	bge.n	800a63a <__gethex+0x23e>
 800a626:	1b75      	subs	r5, r6, r5
 800a628:	4621      	mov	r1, r4
 800a62a:	9801      	ldr	r0, [sp, #4]
 800a62c:	462a      	mov	r2, r5
 800a62e:	f7fe f95f 	bl	80088f0 <__lshift>
 800a632:	1b7f      	subs	r7, r7, r5
 800a634:	4604      	mov	r4, r0
 800a636:	f100 0a14 	add.w	sl, r0, #20
 800a63a:	f04f 0900 	mov.w	r9, #0
 800a63e:	e7b8      	b.n	800a5b2 <__gethex+0x1b6>
 800a640:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a644:	42bd      	cmp	r5, r7
 800a646:	dd6f      	ble.n	800a728 <__gethex+0x32c>
 800a648:	1bed      	subs	r5, r5, r7
 800a64a:	42ae      	cmp	r6, r5
 800a64c:	dc34      	bgt.n	800a6b8 <__gethex+0x2bc>
 800a64e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a652:	2b02      	cmp	r3, #2
 800a654:	d022      	beq.n	800a69c <__gethex+0x2a0>
 800a656:	2b03      	cmp	r3, #3
 800a658:	d024      	beq.n	800a6a4 <__gethex+0x2a8>
 800a65a:	2b01      	cmp	r3, #1
 800a65c:	d115      	bne.n	800a68a <__gethex+0x28e>
 800a65e:	42ae      	cmp	r6, r5
 800a660:	d113      	bne.n	800a68a <__gethex+0x28e>
 800a662:	2e01      	cmp	r6, #1
 800a664:	d10b      	bne.n	800a67e <__gethex+0x282>
 800a666:	9a02      	ldr	r2, [sp, #8]
 800a668:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a66c:	6013      	str	r3, [r2, #0]
 800a66e:	2301      	movs	r3, #1
 800a670:	6123      	str	r3, [r4, #16]
 800a672:	f8ca 3000 	str.w	r3, [sl]
 800a676:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a678:	2562      	movs	r5, #98	@ 0x62
 800a67a:	601c      	str	r4, [r3, #0]
 800a67c:	e73a      	b.n	800a4f4 <__gethex+0xf8>
 800a67e:	1e71      	subs	r1, r6, #1
 800a680:	4620      	mov	r0, r4
 800a682:	f7fe fb6e 	bl	8008d62 <__any_on>
 800a686:	2800      	cmp	r0, #0
 800a688:	d1ed      	bne.n	800a666 <__gethex+0x26a>
 800a68a:	9801      	ldr	r0, [sp, #4]
 800a68c:	4621      	mov	r1, r4
 800a68e:	f7fd ff17 	bl	80084c0 <_Bfree>
 800a692:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a694:	2300      	movs	r3, #0
 800a696:	6013      	str	r3, [r2, #0]
 800a698:	2550      	movs	r5, #80	@ 0x50
 800a69a:	e72b      	b.n	800a4f4 <__gethex+0xf8>
 800a69c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d1f3      	bne.n	800a68a <__gethex+0x28e>
 800a6a2:	e7e0      	b.n	800a666 <__gethex+0x26a>
 800a6a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d1dd      	bne.n	800a666 <__gethex+0x26a>
 800a6aa:	e7ee      	b.n	800a68a <__gethex+0x28e>
 800a6ac:	08015590 	.word	0x08015590
 800a6b0:	08015429 	.word	0x08015429
 800a6b4:	0801573e 	.word	0x0801573e
 800a6b8:	1e6f      	subs	r7, r5, #1
 800a6ba:	f1b9 0f00 	cmp.w	r9, #0
 800a6be:	d130      	bne.n	800a722 <__gethex+0x326>
 800a6c0:	b127      	cbz	r7, 800a6cc <__gethex+0x2d0>
 800a6c2:	4639      	mov	r1, r7
 800a6c4:	4620      	mov	r0, r4
 800a6c6:	f7fe fb4c 	bl	8008d62 <__any_on>
 800a6ca:	4681      	mov	r9, r0
 800a6cc:	117a      	asrs	r2, r7, #5
 800a6ce:	2301      	movs	r3, #1
 800a6d0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a6d4:	f007 071f 	and.w	r7, r7, #31
 800a6d8:	40bb      	lsls	r3, r7
 800a6da:	4213      	tst	r3, r2
 800a6dc:	4629      	mov	r1, r5
 800a6de:	4620      	mov	r0, r4
 800a6e0:	bf18      	it	ne
 800a6e2:	f049 0902 	orrne.w	r9, r9, #2
 800a6e6:	f7ff fe21 	bl	800a32c <rshift>
 800a6ea:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a6ee:	1b76      	subs	r6, r6, r5
 800a6f0:	2502      	movs	r5, #2
 800a6f2:	f1b9 0f00 	cmp.w	r9, #0
 800a6f6:	d047      	beq.n	800a788 <__gethex+0x38c>
 800a6f8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a6fc:	2b02      	cmp	r3, #2
 800a6fe:	d015      	beq.n	800a72c <__gethex+0x330>
 800a700:	2b03      	cmp	r3, #3
 800a702:	d017      	beq.n	800a734 <__gethex+0x338>
 800a704:	2b01      	cmp	r3, #1
 800a706:	d109      	bne.n	800a71c <__gethex+0x320>
 800a708:	f019 0f02 	tst.w	r9, #2
 800a70c:	d006      	beq.n	800a71c <__gethex+0x320>
 800a70e:	f8da 3000 	ldr.w	r3, [sl]
 800a712:	ea49 0903 	orr.w	r9, r9, r3
 800a716:	f019 0f01 	tst.w	r9, #1
 800a71a:	d10e      	bne.n	800a73a <__gethex+0x33e>
 800a71c:	f045 0510 	orr.w	r5, r5, #16
 800a720:	e032      	b.n	800a788 <__gethex+0x38c>
 800a722:	f04f 0901 	mov.w	r9, #1
 800a726:	e7d1      	b.n	800a6cc <__gethex+0x2d0>
 800a728:	2501      	movs	r5, #1
 800a72a:	e7e2      	b.n	800a6f2 <__gethex+0x2f6>
 800a72c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a72e:	f1c3 0301 	rsb	r3, r3, #1
 800a732:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a734:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a736:	2b00      	cmp	r3, #0
 800a738:	d0f0      	beq.n	800a71c <__gethex+0x320>
 800a73a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a73e:	f104 0314 	add.w	r3, r4, #20
 800a742:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a746:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a74a:	f04f 0c00 	mov.w	ip, #0
 800a74e:	4618      	mov	r0, r3
 800a750:	f853 2b04 	ldr.w	r2, [r3], #4
 800a754:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a758:	d01b      	beq.n	800a792 <__gethex+0x396>
 800a75a:	3201      	adds	r2, #1
 800a75c:	6002      	str	r2, [r0, #0]
 800a75e:	2d02      	cmp	r5, #2
 800a760:	f104 0314 	add.w	r3, r4, #20
 800a764:	d13c      	bne.n	800a7e0 <__gethex+0x3e4>
 800a766:	f8d8 2000 	ldr.w	r2, [r8]
 800a76a:	3a01      	subs	r2, #1
 800a76c:	42b2      	cmp	r2, r6
 800a76e:	d109      	bne.n	800a784 <__gethex+0x388>
 800a770:	1171      	asrs	r1, r6, #5
 800a772:	2201      	movs	r2, #1
 800a774:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a778:	f006 061f 	and.w	r6, r6, #31
 800a77c:	fa02 f606 	lsl.w	r6, r2, r6
 800a780:	421e      	tst	r6, r3
 800a782:	d13a      	bne.n	800a7fa <__gethex+0x3fe>
 800a784:	f045 0520 	orr.w	r5, r5, #32
 800a788:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a78a:	601c      	str	r4, [r3, #0]
 800a78c:	9b02      	ldr	r3, [sp, #8]
 800a78e:	601f      	str	r7, [r3, #0]
 800a790:	e6b0      	b.n	800a4f4 <__gethex+0xf8>
 800a792:	4299      	cmp	r1, r3
 800a794:	f843 cc04 	str.w	ip, [r3, #-4]
 800a798:	d8d9      	bhi.n	800a74e <__gethex+0x352>
 800a79a:	68a3      	ldr	r3, [r4, #8]
 800a79c:	459b      	cmp	fp, r3
 800a79e:	db17      	blt.n	800a7d0 <__gethex+0x3d4>
 800a7a0:	6861      	ldr	r1, [r4, #4]
 800a7a2:	9801      	ldr	r0, [sp, #4]
 800a7a4:	3101      	adds	r1, #1
 800a7a6:	f7fd fe4b 	bl	8008440 <_Balloc>
 800a7aa:	4681      	mov	r9, r0
 800a7ac:	b918      	cbnz	r0, 800a7b6 <__gethex+0x3ba>
 800a7ae:	4b1a      	ldr	r3, [pc, #104]	@ (800a818 <__gethex+0x41c>)
 800a7b0:	4602      	mov	r2, r0
 800a7b2:	2184      	movs	r1, #132	@ 0x84
 800a7b4:	e6c5      	b.n	800a542 <__gethex+0x146>
 800a7b6:	6922      	ldr	r2, [r4, #16]
 800a7b8:	3202      	adds	r2, #2
 800a7ba:	f104 010c 	add.w	r1, r4, #12
 800a7be:	0092      	lsls	r2, r2, #2
 800a7c0:	300c      	adds	r0, #12
 800a7c2:	f7fc fedc 	bl	800757e <memcpy>
 800a7c6:	4621      	mov	r1, r4
 800a7c8:	9801      	ldr	r0, [sp, #4]
 800a7ca:	f7fd fe79 	bl	80084c0 <_Bfree>
 800a7ce:	464c      	mov	r4, r9
 800a7d0:	6923      	ldr	r3, [r4, #16]
 800a7d2:	1c5a      	adds	r2, r3, #1
 800a7d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a7d8:	6122      	str	r2, [r4, #16]
 800a7da:	2201      	movs	r2, #1
 800a7dc:	615a      	str	r2, [r3, #20]
 800a7de:	e7be      	b.n	800a75e <__gethex+0x362>
 800a7e0:	6922      	ldr	r2, [r4, #16]
 800a7e2:	455a      	cmp	r2, fp
 800a7e4:	dd0b      	ble.n	800a7fe <__gethex+0x402>
 800a7e6:	2101      	movs	r1, #1
 800a7e8:	4620      	mov	r0, r4
 800a7ea:	f7ff fd9f 	bl	800a32c <rshift>
 800a7ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a7f2:	3701      	adds	r7, #1
 800a7f4:	42bb      	cmp	r3, r7
 800a7f6:	f6ff aee0 	blt.w	800a5ba <__gethex+0x1be>
 800a7fa:	2501      	movs	r5, #1
 800a7fc:	e7c2      	b.n	800a784 <__gethex+0x388>
 800a7fe:	f016 061f 	ands.w	r6, r6, #31
 800a802:	d0fa      	beq.n	800a7fa <__gethex+0x3fe>
 800a804:	4453      	add	r3, sl
 800a806:	f1c6 0620 	rsb	r6, r6, #32
 800a80a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a80e:	f7fd ff09 	bl	8008624 <__hi0bits>
 800a812:	42b0      	cmp	r0, r6
 800a814:	dbe7      	blt.n	800a7e6 <__gethex+0x3ea>
 800a816:	e7f0      	b.n	800a7fa <__gethex+0x3fe>
 800a818:	08015429 	.word	0x08015429

0800a81c <L_shift>:
 800a81c:	f1c2 0208 	rsb	r2, r2, #8
 800a820:	0092      	lsls	r2, r2, #2
 800a822:	b570      	push	{r4, r5, r6, lr}
 800a824:	f1c2 0620 	rsb	r6, r2, #32
 800a828:	6843      	ldr	r3, [r0, #4]
 800a82a:	6804      	ldr	r4, [r0, #0]
 800a82c:	fa03 f506 	lsl.w	r5, r3, r6
 800a830:	432c      	orrs	r4, r5
 800a832:	40d3      	lsrs	r3, r2
 800a834:	6004      	str	r4, [r0, #0]
 800a836:	f840 3f04 	str.w	r3, [r0, #4]!
 800a83a:	4288      	cmp	r0, r1
 800a83c:	d3f4      	bcc.n	800a828 <L_shift+0xc>
 800a83e:	bd70      	pop	{r4, r5, r6, pc}

0800a840 <__match>:
 800a840:	b530      	push	{r4, r5, lr}
 800a842:	6803      	ldr	r3, [r0, #0]
 800a844:	3301      	adds	r3, #1
 800a846:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a84a:	b914      	cbnz	r4, 800a852 <__match+0x12>
 800a84c:	6003      	str	r3, [r0, #0]
 800a84e:	2001      	movs	r0, #1
 800a850:	bd30      	pop	{r4, r5, pc}
 800a852:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a856:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a85a:	2d19      	cmp	r5, #25
 800a85c:	bf98      	it	ls
 800a85e:	3220      	addls	r2, #32
 800a860:	42a2      	cmp	r2, r4
 800a862:	d0f0      	beq.n	800a846 <__match+0x6>
 800a864:	2000      	movs	r0, #0
 800a866:	e7f3      	b.n	800a850 <__match+0x10>

0800a868 <__hexnan>:
 800a868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a86c:	680b      	ldr	r3, [r1, #0]
 800a86e:	6801      	ldr	r1, [r0, #0]
 800a870:	115e      	asrs	r6, r3, #5
 800a872:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a876:	f013 031f 	ands.w	r3, r3, #31
 800a87a:	b087      	sub	sp, #28
 800a87c:	bf18      	it	ne
 800a87e:	3604      	addne	r6, #4
 800a880:	2500      	movs	r5, #0
 800a882:	1f37      	subs	r7, r6, #4
 800a884:	4682      	mov	sl, r0
 800a886:	4690      	mov	r8, r2
 800a888:	9301      	str	r3, [sp, #4]
 800a88a:	f846 5c04 	str.w	r5, [r6, #-4]
 800a88e:	46b9      	mov	r9, r7
 800a890:	463c      	mov	r4, r7
 800a892:	9502      	str	r5, [sp, #8]
 800a894:	46ab      	mov	fp, r5
 800a896:	784a      	ldrb	r2, [r1, #1]
 800a898:	1c4b      	adds	r3, r1, #1
 800a89a:	9303      	str	r3, [sp, #12]
 800a89c:	b342      	cbz	r2, 800a8f0 <__hexnan+0x88>
 800a89e:	4610      	mov	r0, r2
 800a8a0:	9105      	str	r1, [sp, #20]
 800a8a2:	9204      	str	r2, [sp, #16]
 800a8a4:	f7ff fd94 	bl	800a3d0 <__hexdig_fun>
 800a8a8:	2800      	cmp	r0, #0
 800a8aa:	d151      	bne.n	800a950 <__hexnan+0xe8>
 800a8ac:	9a04      	ldr	r2, [sp, #16]
 800a8ae:	9905      	ldr	r1, [sp, #20]
 800a8b0:	2a20      	cmp	r2, #32
 800a8b2:	d818      	bhi.n	800a8e6 <__hexnan+0x7e>
 800a8b4:	9b02      	ldr	r3, [sp, #8]
 800a8b6:	459b      	cmp	fp, r3
 800a8b8:	dd13      	ble.n	800a8e2 <__hexnan+0x7a>
 800a8ba:	454c      	cmp	r4, r9
 800a8bc:	d206      	bcs.n	800a8cc <__hexnan+0x64>
 800a8be:	2d07      	cmp	r5, #7
 800a8c0:	dc04      	bgt.n	800a8cc <__hexnan+0x64>
 800a8c2:	462a      	mov	r2, r5
 800a8c4:	4649      	mov	r1, r9
 800a8c6:	4620      	mov	r0, r4
 800a8c8:	f7ff ffa8 	bl	800a81c <L_shift>
 800a8cc:	4544      	cmp	r4, r8
 800a8ce:	d952      	bls.n	800a976 <__hexnan+0x10e>
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	f1a4 0904 	sub.w	r9, r4, #4
 800a8d6:	f844 3c04 	str.w	r3, [r4, #-4]
 800a8da:	f8cd b008 	str.w	fp, [sp, #8]
 800a8de:	464c      	mov	r4, r9
 800a8e0:	461d      	mov	r5, r3
 800a8e2:	9903      	ldr	r1, [sp, #12]
 800a8e4:	e7d7      	b.n	800a896 <__hexnan+0x2e>
 800a8e6:	2a29      	cmp	r2, #41	@ 0x29
 800a8e8:	d157      	bne.n	800a99a <__hexnan+0x132>
 800a8ea:	3102      	adds	r1, #2
 800a8ec:	f8ca 1000 	str.w	r1, [sl]
 800a8f0:	f1bb 0f00 	cmp.w	fp, #0
 800a8f4:	d051      	beq.n	800a99a <__hexnan+0x132>
 800a8f6:	454c      	cmp	r4, r9
 800a8f8:	d206      	bcs.n	800a908 <__hexnan+0xa0>
 800a8fa:	2d07      	cmp	r5, #7
 800a8fc:	dc04      	bgt.n	800a908 <__hexnan+0xa0>
 800a8fe:	462a      	mov	r2, r5
 800a900:	4649      	mov	r1, r9
 800a902:	4620      	mov	r0, r4
 800a904:	f7ff ff8a 	bl	800a81c <L_shift>
 800a908:	4544      	cmp	r4, r8
 800a90a:	d936      	bls.n	800a97a <__hexnan+0x112>
 800a90c:	f1a8 0204 	sub.w	r2, r8, #4
 800a910:	4623      	mov	r3, r4
 800a912:	f853 1b04 	ldr.w	r1, [r3], #4
 800a916:	f842 1f04 	str.w	r1, [r2, #4]!
 800a91a:	429f      	cmp	r7, r3
 800a91c:	d2f9      	bcs.n	800a912 <__hexnan+0xaa>
 800a91e:	1b3b      	subs	r3, r7, r4
 800a920:	f023 0303 	bic.w	r3, r3, #3
 800a924:	3304      	adds	r3, #4
 800a926:	3401      	adds	r4, #1
 800a928:	3e03      	subs	r6, #3
 800a92a:	42b4      	cmp	r4, r6
 800a92c:	bf88      	it	hi
 800a92e:	2304      	movhi	r3, #4
 800a930:	4443      	add	r3, r8
 800a932:	2200      	movs	r2, #0
 800a934:	f843 2b04 	str.w	r2, [r3], #4
 800a938:	429f      	cmp	r7, r3
 800a93a:	d2fb      	bcs.n	800a934 <__hexnan+0xcc>
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	b91b      	cbnz	r3, 800a948 <__hexnan+0xe0>
 800a940:	4547      	cmp	r7, r8
 800a942:	d128      	bne.n	800a996 <__hexnan+0x12e>
 800a944:	2301      	movs	r3, #1
 800a946:	603b      	str	r3, [r7, #0]
 800a948:	2005      	movs	r0, #5
 800a94a:	b007      	add	sp, #28
 800a94c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a950:	3501      	adds	r5, #1
 800a952:	2d08      	cmp	r5, #8
 800a954:	f10b 0b01 	add.w	fp, fp, #1
 800a958:	dd06      	ble.n	800a968 <__hexnan+0x100>
 800a95a:	4544      	cmp	r4, r8
 800a95c:	d9c1      	bls.n	800a8e2 <__hexnan+0x7a>
 800a95e:	2300      	movs	r3, #0
 800a960:	f844 3c04 	str.w	r3, [r4, #-4]
 800a964:	2501      	movs	r5, #1
 800a966:	3c04      	subs	r4, #4
 800a968:	6822      	ldr	r2, [r4, #0]
 800a96a:	f000 000f 	and.w	r0, r0, #15
 800a96e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a972:	6020      	str	r0, [r4, #0]
 800a974:	e7b5      	b.n	800a8e2 <__hexnan+0x7a>
 800a976:	2508      	movs	r5, #8
 800a978:	e7b3      	b.n	800a8e2 <__hexnan+0x7a>
 800a97a:	9b01      	ldr	r3, [sp, #4]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d0dd      	beq.n	800a93c <__hexnan+0xd4>
 800a980:	f1c3 0320 	rsb	r3, r3, #32
 800a984:	f04f 32ff 	mov.w	r2, #4294967295
 800a988:	40da      	lsrs	r2, r3
 800a98a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a98e:	4013      	ands	r3, r2
 800a990:	f846 3c04 	str.w	r3, [r6, #-4]
 800a994:	e7d2      	b.n	800a93c <__hexnan+0xd4>
 800a996:	3f04      	subs	r7, #4
 800a998:	e7d0      	b.n	800a93c <__hexnan+0xd4>
 800a99a:	2004      	movs	r0, #4
 800a99c:	e7d5      	b.n	800a94a <__hexnan+0xe2>

0800a99e <__ascii_mbtowc>:
 800a99e:	b082      	sub	sp, #8
 800a9a0:	b901      	cbnz	r1, 800a9a4 <__ascii_mbtowc+0x6>
 800a9a2:	a901      	add	r1, sp, #4
 800a9a4:	b142      	cbz	r2, 800a9b8 <__ascii_mbtowc+0x1a>
 800a9a6:	b14b      	cbz	r3, 800a9bc <__ascii_mbtowc+0x1e>
 800a9a8:	7813      	ldrb	r3, [r2, #0]
 800a9aa:	600b      	str	r3, [r1, #0]
 800a9ac:	7812      	ldrb	r2, [r2, #0]
 800a9ae:	1e10      	subs	r0, r2, #0
 800a9b0:	bf18      	it	ne
 800a9b2:	2001      	movne	r0, #1
 800a9b4:	b002      	add	sp, #8
 800a9b6:	4770      	bx	lr
 800a9b8:	4610      	mov	r0, r2
 800a9ba:	e7fb      	b.n	800a9b4 <__ascii_mbtowc+0x16>
 800a9bc:	f06f 0001 	mvn.w	r0, #1
 800a9c0:	e7f8      	b.n	800a9b4 <__ascii_mbtowc+0x16>

0800a9c2 <_realloc_r>:
 800a9c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9c6:	4680      	mov	r8, r0
 800a9c8:	4615      	mov	r5, r2
 800a9ca:	460c      	mov	r4, r1
 800a9cc:	b921      	cbnz	r1, 800a9d8 <_realloc_r+0x16>
 800a9ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a9d2:	4611      	mov	r1, r2
 800a9d4:	f7fd bca8 	b.w	8008328 <_malloc_r>
 800a9d8:	b92a      	cbnz	r2, 800a9e6 <_realloc_r+0x24>
 800a9da:	f7fd fc31 	bl	8008240 <_free_r>
 800a9de:	2400      	movs	r4, #0
 800a9e0:	4620      	mov	r0, r4
 800a9e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9e6:	f000 f840 	bl	800aa6a <_malloc_usable_size_r>
 800a9ea:	4285      	cmp	r5, r0
 800a9ec:	4606      	mov	r6, r0
 800a9ee:	d802      	bhi.n	800a9f6 <_realloc_r+0x34>
 800a9f0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a9f4:	d8f4      	bhi.n	800a9e0 <_realloc_r+0x1e>
 800a9f6:	4629      	mov	r1, r5
 800a9f8:	4640      	mov	r0, r8
 800a9fa:	f7fd fc95 	bl	8008328 <_malloc_r>
 800a9fe:	4607      	mov	r7, r0
 800aa00:	2800      	cmp	r0, #0
 800aa02:	d0ec      	beq.n	800a9de <_realloc_r+0x1c>
 800aa04:	42b5      	cmp	r5, r6
 800aa06:	462a      	mov	r2, r5
 800aa08:	4621      	mov	r1, r4
 800aa0a:	bf28      	it	cs
 800aa0c:	4632      	movcs	r2, r6
 800aa0e:	f7fc fdb6 	bl	800757e <memcpy>
 800aa12:	4621      	mov	r1, r4
 800aa14:	4640      	mov	r0, r8
 800aa16:	f7fd fc13 	bl	8008240 <_free_r>
 800aa1a:	463c      	mov	r4, r7
 800aa1c:	e7e0      	b.n	800a9e0 <_realloc_r+0x1e>

0800aa1e <__ascii_wctomb>:
 800aa1e:	4603      	mov	r3, r0
 800aa20:	4608      	mov	r0, r1
 800aa22:	b141      	cbz	r1, 800aa36 <__ascii_wctomb+0x18>
 800aa24:	2aff      	cmp	r2, #255	@ 0xff
 800aa26:	d904      	bls.n	800aa32 <__ascii_wctomb+0x14>
 800aa28:	228a      	movs	r2, #138	@ 0x8a
 800aa2a:	601a      	str	r2, [r3, #0]
 800aa2c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa30:	4770      	bx	lr
 800aa32:	700a      	strb	r2, [r1, #0]
 800aa34:	2001      	movs	r0, #1
 800aa36:	4770      	bx	lr

0800aa38 <fiprintf>:
 800aa38:	b40e      	push	{r1, r2, r3}
 800aa3a:	b503      	push	{r0, r1, lr}
 800aa3c:	4601      	mov	r1, r0
 800aa3e:	ab03      	add	r3, sp, #12
 800aa40:	4805      	ldr	r0, [pc, #20]	@ (800aa58 <fiprintf+0x20>)
 800aa42:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa46:	6800      	ldr	r0, [r0, #0]
 800aa48:	9301      	str	r3, [sp, #4]
 800aa4a:	f7ff f9b1 	bl	8009db0 <_vfiprintf_r>
 800aa4e:	b002      	add	sp, #8
 800aa50:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa54:	b003      	add	sp, #12
 800aa56:	4770      	bx	lr
 800aa58:	20000018 	.word	0x20000018

0800aa5c <abort>:
 800aa5c:	b508      	push	{r3, lr}
 800aa5e:	2006      	movs	r0, #6
 800aa60:	f000 f834 	bl	800aacc <raise>
 800aa64:	2001      	movs	r0, #1
 800aa66:	f7f7 f885 	bl	8001b74 <_exit>

0800aa6a <_malloc_usable_size_r>:
 800aa6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa6e:	1f18      	subs	r0, r3, #4
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	bfbc      	itt	lt
 800aa74:	580b      	ldrlt	r3, [r1, r0]
 800aa76:	18c0      	addlt	r0, r0, r3
 800aa78:	4770      	bx	lr

0800aa7a <_raise_r>:
 800aa7a:	291f      	cmp	r1, #31
 800aa7c:	b538      	push	{r3, r4, r5, lr}
 800aa7e:	4605      	mov	r5, r0
 800aa80:	460c      	mov	r4, r1
 800aa82:	d904      	bls.n	800aa8e <_raise_r+0x14>
 800aa84:	2316      	movs	r3, #22
 800aa86:	6003      	str	r3, [r0, #0]
 800aa88:	f04f 30ff 	mov.w	r0, #4294967295
 800aa8c:	bd38      	pop	{r3, r4, r5, pc}
 800aa8e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800aa90:	b112      	cbz	r2, 800aa98 <_raise_r+0x1e>
 800aa92:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aa96:	b94b      	cbnz	r3, 800aaac <_raise_r+0x32>
 800aa98:	4628      	mov	r0, r5
 800aa9a:	f000 f831 	bl	800ab00 <_getpid_r>
 800aa9e:	4622      	mov	r2, r4
 800aaa0:	4601      	mov	r1, r0
 800aaa2:	4628      	mov	r0, r5
 800aaa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aaa8:	f000 b818 	b.w	800aadc <_kill_r>
 800aaac:	2b01      	cmp	r3, #1
 800aaae:	d00a      	beq.n	800aac6 <_raise_r+0x4c>
 800aab0:	1c59      	adds	r1, r3, #1
 800aab2:	d103      	bne.n	800aabc <_raise_r+0x42>
 800aab4:	2316      	movs	r3, #22
 800aab6:	6003      	str	r3, [r0, #0]
 800aab8:	2001      	movs	r0, #1
 800aaba:	e7e7      	b.n	800aa8c <_raise_r+0x12>
 800aabc:	2100      	movs	r1, #0
 800aabe:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800aac2:	4620      	mov	r0, r4
 800aac4:	4798      	blx	r3
 800aac6:	2000      	movs	r0, #0
 800aac8:	e7e0      	b.n	800aa8c <_raise_r+0x12>
	...

0800aacc <raise>:
 800aacc:	4b02      	ldr	r3, [pc, #8]	@ (800aad8 <raise+0xc>)
 800aace:	4601      	mov	r1, r0
 800aad0:	6818      	ldr	r0, [r3, #0]
 800aad2:	f7ff bfd2 	b.w	800aa7a <_raise_r>
 800aad6:	bf00      	nop
 800aad8:	20000018 	.word	0x20000018

0800aadc <_kill_r>:
 800aadc:	b538      	push	{r3, r4, r5, lr}
 800aade:	4d07      	ldr	r5, [pc, #28]	@ (800aafc <_kill_r+0x20>)
 800aae0:	2300      	movs	r3, #0
 800aae2:	4604      	mov	r4, r0
 800aae4:	4608      	mov	r0, r1
 800aae6:	4611      	mov	r1, r2
 800aae8:	602b      	str	r3, [r5, #0]
 800aaea:	f7f7 f833 	bl	8001b54 <_kill>
 800aaee:	1c43      	adds	r3, r0, #1
 800aaf0:	d102      	bne.n	800aaf8 <_kill_r+0x1c>
 800aaf2:	682b      	ldr	r3, [r5, #0]
 800aaf4:	b103      	cbz	r3, 800aaf8 <_kill_r+0x1c>
 800aaf6:	6023      	str	r3, [r4, #0]
 800aaf8:	bd38      	pop	{r3, r4, r5, pc}
 800aafa:	bf00      	nop
 800aafc:	20000908 	.word	0x20000908

0800ab00 <_getpid_r>:
 800ab00:	f7f7 b820 	b.w	8001b44 <_getpid>

0800ab04 <_init>:
 800ab04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab06:	bf00      	nop
 800ab08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab0a:	bc08      	pop	{r3}
 800ab0c:	469e      	mov	lr, r3
 800ab0e:	4770      	bx	lr

0800ab10 <_fini>:
 800ab10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab12:	bf00      	nop
 800ab14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab16:	bc08      	pop	{r3}
 800ab18:	469e      	mov	lr, r3
 800ab1a:	4770      	bx	lr
