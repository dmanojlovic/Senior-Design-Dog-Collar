
Smart Dog Collar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a73c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000578  0800a8d0  0800a8d0  0000b8d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae48  0800ae48  0000c1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ae48  0800ae48  0000be48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae50  0800ae50  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae50  0800ae50  0000be50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ae54  0800ae54  0000be54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800ae58  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000738  200001d4  0800b02c  0000c1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000090c  0800b02c  0000c90c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012c88  00000000  00000000  0000c204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002853  00000000  00000000  0001ee8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001118  00000000  00000000  000216e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d50  00000000  00000000  000227f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028306  00000000  00000000  00023548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014212  00000000  00000000  0004b84e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f68d5  00000000  00000000  0005fa60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00156335  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005db8  00000000  00000000  00156378  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000094  00000000  00000000  0015c130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a8b4 	.word	0x0800a8b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800a8b4 	.word	0x0800a8b4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000fec:	1d39      	adds	r1, r7, #4
 8000fee:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	4803      	ldr	r0, [pc, #12]	@ (8001004 <__io_putchar+0x20>)
 8000ff6:	f003 fed9 	bl	8004dac <HAL_UART_Transmit>
  return ch;
 8000ffa:	687b      	ldr	r3, [r7, #4]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	2000036c 	.word	0x2000036c

08001008 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800100c:	f000 ff6f 	bl	8001eee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001010:	f000 f8a8 	bl	8001164 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001014:	f000 fa76 	bl	8001504 <MX_GPIO_Init>
  MX_DMA_Init();
 8001018:	f000 fa56 	bl	80014c8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800101c:	f000 f9f4 	bl	8001408 <MX_USART2_UART_Init>
  MX_DAC1_Init();
 8001020:	f000 f8f2 	bl	8001208 <MX_DAC1_Init>
  MX_USART1_UART_Init();
 8001024:	f000 f9c0 	bl	80013a8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001028:	f000 fa1e 	bl	8001468 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 800102c:	f000 f96c 	bl	8001308 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001030:	f000 f91c 	bl	800126c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  printf("START OF CODE\r\n\n");
 8001034:	4840      	ldr	r0, [pc, #256]	@ (8001138 <main+0x130>)
 8001036:	f005 ffe3 	bl	8007000 <puts>

  HAL_Delay(100);
 800103a:	2064      	movs	r0, #100	@ 0x64
 800103c:	f000 ffcc 	bl	8001fd8 <HAL_Delay>
  bzero(tx_data_lora, 240);
 8001040:	4b3e      	ldr	r3, [pc, #248]	@ (800113c <main+0x134>)
 8001042:	4618      	mov	r0, r3
 8001044:	23f0      	movs	r3, #240	@ 0xf0
 8001046:	461a      	mov	r2, r3
 8001048:	2100      	movs	r1, #0
 800104a:	f006 f8d9 	bl	8007200 <memset>
  bzero(rx_data_lora, 240);
 800104e:	4b3c      	ldr	r3, [pc, #240]	@ (8001140 <main+0x138>)
 8001050:	4618      	mov	r0, r3
 8001052:	23f0      	movs	r3, #240	@ 0xf0
 8001054:	461a      	mov	r2, r3
 8001056:	2100      	movs	r1, #0
 8001058:	f006 f8d2 	bl	8007200 <memset>
  memcpy(tx_data_lora, "AT\r\n", 4);
 800105c:	2204      	movs	r2, #4
 800105e:	4939      	ldr	r1, [pc, #228]	@ (8001144 <main+0x13c>)
 8001060:	4836      	ldr	r0, [pc, #216]	@ (800113c <main+0x134>)
 8001062:	f006 f962 	bl	800732a <memcpy>
  HAL_UART_Transmit(&huart3, tx_data_lora, 4, 1000);
 8001066:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800106a:	2204      	movs	r2, #4
 800106c:	4933      	ldr	r1, [pc, #204]	@ (800113c <main+0x134>)
 800106e:	4836      	ldr	r0, [pc, #216]	@ (8001148 <main+0x140>)
 8001070:	f003 fe9c 	bl	8004dac <HAL_UART_Transmit>
  while(HAL_UART_Receive(&huart3, rx_data_lora, 5, 1000)!=HAL_OK){}
 8001074:	bf00      	nop
 8001076:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800107a:	2205      	movs	r2, #5
 800107c:	4930      	ldr	r1, [pc, #192]	@ (8001140 <main+0x138>)
 800107e:	4832      	ldr	r0, [pc, #200]	@ (8001148 <main+0x140>)
 8001080:	f003 ff1d 	bl	8004ebe <HAL_UART_Receive>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d1f5      	bne.n	8001076 <main+0x6e>
  HAL_UART_Transmit(&huart2, rx_data_lora, 5, 10);
 800108a:	230a      	movs	r3, #10
 800108c:	2205      	movs	r2, #5
 800108e:	492c      	ldr	r1, [pc, #176]	@ (8001140 <main+0x138>)
 8001090:	482e      	ldr	r0, [pc, #184]	@ (800114c <main+0x144>)
 8001092:	f003 fe8b 	bl	8004dac <HAL_UART_Transmit>


  //Set LoRa settings
  setup_lora();
 8001096:	f000 fac7 	bl	8001628 <setup_lora>

  //Enable GPS Interrupt
  if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 800109a:	482d      	ldr	r0, [pc, #180]	@ (8001150 <main+0x148>)
 800109c:	f003 f9e0 	bl	8004460 <HAL_TIM_Base_Start_IT>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <main+0xa2>
  {
    /* Starting Error */
    Error_Handler();
 80010a6:	f000 fb3f 	bl	8001728 <Error_Handler>
  }

  //Turn off debug LEDs
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80010aa:	2200      	movs	r2, #0
 80010ac:	2120      	movs	r1, #32
 80010ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010b2:	f001 fd9f 	bl	8002bf4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 80010b6:	2200      	movs	r2, #0
 80010b8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010bc:	4825      	ldr	r0, [pc, #148]	@ (8001154 <main+0x14c>)
 80010be:	f001 fd99 	bl	8002bf4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 80010c2:	2200      	movs	r2, #0
 80010c4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010c8:	4822      	ldr	r0, [pc, #136]	@ (8001154 <main+0x14c>)
 80010ca:	f001 fd93 	bl	8002bf4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 80010ce:	2200      	movs	r2, #0
 80010d0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010d4:	481f      	ldr	r0, [pc, #124]	@ (8001154 <main+0x14c>)
 80010d6:	f001 fd8d 	bl	8002bf4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 80010da:	2200      	movs	r2, #0
 80010dc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010e0:	481c      	ldr	r0, [pc, #112]	@ (8001154 <main+0x14c>)
 80010e2:	f001 fd87 	bl	8002bf4 <HAL_GPIO_WritePin>

  //Enable DAC timer
  HAL_TIM_Base_Start(&htim2);
 80010e6:	481c      	ldr	r0, [pc, #112]	@ (8001158 <main+0x150>)
 80010e8:	f003 f952 	bl	8004390 <HAL_TIM_Base_Start>
    //   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
    // }

    //Receive Audio cue from LoRa
    // audio_cue = 0;
    bzero(rx_data_lora, 240); //clear rx buffer
 80010ec:	4b14      	ldr	r3, [pc, #80]	@ (8001140 <main+0x138>)
 80010ee:	4618      	mov	r0, r3
 80010f0:	23f0      	movs	r3, #240	@ 0xf0
 80010f2:	461a      	mov	r2, r3
 80010f4:	2100      	movs	r1, #0
 80010f6:	f006 f883 	bl	8007200 <memset>
    while(HAL_UART_Receive(&huart3, rx_data_lora, 12, 1000)!=HAL_OK){} //Expects "+RCV=123,1,?" where ? is the audio cue
 80010fa:	bf00      	nop
 80010fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001100:	220c      	movs	r2, #12
 8001102:	490f      	ldr	r1, [pc, #60]	@ (8001140 <main+0x138>)
 8001104:	4810      	ldr	r0, [pc, #64]	@ (8001148 <main+0x140>)
 8001106:	f003 feda 	bl	8004ebe <HAL_UART_Receive>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d1f5      	bne.n	80010fc <main+0xf4>
    HAL_UART_Transmit(&huart2, rx_data_lora, 12, 10);
 8001110:	230a      	movs	r3, #10
 8001112:	220c      	movs	r2, #12
 8001114:	490a      	ldr	r1, [pc, #40]	@ (8001140 <main+0x138>)
 8001116:	480d      	ldr	r0, [pc, #52]	@ (800114c <main+0x144>)
 8001118:	f003 fe48 	bl	8004dac <HAL_UART_Transmit>
    EXTI->SWIER1 |= EXTI_SWIER1_SWI0; //send software interrupt
 800111c:	4b0f      	ldr	r3, [pc, #60]	@ (800115c <main+0x154>)
 800111e:	691b      	ldr	r3, [r3, #16]
 8001120:	4a0e      	ldr	r2, [pc, #56]	@ (800115c <main+0x154>)
 8001122:	f043 0301 	orr.w	r3, r3, #1
 8001126:	6113      	str	r3, [r2, #16]
    // else{
    //   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
    //   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
    //   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
    // }
    audio_cue = 0;
 8001128:	4b0d      	ldr	r3, [pc, #52]	@ (8001160 <main+0x158>)
 800112a:	2200      	movs	r2, #0
 800112c:	701a      	strb	r2, [r3, #0]
    HAL_Delay(100);
 800112e:	2064      	movs	r0, #100	@ 0x64
 8001130:	f000 ff52 	bl	8001fd8 <HAL_Delay>
    bzero(rx_data_lora, 240); //clear rx buffer
 8001134:	e7da      	b.n	80010ec <main+0xe4>
 8001136:	bf00      	nop
 8001138:	0800a8d0 	.word	0x0800a8d0
 800113c:	2000047c 	.word	0x2000047c
 8001140:	2000056c 	.word	0x2000056c
 8001144:	0800a8e0 	.word	0x0800a8e0
 8001148:	200003f4 	.word	0x200003f4
 800114c:	2000036c 	.word	0x2000036c
 8001150:	20000298 	.word	0x20000298
 8001154:	48000400 	.word	0x48000400
 8001158:	2000024c 	.word	0x2000024c
 800115c:	40010400 	.word	0x40010400
 8001160:	2000065c 	.word	0x2000065c

08001164 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b096      	sub	sp, #88	@ 0x58
 8001168:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800116a:	f107 0314 	add.w	r3, r7, #20
 800116e:	2244      	movs	r2, #68	@ 0x44
 8001170:	2100      	movs	r1, #0
 8001172:	4618      	mov	r0, r3
 8001174:	f006 f844 	bl	8007200 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001178:	463b      	mov	r3, r7
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	605a      	str	r2, [r3, #4]
 8001180:	609a      	str	r2, [r3, #8]
 8001182:	60da      	str	r2, [r3, #12]
 8001184:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001186:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800118a:	f001 fd97 	bl	8002cbc <HAL_PWREx_ControlVoltageScaling>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001194:	f000 fac8 	bl	8001728 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001198:	2310      	movs	r3, #16
 800119a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800119c:	2301      	movs	r3, #1
 800119e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80011a4:	2360      	movs	r3, #96	@ 0x60
 80011a6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011a8:	2302      	movs	r3, #2
 80011aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80011ac:	2301      	movs	r3, #1
 80011ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80011b0:	2301      	movs	r3, #1
 80011b2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80011b4:	2328      	movs	r3, #40	@ 0x28
 80011b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80011b8:	2307      	movs	r3, #7
 80011ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011bc:	2302      	movs	r3, #2
 80011be:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011c0:	2302      	movs	r3, #2
 80011c2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	4618      	mov	r0, r3
 80011ca:	f001 fdcd 	bl	8002d68 <HAL_RCC_OscConfig>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80011d4:	f000 faa8 	bl	8001728 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011d8:	230f      	movs	r3, #15
 80011da:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011dc:	2303      	movs	r3, #3
 80011de:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011e0:	2300      	movs	r3, #0
 80011e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011e4:	2300      	movs	r3, #0
 80011e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011e8:	2300      	movs	r3, #0
 80011ea:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011ec:	463b      	mov	r3, r7
 80011ee:	2104      	movs	r1, #4
 80011f0:	4618      	mov	r0, r3
 80011f2:	f002 f995 	bl	8003520 <HAL_RCC_ClockConfig>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80011fc:	f000 fa94 	bl	8001728 <Error_Handler>
  }
}
 8001200:	bf00      	nop
 8001202:	3758      	adds	r7, #88	@ 0x58
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}

08001208 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08a      	sub	sp, #40	@ 0x28
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800120e:	1d3b      	adds	r3, r7, #4
 8001210:	2224      	movs	r2, #36	@ 0x24
 8001212:	2100      	movs	r1, #0
 8001214:	4618      	mov	r0, r3
 8001216:	f005 fff3 	bl	8007200 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800121a:	4b12      	ldr	r3, [pc, #72]	@ (8001264 <MX_DAC1_Init+0x5c>)
 800121c:	4a12      	ldr	r2, [pc, #72]	@ (8001268 <MX_DAC1_Init+0x60>)
 800121e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001220:	4810      	ldr	r0, [pc, #64]	@ (8001264 <MX_DAC1_Init+0x5c>)
 8001222:	f001 f80e 	bl	8002242 <HAL_DAC_Init>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800122c:	f000 fa7c 	bl	8001728 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001230:	2300      	movs	r3, #0
 8001232:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001234:	2324      	movs	r3, #36	@ 0x24
 8001236:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001238:	2300      	movs	r3, #0
 800123a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800123c:	2300      	movs	r3, #0
 800123e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001244:	1d3b      	adds	r3, r7, #4
 8001246:	2200      	movs	r2, #0
 8001248:	4619      	mov	r1, r3
 800124a:	4806      	ldr	r0, [pc, #24]	@ (8001264 <MX_DAC1_Init+0x5c>)
 800124c:	f001 f81b 	bl	8002286 <HAL_DAC_ConfigChannel>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001256:	f000 fa67 	bl	8001728 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800125a:	bf00      	nop
 800125c:	3728      	adds	r7, #40	@ 0x28
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	200001f0 	.word	0x200001f0
 8001268:	40007400 	.word	0x40007400

0800126c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b088      	sub	sp, #32
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001272:	f107 0310 	add.w	r3, r7, #16
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]
 8001288:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800128a:	4b1e      	ldr	r3, [pc, #120]	@ (8001304 <MX_TIM2_Init+0x98>)
 800128c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001290:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001292:	4b1c      	ldr	r3, [pc, #112]	@ (8001304 <MX_TIM2_Init+0x98>)
 8001294:	2200      	movs	r2, #0
 8001296:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001298:	4b1a      	ldr	r3, [pc, #104]	@ (8001304 <MX_TIM2_Init+0x98>)
 800129a:	2200      	movs	r2, #0
 800129c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2500;
 800129e:	4b19      	ldr	r3, [pc, #100]	@ (8001304 <MX_TIM2_Init+0x98>)
 80012a0:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80012a4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a6:	4b17      	ldr	r3, [pc, #92]	@ (8001304 <MX_TIM2_Init+0x98>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ac:	4b15      	ldr	r3, [pc, #84]	@ (8001304 <MX_TIM2_Init+0x98>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012b2:	4814      	ldr	r0, [pc, #80]	@ (8001304 <MX_TIM2_Init+0x98>)
 80012b4:	f003 f814 	bl	80042e0 <HAL_TIM_Base_Init>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80012be:	f000 fa33 	bl	8001728 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012c8:	f107 0310 	add.w	r3, r7, #16
 80012cc:	4619      	mov	r1, r3
 80012ce:	480d      	ldr	r0, [pc, #52]	@ (8001304 <MX_TIM2_Init+0x98>)
 80012d0:	f003 fa3d 	bl	800474e <HAL_TIM_ConfigClockSource>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80012da:	f000 fa25 	bl	8001728 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80012de:	2320      	movs	r3, #32
 80012e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	4619      	mov	r1, r3
 80012ea:	4806      	ldr	r0, [pc, #24]	@ (8001304 <MX_TIM2_Init+0x98>)
 80012ec:	f003 fc6a 	bl	8004bc4 <HAL_TIMEx_MasterConfigSynchronization>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80012f6:	f000 fa17 	bl	8001728 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012fa:	bf00      	nop
 80012fc:	3720      	adds	r7, #32
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	2000024c 	.word	0x2000024c

08001308 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b088      	sub	sp, #32
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800130e:	f107 0310 	add.w	r3, r7, #16
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800131c:	1d3b      	adds	r3, r7, #4
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001326:	4b1e      	ldr	r3, [pc, #120]	@ (80013a0 <MX_TIM3_Init+0x98>)
 8001328:	4a1e      	ldr	r2, [pc, #120]	@ (80013a4 <MX_TIM3_Init+0x9c>)
 800132a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9999;
 800132c:	4b1c      	ldr	r3, [pc, #112]	@ (80013a0 <MX_TIM3_Init+0x98>)
 800132e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001332:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001334:	4b1a      	ldr	r3, [pc, #104]	@ (80013a0 <MX_TIM3_Init+0x98>)
 8001336:	2200      	movs	r2, #0
 8001338:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 39999;
 800133a:	4b19      	ldr	r3, [pc, #100]	@ (80013a0 <MX_TIM3_Init+0x98>)
 800133c:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8001340:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001342:	4b17      	ldr	r3, [pc, #92]	@ (80013a0 <MX_TIM3_Init+0x98>)
 8001344:	2200      	movs	r2, #0
 8001346:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001348:	4b15      	ldr	r3, [pc, #84]	@ (80013a0 <MX_TIM3_Init+0x98>)
 800134a:	2200      	movs	r2, #0
 800134c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800134e:	4814      	ldr	r0, [pc, #80]	@ (80013a0 <MX_TIM3_Init+0x98>)
 8001350:	f002 ffc6 	bl	80042e0 <HAL_TIM_Base_Init>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800135a:	f000 f9e5 	bl	8001728 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800135e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001362:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001364:	f107 0310 	add.w	r3, r7, #16
 8001368:	4619      	mov	r1, r3
 800136a:	480d      	ldr	r0, [pc, #52]	@ (80013a0 <MX_TIM3_Init+0x98>)
 800136c:	f003 f9ef 	bl	800474e <HAL_TIM_ConfigClockSource>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001376:	f000 f9d7 	bl	8001728 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800137a:	2300      	movs	r3, #0
 800137c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137e:	2300      	movs	r3, #0
 8001380:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001382:	1d3b      	adds	r3, r7, #4
 8001384:	4619      	mov	r1, r3
 8001386:	4806      	ldr	r0, [pc, #24]	@ (80013a0 <MX_TIM3_Init+0x98>)
 8001388:	f003 fc1c 	bl	8004bc4 <HAL_TIMEx_MasterConfigSynchronization>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001392:	f000 f9c9 	bl	8001728 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001396:	bf00      	nop
 8001398:	3720      	adds	r7, #32
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000298 	.word	0x20000298
 80013a4:	40000400 	.word	0x40000400

080013a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013ac:	4b14      	ldr	r3, [pc, #80]	@ (8001400 <MX_USART1_UART_Init+0x58>)
 80013ae:	4a15      	ldr	r2, [pc, #84]	@ (8001404 <MX_USART1_UART_Init+0x5c>)
 80013b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80013b2:	4b13      	ldr	r3, [pc, #76]	@ (8001400 <MX_USART1_UART_Init+0x58>)
 80013b4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80013b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013ba:	4b11      	ldr	r3, [pc, #68]	@ (8001400 <MX_USART1_UART_Init+0x58>)
 80013bc:	2200      	movs	r2, #0
 80013be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001400 <MX_USART1_UART_Init+0x58>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001400 <MX_USART1_UART_Init+0x58>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001400 <MX_USART1_UART_Init+0x58>)
 80013ce:	220c      	movs	r2, #12
 80013d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001400 <MX_USART1_UART_Init+0x58>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013d8:	4b09      	ldr	r3, [pc, #36]	@ (8001400 <MX_USART1_UART_Init+0x58>)
 80013da:	2200      	movs	r2, #0
 80013dc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013de:	4b08      	ldr	r3, [pc, #32]	@ (8001400 <MX_USART1_UART_Init+0x58>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013e4:	4b06      	ldr	r3, [pc, #24]	@ (8001400 <MX_USART1_UART_Init+0x58>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013ea:	4805      	ldr	r0, [pc, #20]	@ (8001400 <MX_USART1_UART_Init+0x58>)
 80013ec:	f003 fc90 	bl	8004d10 <HAL_UART_Init>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80013f6:	f000 f997 	bl	8001728 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	200002e4 	.word	0x200002e4
 8001404:	40013800 	.word	0x40013800

08001408 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800140c:	4b14      	ldr	r3, [pc, #80]	@ (8001460 <MX_USART2_UART_Init+0x58>)
 800140e:	4a15      	ldr	r2, [pc, #84]	@ (8001464 <MX_USART2_UART_Init+0x5c>)
 8001410:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001412:	4b13      	ldr	r3, [pc, #76]	@ (8001460 <MX_USART2_UART_Init+0x58>)
 8001414:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001418:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800141a:	4b11      	ldr	r3, [pc, #68]	@ (8001460 <MX_USART2_UART_Init+0x58>)
 800141c:	2200      	movs	r2, #0
 800141e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001420:	4b0f      	ldr	r3, [pc, #60]	@ (8001460 <MX_USART2_UART_Init+0x58>)
 8001422:	2200      	movs	r2, #0
 8001424:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001426:	4b0e      	ldr	r3, [pc, #56]	@ (8001460 <MX_USART2_UART_Init+0x58>)
 8001428:	2200      	movs	r2, #0
 800142a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800142c:	4b0c      	ldr	r3, [pc, #48]	@ (8001460 <MX_USART2_UART_Init+0x58>)
 800142e:	220c      	movs	r2, #12
 8001430:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001432:	4b0b      	ldr	r3, [pc, #44]	@ (8001460 <MX_USART2_UART_Init+0x58>)
 8001434:	2200      	movs	r2, #0
 8001436:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001438:	4b09      	ldr	r3, [pc, #36]	@ (8001460 <MX_USART2_UART_Init+0x58>)
 800143a:	2200      	movs	r2, #0
 800143c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800143e:	4b08      	ldr	r3, [pc, #32]	@ (8001460 <MX_USART2_UART_Init+0x58>)
 8001440:	2200      	movs	r2, #0
 8001442:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001444:	4b06      	ldr	r3, [pc, #24]	@ (8001460 <MX_USART2_UART_Init+0x58>)
 8001446:	2200      	movs	r2, #0
 8001448:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800144a:	4805      	ldr	r0, [pc, #20]	@ (8001460 <MX_USART2_UART_Init+0x58>)
 800144c:	f003 fc60 	bl	8004d10 <HAL_UART_Init>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001456:	f000 f967 	bl	8001728 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	2000036c 	.word	0x2000036c
 8001464:	40004400 	.word	0x40004400

08001468 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800146c:	4b14      	ldr	r3, [pc, #80]	@ (80014c0 <MX_USART3_UART_Init+0x58>)
 800146e:	4a15      	ldr	r2, [pc, #84]	@ (80014c4 <MX_USART3_UART_Init+0x5c>)
 8001470:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001472:	4b13      	ldr	r3, [pc, #76]	@ (80014c0 <MX_USART3_UART_Init+0x58>)
 8001474:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001478:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800147a:	4b11      	ldr	r3, [pc, #68]	@ (80014c0 <MX_USART3_UART_Init+0x58>)
 800147c:	2200      	movs	r2, #0
 800147e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001480:	4b0f      	ldr	r3, [pc, #60]	@ (80014c0 <MX_USART3_UART_Init+0x58>)
 8001482:	2200      	movs	r2, #0
 8001484:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001486:	4b0e      	ldr	r3, [pc, #56]	@ (80014c0 <MX_USART3_UART_Init+0x58>)
 8001488:	2200      	movs	r2, #0
 800148a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800148c:	4b0c      	ldr	r3, [pc, #48]	@ (80014c0 <MX_USART3_UART_Init+0x58>)
 800148e:	220c      	movs	r2, #12
 8001490:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001492:	4b0b      	ldr	r3, [pc, #44]	@ (80014c0 <MX_USART3_UART_Init+0x58>)
 8001494:	2200      	movs	r2, #0
 8001496:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001498:	4b09      	ldr	r3, [pc, #36]	@ (80014c0 <MX_USART3_UART_Init+0x58>)
 800149a:	2200      	movs	r2, #0
 800149c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800149e:	4b08      	ldr	r3, [pc, #32]	@ (80014c0 <MX_USART3_UART_Init+0x58>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014a4:	4b06      	ldr	r3, [pc, #24]	@ (80014c0 <MX_USART3_UART_Init+0x58>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014aa:	4805      	ldr	r0, [pc, #20]	@ (80014c0 <MX_USART3_UART_Init+0x58>)
 80014ac:	f003 fc30 	bl	8004d10 <HAL_UART_Init>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80014b6:	f000 f937 	bl	8001728 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	200003f4 	.word	0x200003f4
 80014c4:	40004800 	.word	0x40004800

080014c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001500 <MX_DMA_Init+0x38>)
 80014d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014d2:	4a0b      	ldr	r2, [pc, #44]	@ (8001500 <MX_DMA_Init+0x38>)
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	6493      	str	r3, [r2, #72]	@ 0x48
 80014da:	4b09      	ldr	r3, [pc, #36]	@ (8001500 <MX_DMA_Init+0x38>)
 80014dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	607b      	str	r3, [r7, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80014e6:	2200      	movs	r2, #0
 80014e8:	2100      	movs	r1, #0
 80014ea:	200d      	movs	r0, #13
 80014ec:	f000 fe73 	bl	80021d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80014f0:	200d      	movs	r0, #13
 80014f2:	f000 fe8c 	bl	800220e <HAL_NVIC_EnableIRQ>

}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40021000 	.word	0x40021000

08001504 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08a      	sub	sp, #40	@ 0x28
 8001508:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150a:	f107 0314 	add.w	r3, r7, #20
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]
 8001516:	60da      	str	r2, [r3, #12]
 8001518:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800151a:	4b40      	ldr	r3, [pc, #256]	@ (800161c <MX_GPIO_Init+0x118>)
 800151c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800151e:	4a3f      	ldr	r2, [pc, #252]	@ (800161c <MX_GPIO_Init+0x118>)
 8001520:	f043 0304 	orr.w	r3, r3, #4
 8001524:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001526:	4b3d      	ldr	r3, [pc, #244]	@ (800161c <MX_GPIO_Init+0x118>)
 8001528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800152a:	f003 0304 	and.w	r3, r3, #4
 800152e:	613b      	str	r3, [r7, #16]
 8001530:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001532:	4b3a      	ldr	r3, [pc, #232]	@ (800161c <MX_GPIO_Init+0x118>)
 8001534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001536:	4a39      	ldr	r2, [pc, #228]	@ (800161c <MX_GPIO_Init+0x118>)
 8001538:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800153c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800153e:	4b37      	ldr	r3, [pc, #220]	@ (800161c <MX_GPIO_Init+0x118>)
 8001540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001542:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800154a:	4b34      	ldr	r3, [pc, #208]	@ (800161c <MX_GPIO_Init+0x118>)
 800154c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800154e:	4a33      	ldr	r2, [pc, #204]	@ (800161c <MX_GPIO_Init+0x118>)
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001556:	4b31      	ldr	r3, [pc, #196]	@ (800161c <MX_GPIO_Init+0x118>)
 8001558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	60bb      	str	r3, [r7, #8]
 8001560:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001562:	4b2e      	ldr	r3, [pc, #184]	@ (800161c <MX_GPIO_Init+0x118>)
 8001564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001566:	4a2d      	ldr	r2, [pc, #180]	@ (800161c <MX_GPIO_Init+0x118>)
 8001568:	f043 0302 	orr.w	r3, r3, #2
 800156c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800156e:	4b2b      	ldr	r3, [pc, #172]	@ (800161c <MX_GPIO_Init+0x118>)
 8001570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	607b      	str	r3, [r7, #4]
 8001578:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800157a:	2200      	movs	r2, #0
 800157c:	2120      	movs	r1, #32
 800157e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001582:	f001 fb37 	bl	8002bf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001586:	2200      	movs	r2, #0
 8001588:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800158c:	4824      	ldr	r0, [pc, #144]	@ (8001620 <MX_GPIO_Init+0x11c>)
 800158e:	f001 fb31 	bl	8002bf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_3;
 8001592:	f242 0308 	movw	r3, #8200	@ 0x2008
 8001596:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001598:	2300      	movs	r3, #0
 800159a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	4619      	mov	r1, r3
 80015a6:	481f      	ldr	r0, [pc, #124]	@ (8001624 <MX_GPIO_Init+0x120>)
 80015a8:	f001 f97a 	bl	80028a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015ac:	2301      	movs	r3, #1
 80015ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015b0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80015b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ba:	f107 0314 	add.w	r3, r7, #20
 80015be:	4619      	mov	r1, r3
 80015c0:	4818      	ldr	r0, [pc, #96]	@ (8001624 <MX_GPIO_Init+0x120>)
 80015c2:	f001 f96d 	bl	80028a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80015c6:	2320      	movs	r3, #32
 80015c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ca:	2301      	movs	r3, #1
 80015cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d2:	2300      	movs	r3, #0
 80015d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d6:	f107 0314 	add.w	r3, r7, #20
 80015da:	4619      	mov	r1, r3
 80015dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015e0:	f001 f95e 	bl	80028a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80015e4:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80015e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ea:	2301      	movs	r3, #1
 80015ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f2:	2300      	movs	r3, #0
 80015f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f6:	f107 0314 	add.w	r3, r7, #20
 80015fa:	4619      	mov	r1, r3
 80015fc:	4808      	ldr	r0, [pc, #32]	@ (8001620 <MX_GPIO_Init+0x11c>)
 80015fe:	f001 f94f 	bl	80028a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001602:	2200      	movs	r2, #0
 8001604:	2100      	movs	r1, #0
 8001606:	2006      	movs	r0, #6
 8001608:	f000 fde5 	bl	80021d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800160c:	2006      	movs	r0, #6
 800160e:	f000 fdfe 	bl	800220e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001612:	bf00      	nop
 8001614:	3728      	adds	r7, #40	@ 0x28
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40021000 	.word	0x40021000
 8001620:	48000400 	.word	0x48000400
 8001624:	48000800 	.word	0x48000800

08001628 <setup_lora>:

/* USER CODE BEGIN 4 */
void setup_lora(void){
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  
  HAL_Delay(100);
 800162c:	2064      	movs	r0, #100	@ 0x64
 800162e:	f000 fcd3 	bl	8001fd8 <HAL_Delay>
  send_lora("AT\r\n", 4, 5); //basic stm to lora check (rcv: +OK)
 8001632:	2205      	movs	r2, #5
 8001634:	2104      	movs	r1, #4
 8001636:	4815      	ldr	r0, [pc, #84]	@ (800168c <setup_lora+0x64>)
 8001638:	f000 f834 	bl	80016a4 <send_lora>
  HAL_Delay(100);
 800163c:	2064      	movs	r0, #100	@ 0x64
 800163e:	f000 fccb 	bl	8001fd8 <HAL_Delay>
  send_lora("AT+FACTORY\r\n", 12, 8); //set to factory default (rcv: +FACTORY)
 8001642:	2208      	movs	r2, #8
 8001644:	210c      	movs	r1, #12
 8001646:	4812      	ldr	r0, [pc, #72]	@ (8001690 <setup_lora+0x68>)
 8001648:	f000 f82c 	bl	80016a4 <send_lora>
  HAL_Delay(100);
 800164c:	2064      	movs	r0, #100	@ 0x64
 800164e:	f000 fcc3 	bl	8001fd8 <HAL_Delay>
  send_lora("AT+ADDRESS=124\r\n", 16, 5); //set lora address (rcv: +OK)
 8001652:	2205      	movs	r2, #5
 8001654:	2110      	movs	r1, #16
 8001656:	480f      	ldr	r0, [pc, #60]	@ (8001694 <setup_lora+0x6c>)
 8001658:	f000 f824 	bl	80016a4 <send_lora>
  HAL_Delay(100);
 800165c:	2064      	movs	r0, #100	@ 0x64
 800165e:	f000 fcbb 	bl	8001fd8 <HAL_Delay>
  send_lora("AT+NETWORKID=7\r\n", 16, 5); //set network id (rcv: +OK)
 8001662:	2205      	movs	r2, #5
 8001664:	2110      	movs	r1, #16
 8001666:	480c      	ldr	r0, [pc, #48]	@ (8001698 <setup_lora+0x70>)
 8001668:	f000 f81c 	bl	80016a4 <send_lora>
  HAL_Delay(100);
 800166c:	2064      	movs	r0, #100	@ 0x64
 800166e:	f000 fcb3 	bl	8001fd8 <HAL_Delay>
  send_lora("AT+CPIN=102C064CA409E69030F73E7CABAA4B71\r\n", 42, 5); //set AES pin (rcv: +OK)
 8001672:	2205      	movs	r2, #5
 8001674:	212a      	movs	r1, #42	@ 0x2a
 8001676:	4809      	ldr	r0, [pc, #36]	@ (800169c <setup_lora+0x74>)
 8001678:	f000 f814 	bl	80016a4 <send_lora>
  HAL_Delay(100);
 800167c:	2064      	movs	r0, #100	@ 0x64
 800167e:	f000 fcab 	bl	8001fd8 <HAL_Delay>

  printf("Done setting up LoRa\r\n");
 8001682:	4807      	ldr	r0, [pc, #28]	@ (80016a0 <setup_lora+0x78>)
 8001684:	f005 fcbc 	bl	8007000 <puts>
}
 8001688:	bf00      	nop
 800168a:	bd80      	pop	{r7, pc}
 800168c:	0800a8e0 	.word	0x0800a8e0
 8001690:	0800a8e8 	.word	0x0800a8e8
 8001694:	0800a8f8 	.word	0x0800a8f8
 8001698:	0800a90c 	.word	0x0800a90c
 800169c:	0800a920 	.word	0x0800a920
 80016a0:	0800a94c 	.word	0x0800a94c

080016a4 <send_lora>:

void send_lora(char *msg, int size, int resp_size){
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
  bzero(tx_data_lora, LORA_BUF_SIZE);
 80016b0:	4b19      	ldr	r3, [pc, #100]	@ (8001718 <send_lora+0x74>)
 80016b2:	4618      	mov	r0, r3
 80016b4:	23f0      	movs	r3, #240	@ 0xf0
 80016b6:	461a      	mov	r2, r3
 80016b8:	2100      	movs	r1, #0
 80016ba:	f005 fda1 	bl	8007200 <memset>
  bzero(rx_data_lora, LORA_BUF_SIZE);
 80016be:	4b17      	ldr	r3, [pc, #92]	@ (800171c <send_lora+0x78>)
 80016c0:	4618      	mov	r0, r3
 80016c2:	23f0      	movs	r3, #240	@ 0xf0
 80016c4:	461a      	mov	r2, r3
 80016c6:	2100      	movs	r1, #0
 80016c8:	f005 fd9a 	bl	8007200 <memset>
  memcpy(tx_data_lora, msg, size);
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	461a      	mov	r2, r3
 80016d0:	68f9      	ldr	r1, [r7, #12]
 80016d2:	4811      	ldr	r0, [pc, #68]	@ (8001718 <send_lora+0x74>)
 80016d4:	f005 fe29 	bl	800732a <memcpy>
  HAL_UART_Transmit(&huart3, tx_data_lora, size, 1000);
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	b29a      	uxth	r2, r3
 80016dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016e0:	490d      	ldr	r1, [pc, #52]	@ (8001718 <send_lora+0x74>)
 80016e2:	480f      	ldr	r0, [pc, #60]	@ (8001720 <send_lora+0x7c>)
 80016e4:	f003 fb62 	bl	8004dac <HAL_UART_Transmit>
  while(HAL_UART_Receive(&huart3, rx_data_lora, resp_size, 1000)!=HAL_OK){}
 80016e8:	bf00      	nop
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016f2:	490a      	ldr	r1, [pc, #40]	@ (800171c <send_lora+0x78>)
 80016f4:	480a      	ldr	r0, [pc, #40]	@ (8001720 <send_lora+0x7c>)
 80016f6:	f003 fbe2 	bl	8004ebe <HAL_UART_Receive>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d1f4      	bne.n	80016ea <send_lora+0x46>
  HAL_UART_Transmit(&huart2, rx_data_lora, resp_size, 10);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	b29a      	uxth	r2, r3
 8001704:	230a      	movs	r3, #10
 8001706:	4905      	ldr	r1, [pc, #20]	@ (800171c <send_lora+0x78>)
 8001708:	4806      	ldr	r0, [pc, #24]	@ (8001724 <send_lora+0x80>)
 800170a:	f003 fb4f 	bl	8004dac <HAL_UART_Transmit>
}
 800170e:	bf00      	nop
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	2000047c 	.word	0x2000047c
 800171c:	2000056c 	.word	0x2000056c
 8001720:	200003f4 	.word	0x200003f4
 8001724:	2000036c 	.word	0x2000036c

08001728 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800172c:	b672      	cpsid	i
}
 800172e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001730:	bf00      	nop
 8001732:	e7fd      	b.n	8001730 <Error_Handler+0x8>

08001734 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800173a:	4b0f      	ldr	r3, [pc, #60]	@ (8001778 <HAL_MspInit+0x44>)
 800173c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800173e:	4a0e      	ldr	r2, [pc, #56]	@ (8001778 <HAL_MspInit+0x44>)
 8001740:	f043 0301 	orr.w	r3, r3, #1
 8001744:	6613      	str	r3, [r2, #96]	@ 0x60
 8001746:	4b0c      	ldr	r3, [pc, #48]	@ (8001778 <HAL_MspInit+0x44>)
 8001748:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	607b      	str	r3, [r7, #4]
 8001750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001752:	4b09      	ldr	r3, [pc, #36]	@ (8001778 <HAL_MspInit+0x44>)
 8001754:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001756:	4a08      	ldr	r2, [pc, #32]	@ (8001778 <HAL_MspInit+0x44>)
 8001758:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800175c:	6593      	str	r3, [r2, #88]	@ 0x58
 800175e:	4b06      	ldr	r3, [pc, #24]	@ (8001778 <HAL_MspInit+0x44>)
 8001760:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001762:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001766:	603b      	str	r3, [r7, #0]
 8001768:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	40021000 	.word	0x40021000

0800177c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08a      	sub	sp, #40	@ 0x28
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001784:	f107 0314 	add.w	r3, r7, #20
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	60da      	str	r2, [r3, #12]
 8001792:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a2a      	ldr	r2, [pc, #168]	@ (8001844 <HAL_DAC_MspInit+0xc8>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d14e      	bne.n	800183c <HAL_DAC_MspInit+0xc0>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800179e:	4b2a      	ldr	r3, [pc, #168]	@ (8001848 <HAL_DAC_MspInit+0xcc>)
 80017a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017a2:	4a29      	ldr	r2, [pc, #164]	@ (8001848 <HAL_DAC_MspInit+0xcc>)
 80017a4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80017a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80017aa:	4b27      	ldr	r3, [pc, #156]	@ (8001848 <HAL_DAC_MspInit+0xcc>)
 80017ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80017b2:	613b      	str	r3, [r7, #16]
 80017b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b6:	4b24      	ldr	r3, [pc, #144]	@ (8001848 <HAL_DAC_MspInit+0xcc>)
 80017b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ba:	4a23      	ldr	r2, [pc, #140]	@ (8001848 <HAL_DAC_MspInit+0xcc>)
 80017bc:	f043 0301 	orr.w	r3, r3, #1
 80017c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017c2:	4b21      	ldr	r3, [pc, #132]	@ (8001848 <HAL_DAC_MspInit+0xcc>)
 80017c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80017ce:	2310      	movs	r3, #16
 80017d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017d2:	2303      	movs	r3, #3
 80017d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d6:	2300      	movs	r3, #0
 80017d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017da:	f107 0314 	add.w	r3, r7, #20
 80017de:	4619      	mov	r1, r3
 80017e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017e4:	f001 f85c 	bl	80028a0 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 80017e8:	4b18      	ldr	r3, [pc, #96]	@ (800184c <HAL_DAC_MspInit+0xd0>)
 80017ea:	4a19      	ldr	r2, [pc, #100]	@ (8001850 <HAL_DAC_MspInit+0xd4>)
 80017ec:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 80017ee:	4b17      	ldr	r3, [pc, #92]	@ (800184c <HAL_DAC_MspInit+0xd0>)
 80017f0:	2206      	movs	r2, #6
 80017f2:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017f4:	4b15      	ldr	r3, [pc, #84]	@ (800184c <HAL_DAC_MspInit+0xd0>)
 80017f6:	2210      	movs	r2, #16
 80017f8:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80017fa:	4b14      	ldr	r3, [pc, #80]	@ (800184c <HAL_DAC_MspInit+0xd0>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001800:	4b12      	ldr	r3, [pc, #72]	@ (800184c <HAL_DAC_MspInit+0xd0>)
 8001802:	2280      	movs	r2, #128	@ 0x80
 8001804:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001806:	4b11      	ldr	r3, [pc, #68]	@ (800184c <HAL_DAC_MspInit+0xd0>)
 8001808:	2200      	movs	r2, #0
 800180a:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800180c:	4b0f      	ldr	r3, [pc, #60]	@ (800184c <HAL_DAC_MspInit+0xd0>)
 800180e:	2200      	movs	r2, #0
 8001810:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_NORMAL;
 8001812:	4b0e      	ldr	r3, [pc, #56]	@ (800184c <HAL_DAC_MspInit+0xd0>)
 8001814:	2200      	movs	r2, #0
 8001816:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001818:	4b0c      	ldr	r3, [pc, #48]	@ (800184c <HAL_DAC_MspInit+0xd0>)
 800181a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800181e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8001820:	480a      	ldr	r0, [pc, #40]	@ (800184c <HAL_DAC_MspInit+0xd0>)
 8001822:	f000 fe57 	bl	80024d4 <HAL_DMA_Init>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <HAL_DAC_MspInit+0xb4>
    {
      Error_Handler();
 800182c:	f7ff ff7c 	bl	8001728 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4a06      	ldr	r2, [pc, #24]	@ (800184c <HAL_DAC_MspInit+0xd0>)
 8001834:	609a      	str	r2, [r3, #8]
 8001836:	4a05      	ldr	r2, [pc, #20]	@ (800184c <HAL_DAC_MspInit+0xd0>)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 800183c:	bf00      	nop
 800183e:	3728      	adds	r7, #40	@ 0x28
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	40007400 	.word	0x40007400
 8001848:	40021000 	.word	0x40021000
 800184c:	20000204 	.word	0x20000204
 8001850:	40020030 	.word	0x40020030

08001854 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001864:	d10c      	bne.n	8001880 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001866:	4b15      	ldr	r3, [pc, #84]	@ (80018bc <HAL_TIM_Base_MspInit+0x68>)
 8001868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800186a:	4a14      	ldr	r2, [pc, #80]	@ (80018bc <HAL_TIM_Base_MspInit+0x68>)
 800186c:	f043 0301 	orr.w	r3, r3, #1
 8001870:	6593      	str	r3, [r2, #88]	@ 0x58
 8001872:	4b12      	ldr	r3, [pc, #72]	@ (80018bc <HAL_TIM_Base_MspInit+0x68>)
 8001874:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800187e:	e018      	b.n	80018b2 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a0e      	ldr	r2, [pc, #56]	@ (80018c0 <HAL_TIM_Base_MspInit+0x6c>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d113      	bne.n	80018b2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800188a:	4b0c      	ldr	r3, [pc, #48]	@ (80018bc <HAL_TIM_Base_MspInit+0x68>)
 800188c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800188e:	4a0b      	ldr	r2, [pc, #44]	@ (80018bc <HAL_TIM_Base_MspInit+0x68>)
 8001890:	f043 0302 	orr.w	r3, r3, #2
 8001894:	6593      	str	r3, [r2, #88]	@ 0x58
 8001896:	4b09      	ldr	r3, [pc, #36]	@ (80018bc <HAL_TIM_Base_MspInit+0x68>)
 8001898:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	60bb      	str	r3, [r7, #8]
 80018a0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80018a2:	2200      	movs	r2, #0
 80018a4:	2100      	movs	r1, #0
 80018a6:	201d      	movs	r0, #29
 80018a8:	f000 fc95 	bl	80021d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80018ac:	201d      	movs	r0, #29
 80018ae:	f000 fcae 	bl	800220e <HAL_NVIC_EnableIRQ>
}
 80018b2:	bf00      	nop
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40021000 	.word	0x40021000
 80018c0:	40000400 	.word	0x40000400

080018c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b0b0      	sub	sp, #192	@ 0xc0
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018cc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]
 80018da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018e0:	2288      	movs	r2, #136	@ 0x88
 80018e2:	2100      	movs	r1, #0
 80018e4:	4618      	mov	r0, r3
 80018e6:	f005 fc8b 	bl	8007200 <memset>
  if(huart->Instance==USART1)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a67      	ldr	r2, [pc, #412]	@ (8001a8c <HAL_UART_MspInit+0x1c8>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d13d      	bne.n	8001970 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80018f4:	2301      	movs	r3, #1
 80018f6:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80018f8:	2300      	movs	r3, #0
 80018fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001900:	4618      	mov	r0, r3
 8001902:	f002 f831 	bl	8003968 <HAL_RCCEx_PeriphCLKConfig>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800190c:	f7ff ff0c 	bl	8001728 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001910:	4b5f      	ldr	r3, [pc, #380]	@ (8001a90 <HAL_UART_MspInit+0x1cc>)
 8001912:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001914:	4a5e      	ldr	r2, [pc, #376]	@ (8001a90 <HAL_UART_MspInit+0x1cc>)
 8001916:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800191a:	6613      	str	r3, [r2, #96]	@ 0x60
 800191c:	4b5c      	ldr	r3, [pc, #368]	@ (8001a90 <HAL_UART_MspInit+0x1cc>)
 800191e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001920:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001924:	623b      	str	r3, [r7, #32]
 8001926:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001928:	4b59      	ldr	r3, [pc, #356]	@ (8001a90 <HAL_UART_MspInit+0x1cc>)
 800192a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800192c:	4a58      	ldr	r2, [pc, #352]	@ (8001a90 <HAL_UART_MspInit+0x1cc>)
 800192e:	f043 0301 	orr.w	r3, r3, #1
 8001932:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001934:	4b56      	ldr	r3, [pc, #344]	@ (8001a90 <HAL_UART_MspInit+0x1cc>)
 8001936:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001938:	f003 0301 	and.w	r3, r3, #1
 800193c:	61fb      	str	r3, [r7, #28]
 800193e:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001940:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001944:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001948:	2302      	movs	r3, #2
 800194a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194e:	2300      	movs	r3, #0
 8001950:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001954:	2303      	movs	r3, #3
 8001956:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800195a:	2307      	movs	r3, #7
 800195c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001960:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001964:	4619      	mov	r1, r3
 8001966:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800196a:	f000 ff99 	bl	80028a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800196e:	e089      	b.n	8001a84 <HAL_UART_MspInit+0x1c0>
  else if(huart->Instance==USART2)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a47      	ldr	r2, [pc, #284]	@ (8001a94 <HAL_UART_MspInit+0x1d0>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d144      	bne.n	8001a04 <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800197a:	2302      	movs	r3, #2
 800197c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800197e:	2300      	movs	r3, #0
 8001980:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001982:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001986:	4618      	mov	r0, r3
 8001988:	f001 ffee 	bl	8003968 <HAL_RCCEx_PeriphCLKConfig>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8001992:	f7ff fec9 	bl	8001728 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001996:	4b3e      	ldr	r3, [pc, #248]	@ (8001a90 <HAL_UART_MspInit+0x1cc>)
 8001998:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800199a:	4a3d      	ldr	r2, [pc, #244]	@ (8001a90 <HAL_UART_MspInit+0x1cc>)
 800199c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80019a2:	4b3b      	ldr	r3, [pc, #236]	@ (8001a90 <HAL_UART_MspInit+0x1cc>)
 80019a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019aa:	61bb      	str	r3, [r7, #24]
 80019ac:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ae:	4b38      	ldr	r3, [pc, #224]	@ (8001a90 <HAL_UART_MspInit+0x1cc>)
 80019b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019b2:	4a37      	ldr	r2, [pc, #220]	@ (8001a90 <HAL_UART_MspInit+0x1cc>)
 80019b4:	f043 0301 	orr.w	r3, r3, #1
 80019b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019ba:	4b35      	ldr	r3, [pc, #212]	@ (8001a90 <HAL_UART_MspInit+0x1cc>)
 80019bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	617b      	str	r3, [r7, #20]
 80019c4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019c6:	230c      	movs	r3, #12
 80019c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019cc:	2302      	movs	r3, #2
 80019ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d2:	2300      	movs	r3, #0
 80019d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d8:	2303      	movs	r3, #3
 80019da:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019de:	2307      	movs	r3, #7
 80019e0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80019e8:	4619      	mov	r1, r3
 80019ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019ee:	f000 ff57 	bl	80028a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80019f2:	2200      	movs	r2, #0
 80019f4:	2100      	movs	r1, #0
 80019f6:	2026      	movs	r0, #38	@ 0x26
 80019f8:	f000 fbed 	bl	80021d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80019fc:	2026      	movs	r0, #38	@ 0x26
 80019fe:	f000 fc06 	bl	800220e <HAL_NVIC_EnableIRQ>
}
 8001a02:	e03f      	b.n	8001a84 <HAL_UART_MspInit+0x1c0>
  else if(huart->Instance==USART3)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a23      	ldr	r2, [pc, #140]	@ (8001a98 <HAL_UART_MspInit+0x1d4>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d13a      	bne.n	8001a84 <HAL_UART_MspInit+0x1c0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001a0e:	2304      	movs	r3, #4
 8001a10:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001a12:	2300      	movs	r3, #0
 8001a14:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f001 ffa4 	bl	8003968 <HAL_RCCEx_PeriphCLKConfig>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <HAL_UART_MspInit+0x166>
      Error_Handler();
 8001a26:	f7ff fe7f 	bl	8001728 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a2a:	4b19      	ldr	r3, [pc, #100]	@ (8001a90 <HAL_UART_MspInit+0x1cc>)
 8001a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a2e:	4a18      	ldr	r2, [pc, #96]	@ (8001a90 <HAL_UART_MspInit+0x1cc>)
 8001a30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a34:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a36:	4b16      	ldr	r3, [pc, #88]	@ (8001a90 <HAL_UART_MspInit+0x1cc>)
 8001a38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a3a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a3e:	613b      	str	r3, [r7, #16]
 8001a40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a42:	4b13      	ldr	r3, [pc, #76]	@ (8001a90 <HAL_UART_MspInit+0x1cc>)
 8001a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a46:	4a12      	ldr	r2, [pc, #72]	@ (8001a90 <HAL_UART_MspInit+0x1cc>)
 8001a48:	f043 0304 	orr.w	r3, r3, #4
 8001a4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a4e:	4b10      	ldr	r3, [pc, #64]	@ (8001a90 <HAL_UART_MspInit+0x1cc>)
 8001a50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a52:	f003 0304 	and.w	r3, r3, #4
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001a5a:	2330      	movs	r3, #48	@ 0x30
 8001a5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a60:	2302      	movs	r3, #2
 8001a62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a72:	2307      	movs	r3, #7
 8001a74:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a78:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4807      	ldr	r0, [pc, #28]	@ (8001a9c <HAL_UART_MspInit+0x1d8>)
 8001a80:	f000 ff0e 	bl	80028a0 <HAL_GPIO_Init>
}
 8001a84:	bf00      	nop
 8001a86:	37c0      	adds	r7, #192	@ 0xc0
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	40013800 	.word	0x40013800
 8001a90:	40021000 	.word	0x40021000
 8001a94:	40004400 	.word	0x40004400
 8001a98:	40004800 	.word	0x40004800
 8001a9c:	48000800 	.word	0x48000800

08001aa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001aa4:	bf00      	nop
 8001aa6:	e7fd      	b.n	8001aa4 <NMI_Handler+0x4>

08001aa8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aac:	bf00      	nop
 8001aae:	e7fd      	b.n	8001aac <HardFault_Handler+0x4>

08001ab0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ab4:	bf00      	nop
 8001ab6:	e7fd      	b.n	8001ab4 <MemManage_Handler+0x4>

08001ab8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001abc:	bf00      	nop
 8001abe:	e7fd      	b.n	8001abc <BusFault_Handler+0x4>

08001ac0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ac4:	bf00      	nop
 8001ac6:	e7fd      	b.n	8001ac4 <UsageFault_Handler+0x4>

08001ac8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001acc:	bf00      	nop
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ae8:	bf00      	nop
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr

08001af2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001af6:	f000 fa4f 	bl	8001f98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}
	...

08001b00 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001b06:	2001      	movs	r0, #1
 8001b08:	f001 f8a6 	bl	8002c58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  
  uint8_t audio_cue = rx_data_lora[11];
 8001b0c:	4b29      	ldr	r3, [pc, #164]	@ (8001bb4 <EXTI0_IRQHandler+0xb4>)
 8001b0e:	7adb      	ldrb	r3, [r3, #11]
 8001b10:	71fb      	strb	r3, [r7, #7]
  printf("\r\nAudio Cue: %d\n\r", audio_cue);
 8001b12:	79fb      	ldrb	r3, [r7, #7]
 8001b14:	4619      	mov	r1, r3
 8001b16:	4828      	ldr	r0, [pc, #160]	@ (8001bb8 <EXTI0_IRQHandler+0xb8>)
 8001b18:	f005 fa0a 	bl	8006f30 <iprintf>

  HAL_Delay(100);
 8001b1c:	2064      	movs	r0, #100	@ 0x64
 8001b1e:	f000 fa5b 	bl	8001fd8 <HAL_Delay>
  bzero(tx_data_lora, 240);
 8001b22:	4b26      	ldr	r3, [pc, #152]	@ (8001bbc <EXTI0_IRQHandler+0xbc>)
 8001b24:	4618      	mov	r0, r3
 8001b26:	23f0      	movs	r3, #240	@ 0xf0
 8001b28:	461a      	mov	r2, r3
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	f005 fb68 	bl	8007200 <memset>
  bzero(rx_data_lora, 240);
 8001b30:	4b20      	ldr	r3, [pc, #128]	@ (8001bb4 <EXTI0_IRQHandler+0xb4>)
 8001b32:	4618      	mov	r0, r3
 8001b34:	23f0      	movs	r3, #240	@ 0xf0
 8001b36:	461a      	mov	r2, r3
 8001b38:	2100      	movs	r1, #0
 8001b3a:	f005 fb61 	bl	8007200 <memset>
  memcpy(tx_data_lora, "AT+SEND=123,8,Received\r\n", 24); //24 is size of string without /0
 8001b3e:	2218      	movs	r2, #24
 8001b40:	491f      	ldr	r1, [pc, #124]	@ (8001bc0 <EXTI0_IRQHandler+0xc0>)
 8001b42:	481e      	ldr	r0, [pc, #120]	@ (8001bbc <EXTI0_IRQHandler+0xbc>)
 8001b44:	f005 fbf1 	bl	800732a <memcpy>
  HAL_UART_Transmit(&huart3, tx_data_lora, 24, 1000);
 8001b48:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b4c:	2218      	movs	r2, #24
 8001b4e:	491b      	ldr	r1, [pc, #108]	@ (8001bbc <EXTI0_IRQHandler+0xbc>)
 8001b50:	481c      	ldr	r0, [pc, #112]	@ (8001bc4 <EXTI0_IRQHandler+0xc4>)
 8001b52:	f003 f92b 	bl	8004dac <HAL_UART_Transmit>
  while(HAL_UART_Receive(&huart3, rx_data_lora, 5, 1000)!=HAL_OK){} //Wait to receive "+OK"
 8001b56:	bf00      	nop
 8001b58:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b5c:	2205      	movs	r2, #5
 8001b5e:	4915      	ldr	r1, [pc, #84]	@ (8001bb4 <EXTI0_IRQHandler+0xb4>)
 8001b60:	4818      	ldr	r0, [pc, #96]	@ (8001bc4 <EXTI0_IRQHandler+0xc4>)
 8001b62:	f003 f9ac 	bl	8004ebe <HAL_UART_Receive>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d1f5      	bne.n	8001b58 <EXTI0_IRQHandler+0x58>
  HAL_UART_Transmit(&huart2, rx_data_lora, 5, 10);
 8001b6c:	230a      	movs	r3, #10
 8001b6e:	2205      	movs	r2, #5
 8001b70:	4910      	ldr	r1, [pc, #64]	@ (8001bb4 <EXTI0_IRQHandler+0xb4>)
 8001b72:	4815      	ldr	r0, [pc, #84]	@ (8001bc8 <EXTI0_IRQHandler+0xc8>)
 8001b74:	f003 f91a 	bl	8004dac <HAL_UART_Transmit>

  if(audio_cue == 'A'){
 8001b78:	79fb      	ldrb	r3, [r7, #7]
 8001b7a:	2b41      	cmp	r3, #65	@ 0x41
 8001b7c:	d105      	bne.n	8001b8a <EXTI0_IRQHandler+0x8a>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 8001b7e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b82:	4812      	ldr	r0, [pc, #72]	@ (8001bcc <EXTI0_IRQHandler+0xcc>)
 8001b84:	f001 f84e 	bl	8002c24 <HAL_GPIO_TogglePin>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
  }
  

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001b88:	e010      	b.n	8001bac <EXTI0_IRQHandler+0xac>
  else if(audio_cue == 'B'){
 8001b8a:	79fb      	ldrb	r3, [r7, #7]
 8001b8c:	2b42      	cmp	r3, #66	@ 0x42
 8001b8e:	d105      	bne.n	8001b9c <EXTI0_IRQHandler+0x9c>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8001b90:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b94:	480d      	ldr	r0, [pc, #52]	@ (8001bcc <EXTI0_IRQHandler+0xcc>)
 8001b96:	f001 f845 	bl	8002c24 <HAL_GPIO_TogglePin>
}
 8001b9a:	e007      	b.n	8001bac <EXTI0_IRQHandler+0xac>
  else if(audio_cue == 'C'){
 8001b9c:	79fb      	ldrb	r3, [r7, #7]
 8001b9e:	2b43      	cmp	r3, #67	@ 0x43
 8001ba0:	d104      	bne.n	8001bac <EXTI0_IRQHandler+0xac>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001ba2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001ba6:	4809      	ldr	r0, [pc, #36]	@ (8001bcc <EXTI0_IRQHandler+0xcc>)
 8001ba8:	f001 f83c 	bl	8002c24 <HAL_GPIO_TogglePin>
}
 8001bac:	bf00      	nop
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	2000056c 	.word	0x2000056c
 8001bb8:	0800a964 	.word	0x0800a964
 8001bbc:	2000047c 	.word	0x2000047c
 8001bc0:	0800a978 	.word	0x0800a978
 8001bc4:	200003f4 	.word	0x200003f4
 8001bc8:	2000036c 	.word	0x2000036c
 8001bcc:	48000400 	.word	0x48000400

08001bd0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8001bd4:	4802      	ldr	r0, [pc, #8]	@ (8001be0 <DMA1_Channel3_IRQHandler+0x10>)
 8001bd6:	f000 fdb4 	bl	8002742 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20000204 	.word	0x20000204

08001be4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001be4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001bea:	4830      	ldr	r0, [pc, #192]	@ (8001cac <TIM3_IRQHandler+0xc8>)
 8001bec:	f002 fca8 	bl	8004540 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);
 8001bf0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001bf4:	482e      	ldr	r0, [pc, #184]	@ (8001cb0 <TIM3_IRQHandler+0xcc>)
 8001bf6:	f001 f815 	bl	8002c24 <HAL_GPIO_TogglePin>

  //Uncomment to use GPS
  bzero(rx_data_gps, GPS_BUF_SIZE); //clear tx buffer
 8001bfa:	4b2e      	ldr	r3, [pc, #184]	@ (8001cb4 <TIM3_IRQHandler+0xd0>)
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8001c02:	461a      	mov	r2, r3
 8001c04:	2100      	movs	r1, #0
 8001c06:	f005 fafb 	bl	8007200 <memset>
  printf("GPS DATA: \n\r");
 8001c0a:	482b      	ldr	r0, [pc, #172]	@ (8001cb8 <TIM3_IRQHandler+0xd4>)
 8001c0c:	f005 f990 	bl	8006f30 <iprintf>
  while(HAL_UART_Receive(&huart1, rx_data_gps, GPS_BUF_SIZE, 2000)!=HAL_OK){} //wait until received
 8001c10:	bf00      	nop
 8001c12:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001c16:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001c1a:	4926      	ldr	r1, [pc, #152]	@ (8001cb4 <TIM3_IRQHandler+0xd0>)
 8001c1c:	4827      	ldr	r0, [pc, #156]	@ (8001cbc <TIM3_IRQHandler+0xd8>)
 8001c1e:	f003 f94e 	bl	8004ebe <HAL_UART_Receive>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d1f4      	bne.n	8001c12 <TIM3_IRQHandler+0x2e>
  HAL_UART_Transmit(&huart2, rx_data_gps, GPS_BUF_SIZE, 10); //print received data to terminal  
 8001c28:	230a      	movs	r3, #10
 8001c2a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001c2e:	4921      	ldr	r1, [pc, #132]	@ (8001cb4 <TIM3_IRQHandler+0xd0>)
 8001c30:	4823      	ldr	r0, [pc, #140]	@ (8001cc0 <TIM3_IRQHandler+0xdc>)
 8001c32:	f003 f8bb 	bl	8004dac <HAL_UART_Transmit>
  printf("\n\n\r");
 8001c36:	4823      	ldr	r0, [pc, #140]	@ (8001cc4 <TIM3_IRQHandler+0xe0>)
 8001c38:	f005 f97a 	bl	8006f30 <iprintf>

  char *gpgga_loc = strstr((char *)rx_data_gps, "$GPGGA");
 8001c3c:	4922      	ldr	r1, [pc, #136]	@ (8001cc8 <TIM3_IRQHandler+0xe4>)
 8001c3e:	481d      	ldr	r0, [pc, #116]	@ (8001cb4 <TIM3_IRQHandler+0xd0>)
 8001c40:	f005 fae6 	bl	8007210 <strstr>
 8001c44:	6078      	str	r0, [r7, #4]
  
  bzero(gpgga, 42); //clear gpgga buffer
 8001c46:	4b21      	ldr	r3, [pc, #132]	@ (8001ccc <TIM3_IRQHandler+0xe8>)
 8001c48:	4618      	mov	r0, r3
 8001c4a:	232a      	movs	r3, #42	@ 0x2a
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	2100      	movs	r1, #0
 8001c50:	f005 fad6 	bl	8007200 <memset>
  memcpy(gpgga, gpgga_loc, 42); //copy command to tx buffer
 8001c54:	4a1d      	ldr	r2, [pc, #116]	@ (8001ccc <TIM3_IRQHandler+0xe8>)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4610      	mov	r0, r2
 8001c5a:	f103 0420 	add.w	r4, r3, #32
 8001c5e:	4602      	mov	r2, r0
 8001c60:	4619      	mov	r1, r3
 8001c62:	f8d1 c000 	ldr.w	ip, [r1]
 8001c66:	684e      	ldr	r6, [r1, #4]
 8001c68:	688d      	ldr	r5, [r1, #8]
 8001c6a:	68c9      	ldr	r1, [r1, #12]
 8001c6c:	f8c2 c000 	str.w	ip, [r2]
 8001c70:	6056      	str	r6, [r2, #4]
 8001c72:	6095      	str	r5, [r2, #8]
 8001c74:	60d1      	str	r1, [r2, #12]
 8001c76:	3310      	adds	r3, #16
 8001c78:	3010      	adds	r0, #16
 8001c7a:	42a3      	cmp	r3, r4
 8001c7c:	d1ef      	bne.n	8001c5e <TIM3_IRQHandler+0x7a>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	6818      	ldr	r0, [r3, #0]
 8001c82:	6859      	ldr	r1, [r3, #4]
 8001c84:	6010      	str	r0, [r2, #0]
 8001c86:	6051      	str	r1, [r2, #4]
 8001c88:	891b      	ldrh	r3, [r3, #8]
 8001c8a:	8113      	strh	r3, [r2, #8]
  if(gpgga_loc != NULL){
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d004      	beq.n	8001c9c <TIM3_IRQHandler+0xb8>
    printf("GPGGA DATA: %s\n\r", gpgga);
 8001c92:	490e      	ldr	r1, [pc, #56]	@ (8001ccc <TIM3_IRQHandler+0xe8>)
 8001c94:	480e      	ldr	r0, [pc, #56]	@ (8001cd0 <TIM3_IRQHandler+0xec>)
 8001c96:	f005 f94b 	bl	8006f30 <iprintf>
  else{
    printf("None found\n\r");
  }

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c9a:	e002      	b.n	8001ca2 <TIM3_IRQHandler+0xbe>
    printf("None found\n\r");
 8001c9c:	480d      	ldr	r0, [pc, #52]	@ (8001cd4 <TIM3_IRQHandler+0xf0>)
 8001c9e:	f005 f947 	bl	8006f30 <iprintf>
}
 8001ca2:	bf00      	nop
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001caa:	bf00      	nop
 8001cac:	20000298 	.word	0x20000298
 8001cb0:	48000400 	.word	0x48000400
 8001cb4:	20000660 	.word	0x20000660
 8001cb8:	0800a994 	.word	0x0800a994
 8001cbc:	200002e4 	.word	0x200002e4
 8001cc0:	2000036c 	.word	0x2000036c
 8001cc4:	0800a9a4 	.word	0x0800a9a4
 8001cc8:	0800a9a8 	.word	0x0800a9a8
 8001ccc:	2000078c 	.word	0x2000078c
 8001cd0:	0800a9b0 	.word	0x0800a9b0
 8001cd4:	0800a9c4 	.word	0x0800a9c4

08001cd8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001cdc:	4802      	ldr	r0, [pc, #8]	@ (8001ce8 <USART2_IRQHandler+0x10>)
 8001cde:	f003 f9b7 	bl	8005050 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	2000036c 	.word	0x2000036c

08001cec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  return 1;
 8001cf0:	2301      	movs	r3, #1
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <_kill>:

int _kill(int pid, int sig)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d06:	f005 fae3 	bl	80072d0 <__errno>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2216      	movs	r2, #22
 8001d0e:	601a      	str	r2, [r3, #0]
  return -1;
 8001d10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <_exit>:

void _exit (int status)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d24:	f04f 31ff 	mov.w	r1, #4294967295
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f7ff ffe7 	bl	8001cfc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d2e:	bf00      	nop
 8001d30:	e7fd      	b.n	8001d2e <_exit+0x12>

08001d32 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b086      	sub	sp, #24
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	60f8      	str	r0, [r7, #12]
 8001d3a:	60b9      	str	r1, [r7, #8]
 8001d3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d3e:	2300      	movs	r3, #0
 8001d40:	617b      	str	r3, [r7, #20]
 8001d42:	e00a      	b.n	8001d5a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d44:	f3af 8000 	nop.w
 8001d48:	4601      	mov	r1, r0
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	1c5a      	adds	r2, r3, #1
 8001d4e:	60ba      	str	r2, [r7, #8]
 8001d50:	b2ca      	uxtb	r2, r1
 8001d52:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	3301      	adds	r3, #1
 8001d58:	617b      	str	r3, [r7, #20]
 8001d5a:	697a      	ldr	r2, [r7, #20]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	dbf0      	blt.n	8001d44 <_read+0x12>
  }

  return len;
 8001d62:	687b      	ldr	r3, [r7, #4]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3718      	adds	r7, #24
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d78:	2300      	movs	r3, #0
 8001d7a:	617b      	str	r3, [r7, #20]
 8001d7c:	e009      	b.n	8001d92 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	1c5a      	adds	r2, r3, #1
 8001d82:	60ba      	str	r2, [r7, #8]
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff f92c 	bl	8000fe4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	617b      	str	r3, [r7, #20]
 8001d92:	697a      	ldr	r2, [r7, #20]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	dbf1      	blt.n	8001d7e <_write+0x12>
  }
  return len;
 8001d9a:	687b      	ldr	r3, [r7, #4]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3718      	adds	r7, #24
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <_close>:

int _close(int file)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001dac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001dcc:	605a      	str	r2, [r3, #4]
  return 0;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <_isatty>:

int _isatty(int file)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001de4:	2301      	movs	r3, #1
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b085      	sub	sp, #20
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	60f8      	str	r0, [r7, #12]
 8001dfa:	60b9      	str	r1, [r7, #8]
 8001dfc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3714      	adds	r7, #20
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e14:	4a14      	ldr	r2, [pc, #80]	@ (8001e68 <_sbrk+0x5c>)
 8001e16:	4b15      	ldr	r3, [pc, #84]	@ (8001e6c <_sbrk+0x60>)
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e20:	4b13      	ldr	r3, [pc, #76]	@ (8001e70 <_sbrk+0x64>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d102      	bne.n	8001e2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e28:	4b11      	ldr	r3, [pc, #68]	@ (8001e70 <_sbrk+0x64>)
 8001e2a:	4a12      	ldr	r2, [pc, #72]	@ (8001e74 <_sbrk+0x68>)
 8001e2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e2e:	4b10      	ldr	r3, [pc, #64]	@ (8001e70 <_sbrk+0x64>)
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4413      	add	r3, r2
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d207      	bcs.n	8001e4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e3c:	f005 fa48 	bl	80072d0 <__errno>
 8001e40:	4603      	mov	r3, r0
 8001e42:	220c      	movs	r2, #12
 8001e44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e46:	f04f 33ff 	mov.w	r3, #4294967295
 8001e4a:	e009      	b.n	8001e60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e4c:	4b08      	ldr	r3, [pc, #32]	@ (8001e70 <_sbrk+0x64>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e52:	4b07      	ldr	r3, [pc, #28]	@ (8001e70 <_sbrk+0x64>)
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4413      	add	r3, r2
 8001e5a:	4a05      	ldr	r2, [pc, #20]	@ (8001e70 <_sbrk+0x64>)
 8001e5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3718      	adds	r7, #24
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	20018000 	.word	0x20018000
 8001e6c:	00000400 	.word	0x00000400
 8001e70:	200007b8 	.word	0x200007b8
 8001e74:	20000910 	.word	0x20000910

08001e78 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001e7c:	4b06      	ldr	r3, [pc, #24]	@ (8001e98 <SystemInit+0x20>)
 8001e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e82:	4a05      	ldr	r2, [pc, #20]	@ (8001e98 <SystemInit+0x20>)
 8001e84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001e8c:	bf00      	nop
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	e000ed00 	.word	0xe000ed00

08001e9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001e9c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ed4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ea0:	f7ff ffea 	bl	8001e78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ea4:	480c      	ldr	r0, [pc, #48]	@ (8001ed8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ea6:	490d      	ldr	r1, [pc, #52]	@ (8001edc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ea8:	4a0d      	ldr	r2, [pc, #52]	@ (8001ee0 <LoopForever+0xe>)
  movs r3, #0
 8001eaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001eac:	e002      	b.n	8001eb4 <LoopCopyDataInit>

08001eae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001eb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eb2:	3304      	adds	r3, #4

08001eb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001eb8:	d3f9      	bcc.n	8001eae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eba:	4a0a      	ldr	r2, [pc, #40]	@ (8001ee4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ebc:	4c0a      	ldr	r4, [pc, #40]	@ (8001ee8 <LoopForever+0x16>)
  movs r3, #0
 8001ebe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ec0:	e001      	b.n	8001ec6 <LoopFillZerobss>

08001ec2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ec2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ec4:	3204      	adds	r2, #4

08001ec6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ec6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ec8:	d3fb      	bcc.n	8001ec2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001eca:	f005 fa07 	bl	80072dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ece:	f7ff f89b 	bl	8001008 <main>

08001ed2 <LoopForever>:

LoopForever:
    b LoopForever
 8001ed2:	e7fe      	b.n	8001ed2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ed4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ed8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001edc:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001ee0:	0800ae58 	.word	0x0800ae58
  ldr r2, =_sbss
 8001ee4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001ee8:	2000090c 	.word	0x2000090c

08001eec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001eec:	e7fe      	b.n	8001eec <ADC1_2_IRQHandler>

08001eee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b082      	sub	sp, #8
 8001ef2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ef8:	2003      	movs	r0, #3
 8001efa:	f000 f961 	bl	80021c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001efe:	200f      	movs	r0, #15
 8001f00:	f000 f80e 	bl	8001f20 <HAL_InitTick>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d002      	beq.n	8001f10 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	71fb      	strb	r3, [r7, #7]
 8001f0e:	e001      	b.n	8001f14 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f10:	f7ff fc10 	bl	8001734 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f14:	79fb      	ldrb	r3, [r7, #7]
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
	...

08001f20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001f2c:	4b17      	ldr	r3, [pc, #92]	@ (8001f8c <HAL_InitTick+0x6c>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d023      	beq.n	8001f7c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001f34:	4b16      	ldr	r3, [pc, #88]	@ (8001f90 <HAL_InitTick+0x70>)
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	4b14      	ldr	r3, [pc, #80]	@ (8001f8c <HAL_InitTick+0x6c>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f000 f96d 	bl	800222a <HAL_SYSTICK_Config>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d10f      	bne.n	8001f76 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2b0f      	cmp	r3, #15
 8001f5a:	d809      	bhi.n	8001f70 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	6879      	ldr	r1, [r7, #4]
 8001f60:	f04f 30ff 	mov.w	r0, #4294967295
 8001f64:	f000 f937 	bl	80021d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f68:	4a0a      	ldr	r2, [pc, #40]	@ (8001f94 <HAL_InitTick+0x74>)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6013      	str	r3, [r2, #0]
 8001f6e:	e007      	b.n	8001f80 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	73fb      	strb	r3, [r7, #15]
 8001f74:	e004      	b.n	8001f80 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	73fb      	strb	r3, [r7, #15]
 8001f7a:	e001      	b.n	8001f80 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3710      	adds	r7, #16
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	20000008 	.word	0x20000008
 8001f90:	20000000 	.word	0x20000000
 8001f94:	20000004 	.word	0x20000004

08001f98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f9c:	4b06      	ldr	r3, [pc, #24]	@ (8001fb8 <HAL_IncTick+0x20>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	4b06      	ldr	r3, [pc, #24]	@ (8001fbc <HAL_IncTick+0x24>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	4a04      	ldr	r2, [pc, #16]	@ (8001fbc <HAL_IncTick+0x24>)
 8001faa:	6013      	str	r3, [r2, #0]
}
 8001fac:	bf00      	nop
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	20000008 	.word	0x20000008
 8001fbc:	200007bc 	.word	0x200007bc

08001fc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001fc4:	4b03      	ldr	r3, [pc, #12]	@ (8001fd4 <HAL_GetTick+0x14>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	200007bc 	.word	0x200007bc

08001fd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fe0:	f7ff ffee 	bl	8001fc0 <HAL_GetTick>
 8001fe4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff0:	d005      	beq.n	8001ffe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800201c <HAL_Delay+0x44>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ffe:	bf00      	nop
 8002000:	f7ff ffde 	bl	8001fc0 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	68fa      	ldr	r2, [r7, #12]
 800200c:	429a      	cmp	r2, r3
 800200e:	d8f7      	bhi.n	8002000 <HAL_Delay+0x28>
  {
  }
}
 8002010:	bf00      	nop
 8002012:	bf00      	nop
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	20000008 	.word	0x20000008

08002020 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002030:	4b0c      	ldr	r3, [pc, #48]	@ (8002064 <__NVIC_SetPriorityGrouping+0x44>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002036:	68ba      	ldr	r2, [r7, #8]
 8002038:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800203c:	4013      	ands	r3, r2
 800203e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002048:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800204c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002050:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002052:	4a04      	ldr	r2, [pc, #16]	@ (8002064 <__NVIC_SetPriorityGrouping+0x44>)
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	60d3      	str	r3, [r2, #12]
}
 8002058:	bf00      	nop
 800205a:	3714      	adds	r7, #20
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr
 8002064:	e000ed00 	.word	0xe000ed00

08002068 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800206c:	4b04      	ldr	r3, [pc, #16]	@ (8002080 <__NVIC_GetPriorityGrouping+0x18>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	0a1b      	lsrs	r3, r3, #8
 8002072:	f003 0307 	and.w	r3, r3, #7
}
 8002076:	4618      	mov	r0, r3
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	e000ed00 	.word	0xe000ed00

08002084 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800208e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002092:	2b00      	cmp	r3, #0
 8002094:	db0b      	blt.n	80020ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002096:	79fb      	ldrb	r3, [r7, #7]
 8002098:	f003 021f 	and.w	r2, r3, #31
 800209c:	4907      	ldr	r1, [pc, #28]	@ (80020bc <__NVIC_EnableIRQ+0x38>)
 800209e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a2:	095b      	lsrs	r3, r3, #5
 80020a4:	2001      	movs	r0, #1
 80020a6:	fa00 f202 	lsl.w	r2, r0, r2
 80020aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020ae:	bf00      	nop
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	e000e100 	.word	0xe000e100

080020c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	6039      	str	r1, [r7, #0]
 80020ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	db0a      	blt.n	80020ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	b2da      	uxtb	r2, r3
 80020d8:	490c      	ldr	r1, [pc, #48]	@ (800210c <__NVIC_SetPriority+0x4c>)
 80020da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020de:	0112      	lsls	r2, r2, #4
 80020e0:	b2d2      	uxtb	r2, r2
 80020e2:	440b      	add	r3, r1
 80020e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020e8:	e00a      	b.n	8002100 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	b2da      	uxtb	r2, r3
 80020ee:	4908      	ldr	r1, [pc, #32]	@ (8002110 <__NVIC_SetPriority+0x50>)
 80020f0:	79fb      	ldrb	r3, [r7, #7]
 80020f2:	f003 030f 	and.w	r3, r3, #15
 80020f6:	3b04      	subs	r3, #4
 80020f8:	0112      	lsls	r2, r2, #4
 80020fa:	b2d2      	uxtb	r2, r2
 80020fc:	440b      	add	r3, r1
 80020fe:	761a      	strb	r2, [r3, #24]
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	e000e100 	.word	0xe000e100
 8002110:	e000ed00 	.word	0xe000ed00

08002114 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002114:	b480      	push	{r7}
 8002116:	b089      	sub	sp, #36	@ 0x24
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	f1c3 0307 	rsb	r3, r3, #7
 800212e:	2b04      	cmp	r3, #4
 8002130:	bf28      	it	cs
 8002132:	2304      	movcs	r3, #4
 8002134:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	3304      	adds	r3, #4
 800213a:	2b06      	cmp	r3, #6
 800213c:	d902      	bls.n	8002144 <NVIC_EncodePriority+0x30>
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	3b03      	subs	r3, #3
 8002142:	e000      	b.n	8002146 <NVIC_EncodePriority+0x32>
 8002144:	2300      	movs	r3, #0
 8002146:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002148:	f04f 32ff 	mov.w	r2, #4294967295
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	43da      	mvns	r2, r3
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	401a      	ands	r2, r3
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800215c:	f04f 31ff 	mov.w	r1, #4294967295
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	fa01 f303 	lsl.w	r3, r1, r3
 8002166:	43d9      	mvns	r1, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800216c:	4313      	orrs	r3, r2
         );
}
 800216e:	4618      	mov	r0, r3
 8002170:	3724      	adds	r7, #36	@ 0x24
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
	...

0800217c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	3b01      	subs	r3, #1
 8002188:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800218c:	d301      	bcc.n	8002192 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800218e:	2301      	movs	r3, #1
 8002190:	e00f      	b.n	80021b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002192:	4a0a      	ldr	r2, [pc, #40]	@ (80021bc <SysTick_Config+0x40>)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	3b01      	subs	r3, #1
 8002198:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800219a:	210f      	movs	r1, #15
 800219c:	f04f 30ff 	mov.w	r0, #4294967295
 80021a0:	f7ff ff8e 	bl	80020c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021a4:	4b05      	ldr	r3, [pc, #20]	@ (80021bc <SysTick_Config+0x40>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021aa:	4b04      	ldr	r3, [pc, #16]	@ (80021bc <SysTick_Config+0x40>)
 80021ac:	2207      	movs	r2, #7
 80021ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	e000e010 	.word	0xe000e010

080021c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f7ff ff29 	bl	8002020 <__NVIC_SetPriorityGrouping>
}
 80021ce:	bf00      	nop
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b086      	sub	sp, #24
 80021da:	af00      	add	r7, sp, #0
 80021dc:	4603      	mov	r3, r0
 80021de:	60b9      	str	r1, [r7, #8]
 80021e0:	607a      	str	r2, [r7, #4]
 80021e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021e4:	2300      	movs	r3, #0
 80021e6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021e8:	f7ff ff3e 	bl	8002068 <__NVIC_GetPriorityGrouping>
 80021ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	68b9      	ldr	r1, [r7, #8]
 80021f2:	6978      	ldr	r0, [r7, #20]
 80021f4:	f7ff ff8e 	bl	8002114 <NVIC_EncodePriority>
 80021f8:	4602      	mov	r2, r0
 80021fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021fe:	4611      	mov	r1, r2
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff ff5d 	bl	80020c0 <__NVIC_SetPriority>
}
 8002206:	bf00      	nop
 8002208:	3718      	adds	r7, #24
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b082      	sub	sp, #8
 8002212:	af00      	add	r7, sp, #0
 8002214:	4603      	mov	r3, r0
 8002216:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff ff31 	bl	8002084 <__NVIC_EnableIRQ>
}
 8002222:	bf00      	nop
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b082      	sub	sp, #8
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7ff ffa2 	bl	800217c <SysTick_Config>
 8002238:	4603      	mov	r3, r0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	b082      	sub	sp, #8
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d101      	bne.n	8002254 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e014      	b.n	800227e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	791b      	ldrb	r3, [r3, #4]
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b00      	cmp	r3, #0
 800225c:	d105      	bne.n	800226a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f7ff fa89 	bl	800177c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2202      	movs	r2, #2
 800226e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2201      	movs	r2, #1
 800227a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b088      	sub	sp, #32
 800228a:	af00      	add	r7, sp, #0
 800228c:	60f8      	str	r0, [r7, #12]
 800228e:	60b9      	str	r1, [r7, #8]
 8002290:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002292:	2300      	movs	r3, #0
 8002294:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	795b      	ldrb	r3, [r3, #5]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d101      	bne.n	80022a2 <HAL_DAC_ConfigChannel+0x1c>
 800229e:	2302      	movs	r3, #2
 80022a0:	e114      	b.n	80024cc <HAL_DAC_ConfigChannel+0x246>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2201      	movs	r2, #1
 80022a6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2202      	movs	r2, #2
 80022ac:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2b04      	cmp	r3, #4
 80022b4:	f040 8081 	bne.w	80023ba <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80022b8:	f7ff fe82 	bl	8001fc0 <HAL_GetTick>
 80022bc:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d140      	bne.n	8002346 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80022c4:	e018      	b.n	80022f8 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80022c6:	f7ff fe7b 	bl	8001fc0 <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d911      	bls.n	80022f8 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d00a      	beq.n	80022f8 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	f043 0208 	orr.w	r2, r3, #8
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2203      	movs	r2, #3
 80022f2:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e0e9      	b.n	80024cc <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1df      	bne.n	80022c6 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8002306:	2001      	movs	r0, #1
 8002308:	f7ff fe66 	bl	8001fd8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	68ba      	ldr	r2, [r7, #8]
 8002312:	6992      	ldr	r2, [r2, #24]
 8002314:	641a      	str	r2, [r3, #64]	@ 0x40
 8002316:	e023      	b.n	8002360 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002318:	f7ff fe52 	bl	8001fc0 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b01      	cmp	r3, #1
 8002324:	d90f      	bls.n	8002346 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800232c:	2b00      	cmp	r3, #0
 800232e:	da0a      	bge.n	8002346 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	f043 0208 	orr.w	r2, r3, #8
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2203      	movs	r2, #3
 8002340:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e0c2      	b.n	80024cc <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800234c:	2b00      	cmp	r3, #0
 800234e:	dbe3      	blt.n	8002318 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8002350:	2001      	movs	r0, #1
 8002352:	f7ff fe41 	bl	8001fd8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	68ba      	ldr	r2, [r7, #8]
 800235c:	6992      	ldr	r2, [r2, #24]
 800235e:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f003 0310 	and.w	r3, r3, #16
 800236c:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8002370:	fa01 f303 	lsl.w	r3, r1, r3
 8002374:	43db      	mvns	r3, r3
 8002376:	ea02 0103 	and.w	r1, r2, r3
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	69da      	ldr	r2, [r3, #28]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f003 0310 	and.w	r3, r3, #16
 8002384:	409a      	lsls	r2, r3
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	430a      	orrs	r2, r1
 800238c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f003 0310 	and.w	r3, r3, #16
 800239a:	21ff      	movs	r1, #255	@ 0xff
 800239c:	fa01 f303 	lsl.w	r3, r1, r3
 80023a0:	43db      	mvns	r3, r3
 80023a2:	ea02 0103 	and.w	r1, r2, r3
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	6a1a      	ldr	r2, [r3, #32]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f003 0310 	and.w	r3, r3, #16
 80023b0:	409a      	lsls	r2, r3
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	430a      	orrs	r2, r1
 80023b8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d11d      	bne.n	80023fe <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023c8:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f003 0310 	and.w	r3, r3, #16
 80023d0:	221f      	movs	r2, #31
 80023d2:	fa02 f303 	lsl.w	r3, r2, r3
 80023d6:	43db      	mvns	r3, r3
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	4013      	ands	r3, r2
 80023dc:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f003 0310 	and.w	r3, r3, #16
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002404:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f003 0310 	and.w	r3, r3, #16
 800240c:	2207      	movs	r2, #7
 800240e:	fa02 f303 	lsl.w	r3, r2, r3
 8002412:	43db      	mvns	r3, r3
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	4013      	ands	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	431a      	orrs	r2, r3
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	4313      	orrs	r3, r2
 800242a:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f003 0310 	and.w	r3, r3, #16
 8002432:	697a      	ldr	r2, [r7, #20]
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	4313      	orrs	r3, r2
 800243c:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	6819      	ldr	r1, [r3, #0]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f003 0310 	and.w	r3, r3, #16
 8002452:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	43da      	mvns	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	400a      	ands	r2, r1
 8002462:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f003 0310 	and.w	r3, r3, #16
 8002472:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	43db      	mvns	r3, r3
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	4013      	ands	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f003 0310 	and.w	r3, r3, #16
 800248e:	697a      	ldr	r2, [r7, #20]
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	4313      	orrs	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	6819      	ldr	r1, [r3, #0]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f003 0310 	and.w	r3, r3, #16
 80024ae:	22c0      	movs	r2, #192	@ 0xc0
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	43da      	mvns	r2, r3
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	400a      	ands	r2, r1
 80024bc:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2201      	movs	r2, #1
 80024c2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2200      	movs	r2, #0
 80024c8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3720      	adds	r7, #32
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e098      	b.n	8002618 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	461a      	mov	r2, r3
 80024ec:	4b4d      	ldr	r3, [pc, #308]	@ (8002624 <HAL_DMA_Init+0x150>)
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d80f      	bhi.n	8002512 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	461a      	mov	r2, r3
 80024f8:	4b4b      	ldr	r3, [pc, #300]	@ (8002628 <HAL_DMA_Init+0x154>)
 80024fa:	4413      	add	r3, r2
 80024fc:	4a4b      	ldr	r2, [pc, #300]	@ (800262c <HAL_DMA_Init+0x158>)
 80024fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002502:	091b      	lsrs	r3, r3, #4
 8002504:	009a      	lsls	r2, r3, #2
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a48      	ldr	r2, [pc, #288]	@ (8002630 <HAL_DMA_Init+0x15c>)
 800250e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002510:	e00e      	b.n	8002530 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	461a      	mov	r2, r3
 8002518:	4b46      	ldr	r3, [pc, #280]	@ (8002634 <HAL_DMA_Init+0x160>)
 800251a:	4413      	add	r3, r2
 800251c:	4a43      	ldr	r2, [pc, #268]	@ (800262c <HAL_DMA_Init+0x158>)
 800251e:	fba2 2303 	umull	r2, r3, r2, r3
 8002522:	091b      	lsrs	r3, r3, #4
 8002524:	009a      	lsls	r2, r3, #2
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a42      	ldr	r2, [pc, #264]	@ (8002638 <HAL_DMA_Init+0x164>)
 800252e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2202      	movs	r2, #2
 8002534:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002546:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800254a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002554:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002560:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800256c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a1b      	ldr	r3, [r3, #32]
 8002572:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	4313      	orrs	r3, r2
 8002578:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800258a:	d039      	beq.n	8002600 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002590:	4a27      	ldr	r2, [pc, #156]	@ (8002630 <HAL_DMA_Init+0x15c>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d11a      	bne.n	80025cc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002596:	4b29      	ldr	r3, [pc, #164]	@ (800263c <HAL_DMA_Init+0x168>)
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800259e:	f003 031c 	and.w	r3, r3, #28
 80025a2:	210f      	movs	r1, #15
 80025a4:	fa01 f303 	lsl.w	r3, r1, r3
 80025a8:	43db      	mvns	r3, r3
 80025aa:	4924      	ldr	r1, [pc, #144]	@ (800263c <HAL_DMA_Init+0x168>)
 80025ac:	4013      	ands	r3, r2
 80025ae:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80025b0:	4b22      	ldr	r3, [pc, #136]	@ (800263c <HAL_DMA_Init+0x168>)
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6859      	ldr	r1, [r3, #4]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025bc:	f003 031c 	and.w	r3, r3, #28
 80025c0:	fa01 f303 	lsl.w	r3, r1, r3
 80025c4:	491d      	ldr	r1, [pc, #116]	@ (800263c <HAL_DMA_Init+0x168>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	600b      	str	r3, [r1, #0]
 80025ca:	e019      	b.n	8002600 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80025cc:	4b1c      	ldr	r3, [pc, #112]	@ (8002640 <HAL_DMA_Init+0x16c>)
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025d4:	f003 031c 	and.w	r3, r3, #28
 80025d8:	210f      	movs	r1, #15
 80025da:	fa01 f303 	lsl.w	r3, r1, r3
 80025de:	43db      	mvns	r3, r3
 80025e0:	4917      	ldr	r1, [pc, #92]	@ (8002640 <HAL_DMA_Init+0x16c>)
 80025e2:	4013      	ands	r3, r2
 80025e4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80025e6:	4b16      	ldr	r3, [pc, #88]	@ (8002640 <HAL_DMA_Init+0x16c>)
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6859      	ldr	r1, [r3, #4]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025f2:	f003 031c 	and.w	r3, r3, #28
 80025f6:	fa01 f303 	lsl.w	r3, r1, r3
 80025fa:	4911      	ldr	r1, [pc, #68]	@ (8002640 <HAL_DMA_Init+0x16c>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2201      	movs	r2, #1
 800260a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	3714      	adds	r7, #20
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr
 8002624:	40020407 	.word	0x40020407
 8002628:	bffdfff8 	.word	0xbffdfff8
 800262c:	cccccccd 	.word	0xcccccccd
 8002630:	40020000 	.word	0x40020000
 8002634:	bffdfbf8 	.word	0xbffdfbf8
 8002638:	40020400 	.word	0x40020400
 800263c:	400200a8 	.word	0x400200a8
 8002640:	400204a8 	.word	0x400204a8

08002644 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800264c:	2300      	movs	r3, #0
 800264e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002656:	b2db      	uxtb	r3, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d008      	beq.n	800266e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2204      	movs	r2, #4
 8002660:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e022      	b.n	80026b4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f022 020e 	bic.w	r2, r2, #14
 800267c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f022 0201 	bic.w	r2, r2, #1
 800268c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002692:	f003 021c 	and.w	r2, r3, #28
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269a:	2101      	movs	r1, #1
 800269c:	fa01 f202 	lsl.w	r2, r1, r2
 80026a0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2201      	movs	r2, #1
 80026a6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80026b2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3714      	adds	r7, #20
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026c8:	2300      	movs	r3, #0
 80026ca:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d005      	beq.n	80026e4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2204      	movs	r2, #4
 80026dc:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	73fb      	strb	r3, [r7, #15]
 80026e2:	e029      	b.n	8002738 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f022 020e 	bic.w	r2, r2, #14
 80026f2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f022 0201 	bic.w	r2, r2, #1
 8002702:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002708:	f003 021c 	and.w	r2, r3, #28
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002710:	2101      	movs	r1, #1
 8002712:	fa01 f202 	lsl.w	r2, r1, r2
 8002716:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800272c:	2b00      	cmp	r3, #0
 800272e:	d003      	beq.n	8002738 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	4798      	blx	r3
    }
  }
  return status;
 8002738:	7bfb      	ldrb	r3, [r7, #15]
}
 800273a:	4618      	mov	r0, r3
 800273c:	3710      	adds	r7, #16
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b084      	sub	sp, #16
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800275e:	f003 031c 	and.w	r3, r3, #28
 8002762:	2204      	movs	r2, #4
 8002764:	409a      	lsls	r2, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	4013      	ands	r3, r2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d026      	beq.n	80027bc <HAL_DMA_IRQHandler+0x7a>
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	f003 0304 	and.w	r3, r3, #4
 8002774:	2b00      	cmp	r3, #0
 8002776:	d021      	beq.n	80027bc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0320 	and.w	r3, r3, #32
 8002782:	2b00      	cmp	r3, #0
 8002784:	d107      	bne.n	8002796 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f022 0204 	bic.w	r2, r2, #4
 8002794:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800279a:	f003 021c 	and.w	r2, r3, #28
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a2:	2104      	movs	r1, #4
 80027a4:	fa01 f202 	lsl.w	r2, r1, r2
 80027a8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d071      	beq.n	8002896 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80027ba:	e06c      	b.n	8002896 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027c0:	f003 031c 	and.w	r3, r3, #28
 80027c4:	2202      	movs	r2, #2
 80027c6:	409a      	lsls	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	4013      	ands	r3, r2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d02e      	beq.n	800282e <HAL_DMA_IRQHandler+0xec>
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d029      	beq.n	800282e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0320 	and.w	r3, r3, #32
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d10b      	bne.n	8002800 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f022 020a 	bic.w	r2, r2, #10
 80027f6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002804:	f003 021c 	and.w	r2, r3, #28
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280c:	2102      	movs	r1, #2
 800280e:	fa01 f202 	lsl.w	r2, r1, r2
 8002812:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002820:	2b00      	cmp	r3, #0
 8002822:	d038      	beq.n	8002896 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800282c:	e033      	b.n	8002896 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002832:	f003 031c 	and.w	r3, r3, #28
 8002836:	2208      	movs	r2, #8
 8002838:	409a      	lsls	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	4013      	ands	r3, r2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d02a      	beq.n	8002898 <HAL_DMA_IRQHandler+0x156>
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	f003 0308 	and.w	r3, r3, #8
 8002848:	2b00      	cmp	r3, #0
 800284a:	d025      	beq.n	8002898 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f022 020e 	bic.w	r2, r2, #14
 800285a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002860:	f003 021c 	and.w	r2, r3, #28
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002868:	2101      	movs	r1, #1
 800286a:	fa01 f202 	lsl.w	r2, r1, r2
 800286e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2201      	movs	r2, #1
 800287a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800288a:	2b00      	cmp	r3, #0
 800288c:	d004      	beq.n	8002898 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002896:	bf00      	nop
 8002898:	bf00      	nop
}
 800289a:	3710      	adds	r7, #16
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b087      	sub	sp, #28
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028aa:	2300      	movs	r3, #0
 80028ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028ae:	e17f      	b.n	8002bb0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	2101      	movs	r1, #1
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	fa01 f303 	lsl.w	r3, r1, r3
 80028bc:	4013      	ands	r3, r2
 80028be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f000 8171 	beq.w	8002baa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f003 0303 	and.w	r3, r3, #3
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d005      	beq.n	80028e0 <HAL_GPIO_Init+0x40>
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f003 0303 	and.w	r3, r3, #3
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d130      	bne.n	8002942 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	2203      	movs	r2, #3
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	43db      	mvns	r3, r3
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	4013      	ands	r3, r2
 80028f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	68da      	ldr	r2, [r3, #12]
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	4313      	orrs	r3, r2
 8002908:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002916:	2201      	movs	r2, #1
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	43db      	mvns	r3, r3
 8002920:	693a      	ldr	r2, [r7, #16]
 8002922:	4013      	ands	r3, r2
 8002924:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	091b      	lsrs	r3, r3, #4
 800292c:	f003 0201 	and.w	r2, r3, #1
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	fa02 f303 	lsl.w	r3, r2, r3
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	4313      	orrs	r3, r2
 800293a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f003 0303 	and.w	r3, r3, #3
 800294a:	2b03      	cmp	r3, #3
 800294c:	d118      	bne.n	8002980 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002952:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002954:	2201      	movs	r2, #1
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	43db      	mvns	r3, r3
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	4013      	ands	r3, r2
 8002962:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	08db      	lsrs	r3, r3, #3
 800296a:	f003 0201 	and.w	r2, r3, #1
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	fa02 f303 	lsl.w	r3, r2, r3
 8002974:	693a      	ldr	r2, [r7, #16]
 8002976:	4313      	orrs	r3, r2
 8002978:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f003 0303 	and.w	r3, r3, #3
 8002988:	2b03      	cmp	r3, #3
 800298a:	d017      	beq.n	80029bc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	005b      	lsls	r3, r3, #1
 8002996:	2203      	movs	r2, #3
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	43db      	mvns	r3, r3
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	4013      	ands	r3, r2
 80029a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	689a      	ldr	r2, [r3, #8]
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	693a      	ldr	r2, [r7, #16]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	693a      	ldr	r2, [r7, #16]
 80029ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f003 0303 	and.w	r3, r3, #3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d123      	bne.n	8002a10 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	08da      	lsrs	r2, r3, #3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	3208      	adds	r2, #8
 80029d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	f003 0307 	and.w	r3, r3, #7
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	220f      	movs	r2, #15
 80029e0:	fa02 f303 	lsl.w	r3, r2, r3
 80029e4:	43db      	mvns	r3, r3
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	4013      	ands	r3, r2
 80029ea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	691a      	ldr	r2, [r3, #16]
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	f003 0307 	and.w	r3, r3, #7
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	fa02 f303 	lsl.w	r3, r2, r3
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	08da      	lsrs	r2, r3, #3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	3208      	adds	r2, #8
 8002a0a:	6939      	ldr	r1, [r7, #16]
 8002a0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	2203      	movs	r2, #3
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	43db      	mvns	r3, r3
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	4013      	ands	r3, r2
 8002a26:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f003 0203 	and.w	r2, r3, #3
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	fa02 f303 	lsl.w	r3, r2, r3
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f000 80ac 	beq.w	8002baa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a52:	4b5f      	ldr	r3, [pc, #380]	@ (8002bd0 <HAL_GPIO_Init+0x330>)
 8002a54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a56:	4a5e      	ldr	r2, [pc, #376]	@ (8002bd0 <HAL_GPIO_Init+0x330>)
 8002a58:	f043 0301 	orr.w	r3, r3, #1
 8002a5c:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a5e:	4b5c      	ldr	r3, [pc, #368]	@ (8002bd0 <HAL_GPIO_Init+0x330>)
 8002a60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	60bb      	str	r3, [r7, #8]
 8002a68:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002a6a:	4a5a      	ldr	r2, [pc, #360]	@ (8002bd4 <HAL_GPIO_Init+0x334>)
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	089b      	lsrs	r3, r3, #2
 8002a70:	3302      	adds	r3, #2
 8002a72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a76:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	f003 0303 	and.w	r3, r3, #3
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	220f      	movs	r2, #15
 8002a82:	fa02 f303 	lsl.w	r3, r2, r3
 8002a86:	43db      	mvns	r3, r3
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002a94:	d025      	beq.n	8002ae2 <HAL_GPIO_Init+0x242>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a4f      	ldr	r2, [pc, #316]	@ (8002bd8 <HAL_GPIO_Init+0x338>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d01f      	beq.n	8002ade <HAL_GPIO_Init+0x23e>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a4e      	ldr	r2, [pc, #312]	@ (8002bdc <HAL_GPIO_Init+0x33c>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d019      	beq.n	8002ada <HAL_GPIO_Init+0x23a>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a4d      	ldr	r2, [pc, #308]	@ (8002be0 <HAL_GPIO_Init+0x340>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d013      	beq.n	8002ad6 <HAL_GPIO_Init+0x236>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a4c      	ldr	r2, [pc, #304]	@ (8002be4 <HAL_GPIO_Init+0x344>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d00d      	beq.n	8002ad2 <HAL_GPIO_Init+0x232>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a4b      	ldr	r2, [pc, #300]	@ (8002be8 <HAL_GPIO_Init+0x348>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d007      	beq.n	8002ace <HAL_GPIO_Init+0x22e>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a4a      	ldr	r2, [pc, #296]	@ (8002bec <HAL_GPIO_Init+0x34c>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d101      	bne.n	8002aca <HAL_GPIO_Init+0x22a>
 8002ac6:	2306      	movs	r3, #6
 8002ac8:	e00c      	b.n	8002ae4 <HAL_GPIO_Init+0x244>
 8002aca:	2307      	movs	r3, #7
 8002acc:	e00a      	b.n	8002ae4 <HAL_GPIO_Init+0x244>
 8002ace:	2305      	movs	r3, #5
 8002ad0:	e008      	b.n	8002ae4 <HAL_GPIO_Init+0x244>
 8002ad2:	2304      	movs	r3, #4
 8002ad4:	e006      	b.n	8002ae4 <HAL_GPIO_Init+0x244>
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e004      	b.n	8002ae4 <HAL_GPIO_Init+0x244>
 8002ada:	2302      	movs	r3, #2
 8002adc:	e002      	b.n	8002ae4 <HAL_GPIO_Init+0x244>
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e000      	b.n	8002ae4 <HAL_GPIO_Init+0x244>
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	697a      	ldr	r2, [r7, #20]
 8002ae6:	f002 0203 	and.w	r2, r2, #3
 8002aea:	0092      	lsls	r2, r2, #2
 8002aec:	4093      	lsls	r3, r2
 8002aee:	693a      	ldr	r2, [r7, #16]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002af4:	4937      	ldr	r1, [pc, #220]	@ (8002bd4 <HAL_GPIO_Init+0x334>)
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	089b      	lsrs	r3, r3, #2
 8002afa:	3302      	adds	r3, #2
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b02:	4b3b      	ldr	r3, [pc, #236]	@ (8002bf0 <HAL_GPIO_Init+0x350>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	43db      	mvns	r3, r3
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d003      	beq.n	8002b26 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002b1e:	693a      	ldr	r2, [r7, #16]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b26:	4a32      	ldr	r2, [pc, #200]	@ (8002bf0 <HAL_GPIO_Init+0x350>)
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b2c:	4b30      	ldr	r3, [pc, #192]	@ (8002bf0 <HAL_GPIO_Init+0x350>)
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	43db      	mvns	r3, r3
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	4013      	ands	r3, r2
 8002b3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d003      	beq.n	8002b50 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b50:	4a27      	ldr	r2, [pc, #156]	@ (8002bf0 <HAL_GPIO_Init+0x350>)
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002b56:	4b26      	ldr	r3, [pc, #152]	@ (8002bf0 <HAL_GPIO_Init+0x350>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	43db      	mvns	r3, r3
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	4013      	ands	r3, r2
 8002b64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d003      	beq.n	8002b7a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b7a:	4a1d      	ldr	r2, [pc, #116]	@ (8002bf0 <HAL_GPIO_Init+0x350>)
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002b80:	4b1b      	ldr	r3, [pc, #108]	@ (8002bf0 <HAL_GPIO_Init+0x350>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d003      	beq.n	8002ba4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ba4:	4a12      	ldr	r2, [pc, #72]	@ (8002bf0 <HAL_GPIO_Init+0x350>)
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	3301      	adds	r3, #1
 8002bae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f47f ae78 	bne.w	80028b0 <HAL_GPIO_Init+0x10>
  }
}
 8002bc0:	bf00      	nop
 8002bc2:	bf00      	nop
 8002bc4:	371c      	adds	r7, #28
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	40010000 	.word	0x40010000
 8002bd8:	48000400 	.word	0x48000400
 8002bdc:	48000800 	.word	0x48000800
 8002be0:	48000c00 	.word	0x48000c00
 8002be4:	48001000 	.word	0x48001000
 8002be8:	48001400 	.word	0x48001400
 8002bec:	48001800 	.word	0x48001800
 8002bf0:	40010400 	.word	0x40010400

08002bf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	807b      	strh	r3, [r7, #2]
 8002c00:	4613      	mov	r3, r2
 8002c02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c04:	787b      	ldrb	r3, [r7, #1]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d003      	beq.n	8002c12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c0a:	887a      	ldrh	r2, [r7, #2]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c10:	e002      	b.n	8002c18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c12:	887a      	ldrh	r2, [r7, #2]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	695b      	ldr	r3, [r3, #20]
 8002c34:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c36:	887a      	ldrh	r2, [r7, #2]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	041a      	lsls	r2, r3, #16
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	43d9      	mvns	r1, r3
 8002c42:	887b      	ldrh	r3, [r7, #2]
 8002c44:	400b      	ands	r3, r1
 8002c46:	431a      	orrs	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	619a      	str	r2, [r3, #24]
}
 8002c4c:	bf00      	nop
 8002c4e:	3714      	adds	r7, #20
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	4603      	mov	r3, r0
 8002c60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002c62:	4b08      	ldr	r3, [pc, #32]	@ (8002c84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c64:	695a      	ldr	r2, [r3, #20]
 8002c66:	88fb      	ldrh	r3, [r7, #6]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d006      	beq.n	8002c7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c6e:	4a05      	ldr	r2, [pc, #20]	@ (8002c84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c70:	88fb      	ldrh	r3, [r7, #6]
 8002c72:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c74:	88fb      	ldrh	r3, [r7, #6]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f000 f806 	bl	8002c88 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c7c:	bf00      	nop
 8002c7e:	3708      	adds	r7, #8
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	40010400 	.word	0x40010400

08002c88 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	4603      	mov	r3, r0
 8002c90:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002c92:	bf00      	nop
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
	...

08002ca0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002ca4:	4b04      	ldr	r3, [pc, #16]	@ (8002cb8 <HAL_PWREx_GetVoltageRange+0x18>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	40007000 	.word	0x40007000

08002cbc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002cca:	d130      	bne.n	8002d2e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ccc:	4b23      	ldr	r3, [pc, #140]	@ (8002d5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002cd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002cd8:	d038      	beq.n	8002d4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cda:	4b20      	ldr	r3, [pc, #128]	@ (8002d5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ce2:	4a1e      	ldr	r2, [pc, #120]	@ (8002d5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ce4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ce8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002cea:	4b1d      	ldr	r3, [pc, #116]	@ (8002d60 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2232      	movs	r2, #50	@ 0x32
 8002cf0:	fb02 f303 	mul.w	r3, r2, r3
 8002cf4:	4a1b      	ldr	r2, [pc, #108]	@ (8002d64 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfa:	0c9b      	lsrs	r3, r3, #18
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d00:	e002      	b.n	8002d08 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	3b01      	subs	r3, #1
 8002d06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d08:	4b14      	ldr	r3, [pc, #80]	@ (8002d5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d0a:	695b      	ldr	r3, [r3, #20]
 8002d0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d14:	d102      	bne.n	8002d1c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d1f2      	bne.n	8002d02 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d1c:	4b0f      	ldr	r3, [pc, #60]	@ (8002d5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d1e:	695b      	ldr	r3, [r3, #20]
 8002d20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d28:	d110      	bne.n	8002d4c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e00f      	b.n	8002d4e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d2e:	4b0b      	ldr	r3, [pc, #44]	@ (8002d5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002d36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d3a:	d007      	beq.n	8002d4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d3c:	4b07      	ldr	r3, [pc, #28]	@ (8002d5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002d44:	4a05      	ldr	r2, [pc, #20]	@ (8002d5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d4a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3714      	adds	r7, #20
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	40007000 	.word	0x40007000
 8002d60:	20000000 	.word	0x20000000
 8002d64:	431bde83 	.word	0x431bde83

08002d68 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b088      	sub	sp, #32
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e3ca      	b.n	8003510 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d7a:	4b97      	ldr	r3, [pc, #604]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f003 030c 	and.w	r3, r3, #12
 8002d82:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d84:	4b94      	ldr	r3, [pc, #592]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	f003 0303 	and.w	r3, r3, #3
 8002d8c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0310 	and.w	r3, r3, #16
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f000 80e4 	beq.w	8002f64 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d007      	beq.n	8002db2 <HAL_RCC_OscConfig+0x4a>
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	2b0c      	cmp	r3, #12
 8002da6:	f040 808b 	bne.w	8002ec0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	f040 8087 	bne.w	8002ec0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002db2:	4b89      	ldr	r3, [pc, #548]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d005      	beq.n	8002dca <HAL_RCC_OscConfig+0x62>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e3a2      	b.n	8003510 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a1a      	ldr	r2, [r3, #32]
 8002dce:	4b82      	ldr	r3, [pc, #520]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0308 	and.w	r3, r3, #8
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d004      	beq.n	8002de4 <HAL_RCC_OscConfig+0x7c>
 8002dda:	4b7f      	ldr	r3, [pc, #508]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002de2:	e005      	b.n	8002df0 <HAL_RCC_OscConfig+0x88>
 8002de4:	4b7c      	ldr	r3, [pc, #496]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002de6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dea:	091b      	lsrs	r3, r3, #4
 8002dec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d223      	bcs.n	8002e3c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a1b      	ldr	r3, [r3, #32]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f000 fd55 	bl	80038a8 <RCC_SetFlashLatencyFromMSIRange>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d001      	beq.n	8002e08 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e383      	b.n	8003510 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e08:	4b73      	ldr	r3, [pc, #460]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a72      	ldr	r2, [pc, #456]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002e0e:	f043 0308 	orr.w	r3, r3, #8
 8002e12:	6013      	str	r3, [r2, #0]
 8002e14:	4b70      	ldr	r3, [pc, #448]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a1b      	ldr	r3, [r3, #32]
 8002e20:	496d      	ldr	r1, [pc, #436]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e26:	4b6c      	ldr	r3, [pc, #432]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	69db      	ldr	r3, [r3, #28]
 8002e32:	021b      	lsls	r3, r3, #8
 8002e34:	4968      	ldr	r1, [pc, #416]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	604b      	str	r3, [r1, #4]
 8002e3a:	e025      	b.n	8002e88 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e3c:	4b66      	ldr	r3, [pc, #408]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a65      	ldr	r2, [pc, #404]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002e42:	f043 0308 	orr.w	r3, r3, #8
 8002e46:	6013      	str	r3, [r2, #0]
 8002e48:	4b63      	ldr	r3, [pc, #396]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a1b      	ldr	r3, [r3, #32]
 8002e54:	4960      	ldr	r1, [pc, #384]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e5a:	4b5f      	ldr	r3, [pc, #380]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	021b      	lsls	r3, r3, #8
 8002e68:	495b      	ldr	r1, [pc, #364]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d109      	bne.n	8002e88 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a1b      	ldr	r3, [r3, #32]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f000 fd15 	bl	80038a8 <RCC_SetFlashLatencyFromMSIRange>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d001      	beq.n	8002e88 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e343      	b.n	8003510 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e88:	f000 fc4a 	bl	8003720 <HAL_RCC_GetSysClockFreq>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	4b52      	ldr	r3, [pc, #328]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	091b      	lsrs	r3, r3, #4
 8002e94:	f003 030f 	and.w	r3, r3, #15
 8002e98:	4950      	ldr	r1, [pc, #320]	@ (8002fdc <HAL_RCC_OscConfig+0x274>)
 8002e9a:	5ccb      	ldrb	r3, [r1, r3]
 8002e9c:	f003 031f 	and.w	r3, r3, #31
 8002ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ea4:	4a4e      	ldr	r2, [pc, #312]	@ (8002fe0 <HAL_RCC_OscConfig+0x278>)
 8002ea6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ea8:	4b4e      	ldr	r3, [pc, #312]	@ (8002fe4 <HAL_RCC_OscConfig+0x27c>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7ff f837 	bl	8001f20 <HAL_InitTick>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002eb6:	7bfb      	ldrb	r3, [r7, #15]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d052      	beq.n	8002f62 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002ebc:	7bfb      	ldrb	r3, [r7, #15]
 8002ebe:	e327      	b.n	8003510 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d032      	beq.n	8002f2e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ec8:	4b43      	ldr	r3, [pc, #268]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a42      	ldr	r2, [pc, #264]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002ece:	f043 0301 	orr.w	r3, r3, #1
 8002ed2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ed4:	f7ff f874 	bl	8001fc0 <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002eda:	e008      	b.n	8002eee <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002edc:	f7ff f870 	bl	8001fc0 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e310      	b.n	8003510 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002eee:	4b3a      	ldr	r3, [pc, #232]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d0f0      	beq.n	8002edc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002efa:	4b37      	ldr	r3, [pc, #220]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a36      	ldr	r2, [pc, #216]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002f00:	f043 0308 	orr.w	r3, r3, #8
 8002f04:	6013      	str	r3, [r2, #0]
 8002f06:	4b34      	ldr	r3, [pc, #208]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a1b      	ldr	r3, [r3, #32]
 8002f12:	4931      	ldr	r1, [pc, #196]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f18:	4b2f      	ldr	r3, [pc, #188]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	69db      	ldr	r3, [r3, #28]
 8002f24:	021b      	lsls	r3, r3, #8
 8002f26:	492c      	ldr	r1, [pc, #176]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	604b      	str	r3, [r1, #4]
 8002f2c:	e01a      	b.n	8002f64 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f2e:	4b2a      	ldr	r3, [pc, #168]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a29      	ldr	r2, [pc, #164]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002f34:	f023 0301 	bic.w	r3, r3, #1
 8002f38:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f3a:	f7ff f841 	bl	8001fc0 <HAL_GetTick>
 8002f3e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f40:	e008      	b.n	8002f54 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f42:	f7ff f83d 	bl	8001fc0 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e2dd      	b.n	8003510 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f54:	4b20      	ldr	r3, [pc, #128]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1f0      	bne.n	8002f42 <HAL_RCC_OscConfig+0x1da>
 8002f60:	e000      	b.n	8002f64 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f62:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0301 	and.w	r3, r3, #1
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d074      	beq.n	800305a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	2b08      	cmp	r3, #8
 8002f74:	d005      	beq.n	8002f82 <HAL_RCC_OscConfig+0x21a>
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	2b0c      	cmp	r3, #12
 8002f7a:	d10e      	bne.n	8002f9a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	2b03      	cmp	r3, #3
 8002f80:	d10b      	bne.n	8002f9a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f82:	4b15      	ldr	r3, [pc, #84]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d064      	beq.n	8003058 <HAL_RCC_OscConfig+0x2f0>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d160      	bne.n	8003058 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e2ba      	b.n	8003510 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fa2:	d106      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x24a>
 8002fa4:	4b0c      	ldr	r3, [pc, #48]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a0b      	ldr	r2, [pc, #44]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002faa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fae:	6013      	str	r3, [r2, #0]
 8002fb0:	e026      	b.n	8003000 <HAL_RCC_OscConfig+0x298>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002fba:	d115      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x280>
 8002fbc:	4b06      	ldr	r3, [pc, #24]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a05      	ldr	r2, [pc, #20]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002fc2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002fc6:	6013      	str	r3, [r2, #0]
 8002fc8:	4b03      	ldr	r3, [pc, #12]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a02      	ldr	r2, [pc, #8]	@ (8002fd8 <HAL_RCC_OscConfig+0x270>)
 8002fce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fd2:	6013      	str	r3, [r2, #0]
 8002fd4:	e014      	b.n	8003000 <HAL_RCC_OscConfig+0x298>
 8002fd6:	bf00      	nop
 8002fd8:	40021000 	.word	0x40021000
 8002fdc:	0800a9d4 	.word	0x0800a9d4
 8002fe0:	20000000 	.word	0x20000000
 8002fe4:	20000004 	.word	0x20000004
 8002fe8:	4ba0      	ldr	r3, [pc, #640]	@ (800326c <HAL_RCC_OscConfig+0x504>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a9f      	ldr	r2, [pc, #636]	@ (800326c <HAL_RCC_OscConfig+0x504>)
 8002fee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ff2:	6013      	str	r3, [r2, #0]
 8002ff4:	4b9d      	ldr	r3, [pc, #628]	@ (800326c <HAL_RCC_OscConfig+0x504>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a9c      	ldr	r2, [pc, #624]	@ (800326c <HAL_RCC_OscConfig+0x504>)
 8002ffa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ffe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d013      	beq.n	8003030 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003008:	f7fe ffda 	bl	8001fc0 <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003010:	f7fe ffd6 	bl	8001fc0 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b64      	cmp	r3, #100	@ 0x64
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e276      	b.n	8003510 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003022:	4b92      	ldr	r3, [pc, #584]	@ (800326c <HAL_RCC_OscConfig+0x504>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d0f0      	beq.n	8003010 <HAL_RCC_OscConfig+0x2a8>
 800302e:	e014      	b.n	800305a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003030:	f7fe ffc6 	bl	8001fc0 <HAL_GetTick>
 8003034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003036:	e008      	b.n	800304a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003038:	f7fe ffc2 	bl	8001fc0 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b64      	cmp	r3, #100	@ 0x64
 8003044:	d901      	bls.n	800304a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e262      	b.n	8003510 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800304a:	4b88      	ldr	r3, [pc, #544]	@ (800326c <HAL_RCC_OscConfig+0x504>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1f0      	bne.n	8003038 <HAL_RCC_OscConfig+0x2d0>
 8003056:	e000      	b.n	800305a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003058:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d060      	beq.n	8003128 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	2b04      	cmp	r3, #4
 800306a:	d005      	beq.n	8003078 <HAL_RCC_OscConfig+0x310>
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	2b0c      	cmp	r3, #12
 8003070:	d119      	bne.n	80030a6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	2b02      	cmp	r3, #2
 8003076:	d116      	bne.n	80030a6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003078:	4b7c      	ldr	r3, [pc, #496]	@ (800326c <HAL_RCC_OscConfig+0x504>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003080:	2b00      	cmp	r3, #0
 8003082:	d005      	beq.n	8003090 <HAL_RCC_OscConfig+0x328>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d101      	bne.n	8003090 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e23f      	b.n	8003510 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003090:	4b76      	ldr	r3, [pc, #472]	@ (800326c <HAL_RCC_OscConfig+0x504>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	691b      	ldr	r3, [r3, #16]
 800309c:	061b      	lsls	r3, r3, #24
 800309e:	4973      	ldr	r1, [pc, #460]	@ (800326c <HAL_RCC_OscConfig+0x504>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030a4:	e040      	b.n	8003128 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d023      	beq.n	80030f6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030ae:	4b6f      	ldr	r3, [pc, #444]	@ (800326c <HAL_RCC_OscConfig+0x504>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a6e      	ldr	r2, [pc, #440]	@ (800326c <HAL_RCC_OscConfig+0x504>)
 80030b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ba:	f7fe ff81 	bl	8001fc0 <HAL_GetTick>
 80030be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030c0:	e008      	b.n	80030d4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030c2:	f7fe ff7d 	bl	8001fc0 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d901      	bls.n	80030d4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e21d      	b.n	8003510 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030d4:	4b65      	ldr	r3, [pc, #404]	@ (800326c <HAL_RCC_OscConfig+0x504>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d0f0      	beq.n	80030c2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030e0:	4b62      	ldr	r3, [pc, #392]	@ (800326c <HAL_RCC_OscConfig+0x504>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	061b      	lsls	r3, r3, #24
 80030ee:	495f      	ldr	r1, [pc, #380]	@ (800326c <HAL_RCC_OscConfig+0x504>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	604b      	str	r3, [r1, #4]
 80030f4:	e018      	b.n	8003128 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030f6:	4b5d      	ldr	r3, [pc, #372]	@ (800326c <HAL_RCC_OscConfig+0x504>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a5c      	ldr	r2, [pc, #368]	@ (800326c <HAL_RCC_OscConfig+0x504>)
 80030fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003100:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003102:	f7fe ff5d 	bl	8001fc0 <HAL_GetTick>
 8003106:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003108:	e008      	b.n	800311c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800310a:	f7fe ff59 	bl	8001fc0 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d901      	bls.n	800311c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e1f9      	b.n	8003510 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800311c:	4b53      	ldr	r3, [pc, #332]	@ (800326c <HAL_RCC_OscConfig+0x504>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1f0      	bne.n	800310a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0308 	and.w	r3, r3, #8
 8003130:	2b00      	cmp	r3, #0
 8003132:	d03c      	beq.n	80031ae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	695b      	ldr	r3, [r3, #20]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d01c      	beq.n	8003176 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800313c:	4b4b      	ldr	r3, [pc, #300]	@ (800326c <HAL_RCC_OscConfig+0x504>)
 800313e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003142:	4a4a      	ldr	r2, [pc, #296]	@ (800326c <HAL_RCC_OscConfig+0x504>)
 8003144:	f043 0301 	orr.w	r3, r3, #1
 8003148:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800314c:	f7fe ff38 	bl	8001fc0 <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003152:	e008      	b.n	8003166 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003154:	f7fe ff34 	bl	8001fc0 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b02      	cmp	r3, #2
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e1d4      	b.n	8003510 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003166:	4b41      	ldr	r3, [pc, #260]	@ (800326c <HAL_RCC_OscConfig+0x504>)
 8003168:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d0ef      	beq.n	8003154 <HAL_RCC_OscConfig+0x3ec>
 8003174:	e01b      	b.n	80031ae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003176:	4b3d      	ldr	r3, [pc, #244]	@ (800326c <HAL_RCC_OscConfig+0x504>)
 8003178:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800317c:	4a3b      	ldr	r2, [pc, #236]	@ (800326c <HAL_RCC_OscConfig+0x504>)
 800317e:	f023 0301 	bic.w	r3, r3, #1
 8003182:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003186:	f7fe ff1b 	bl	8001fc0 <HAL_GetTick>
 800318a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800318c:	e008      	b.n	80031a0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800318e:	f7fe ff17 	bl	8001fc0 <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	2b02      	cmp	r3, #2
 800319a:	d901      	bls.n	80031a0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e1b7      	b.n	8003510 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031a0:	4b32      	ldr	r3, [pc, #200]	@ (800326c <HAL_RCC_OscConfig+0x504>)
 80031a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1ef      	bne.n	800318e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0304 	and.w	r3, r3, #4
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	f000 80a6 	beq.w	8003308 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031bc:	2300      	movs	r3, #0
 80031be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80031c0:	4b2a      	ldr	r3, [pc, #168]	@ (800326c <HAL_RCC_OscConfig+0x504>)
 80031c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d10d      	bne.n	80031e8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031cc:	4b27      	ldr	r3, [pc, #156]	@ (800326c <HAL_RCC_OscConfig+0x504>)
 80031ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031d0:	4a26      	ldr	r2, [pc, #152]	@ (800326c <HAL_RCC_OscConfig+0x504>)
 80031d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80031d8:	4b24      	ldr	r3, [pc, #144]	@ (800326c <HAL_RCC_OscConfig+0x504>)
 80031da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031e0:	60bb      	str	r3, [r7, #8]
 80031e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031e4:	2301      	movs	r3, #1
 80031e6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031e8:	4b21      	ldr	r3, [pc, #132]	@ (8003270 <HAL_RCC_OscConfig+0x508>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d118      	bne.n	8003226 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031f4:	4b1e      	ldr	r3, [pc, #120]	@ (8003270 <HAL_RCC_OscConfig+0x508>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a1d      	ldr	r2, [pc, #116]	@ (8003270 <HAL_RCC_OscConfig+0x508>)
 80031fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003200:	f7fe fede 	bl	8001fc0 <HAL_GetTick>
 8003204:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003206:	e008      	b.n	800321a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003208:	f7fe feda 	bl	8001fc0 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b02      	cmp	r3, #2
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e17a      	b.n	8003510 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800321a:	4b15      	ldr	r3, [pc, #84]	@ (8003270 <HAL_RCC_OscConfig+0x508>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003222:	2b00      	cmp	r3, #0
 8003224:	d0f0      	beq.n	8003208 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d108      	bne.n	8003240 <HAL_RCC_OscConfig+0x4d8>
 800322e:	4b0f      	ldr	r3, [pc, #60]	@ (800326c <HAL_RCC_OscConfig+0x504>)
 8003230:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003234:	4a0d      	ldr	r2, [pc, #52]	@ (800326c <HAL_RCC_OscConfig+0x504>)
 8003236:	f043 0301 	orr.w	r3, r3, #1
 800323a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800323e:	e029      	b.n	8003294 <HAL_RCC_OscConfig+0x52c>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	2b05      	cmp	r3, #5
 8003246:	d115      	bne.n	8003274 <HAL_RCC_OscConfig+0x50c>
 8003248:	4b08      	ldr	r3, [pc, #32]	@ (800326c <HAL_RCC_OscConfig+0x504>)
 800324a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800324e:	4a07      	ldr	r2, [pc, #28]	@ (800326c <HAL_RCC_OscConfig+0x504>)
 8003250:	f043 0304 	orr.w	r3, r3, #4
 8003254:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003258:	4b04      	ldr	r3, [pc, #16]	@ (800326c <HAL_RCC_OscConfig+0x504>)
 800325a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800325e:	4a03      	ldr	r2, [pc, #12]	@ (800326c <HAL_RCC_OscConfig+0x504>)
 8003260:	f043 0301 	orr.w	r3, r3, #1
 8003264:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003268:	e014      	b.n	8003294 <HAL_RCC_OscConfig+0x52c>
 800326a:	bf00      	nop
 800326c:	40021000 	.word	0x40021000
 8003270:	40007000 	.word	0x40007000
 8003274:	4b9c      	ldr	r3, [pc, #624]	@ (80034e8 <HAL_RCC_OscConfig+0x780>)
 8003276:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800327a:	4a9b      	ldr	r2, [pc, #620]	@ (80034e8 <HAL_RCC_OscConfig+0x780>)
 800327c:	f023 0301 	bic.w	r3, r3, #1
 8003280:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003284:	4b98      	ldr	r3, [pc, #608]	@ (80034e8 <HAL_RCC_OscConfig+0x780>)
 8003286:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800328a:	4a97      	ldr	r2, [pc, #604]	@ (80034e8 <HAL_RCC_OscConfig+0x780>)
 800328c:	f023 0304 	bic.w	r3, r3, #4
 8003290:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d016      	beq.n	80032ca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800329c:	f7fe fe90 	bl	8001fc0 <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032a2:	e00a      	b.n	80032ba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032a4:	f7fe fe8c 	bl	8001fc0 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e12a      	b.n	8003510 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032ba:	4b8b      	ldr	r3, [pc, #556]	@ (80034e8 <HAL_RCC_OscConfig+0x780>)
 80032bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d0ed      	beq.n	80032a4 <HAL_RCC_OscConfig+0x53c>
 80032c8:	e015      	b.n	80032f6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ca:	f7fe fe79 	bl	8001fc0 <HAL_GetTick>
 80032ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032d0:	e00a      	b.n	80032e8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032d2:	f7fe fe75 	bl	8001fc0 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d901      	bls.n	80032e8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e113      	b.n	8003510 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032e8:	4b7f      	ldr	r3, [pc, #508]	@ (80034e8 <HAL_RCC_OscConfig+0x780>)
 80032ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1ed      	bne.n	80032d2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032f6:	7ffb      	ldrb	r3, [r7, #31]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d105      	bne.n	8003308 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032fc:	4b7a      	ldr	r3, [pc, #488]	@ (80034e8 <HAL_RCC_OscConfig+0x780>)
 80032fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003300:	4a79      	ldr	r2, [pc, #484]	@ (80034e8 <HAL_RCC_OscConfig+0x780>)
 8003302:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003306:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800330c:	2b00      	cmp	r3, #0
 800330e:	f000 80fe 	beq.w	800350e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003316:	2b02      	cmp	r3, #2
 8003318:	f040 80d0 	bne.w	80034bc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800331c:	4b72      	ldr	r3, [pc, #456]	@ (80034e8 <HAL_RCC_OscConfig+0x780>)
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	f003 0203 	and.w	r2, r3, #3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800332c:	429a      	cmp	r2, r3
 800332e:	d130      	bne.n	8003392 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800333a:	3b01      	subs	r3, #1
 800333c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800333e:	429a      	cmp	r2, r3
 8003340:	d127      	bne.n	8003392 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800334c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800334e:	429a      	cmp	r2, r3
 8003350:	d11f      	bne.n	8003392 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800335c:	2a07      	cmp	r2, #7
 800335e:	bf14      	ite	ne
 8003360:	2201      	movne	r2, #1
 8003362:	2200      	moveq	r2, #0
 8003364:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003366:	4293      	cmp	r3, r2
 8003368:	d113      	bne.n	8003392 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003374:	085b      	lsrs	r3, r3, #1
 8003376:	3b01      	subs	r3, #1
 8003378:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800337a:	429a      	cmp	r2, r3
 800337c:	d109      	bne.n	8003392 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003388:	085b      	lsrs	r3, r3, #1
 800338a:	3b01      	subs	r3, #1
 800338c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800338e:	429a      	cmp	r2, r3
 8003390:	d06e      	beq.n	8003470 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	2b0c      	cmp	r3, #12
 8003396:	d069      	beq.n	800346c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003398:	4b53      	ldr	r3, [pc, #332]	@ (80034e8 <HAL_RCC_OscConfig+0x780>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d105      	bne.n	80033b0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80033a4:	4b50      	ldr	r3, [pc, #320]	@ (80034e8 <HAL_RCC_OscConfig+0x780>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d001      	beq.n	80033b4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e0ad      	b.n	8003510 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80033b4:	4b4c      	ldr	r3, [pc, #304]	@ (80034e8 <HAL_RCC_OscConfig+0x780>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a4b      	ldr	r2, [pc, #300]	@ (80034e8 <HAL_RCC_OscConfig+0x780>)
 80033ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80033be:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033c0:	f7fe fdfe 	bl	8001fc0 <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033c6:	e008      	b.n	80033da <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033c8:	f7fe fdfa 	bl	8001fc0 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e09a      	b.n	8003510 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033da:	4b43      	ldr	r3, [pc, #268]	@ (80034e8 <HAL_RCC_OscConfig+0x780>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1f0      	bne.n	80033c8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033e6:	4b40      	ldr	r3, [pc, #256]	@ (80034e8 <HAL_RCC_OscConfig+0x780>)
 80033e8:	68da      	ldr	r2, [r3, #12]
 80033ea:	4b40      	ldr	r3, [pc, #256]	@ (80034ec <HAL_RCC_OscConfig+0x784>)
 80033ec:	4013      	ands	r3, r2
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80033f6:	3a01      	subs	r2, #1
 80033f8:	0112      	lsls	r2, r2, #4
 80033fa:	4311      	orrs	r1, r2
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003400:	0212      	lsls	r2, r2, #8
 8003402:	4311      	orrs	r1, r2
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003408:	0852      	lsrs	r2, r2, #1
 800340a:	3a01      	subs	r2, #1
 800340c:	0552      	lsls	r2, r2, #21
 800340e:	4311      	orrs	r1, r2
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003414:	0852      	lsrs	r2, r2, #1
 8003416:	3a01      	subs	r2, #1
 8003418:	0652      	lsls	r2, r2, #25
 800341a:	4311      	orrs	r1, r2
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003420:	0912      	lsrs	r2, r2, #4
 8003422:	0452      	lsls	r2, r2, #17
 8003424:	430a      	orrs	r2, r1
 8003426:	4930      	ldr	r1, [pc, #192]	@ (80034e8 <HAL_RCC_OscConfig+0x780>)
 8003428:	4313      	orrs	r3, r2
 800342a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800342c:	4b2e      	ldr	r3, [pc, #184]	@ (80034e8 <HAL_RCC_OscConfig+0x780>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a2d      	ldr	r2, [pc, #180]	@ (80034e8 <HAL_RCC_OscConfig+0x780>)
 8003432:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003436:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003438:	4b2b      	ldr	r3, [pc, #172]	@ (80034e8 <HAL_RCC_OscConfig+0x780>)
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	4a2a      	ldr	r2, [pc, #168]	@ (80034e8 <HAL_RCC_OscConfig+0x780>)
 800343e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003442:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003444:	f7fe fdbc 	bl	8001fc0 <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800344c:	f7fe fdb8 	bl	8001fc0 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b02      	cmp	r3, #2
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e058      	b.n	8003510 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800345e:	4b22      	ldr	r3, [pc, #136]	@ (80034e8 <HAL_RCC_OscConfig+0x780>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d0f0      	beq.n	800344c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800346a:	e050      	b.n	800350e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e04f      	b.n	8003510 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003470:	4b1d      	ldr	r3, [pc, #116]	@ (80034e8 <HAL_RCC_OscConfig+0x780>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d148      	bne.n	800350e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800347c:	4b1a      	ldr	r3, [pc, #104]	@ (80034e8 <HAL_RCC_OscConfig+0x780>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a19      	ldr	r2, [pc, #100]	@ (80034e8 <HAL_RCC_OscConfig+0x780>)
 8003482:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003486:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003488:	4b17      	ldr	r3, [pc, #92]	@ (80034e8 <HAL_RCC_OscConfig+0x780>)
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	4a16      	ldr	r2, [pc, #88]	@ (80034e8 <HAL_RCC_OscConfig+0x780>)
 800348e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003492:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003494:	f7fe fd94 	bl	8001fc0 <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800349a:	e008      	b.n	80034ae <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800349c:	f7fe fd90 	bl	8001fc0 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e030      	b.n	8003510 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034ae:	4b0e      	ldr	r3, [pc, #56]	@ (80034e8 <HAL_RCC_OscConfig+0x780>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d0f0      	beq.n	800349c <HAL_RCC_OscConfig+0x734>
 80034ba:	e028      	b.n	800350e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	2b0c      	cmp	r3, #12
 80034c0:	d023      	beq.n	800350a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034c2:	4b09      	ldr	r3, [pc, #36]	@ (80034e8 <HAL_RCC_OscConfig+0x780>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a08      	ldr	r2, [pc, #32]	@ (80034e8 <HAL_RCC_OscConfig+0x780>)
 80034c8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80034cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ce:	f7fe fd77 	bl	8001fc0 <HAL_GetTick>
 80034d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034d4:	e00c      	b.n	80034f0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034d6:	f7fe fd73 	bl	8001fc0 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d905      	bls.n	80034f0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e013      	b.n	8003510 <HAL_RCC_OscConfig+0x7a8>
 80034e8:	40021000 	.word	0x40021000
 80034ec:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034f0:	4b09      	ldr	r3, [pc, #36]	@ (8003518 <HAL_RCC_OscConfig+0x7b0>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d1ec      	bne.n	80034d6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80034fc:	4b06      	ldr	r3, [pc, #24]	@ (8003518 <HAL_RCC_OscConfig+0x7b0>)
 80034fe:	68da      	ldr	r2, [r3, #12]
 8003500:	4905      	ldr	r1, [pc, #20]	@ (8003518 <HAL_RCC_OscConfig+0x7b0>)
 8003502:	4b06      	ldr	r3, [pc, #24]	@ (800351c <HAL_RCC_OscConfig+0x7b4>)
 8003504:	4013      	ands	r3, r2
 8003506:	60cb      	str	r3, [r1, #12]
 8003508:	e001      	b.n	800350e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e000      	b.n	8003510 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800350e:	2300      	movs	r3, #0
}
 8003510:	4618      	mov	r0, r3
 8003512:	3720      	adds	r7, #32
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	40021000 	.word	0x40021000
 800351c:	feeefffc 	.word	0xfeeefffc

08003520 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d101      	bne.n	8003534 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e0e7      	b.n	8003704 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003534:	4b75      	ldr	r3, [pc, #468]	@ (800370c <HAL_RCC_ClockConfig+0x1ec>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0307 	and.w	r3, r3, #7
 800353c:	683a      	ldr	r2, [r7, #0]
 800353e:	429a      	cmp	r2, r3
 8003540:	d910      	bls.n	8003564 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003542:	4b72      	ldr	r3, [pc, #456]	@ (800370c <HAL_RCC_ClockConfig+0x1ec>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f023 0207 	bic.w	r2, r3, #7
 800354a:	4970      	ldr	r1, [pc, #448]	@ (800370c <HAL_RCC_ClockConfig+0x1ec>)
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	4313      	orrs	r3, r2
 8003550:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003552:	4b6e      	ldr	r3, [pc, #440]	@ (800370c <HAL_RCC_ClockConfig+0x1ec>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0307 	and.w	r3, r3, #7
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	429a      	cmp	r2, r3
 800355e:	d001      	beq.n	8003564 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e0cf      	b.n	8003704 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0302 	and.w	r3, r3, #2
 800356c:	2b00      	cmp	r3, #0
 800356e:	d010      	beq.n	8003592 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689a      	ldr	r2, [r3, #8]
 8003574:	4b66      	ldr	r3, [pc, #408]	@ (8003710 <HAL_RCC_ClockConfig+0x1f0>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800357c:	429a      	cmp	r2, r3
 800357e:	d908      	bls.n	8003592 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003580:	4b63      	ldr	r3, [pc, #396]	@ (8003710 <HAL_RCC_ClockConfig+0x1f0>)
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	4960      	ldr	r1, [pc, #384]	@ (8003710 <HAL_RCC_ClockConfig+0x1f0>)
 800358e:	4313      	orrs	r3, r2
 8003590:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b00      	cmp	r3, #0
 800359c:	d04c      	beq.n	8003638 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	2b03      	cmp	r3, #3
 80035a4:	d107      	bne.n	80035b6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035a6:	4b5a      	ldr	r3, [pc, #360]	@ (8003710 <HAL_RCC_ClockConfig+0x1f0>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d121      	bne.n	80035f6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e0a6      	b.n	8003704 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d107      	bne.n	80035ce <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035be:	4b54      	ldr	r3, [pc, #336]	@ (8003710 <HAL_RCC_ClockConfig+0x1f0>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d115      	bne.n	80035f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e09a      	b.n	8003704 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d107      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035d6:	4b4e      	ldr	r3, [pc, #312]	@ (8003710 <HAL_RCC_ClockConfig+0x1f0>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d109      	bne.n	80035f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e08e      	b.n	8003704 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035e6:	4b4a      	ldr	r3, [pc, #296]	@ (8003710 <HAL_RCC_ClockConfig+0x1f0>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e086      	b.n	8003704 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035f6:	4b46      	ldr	r3, [pc, #280]	@ (8003710 <HAL_RCC_ClockConfig+0x1f0>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f023 0203 	bic.w	r2, r3, #3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	4943      	ldr	r1, [pc, #268]	@ (8003710 <HAL_RCC_ClockConfig+0x1f0>)
 8003604:	4313      	orrs	r3, r2
 8003606:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003608:	f7fe fcda 	bl	8001fc0 <HAL_GetTick>
 800360c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800360e:	e00a      	b.n	8003626 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003610:	f7fe fcd6 	bl	8001fc0 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800361e:	4293      	cmp	r3, r2
 8003620:	d901      	bls.n	8003626 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e06e      	b.n	8003704 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003626:	4b3a      	ldr	r3, [pc, #232]	@ (8003710 <HAL_RCC_ClockConfig+0x1f0>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f003 020c 	and.w	r2, r3, #12
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	429a      	cmp	r2, r3
 8003636:	d1eb      	bne.n	8003610 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0302 	and.w	r3, r3, #2
 8003640:	2b00      	cmp	r3, #0
 8003642:	d010      	beq.n	8003666 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689a      	ldr	r2, [r3, #8]
 8003648:	4b31      	ldr	r3, [pc, #196]	@ (8003710 <HAL_RCC_ClockConfig+0x1f0>)
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003650:	429a      	cmp	r2, r3
 8003652:	d208      	bcs.n	8003666 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003654:	4b2e      	ldr	r3, [pc, #184]	@ (8003710 <HAL_RCC_ClockConfig+0x1f0>)
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	492b      	ldr	r1, [pc, #172]	@ (8003710 <HAL_RCC_ClockConfig+0x1f0>)
 8003662:	4313      	orrs	r3, r2
 8003664:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003666:	4b29      	ldr	r3, [pc, #164]	@ (800370c <HAL_RCC_ClockConfig+0x1ec>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0307 	and.w	r3, r3, #7
 800366e:	683a      	ldr	r2, [r7, #0]
 8003670:	429a      	cmp	r2, r3
 8003672:	d210      	bcs.n	8003696 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003674:	4b25      	ldr	r3, [pc, #148]	@ (800370c <HAL_RCC_ClockConfig+0x1ec>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f023 0207 	bic.w	r2, r3, #7
 800367c:	4923      	ldr	r1, [pc, #140]	@ (800370c <HAL_RCC_ClockConfig+0x1ec>)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	4313      	orrs	r3, r2
 8003682:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003684:	4b21      	ldr	r3, [pc, #132]	@ (800370c <HAL_RCC_ClockConfig+0x1ec>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0307 	and.w	r3, r3, #7
 800368c:	683a      	ldr	r2, [r7, #0]
 800368e:	429a      	cmp	r2, r3
 8003690:	d001      	beq.n	8003696 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e036      	b.n	8003704 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0304 	and.w	r3, r3, #4
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d008      	beq.n	80036b4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036a2:	4b1b      	ldr	r3, [pc, #108]	@ (8003710 <HAL_RCC_ClockConfig+0x1f0>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	4918      	ldr	r1, [pc, #96]	@ (8003710 <HAL_RCC_ClockConfig+0x1f0>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0308 	and.w	r3, r3, #8
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d009      	beq.n	80036d4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036c0:	4b13      	ldr	r3, [pc, #76]	@ (8003710 <HAL_RCC_ClockConfig+0x1f0>)
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	691b      	ldr	r3, [r3, #16]
 80036cc:	00db      	lsls	r3, r3, #3
 80036ce:	4910      	ldr	r1, [pc, #64]	@ (8003710 <HAL_RCC_ClockConfig+0x1f0>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036d4:	f000 f824 	bl	8003720 <HAL_RCC_GetSysClockFreq>
 80036d8:	4602      	mov	r2, r0
 80036da:	4b0d      	ldr	r3, [pc, #52]	@ (8003710 <HAL_RCC_ClockConfig+0x1f0>)
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	091b      	lsrs	r3, r3, #4
 80036e0:	f003 030f 	and.w	r3, r3, #15
 80036e4:	490b      	ldr	r1, [pc, #44]	@ (8003714 <HAL_RCC_ClockConfig+0x1f4>)
 80036e6:	5ccb      	ldrb	r3, [r1, r3]
 80036e8:	f003 031f 	and.w	r3, r3, #31
 80036ec:	fa22 f303 	lsr.w	r3, r2, r3
 80036f0:	4a09      	ldr	r2, [pc, #36]	@ (8003718 <HAL_RCC_ClockConfig+0x1f8>)
 80036f2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80036f4:	4b09      	ldr	r3, [pc, #36]	@ (800371c <HAL_RCC_ClockConfig+0x1fc>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7fe fc11 	bl	8001f20 <HAL_InitTick>
 80036fe:	4603      	mov	r3, r0
 8003700:	72fb      	strb	r3, [r7, #11]

  return status;
 8003702:	7afb      	ldrb	r3, [r7, #11]
}
 8003704:	4618      	mov	r0, r3
 8003706:	3710      	adds	r7, #16
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	40022000 	.word	0x40022000
 8003710:	40021000 	.word	0x40021000
 8003714:	0800a9d4 	.word	0x0800a9d4
 8003718:	20000000 	.word	0x20000000
 800371c:	20000004 	.word	0x20000004

08003720 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003720:	b480      	push	{r7}
 8003722:	b089      	sub	sp, #36	@ 0x24
 8003724:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003726:	2300      	movs	r3, #0
 8003728:	61fb      	str	r3, [r7, #28]
 800372a:	2300      	movs	r3, #0
 800372c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800372e:	4b3e      	ldr	r3, [pc, #248]	@ (8003828 <HAL_RCC_GetSysClockFreq+0x108>)
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f003 030c 	and.w	r3, r3, #12
 8003736:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003738:	4b3b      	ldr	r3, [pc, #236]	@ (8003828 <HAL_RCC_GetSysClockFreq+0x108>)
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	f003 0303 	and.w	r3, r3, #3
 8003740:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d005      	beq.n	8003754 <HAL_RCC_GetSysClockFreq+0x34>
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	2b0c      	cmp	r3, #12
 800374c:	d121      	bne.n	8003792 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2b01      	cmp	r3, #1
 8003752:	d11e      	bne.n	8003792 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003754:	4b34      	ldr	r3, [pc, #208]	@ (8003828 <HAL_RCC_GetSysClockFreq+0x108>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0308 	and.w	r3, r3, #8
 800375c:	2b00      	cmp	r3, #0
 800375e:	d107      	bne.n	8003770 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003760:	4b31      	ldr	r3, [pc, #196]	@ (8003828 <HAL_RCC_GetSysClockFreq+0x108>)
 8003762:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003766:	0a1b      	lsrs	r3, r3, #8
 8003768:	f003 030f 	and.w	r3, r3, #15
 800376c:	61fb      	str	r3, [r7, #28]
 800376e:	e005      	b.n	800377c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003770:	4b2d      	ldr	r3, [pc, #180]	@ (8003828 <HAL_RCC_GetSysClockFreq+0x108>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	091b      	lsrs	r3, r3, #4
 8003776:	f003 030f 	and.w	r3, r3, #15
 800377a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800377c:	4a2b      	ldr	r2, [pc, #172]	@ (800382c <HAL_RCC_GetSysClockFreq+0x10c>)
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003784:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d10d      	bne.n	80037a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003790:	e00a      	b.n	80037a8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	2b04      	cmp	r3, #4
 8003796:	d102      	bne.n	800379e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003798:	4b25      	ldr	r3, [pc, #148]	@ (8003830 <HAL_RCC_GetSysClockFreq+0x110>)
 800379a:	61bb      	str	r3, [r7, #24]
 800379c:	e004      	b.n	80037a8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	2b08      	cmp	r3, #8
 80037a2:	d101      	bne.n	80037a8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80037a4:	4b23      	ldr	r3, [pc, #140]	@ (8003834 <HAL_RCC_GetSysClockFreq+0x114>)
 80037a6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	2b0c      	cmp	r3, #12
 80037ac:	d134      	bne.n	8003818 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80037ae:	4b1e      	ldr	r3, [pc, #120]	@ (8003828 <HAL_RCC_GetSysClockFreq+0x108>)
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	f003 0303 	and.w	r3, r3, #3
 80037b6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d003      	beq.n	80037c6 <HAL_RCC_GetSysClockFreq+0xa6>
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	2b03      	cmp	r3, #3
 80037c2:	d003      	beq.n	80037cc <HAL_RCC_GetSysClockFreq+0xac>
 80037c4:	e005      	b.n	80037d2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80037c6:	4b1a      	ldr	r3, [pc, #104]	@ (8003830 <HAL_RCC_GetSysClockFreq+0x110>)
 80037c8:	617b      	str	r3, [r7, #20]
      break;
 80037ca:	e005      	b.n	80037d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80037cc:	4b19      	ldr	r3, [pc, #100]	@ (8003834 <HAL_RCC_GetSysClockFreq+0x114>)
 80037ce:	617b      	str	r3, [r7, #20]
      break;
 80037d0:	e002      	b.n	80037d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	617b      	str	r3, [r7, #20]
      break;
 80037d6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037d8:	4b13      	ldr	r3, [pc, #76]	@ (8003828 <HAL_RCC_GetSysClockFreq+0x108>)
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	091b      	lsrs	r3, r3, #4
 80037de:	f003 0307 	and.w	r3, r3, #7
 80037e2:	3301      	adds	r3, #1
 80037e4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80037e6:	4b10      	ldr	r3, [pc, #64]	@ (8003828 <HAL_RCC_GetSysClockFreq+0x108>)
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	0a1b      	lsrs	r3, r3, #8
 80037ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80037f0:	697a      	ldr	r2, [r7, #20]
 80037f2:	fb03 f202 	mul.w	r2, r3, r2
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037fc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80037fe:	4b0a      	ldr	r3, [pc, #40]	@ (8003828 <HAL_RCC_GetSysClockFreq+0x108>)
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	0e5b      	lsrs	r3, r3, #25
 8003804:	f003 0303 	and.w	r3, r3, #3
 8003808:	3301      	adds	r3, #1
 800380a:	005b      	lsls	r3, r3, #1
 800380c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800380e:	697a      	ldr	r2, [r7, #20]
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	fbb2 f3f3 	udiv	r3, r2, r3
 8003816:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003818:	69bb      	ldr	r3, [r7, #24]
}
 800381a:	4618      	mov	r0, r3
 800381c:	3724      	adds	r7, #36	@ 0x24
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	40021000 	.word	0x40021000
 800382c:	0800a9ec 	.word	0x0800a9ec
 8003830:	00f42400 	.word	0x00f42400
 8003834:	007a1200 	.word	0x007a1200

08003838 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003838:	b480      	push	{r7}
 800383a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800383c:	4b03      	ldr	r3, [pc, #12]	@ (800384c <HAL_RCC_GetHCLKFreq+0x14>)
 800383e:	681b      	ldr	r3, [r3, #0]
}
 8003840:	4618      	mov	r0, r3
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	20000000 	.word	0x20000000

08003850 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003854:	f7ff fff0 	bl	8003838 <HAL_RCC_GetHCLKFreq>
 8003858:	4602      	mov	r2, r0
 800385a:	4b06      	ldr	r3, [pc, #24]	@ (8003874 <HAL_RCC_GetPCLK1Freq+0x24>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	0a1b      	lsrs	r3, r3, #8
 8003860:	f003 0307 	and.w	r3, r3, #7
 8003864:	4904      	ldr	r1, [pc, #16]	@ (8003878 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003866:	5ccb      	ldrb	r3, [r1, r3]
 8003868:	f003 031f 	and.w	r3, r3, #31
 800386c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003870:	4618      	mov	r0, r3
 8003872:	bd80      	pop	{r7, pc}
 8003874:	40021000 	.word	0x40021000
 8003878:	0800a9e4 	.word	0x0800a9e4

0800387c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003880:	f7ff ffda 	bl	8003838 <HAL_RCC_GetHCLKFreq>
 8003884:	4602      	mov	r2, r0
 8003886:	4b06      	ldr	r3, [pc, #24]	@ (80038a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	0adb      	lsrs	r3, r3, #11
 800388c:	f003 0307 	and.w	r3, r3, #7
 8003890:	4904      	ldr	r1, [pc, #16]	@ (80038a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003892:	5ccb      	ldrb	r3, [r1, r3]
 8003894:	f003 031f 	and.w	r3, r3, #31
 8003898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800389c:	4618      	mov	r0, r3
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	40021000 	.word	0x40021000
 80038a4:	0800a9e4 	.word	0x0800a9e4

080038a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b086      	sub	sp, #24
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80038b0:	2300      	movs	r3, #0
 80038b2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80038b4:	4b2a      	ldr	r3, [pc, #168]	@ (8003960 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d003      	beq.n	80038c8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80038c0:	f7ff f9ee 	bl	8002ca0 <HAL_PWREx_GetVoltageRange>
 80038c4:	6178      	str	r0, [r7, #20]
 80038c6:	e014      	b.n	80038f2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80038c8:	4b25      	ldr	r3, [pc, #148]	@ (8003960 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038cc:	4a24      	ldr	r2, [pc, #144]	@ (8003960 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80038d4:	4b22      	ldr	r3, [pc, #136]	@ (8003960 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038dc:	60fb      	str	r3, [r7, #12]
 80038de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80038e0:	f7ff f9de 	bl	8002ca0 <HAL_PWREx_GetVoltageRange>
 80038e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80038e6:	4b1e      	ldr	r3, [pc, #120]	@ (8003960 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ea:	4a1d      	ldr	r2, [pc, #116]	@ (8003960 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038f0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038f8:	d10b      	bne.n	8003912 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2b80      	cmp	r3, #128	@ 0x80
 80038fe:	d919      	bls.n	8003934 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2ba0      	cmp	r3, #160	@ 0xa0
 8003904:	d902      	bls.n	800390c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003906:	2302      	movs	r3, #2
 8003908:	613b      	str	r3, [r7, #16]
 800390a:	e013      	b.n	8003934 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800390c:	2301      	movs	r3, #1
 800390e:	613b      	str	r3, [r7, #16]
 8003910:	e010      	b.n	8003934 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2b80      	cmp	r3, #128	@ 0x80
 8003916:	d902      	bls.n	800391e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003918:	2303      	movs	r3, #3
 800391a:	613b      	str	r3, [r7, #16]
 800391c:	e00a      	b.n	8003934 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2b80      	cmp	r3, #128	@ 0x80
 8003922:	d102      	bne.n	800392a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003924:	2302      	movs	r3, #2
 8003926:	613b      	str	r3, [r7, #16]
 8003928:	e004      	b.n	8003934 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2b70      	cmp	r3, #112	@ 0x70
 800392e:	d101      	bne.n	8003934 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003930:	2301      	movs	r3, #1
 8003932:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003934:	4b0b      	ldr	r3, [pc, #44]	@ (8003964 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f023 0207 	bic.w	r2, r3, #7
 800393c:	4909      	ldr	r1, [pc, #36]	@ (8003964 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	4313      	orrs	r3, r2
 8003942:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003944:	4b07      	ldr	r3, [pc, #28]	@ (8003964 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0307 	and.w	r3, r3, #7
 800394c:	693a      	ldr	r2, [r7, #16]
 800394e:	429a      	cmp	r2, r3
 8003950:	d001      	beq.n	8003956 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e000      	b.n	8003958 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3718      	adds	r7, #24
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	40021000 	.word	0x40021000
 8003964:	40022000 	.word	0x40022000

08003968 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003970:	2300      	movs	r3, #0
 8003972:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003974:	2300      	movs	r3, #0
 8003976:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003980:	2b00      	cmp	r3, #0
 8003982:	d041      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003988:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800398c:	d02a      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800398e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003992:	d824      	bhi.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003994:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003998:	d008      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x44>
 800399a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800399e:	d81e      	bhi.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x76>
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00a      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x52>
 80039a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039a8:	d010      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80039aa:	e018      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80039ac:	4b86      	ldr	r3, [pc, #536]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	4a85      	ldr	r2, [pc, #532]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039b6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039b8:	e015      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	3304      	adds	r3, #4
 80039be:	2100      	movs	r1, #0
 80039c0:	4618      	mov	r0, r3
 80039c2:	f000 fabb 	bl	8003f3c <RCCEx_PLLSAI1_Config>
 80039c6:	4603      	mov	r3, r0
 80039c8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039ca:	e00c      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	3320      	adds	r3, #32
 80039d0:	2100      	movs	r1, #0
 80039d2:	4618      	mov	r0, r3
 80039d4:	f000 fba6 	bl	8004124 <RCCEx_PLLSAI2_Config>
 80039d8:	4603      	mov	r3, r0
 80039da:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039dc:	e003      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	74fb      	strb	r3, [r7, #19]
      break;
 80039e2:	e000      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80039e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039e6:	7cfb      	ldrb	r3, [r7, #19]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d10b      	bne.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039ec:	4b76      	ldr	r3, [pc, #472]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039f2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039fa:	4973      	ldr	r1, [pc, #460]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003a02:	e001      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a04:	7cfb      	ldrb	r3, [r7, #19]
 8003a06:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d041      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a18:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003a1c:	d02a      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003a1e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003a22:	d824      	bhi.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003a24:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003a28:	d008      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003a2a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003a2e:	d81e      	bhi.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d00a      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003a34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a38:	d010      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a3a:	e018      	b.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a3c:	4b62      	ldr	r3, [pc, #392]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	4a61      	ldr	r2, [pc, #388]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a46:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a48:	e015      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	3304      	adds	r3, #4
 8003a4e:	2100      	movs	r1, #0
 8003a50:	4618      	mov	r0, r3
 8003a52:	f000 fa73 	bl	8003f3c <RCCEx_PLLSAI1_Config>
 8003a56:	4603      	mov	r3, r0
 8003a58:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a5a:	e00c      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	3320      	adds	r3, #32
 8003a60:	2100      	movs	r1, #0
 8003a62:	4618      	mov	r0, r3
 8003a64:	f000 fb5e 	bl	8004124 <RCCEx_PLLSAI2_Config>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a6c:	e003      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	74fb      	strb	r3, [r7, #19]
      break;
 8003a72:	e000      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003a74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a76:	7cfb      	ldrb	r3, [r7, #19]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d10b      	bne.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a7c:	4b52      	ldr	r3, [pc, #328]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a82:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a8a:	494f      	ldr	r1, [pc, #316]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003a92:	e001      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a94:	7cfb      	ldrb	r3, [r7, #19]
 8003a96:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f000 80a0 	beq.w	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003aaa:	4b47      	ldr	r3, [pc, #284]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e000      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003aba:	2300      	movs	r3, #0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00d      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ac0:	4b41      	ldr	r3, [pc, #260]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ac2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ac4:	4a40      	ldr	r2, [pc, #256]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ac6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003aca:	6593      	str	r3, [r2, #88]	@ 0x58
 8003acc:	4b3e      	ldr	r3, [pc, #248]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ace:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ad0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ad4:	60bb      	str	r3, [r7, #8]
 8003ad6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003adc:	4b3b      	ldr	r3, [pc, #236]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a3a      	ldr	r2, [pc, #232]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ae2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ae6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ae8:	f7fe fa6a 	bl	8001fc0 <HAL_GetTick>
 8003aec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003aee:	e009      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003af0:	f7fe fa66 	bl	8001fc0 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d902      	bls.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	74fb      	strb	r3, [r7, #19]
        break;
 8003b02:	e005      	b.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b04:	4b31      	ldr	r3, [pc, #196]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d0ef      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003b10:	7cfb      	ldrb	r3, [r7, #19]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d15c      	bne.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b16:	4b2c      	ldr	r3, [pc, #176]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b1c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b20:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d01f      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d019      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b34:	4b24      	ldr	r3, [pc, #144]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b3e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b40:	4b21      	ldr	r3, [pc, #132]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b46:	4a20      	ldr	r2, [pc, #128]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b50:	4b1d      	ldr	r3, [pc, #116]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b56:	4a1c      	ldr	r2, [pc, #112]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b60:	4a19      	ldr	r2, [pc, #100]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d016      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b72:	f7fe fa25 	bl	8001fc0 <HAL_GetTick>
 8003b76:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b78:	e00b      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b7a:	f7fe fa21 	bl	8001fc0 <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d902      	bls.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	74fb      	strb	r3, [r7, #19]
            break;
 8003b90:	e006      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b92:	4b0d      	ldr	r3, [pc, #52]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b98:	f003 0302 	and.w	r3, r3, #2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d0ec      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003ba0:	7cfb      	ldrb	r3, [r7, #19]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d10c      	bne.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ba6:	4b08      	ldr	r3, [pc, #32]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bb6:	4904      	ldr	r1, [pc, #16]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003bbe:	e009      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bc0:	7cfb      	ldrb	r3, [r7, #19]
 8003bc2:	74bb      	strb	r3, [r7, #18]
 8003bc4:	e006      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003bc6:	bf00      	nop
 8003bc8:	40021000 	.word	0x40021000
 8003bcc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bd0:	7cfb      	ldrb	r3, [r7, #19]
 8003bd2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bd4:	7c7b      	ldrb	r3, [r7, #17]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d105      	bne.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bda:	4b9e      	ldr	r3, [pc, #632]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bde:	4a9d      	ldr	r2, [pc, #628]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003be0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003be4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00a      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bf2:	4b98      	ldr	r3, [pc, #608]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bf8:	f023 0203 	bic.w	r2, r3, #3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c00:	4994      	ldr	r1, [pc, #592]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0302 	and.w	r3, r3, #2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d00a      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c14:	4b8f      	ldr	r3, [pc, #572]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c1a:	f023 020c 	bic.w	r2, r3, #12
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c22:	498c      	ldr	r1, [pc, #560]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0304 	and.w	r3, r3, #4
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00a      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c36:	4b87      	ldr	r3, [pc, #540]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c3c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c44:	4983      	ldr	r1, [pc, #524]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0308 	and.w	r3, r3, #8
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d00a      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c58:	4b7e      	ldr	r3, [pc, #504]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c5e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c66:	497b      	ldr	r1, [pc, #492]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0310 	and.w	r3, r3, #16
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00a      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c7a:	4b76      	ldr	r3, [pc, #472]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c80:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c88:	4972      	ldr	r1, [pc, #456]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0320 	and.w	r3, r3, #32
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00a      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c9c:	4b6d      	ldr	r3, [pc, #436]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ca2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003caa:	496a      	ldr	r1, [pc, #424]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cac:	4313      	orrs	r3, r2
 8003cae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00a      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cbe:	4b65      	ldr	r3, [pc, #404]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cc4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ccc:	4961      	ldr	r1, [pc, #388]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d00a      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ce0:	4b5c      	ldr	r3, [pc, #368]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ce6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cee:	4959      	ldr	r1, [pc, #356]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00a      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d02:	4b54      	ldr	r3, [pc, #336]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d08:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d10:	4950      	ldr	r1, [pc, #320]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d00a      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d24:	4b4b      	ldr	r3, [pc, #300]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d2a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d32:	4948      	ldr	r1, [pc, #288]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00a      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d46:	4b43      	ldr	r3, [pc, #268]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d4c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d54:	493f      	ldr	r1, [pc, #252]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d028      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d68:	4b3a      	ldr	r3, [pc, #232]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d6e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d76:	4937      	ldr	r1, [pc, #220]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d82:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d86:	d106      	bne.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d88:	4b32      	ldr	r3, [pc, #200]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	4a31      	ldr	r2, [pc, #196]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d92:	60d3      	str	r3, [r2, #12]
 8003d94:	e011      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d9a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003d9e:	d10c      	bne.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	3304      	adds	r3, #4
 8003da4:	2101      	movs	r1, #1
 8003da6:	4618      	mov	r0, r3
 8003da8:	f000 f8c8 	bl	8003f3c <RCCEx_PLLSAI1_Config>
 8003dac:	4603      	mov	r3, r0
 8003dae:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003db0:	7cfb      	ldrb	r3, [r7, #19]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d001      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003db6:	7cfb      	ldrb	r3, [r7, #19]
 8003db8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d028      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003dc6:	4b23      	ldr	r3, [pc, #140]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dcc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dd4:	491f      	ldr	r1, [pc, #124]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003de0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003de4:	d106      	bne.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003de6:	4b1b      	ldr	r3, [pc, #108]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	4a1a      	ldr	r2, [pc, #104]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003df0:	60d3      	str	r3, [r2, #12]
 8003df2:	e011      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003df8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003dfc:	d10c      	bne.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	3304      	adds	r3, #4
 8003e02:	2101      	movs	r1, #1
 8003e04:	4618      	mov	r0, r3
 8003e06:	f000 f899 	bl	8003f3c <RCCEx_PLLSAI1_Config>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e0e:	7cfb      	ldrb	r3, [r7, #19]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d001      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003e14:	7cfb      	ldrb	r3, [r7, #19]
 8003e16:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d02b      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e24:	4b0b      	ldr	r3, [pc, #44]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e2a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e32:	4908      	ldr	r1, [pc, #32]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e42:	d109      	bne.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e44:	4b03      	ldr	r3, [pc, #12]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	4a02      	ldr	r2, [pc, #8]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e4e:	60d3      	str	r3, [r2, #12]
 8003e50:	e014      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003e52:	bf00      	nop
 8003e54:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e5c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003e60:	d10c      	bne.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	3304      	adds	r3, #4
 8003e66:	2101      	movs	r1, #1
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f000 f867 	bl	8003f3c <RCCEx_PLLSAI1_Config>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e72:	7cfb      	ldrb	r3, [r7, #19]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d001      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003e78:	7cfb      	ldrb	r3, [r7, #19]
 8003e7a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d02f      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e88:	4b2b      	ldr	r3, [pc, #172]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e8e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e96:	4928      	ldr	r1, [pc, #160]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ea2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ea6:	d10d      	bne.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	3304      	adds	r3, #4
 8003eac:	2102      	movs	r1, #2
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f000 f844 	bl	8003f3c <RCCEx_PLLSAI1_Config>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003eb8:	7cfb      	ldrb	r3, [r7, #19]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d014      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003ebe:	7cfb      	ldrb	r3, [r7, #19]
 8003ec0:	74bb      	strb	r3, [r7, #18]
 8003ec2:	e011      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ec8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ecc:	d10c      	bne.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	3320      	adds	r3, #32
 8003ed2:	2102      	movs	r1, #2
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f000 f925 	bl	8004124 <RCCEx_PLLSAI2_Config>
 8003eda:	4603      	mov	r3, r0
 8003edc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ede:	7cfb      	ldrb	r3, [r7, #19]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d001      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003ee4:	7cfb      	ldrb	r3, [r7, #19]
 8003ee6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00a      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003ef4:	4b10      	ldr	r3, [pc, #64]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003efa:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f02:	490d      	ldr	r1, [pc, #52]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00b      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f16:	4b08      	ldr	r3, [pc, #32]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f1c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f26:	4904      	ldr	r1, [pc, #16]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003f2e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3718      	adds	r7, #24
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	40021000 	.word	0x40021000

08003f3c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f46:	2300      	movs	r3, #0
 8003f48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f4a:	4b75      	ldr	r3, [pc, #468]	@ (8004120 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	f003 0303 	and.w	r3, r3, #3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d018      	beq.n	8003f88 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003f56:	4b72      	ldr	r3, [pc, #456]	@ (8004120 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	f003 0203 	and.w	r2, r3, #3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d10d      	bne.n	8003f82 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
       ||
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d009      	beq.n	8003f82 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003f6e:	4b6c      	ldr	r3, [pc, #432]	@ (8004120 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	091b      	lsrs	r3, r3, #4
 8003f74:	f003 0307 	and.w	r3, r3, #7
 8003f78:	1c5a      	adds	r2, r3, #1
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
       ||
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d047      	beq.n	8004012 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	73fb      	strb	r3, [r7, #15]
 8003f86:	e044      	b.n	8004012 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2b03      	cmp	r3, #3
 8003f8e:	d018      	beq.n	8003fc2 <RCCEx_PLLSAI1_Config+0x86>
 8003f90:	2b03      	cmp	r3, #3
 8003f92:	d825      	bhi.n	8003fe0 <RCCEx_PLLSAI1_Config+0xa4>
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d002      	beq.n	8003f9e <RCCEx_PLLSAI1_Config+0x62>
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d009      	beq.n	8003fb0 <RCCEx_PLLSAI1_Config+0x74>
 8003f9c:	e020      	b.n	8003fe0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f9e:	4b60      	ldr	r3, [pc, #384]	@ (8004120 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d11d      	bne.n	8003fe6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fae:	e01a      	b.n	8003fe6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003fb0:	4b5b      	ldr	r3, [pc, #364]	@ (8004120 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d116      	bne.n	8003fea <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fc0:	e013      	b.n	8003fea <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003fc2:	4b57      	ldr	r3, [pc, #348]	@ (8004120 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d10f      	bne.n	8003fee <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003fce:	4b54      	ldr	r3, [pc, #336]	@ (8004120 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d109      	bne.n	8003fee <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003fde:	e006      	b.n	8003fee <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	73fb      	strb	r3, [r7, #15]
      break;
 8003fe4:	e004      	b.n	8003ff0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003fe6:	bf00      	nop
 8003fe8:	e002      	b.n	8003ff0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003fea:	bf00      	nop
 8003fec:	e000      	b.n	8003ff0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003fee:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ff0:	7bfb      	ldrb	r3, [r7, #15]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d10d      	bne.n	8004012 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ff6:	4b4a      	ldr	r3, [pc, #296]	@ (8004120 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6819      	ldr	r1, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	3b01      	subs	r3, #1
 8004008:	011b      	lsls	r3, r3, #4
 800400a:	430b      	orrs	r3, r1
 800400c:	4944      	ldr	r1, [pc, #272]	@ (8004120 <RCCEx_PLLSAI1_Config+0x1e4>)
 800400e:	4313      	orrs	r3, r2
 8004010:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004012:	7bfb      	ldrb	r3, [r7, #15]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d17d      	bne.n	8004114 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004018:	4b41      	ldr	r3, [pc, #260]	@ (8004120 <RCCEx_PLLSAI1_Config+0x1e4>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a40      	ldr	r2, [pc, #256]	@ (8004120 <RCCEx_PLLSAI1_Config+0x1e4>)
 800401e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004022:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004024:	f7fd ffcc 	bl	8001fc0 <HAL_GetTick>
 8004028:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800402a:	e009      	b.n	8004040 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800402c:	f7fd ffc8 	bl	8001fc0 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b02      	cmp	r3, #2
 8004038:	d902      	bls.n	8004040 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	73fb      	strb	r3, [r7, #15]
        break;
 800403e:	e005      	b.n	800404c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004040:	4b37      	ldr	r3, [pc, #220]	@ (8004120 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d1ef      	bne.n	800402c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800404c:	7bfb      	ldrb	r3, [r7, #15]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d160      	bne.n	8004114 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d111      	bne.n	800407c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004058:	4b31      	ldr	r3, [pc, #196]	@ (8004120 <RCCEx_PLLSAI1_Config+0x1e4>)
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004060:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	6892      	ldr	r2, [r2, #8]
 8004068:	0211      	lsls	r1, r2, #8
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	68d2      	ldr	r2, [r2, #12]
 800406e:	0912      	lsrs	r2, r2, #4
 8004070:	0452      	lsls	r2, r2, #17
 8004072:	430a      	orrs	r2, r1
 8004074:	492a      	ldr	r1, [pc, #168]	@ (8004120 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004076:	4313      	orrs	r3, r2
 8004078:	610b      	str	r3, [r1, #16]
 800407a:	e027      	b.n	80040cc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d112      	bne.n	80040a8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004082:	4b27      	ldr	r3, [pc, #156]	@ (8004120 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800408a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	6892      	ldr	r2, [r2, #8]
 8004092:	0211      	lsls	r1, r2, #8
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	6912      	ldr	r2, [r2, #16]
 8004098:	0852      	lsrs	r2, r2, #1
 800409a:	3a01      	subs	r2, #1
 800409c:	0552      	lsls	r2, r2, #21
 800409e:	430a      	orrs	r2, r1
 80040a0:	491f      	ldr	r1, [pc, #124]	@ (8004120 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	610b      	str	r3, [r1, #16]
 80040a6:	e011      	b.n	80040cc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040a8:	4b1d      	ldr	r3, [pc, #116]	@ (8004120 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80040b0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	6892      	ldr	r2, [r2, #8]
 80040b8:	0211      	lsls	r1, r2, #8
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	6952      	ldr	r2, [r2, #20]
 80040be:	0852      	lsrs	r2, r2, #1
 80040c0:	3a01      	subs	r2, #1
 80040c2:	0652      	lsls	r2, r2, #25
 80040c4:	430a      	orrs	r2, r1
 80040c6:	4916      	ldr	r1, [pc, #88]	@ (8004120 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80040cc:	4b14      	ldr	r3, [pc, #80]	@ (8004120 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a13      	ldr	r2, [pc, #76]	@ (8004120 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040d2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80040d6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040d8:	f7fd ff72 	bl	8001fc0 <HAL_GetTick>
 80040dc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80040de:	e009      	b.n	80040f4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80040e0:	f7fd ff6e 	bl	8001fc0 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d902      	bls.n	80040f4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	73fb      	strb	r3, [r7, #15]
          break;
 80040f2:	e005      	b.n	8004100 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80040f4:	4b0a      	ldr	r3, [pc, #40]	@ (8004120 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d0ef      	beq.n	80040e0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004100:	7bfb      	ldrb	r3, [r7, #15]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d106      	bne.n	8004114 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004106:	4b06      	ldr	r3, [pc, #24]	@ (8004120 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004108:	691a      	ldr	r2, [r3, #16]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	4904      	ldr	r1, [pc, #16]	@ (8004120 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004110:	4313      	orrs	r3, r2
 8004112:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004114:	7bfb      	ldrb	r3, [r7, #15]
}
 8004116:	4618      	mov	r0, r3
 8004118:	3710      	adds	r7, #16
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	40021000 	.word	0x40021000

08004124 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800412e:	2300      	movs	r3, #0
 8004130:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004132:	4b6a      	ldr	r3, [pc, #424]	@ (80042dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	f003 0303 	and.w	r3, r3, #3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d018      	beq.n	8004170 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800413e:	4b67      	ldr	r3, [pc, #412]	@ (80042dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	f003 0203 	and.w	r2, r3, #3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	429a      	cmp	r2, r3
 800414c:	d10d      	bne.n	800416a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
       ||
 8004152:	2b00      	cmp	r3, #0
 8004154:	d009      	beq.n	800416a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004156:	4b61      	ldr	r3, [pc, #388]	@ (80042dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	091b      	lsrs	r3, r3, #4
 800415c:	f003 0307 	and.w	r3, r3, #7
 8004160:	1c5a      	adds	r2, r3, #1
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
       ||
 8004166:	429a      	cmp	r2, r3
 8004168:	d047      	beq.n	80041fa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	73fb      	strb	r3, [r7, #15]
 800416e:	e044      	b.n	80041fa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2b03      	cmp	r3, #3
 8004176:	d018      	beq.n	80041aa <RCCEx_PLLSAI2_Config+0x86>
 8004178:	2b03      	cmp	r3, #3
 800417a:	d825      	bhi.n	80041c8 <RCCEx_PLLSAI2_Config+0xa4>
 800417c:	2b01      	cmp	r3, #1
 800417e:	d002      	beq.n	8004186 <RCCEx_PLLSAI2_Config+0x62>
 8004180:	2b02      	cmp	r3, #2
 8004182:	d009      	beq.n	8004198 <RCCEx_PLLSAI2_Config+0x74>
 8004184:	e020      	b.n	80041c8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004186:	4b55      	ldr	r3, [pc, #340]	@ (80042dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	2b00      	cmp	r3, #0
 8004190:	d11d      	bne.n	80041ce <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004196:	e01a      	b.n	80041ce <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004198:	4b50      	ldr	r3, [pc, #320]	@ (80042dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d116      	bne.n	80041d2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041a8:	e013      	b.n	80041d2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80041aa:	4b4c      	ldr	r3, [pc, #304]	@ (80042dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d10f      	bne.n	80041d6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80041b6:	4b49      	ldr	r3, [pc, #292]	@ (80042dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d109      	bne.n	80041d6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80041c6:	e006      	b.n	80041d6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	73fb      	strb	r3, [r7, #15]
      break;
 80041cc:	e004      	b.n	80041d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80041ce:	bf00      	nop
 80041d0:	e002      	b.n	80041d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80041d2:	bf00      	nop
 80041d4:	e000      	b.n	80041d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80041d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80041d8:	7bfb      	ldrb	r3, [r7, #15]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d10d      	bne.n	80041fa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80041de:	4b3f      	ldr	r3, [pc, #252]	@ (80042dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6819      	ldr	r1, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	3b01      	subs	r3, #1
 80041f0:	011b      	lsls	r3, r3, #4
 80041f2:	430b      	orrs	r3, r1
 80041f4:	4939      	ldr	r1, [pc, #228]	@ (80042dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80041fa:	7bfb      	ldrb	r3, [r7, #15]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d167      	bne.n	80042d0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004200:	4b36      	ldr	r3, [pc, #216]	@ (80042dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a35      	ldr	r2, [pc, #212]	@ (80042dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004206:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800420a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800420c:	f7fd fed8 	bl	8001fc0 <HAL_GetTick>
 8004210:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004212:	e009      	b.n	8004228 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004214:	f7fd fed4 	bl	8001fc0 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	2b02      	cmp	r3, #2
 8004220:	d902      	bls.n	8004228 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	73fb      	strb	r3, [r7, #15]
        break;
 8004226:	e005      	b.n	8004234 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004228:	4b2c      	ldr	r3, [pc, #176]	@ (80042dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1ef      	bne.n	8004214 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004234:	7bfb      	ldrb	r3, [r7, #15]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d14a      	bne.n	80042d0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d111      	bne.n	8004264 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004240:	4b26      	ldr	r3, [pc, #152]	@ (80042dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004242:	695b      	ldr	r3, [r3, #20]
 8004244:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004248:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	6892      	ldr	r2, [r2, #8]
 8004250:	0211      	lsls	r1, r2, #8
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	68d2      	ldr	r2, [r2, #12]
 8004256:	0912      	lsrs	r2, r2, #4
 8004258:	0452      	lsls	r2, r2, #17
 800425a:	430a      	orrs	r2, r1
 800425c:	491f      	ldr	r1, [pc, #124]	@ (80042dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800425e:	4313      	orrs	r3, r2
 8004260:	614b      	str	r3, [r1, #20]
 8004262:	e011      	b.n	8004288 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004264:	4b1d      	ldr	r3, [pc, #116]	@ (80042dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004266:	695b      	ldr	r3, [r3, #20]
 8004268:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800426c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	6892      	ldr	r2, [r2, #8]
 8004274:	0211      	lsls	r1, r2, #8
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	6912      	ldr	r2, [r2, #16]
 800427a:	0852      	lsrs	r2, r2, #1
 800427c:	3a01      	subs	r2, #1
 800427e:	0652      	lsls	r2, r2, #25
 8004280:	430a      	orrs	r2, r1
 8004282:	4916      	ldr	r1, [pc, #88]	@ (80042dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004284:	4313      	orrs	r3, r2
 8004286:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004288:	4b14      	ldr	r3, [pc, #80]	@ (80042dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a13      	ldr	r2, [pc, #76]	@ (80042dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800428e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004292:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004294:	f7fd fe94 	bl	8001fc0 <HAL_GetTick>
 8004298:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800429a:	e009      	b.n	80042b0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800429c:	f7fd fe90 	bl	8001fc0 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d902      	bls.n	80042b0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	73fb      	strb	r3, [r7, #15]
          break;
 80042ae:	e005      	b.n	80042bc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80042b0:	4b0a      	ldr	r3, [pc, #40]	@ (80042dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d0ef      	beq.n	800429c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80042bc:	7bfb      	ldrb	r3, [r7, #15]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d106      	bne.n	80042d0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80042c2:	4b06      	ldr	r3, [pc, #24]	@ (80042dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80042c4:	695a      	ldr	r2, [r3, #20]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	4904      	ldr	r1, [pc, #16]	@ (80042dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80042d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3710      	adds	r7, #16
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	40021000 	.word	0x40021000

080042e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e049      	b.n	8004386 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d106      	bne.n	800430c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f7fd faa4 	bl	8001854 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2202      	movs	r2, #2
 8004310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	3304      	adds	r3, #4
 800431c:	4619      	mov	r1, r3
 800431e:	4610      	mov	r0, r2
 8004320:	f000 fb10 	bl	8004944 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3708      	adds	r7, #8
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
	...

08004390 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004390:	b480      	push	{r7}
 8004392:	b085      	sub	sp, #20
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d001      	beq.n	80043a8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e047      	b.n	8004438 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2202      	movs	r2, #2
 80043ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a23      	ldr	r2, [pc, #140]	@ (8004444 <HAL_TIM_Base_Start+0xb4>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d01d      	beq.n	80043f6 <HAL_TIM_Base_Start+0x66>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043c2:	d018      	beq.n	80043f6 <HAL_TIM_Base_Start+0x66>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a1f      	ldr	r2, [pc, #124]	@ (8004448 <HAL_TIM_Base_Start+0xb8>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d013      	beq.n	80043f6 <HAL_TIM_Base_Start+0x66>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a1e      	ldr	r2, [pc, #120]	@ (800444c <HAL_TIM_Base_Start+0xbc>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d00e      	beq.n	80043f6 <HAL_TIM_Base_Start+0x66>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a1c      	ldr	r2, [pc, #112]	@ (8004450 <HAL_TIM_Base_Start+0xc0>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d009      	beq.n	80043f6 <HAL_TIM_Base_Start+0x66>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a1b      	ldr	r2, [pc, #108]	@ (8004454 <HAL_TIM_Base_Start+0xc4>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d004      	beq.n	80043f6 <HAL_TIM_Base_Start+0x66>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a19      	ldr	r2, [pc, #100]	@ (8004458 <HAL_TIM_Base_Start+0xc8>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d115      	bne.n	8004422 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	689a      	ldr	r2, [r3, #8]
 80043fc:	4b17      	ldr	r3, [pc, #92]	@ (800445c <HAL_TIM_Base_Start+0xcc>)
 80043fe:	4013      	ands	r3, r2
 8004400:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2b06      	cmp	r3, #6
 8004406:	d015      	beq.n	8004434 <HAL_TIM_Base_Start+0xa4>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800440e:	d011      	beq.n	8004434 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f042 0201 	orr.w	r2, r2, #1
 800441e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004420:	e008      	b.n	8004434 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f042 0201 	orr.w	r2, r2, #1
 8004430:	601a      	str	r2, [r3, #0]
 8004432:	e000      	b.n	8004436 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004434:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004436:	2300      	movs	r3, #0
}
 8004438:	4618      	mov	r0, r3
 800443a:	3714      	adds	r7, #20
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr
 8004444:	40012c00 	.word	0x40012c00
 8004448:	40000400 	.word	0x40000400
 800444c:	40000800 	.word	0x40000800
 8004450:	40000c00 	.word	0x40000c00
 8004454:	40013400 	.word	0x40013400
 8004458:	40014000 	.word	0x40014000
 800445c:	00010007 	.word	0x00010007

08004460 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004460:	b480      	push	{r7}
 8004462:	b085      	sub	sp, #20
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800446e:	b2db      	uxtb	r3, r3
 8004470:	2b01      	cmp	r3, #1
 8004472:	d001      	beq.n	8004478 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e04f      	b.n	8004518 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2202      	movs	r2, #2
 800447c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68da      	ldr	r2, [r3, #12]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f042 0201 	orr.w	r2, r2, #1
 800448e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a23      	ldr	r2, [pc, #140]	@ (8004524 <HAL_TIM_Base_Start_IT+0xc4>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d01d      	beq.n	80044d6 <HAL_TIM_Base_Start_IT+0x76>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044a2:	d018      	beq.n	80044d6 <HAL_TIM_Base_Start_IT+0x76>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a1f      	ldr	r2, [pc, #124]	@ (8004528 <HAL_TIM_Base_Start_IT+0xc8>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d013      	beq.n	80044d6 <HAL_TIM_Base_Start_IT+0x76>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a1e      	ldr	r2, [pc, #120]	@ (800452c <HAL_TIM_Base_Start_IT+0xcc>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d00e      	beq.n	80044d6 <HAL_TIM_Base_Start_IT+0x76>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a1c      	ldr	r2, [pc, #112]	@ (8004530 <HAL_TIM_Base_Start_IT+0xd0>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d009      	beq.n	80044d6 <HAL_TIM_Base_Start_IT+0x76>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a1b      	ldr	r2, [pc, #108]	@ (8004534 <HAL_TIM_Base_Start_IT+0xd4>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d004      	beq.n	80044d6 <HAL_TIM_Base_Start_IT+0x76>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a19      	ldr	r2, [pc, #100]	@ (8004538 <HAL_TIM_Base_Start_IT+0xd8>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d115      	bne.n	8004502 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	689a      	ldr	r2, [r3, #8]
 80044dc:	4b17      	ldr	r3, [pc, #92]	@ (800453c <HAL_TIM_Base_Start_IT+0xdc>)
 80044de:	4013      	ands	r3, r2
 80044e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2b06      	cmp	r3, #6
 80044e6:	d015      	beq.n	8004514 <HAL_TIM_Base_Start_IT+0xb4>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044ee:	d011      	beq.n	8004514 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f042 0201 	orr.w	r2, r2, #1
 80044fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004500:	e008      	b.n	8004514 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f042 0201 	orr.w	r2, r2, #1
 8004510:	601a      	str	r2, [r3, #0]
 8004512:	e000      	b.n	8004516 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004514:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004516:	2300      	movs	r3, #0
}
 8004518:	4618      	mov	r0, r3
 800451a:	3714      	adds	r7, #20
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr
 8004524:	40012c00 	.word	0x40012c00
 8004528:	40000400 	.word	0x40000400
 800452c:	40000800 	.word	0x40000800
 8004530:	40000c00 	.word	0x40000c00
 8004534:	40013400 	.word	0x40013400
 8004538:	40014000 	.word	0x40014000
 800453c:	00010007 	.word	0x00010007

08004540 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b00      	cmp	r3, #0
 8004560:	d020      	beq.n	80045a4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	2b00      	cmp	r3, #0
 800456a:	d01b      	beq.n	80045a4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f06f 0202 	mvn.w	r2, #2
 8004574:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2201      	movs	r2, #1
 800457a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	f003 0303 	and.w	r3, r3, #3
 8004586:	2b00      	cmp	r3, #0
 8004588:	d003      	beq.n	8004592 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 f9bc 	bl	8004908 <HAL_TIM_IC_CaptureCallback>
 8004590:	e005      	b.n	800459e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 f9ae 	bl	80048f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f000 f9bf 	bl	800491c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	f003 0304 	and.w	r3, r3, #4
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d020      	beq.n	80045f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f003 0304 	and.w	r3, r3, #4
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d01b      	beq.n	80045f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f06f 0204 	mvn.w	r2, #4
 80045c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2202      	movs	r2, #2
 80045c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d003      	beq.n	80045de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 f996 	bl	8004908 <HAL_TIM_IC_CaptureCallback>
 80045dc:	e005      	b.n	80045ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f000 f988 	bl	80048f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f000 f999 	bl	800491c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	f003 0308 	and.w	r3, r3, #8
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d020      	beq.n	800463c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f003 0308 	and.w	r3, r3, #8
 8004600:	2b00      	cmp	r3, #0
 8004602:	d01b      	beq.n	800463c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f06f 0208 	mvn.w	r2, #8
 800460c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2204      	movs	r2, #4
 8004612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	69db      	ldr	r3, [r3, #28]
 800461a:	f003 0303 	and.w	r3, r3, #3
 800461e:	2b00      	cmp	r3, #0
 8004620:	d003      	beq.n	800462a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 f970 	bl	8004908 <HAL_TIM_IC_CaptureCallback>
 8004628:	e005      	b.n	8004636 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 f962 	bl	80048f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f000 f973 	bl	800491c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	f003 0310 	and.w	r3, r3, #16
 8004642:	2b00      	cmp	r3, #0
 8004644:	d020      	beq.n	8004688 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f003 0310 	and.w	r3, r3, #16
 800464c:	2b00      	cmp	r3, #0
 800464e:	d01b      	beq.n	8004688 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f06f 0210 	mvn.w	r2, #16
 8004658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2208      	movs	r2, #8
 800465e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	69db      	ldr	r3, [r3, #28]
 8004666:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800466a:	2b00      	cmp	r3, #0
 800466c:	d003      	beq.n	8004676 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 f94a 	bl	8004908 <HAL_TIM_IC_CaptureCallback>
 8004674:	e005      	b.n	8004682 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 f93c 	bl	80048f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f000 f94d 	bl	800491c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00c      	beq.n	80046ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f003 0301 	and.w	r3, r3, #1
 8004698:	2b00      	cmp	r3, #0
 800469a:	d007      	beq.n	80046ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f06f 0201 	mvn.w	r2, #1
 80046a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 f91a 	bl	80048e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d104      	bne.n	80046c0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d00c      	beq.n	80046da <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d007      	beq.n	80046da <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80046d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f000 fb07 	bl	8004ce8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d00c      	beq.n	80046fe <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d007      	beq.n	80046fe <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80046f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f000 faff 	bl	8004cfc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004704:	2b00      	cmp	r3, #0
 8004706:	d00c      	beq.n	8004722 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800470e:	2b00      	cmp	r3, #0
 8004710:	d007      	beq.n	8004722 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800471a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f000 f907 	bl	8004930 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	f003 0320 	and.w	r3, r3, #32
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00c      	beq.n	8004746 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f003 0320 	and.w	r3, r3, #32
 8004732:	2b00      	cmp	r3, #0
 8004734:	d007      	beq.n	8004746 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f06f 0220 	mvn.w	r2, #32
 800473e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f000 fac7 	bl	8004cd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004746:	bf00      	nop
 8004748:	3710      	adds	r7, #16
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}

0800474e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800474e:	b580      	push	{r7, lr}
 8004750:	b084      	sub	sp, #16
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
 8004756:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004758:	2300      	movs	r3, #0
 800475a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004762:	2b01      	cmp	r3, #1
 8004764:	d101      	bne.n	800476a <HAL_TIM_ConfigClockSource+0x1c>
 8004766:	2302      	movs	r3, #2
 8004768:	e0b6      	b.n	80048d8 <HAL_TIM_ConfigClockSource+0x18a>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2201      	movs	r2, #1
 800476e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2202      	movs	r2, #2
 8004776:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004788:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800478c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004794:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68ba      	ldr	r2, [r7, #8]
 800479c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047a6:	d03e      	beq.n	8004826 <HAL_TIM_ConfigClockSource+0xd8>
 80047a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047ac:	f200 8087 	bhi.w	80048be <HAL_TIM_ConfigClockSource+0x170>
 80047b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047b4:	f000 8086 	beq.w	80048c4 <HAL_TIM_ConfigClockSource+0x176>
 80047b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047bc:	d87f      	bhi.n	80048be <HAL_TIM_ConfigClockSource+0x170>
 80047be:	2b70      	cmp	r3, #112	@ 0x70
 80047c0:	d01a      	beq.n	80047f8 <HAL_TIM_ConfigClockSource+0xaa>
 80047c2:	2b70      	cmp	r3, #112	@ 0x70
 80047c4:	d87b      	bhi.n	80048be <HAL_TIM_ConfigClockSource+0x170>
 80047c6:	2b60      	cmp	r3, #96	@ 0x60
 80047c8:	d050      	beq.n	800486c <HAL_TIM_ConfigClockSource+0x11e>
 80047ca:	2b60      	cmp	r3, #96	@ 0x60
 80047cc:	d877      	bhi.n	80048be <HAL_TIM_ConfigClockSource+0x170>
 80047ce:	2b50      	cmp	r3, #80	@ 0x50
 80047d0:	d03c      	beq.n	800484c <HAL_TIM_ConfigClockSource+0xfe>
 80047d2:	2b50      	cmp	r3, #80	@ 0x50
 80047d4:	d873      	bhi.n	80048be <HAL_TIM_ConfigClockSource+0x170>
 80047d6:	2b40      	cmp	r3, #64	@ 0x40
 80047d8:	d058      	beq.n	800488c <HAL_TIM_ConfigClockSource+0x13e>
 80047da:	2b40      	cmp	r3, #64	@ 0x40
 80047dc:	d86f      	bhi.n	80048be <HAL_TIM_ConfigClockSource+0x170>
 80047de:	2b30      	cmp	r3, #48	@ 0x30
 80047e0:	d064      	beq.n	80048ac <HAL_TIM_ConfigClockSource+0x15e>
 80047e2:	2b30      	cmp	r3, #48	@ 0x30
 80047e4:	d86b      	bhi.n	80048be <HAL_TIM_ConfigClockSource+0x170>
 80047e6:	2b20      	cmp	r3, #32
 80047e8:	d060      	beq.n	80048ac <HAL_TIM_ConfigClockSource+0x15e>
 80047ea:	2b20      	cmp	r3, #32
 80047ec:	d867      	bhi.n	80048be <HAL_TIM_ConfigClockSource+0x170>
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d05c      	beq.n	80048ac <HAL_TIM_ConfigClockSource+0x15e>
 80047f2:	2b10      	cmp	r3, #16
 80047f4:	d05a      	beq.n	80048ac <HAL_TIM_ConfigClockSource+0x15e>
 80047f6:	e062      	b.n	80048be <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004808:	f000 f9bc 	bl	8004b84 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800481a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68ba      	ldr	r2, [r7, #8]
 8004822:	609a      	str	r2, [r3, #8]
      break;
 8004824:	e04f      	b.n	80048c6 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004836:	f000 f9a5 	bl	8004b84 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	689a      	ldr	r2, [r3, #8]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004848:	609a      	str	r2, [r3, #8]
      break;
 800484a:	e03c      	b.n	80048c6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004858:	461a      	mov	r2, r3
 800485a:	f000 f919 	bl	8004a90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2150      	movs	r1, #80	@ 0x50
 8004864:	4618      	mov	r0, r3
 8004866:	f000 f972 	bl	8004b4e <TIM_ITRx_SetConfig>
      break;
 800486a:	e02c      	b.n	80048c6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004878:	461a      	mov	r2, r3
 800487a:	f000 f938 	bl	8004aee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2160      	movs	r1, #96	@ 0x60
 8004884:	4618      	mov	r0, r3
 8004886:	f000 f962 	bl	8004b4e <TIM_ITRx_SetConfig>
      break;
 800488a:	e01c      	b.n	80048c6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004898:	461a      	mov	r2, r3
 800489a:	f000 f8f9 	bl	8004a90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2140      	movs	r1, #64	@ 0x40
 80048a4:	4618      	mov	r0, r3
 80048a6:	f000 f952 	bl	8004b4e <TIM_ITRx_SetConfig>
      break;
 80048aa:	e00c      	b.n	80048c6 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4619      	mov	r1, r3
 80048b6:	4610      	mov	r0, r2
 80048b8:	f000 f949 	bl	8004b4e <TIM_ITRx_SetConfig>
      break;
 80048bc:	e003      	b.n	80048c6 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	73fb      	strb	r3, [r7, #15]
      break;
 80048c2:	e000      	b.n	80048c6 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80048c4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2201      	movs	r2, #1
 80048ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80048d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3710      	adds	r7, #16
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80048e8:	bf00      	nop
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048fc:	bf00      	nop
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004910:	bf00      	nop
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004924:	bf00      	nop
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004938:	bf00      	nop
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004944:	b480      	push	{r7}
 8004946:	b085      	sub	sp, #20
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a46      	ldr	r2, [pc, #280]	@ (8004a70 <TIM_Base_SetConfig+0x12c>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d013      	beq.n	8004984 <TIM_Base_SetConfig+0x40>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004962:	d00f      	beq.n	8004984 <TIM_Base_SetConfig+0x40>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a43      	ldr	r2, [pc, #268]	@ (8004a74 <TIM_Base_SetConfig+0x130>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d00b      	beq.n	8004984 <TIM_Base_SetConfig+0x40>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4a42      	ldr	r2, [pc, #264]	@ (8004a78 <TIM_Base_SetConfig+0x134>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d007      	beq.n	8004984 <TIM_Base_SetConfig+0x40>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a41      	ldr	r2, [pc, #260]	@ (8004a7c <TIM_Base_SetConfig+0x138>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d003      	beq.n	8004984 <TIM_Base_SetConfig+0x40>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a40      	ldr	r2, [pc, #256]	@ (8004a80 <TIM_Base_SetConfig+0x13c>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d108      	bne.n	8004996 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800498a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	4313      	orrs	r3, r2
 8004994:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a35      	ldr	r2, [pc, #212]	@ (8004a70 <TIM_Base_SetConfig+0x12c>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d01f      	beq.n	80049de <TIM_Base_SetConfig+0x9a>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049a4:	d01b      	beq.n	80049de <TIM_Base_SetConfig+0x9a>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a32      	ldr	r2, [pc, #200]	@ (8004a74 <TIM_Base_SetConfig+0x130>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d017      	beq.n	80049de <TIM_Base_SetConfig+0x9a>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a31      	ldr	r2, [pc, #196]	@ (8004a78 <TIM_Base_SetConfig+0x134>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d013      	beq.n	80049de <TIM_Base_SetConfig+0x9a>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a30      	ldr	r2, [pc, #192]	@ (8004a7c <TIM_Base_SetConfig+0x138>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d00f      	beq.n	80049de <TIM_Base_SetConfig+0x9a>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a2f      	ldr	r2, [pc, #188]	@ (8004a80 <TIM_Base_SetConfig+0x13c>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d00b      	beq.n	80049de <TIM_Base_SetConfig+0x9a>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a2e      	ldr	r2, [pc, #184]	@ (8004a84 <TIM_Base_SetConfig+0x140>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d007      	beq.n	80049de <TIM_Base_SetConfig+0x9a>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a2d      	ldr	r2, [pc, #180]	@ (8004a88 <TIM_Base_SetConfig+0x144>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d003      	beq.n	80049de <TIM_Base_SetConfig+0x9a>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a2c      	ldr	r2, [pc, #176]	@ (8004a8c <TIM_Base_SetConfig+0x148>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d108      	bne.n	80049f0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	68fa      	ldr	r2, [r7, #12]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	695b      	ldr	r3, [r3, #20]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	68fa      	ldr	r2, [r7, #12]
 8004a02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	689a      	ldr	r2, [r3, #8]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4a16      	ldr	r2, [pc, #88]	@ (8004a70 <TIM_Base_SetConfig+0x12c>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d00f      	beq.n	8004a3c <TIM_Base_SetConfig+0xf8>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a18      	ldr	r2, [pc, #96]	@ (8004a80 <TIM_Base_SetConfig+0x13c>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d00b      	beq.n	8004a3c <TIM_Base_SetConfig+0xf8>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a17      	ldr	r2, [pc, #92]	@ (8004a84 <TIM_Base_SetConfig+0x140>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d007      	beq.n	8004a3c <TIM_Base_SetConfig+0xf8>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a16      	ldr	r2, [pc, #88]	@ (8004a88 <TIM_Base_SetConfig+0x144>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d003      	beq.n	8004a3c <TIM_Base_SetConfig+0xf8>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a15      	ldr	r2, [pc, #84]	@ (8004a8c <TIM_Base_SetConfig+0x148>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d103      	bne.n	8004a44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	691a      	ldr	r2, [r3, #16]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	f003 0301 	and.w	r3, r3, #1
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d105      	bne.n	8004a62 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	f023 0201 	bic.w	r2, r3, #1
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	611a      	str	r2, [r3, #16]
  }
}
 8004a62:	bf00      	nop
 8004a64:	3714      	adds	r7, #20
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	40012c00 	.word	0x40012c00
 8004a74:	40000400 	.word	0x40000400
 8004a78:	40000800 	.word	0x40000800
 8004a7c:	40000c00 	.word	0x40000c00
 8004a80:	40013400 	.word	0x40013400
 8004a84:	40014000 	.word	0x40014000
 8004a88:	40014400 	.word	0x40014400
 8004a8c:	40014800 	.word	0x40014800

08004a90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b087      	sub	sp, #28
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6a1b      	ldr	r3, [r3, #32]
 8004aa0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6a1b      	ldr	r3, [r3, #32]
 8004aa6:	f023 0201 	bic.w	r2, r3, #1
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004aba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	011b      	lsls	r3, r3, #4
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	f023 030a 	bic.w	r3, r3, #10
 8004acc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ace:	697a      	ldr	r2, [r7, #20]
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	697a      	ldr	r2, [r7, #20]
 8004ae0:	621a      	str	r2, [r3, #32]
}
 8004ae2:	bf00      	nop
 8004ae4:	371c      	adds	r7, #28
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr

08004aee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004aee:	b480      	push	{r7}
 8004af0:	b087      	sub	sp, #28
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	60f8      	str	r0, [r7, #12]
 8004af6:	60b9      	str	r1, [r7, #8]
 8004af8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6a1b      	ldr	r3, [r3, #32]
 8004b04:	f023 0210 	bic.w	r2, r3, #16
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004b18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	031b      	lsls	r3, r3, #12
 8004b1e:	693a      	ldr	r2, [r7, #16]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004b2a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	011b      	lsls	r3, r3, #4
 8004b30:	697a      	ldr	r2, [r7, #20]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	693a      	ldr	r2, [r7, #16]
 8004b3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	697a      	ldr	r2, [r7, #20]
 8004b40:	621a      	str	r2, [r3, #32]
}
 8004b42:	bf00      	nop
 8004b44:	371c      	adds	r7, #28
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr

08004b4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b4e:	b480      	push	{r7}
 8004b50:	b085      	sub	sp, #20
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
 8004b56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b66:	683a      	ldr	r2, [r7, #0]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	f043 0307 	orr.w	r3, r3, #7
 8004b70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	609a      	str	r2, [r3, #8]
}
 8004b78:	bf00      	nop
 8004b7a:	3714      	adds	r7, #20
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b087      	sub	sp, #28
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	607a      	str	r2, [r7, #4]
 8004b90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	021a      	lsls	r2, r3, #8
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	431a      	orrs	r2, r3
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	697a      	ldr	r2, [r7, #20]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	697a      	ldr	r2, [r7, #20]
 8004bb6:	609a      	str	r2, [r3, #8]
}
 8004bb8:	bf00      	nop
 8004bba:	371c      	adds	r7, #28
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d101      	bne.n	8004bdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004bd8:	2302      	movs	r3, #2
 8004bda:	e068      	b.n	8004cae <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2202      	movs	r2, #2
 8004be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a2e      	ldr	r2, [pc, #184]	@ (8004cbc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d004      	beq.n	8004c10 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a2d      	ldr	r2, [pc, #180]	@ (8004cc0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d108      	bne.n	8004c22 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004c16:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c28:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a1e      	ldr	r2, [pc, #120]	@ (8004cbc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d01d      	beq.n	8004c82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c4e:	d018      	beq.n	8004c82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a1b      	ldr	r2, [pc, #108]	@ (8004cc4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d013      	beq.n	8004c82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a1a      	ldr	r2, [pc, #104]	@ (8004cc8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d00e      	beq.n	8004c82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a18      	ldr	r2, [pc, #96]	@ (8004ccc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d009      	beq.n	8004c82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a13      	ldr	r2, [pc, #76]	@ (8004cc0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d004      	beq.n	8004c82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a14      	ldr	r2, [pc, #80]	@ (8004cd0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d10c      	bne.n	8004c9c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	68ba      	ldr	r2, [r7, #8]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68ba      	ldr	r2, [r7, #8]
 8004c9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3714      	adds	r7, #20
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	40012c00 	.word	0x40012c00
 8004cc0:	40013400 	.word	0x40013400
 8004cc4:	40000400 	.word	0x40000400
 8004cc8:	40000800 	.word	0x40000800
 8004ccc:	40000c00 	.word	0x40000c00
 8004cd0:	40014000 	.word	0x40014000

08004cd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004cdc:	bf00      	nop
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004cf0:	bf00      	nop
 8004cf2:	370c      	adds	r7, #12
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004d04:	bf00      	nop
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d101      	bne.n	8004d22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e040      	b.n	8004da4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d106      	bne.n	8004d38 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f7fc fdc6 	bl	80018c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2224      	movs	r2, #36	@ 0x24
 8004d3c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f022 0201 	bic.w	r2, r2, #1
 8004d4c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d002      	beq.n	8004d5c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f000 ff58 	bl	8005c0c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f000 fc9d 	bl	800569c <UART_SetConfig>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d101      	bne.n	8004d6c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e01b      	b.n	8004da4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	685a      	ldr	r2, [r3, #4]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	689a      	ldr	r2, [r3, #8]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004d8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f042 0201 	orr.w	r2, r2, #1
 8004d9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f000 ffd7 	bl	8005d50 <UART_CheckIdleState>
 8004da2:	4603      	mov	r3, r0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3708      	adds	r7, #8
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b08a      	sub	sp, #40	@ 0x28
 8004db0:	af02      	add	r7, sp, #8
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	603b      	str	r3, [r7, #0]
 8004db8:	4613      	mov	r3, r2
 8004dba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004dc0:	2b20      	cmp	r3, #32
 8004dc2:	d177      	bne.n	8004eb4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d002      	beq.n	8004dd0 <HAL_UART_Transmit+0x24>
 8004dca:	88fb      	ldrh	r3, [r7, #6]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d101      	bne.n	8004dd4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e070      	b.n	8004eb6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2221      	movs	r2, #33	@ 0x21
 8004de0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004de2:	f7fd f8ed 	bl	8001fc0 <HAL_GetTick>
 8004de6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	88fa      	ldrh	r2, [r7, #6]
 8004dec:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	88fa      	ldrh	r2, [r7, #6]
 8004df4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e00:	d108      	bne.n	8004e14 <HAL_UART_Transmit+0x68>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d104      	bne.n	8004e14 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	61bb      	str	r3, [r7, #24]
 8004e12:	e003      	b.n	8004e1c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004e1c:	e02f      	b.n	8004e7e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	9300      	str	r3, [sp, #0]
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	2200      	movs	r2, #0
 8004e26:	2180      	movs	r1, #128	@ 0x80
 8004e28:	68f8      	ldr	r0, [r7, #12]
 8004e2a:	f001 f839 	bl	8005ea0 <UART_WaitOnFlagUntilTimeout>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d004      	beq.n	8004e3e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2220      	movs	r2, #32
 8004e38:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e03b      	b.n	8004eb6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d10b      	bne.n	8004e5c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	881a      	ldrh	r2, [r3, #0]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e50:	b292      	uxth	r2, r2
 8004e52:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	3302      	adds	r3, #2
 8004e58:	61bb      	str	r3, [r7, #24]
 8004e5a:	e007      	b.n	8004e6c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	781a      	ldrb	r2, [r3, #0]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	3301      	adds	r3, #1
 8004e6a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	3b01      	subs	r3, #1
 8004e76:	b29a      	uxth	r2, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d1c9      	bne.n	8004e1e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	9300      	str	r3, [sp, #0]
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	2200      	movs	r2, #0
 8004e92:	2140      	movs	r1, #64	@ 0x40
 8004e94:	68f8      	ldr	r0, [r7, #12]
 8004e96:	f001 f803 	bl	8005ea0 <UART_WaitOnFlagUntilTimeout>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d004      	beq.n	8004eaa <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2220      	movs	r2, #32
 8004ea4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e005      	b.n	8004eb6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2220      	movs	r2, #32
 8004eae:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	e000      	b.n	8004eb6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004eb4:	2302      	movs	r3, #2
  }
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3720      	adds	r7, #32
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}

08004ebe <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ebe:	b580      	push	{r7, lr}
 8004ec0:	b08a      	sub	sp, #40	@ 0x28
 8004ec2:	af02      	add	r7, sp, #8
 8004ec4:	60f8      	str	r0, [r7, #12]
 8004ec6:	60b9      	str	r1, [r7, #8]
 8004ec8:	603b      	str	r3, [r7, #0]
 8004eca:	4613      	mov	r3, r2
 8004ecc:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ed4:	2b20      	cmp	r3, #32
 8004ed6:	f040 80b6 	bne.w	8005046 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d002      	beq.n	8004ee6 <HAL_UART_Receive+0x28>
 8004ee0:	88fb      	ldrh	r3, [r7, #6]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d101      	bne.n	8004eea <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e0ae      	b.n	8005048 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2200      	movs	r2, #0
 8004eee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2222      	movs	r2, #34	@ 0x22
 8004ef6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f00:	f7fd f85e 	bl	8001fc0 <HAL_GetTick>
 8004f04:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	88fa      	ldrh	r2, [r7, #6]
 8004f0a:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	88fa      	ldrh	r2, [r7, #6]
 8004f12:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f1e:	d10e      	bne.n	8004f3e <HAL_UART_Receive+0x80>
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	691b      	ldr	r3, [r3, #16]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d105      	bne.n	8004f34 <HAL_UART_Receive+0x76>
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004f2e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004f32:	e02d      	b.n	8004f90 <HAL_UART_Receive+0xd2>
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	22ff      	movs	r2, #255	@ 0xff
 8004f38:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004f3c:	e028      	b.n	8004f90 <HAL_UART_Receive+0xd2>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d10d      	bne.n	8004f62 <HAL_UART_Receive+0xa4>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d104      	bne.n	8004f58 <HAL_UART_Receive+0x9a>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	22ff      	movs	r2, #255	@ 0xff
 8004f52:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004f56:	e01b      	b.n	8004f90 <HAL_UART_Receive+0xd2>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	227f      	movs	r2, #127	@ 0x7f
 8004f5c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004f60:	e016      	b.n	8004f90 <HAL_UART_Receive+0xd2>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f6a:	d10d      	bne.n	8004f88 <HAL_UART_Receive+0xca>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d104      	bne.n	8004f7e <HAL_UART_Receive+0xc0>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	227f      	movs	r2, #127	@ 0x7f
 8004f78:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004f7c:	e008      	b.n	8004f90 <HAL_UART_Receive+0xd2>
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	223f      	movs	r2, #63	@ 0x3f
 8004f82:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004f86:	e003      	b.n	8004f90 <HAL_UART_Receive+0xd2>
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004f96:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fa0:	d108      	bne.n	8004fb4 <HAL_UART_Receive+0xf6>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d104      	bne.n	8004fb4 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004faa:	2300      	movs	r3, #0
 8004fac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	61bb      	str	r3, [r7, #24]
 8004fb2:	e003      	b.n	8004fbc <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004fbc:	e037      	b.n	800502e <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	9300      	str	r3, [sp, #0]
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	2120      	movs	r1, #32
 8004fc8:	68f8      	ldr	r0, [r7, #12]
 8004fca:	f000 ff69 	bl	8005ea0 <UART_WaitOnFlagUntilTimeout>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d005      	beq.n	8004fe0 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2220      	movs	r2, #32
 8004fd8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e033      	b.n	8005048 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d10c      	bne.n	8005000 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004fec:	b29a      	uxth	r2, r3
 8004fee:	8a7b      	ldrh	r3, [r7, #18]
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	b29a      	uxth	r2, r3
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	3302      	adds	r3, #2
 8004ffc:	61bb      	str	r3, [r7, #24]
 8004ffe:	e00d      	b.n	800501c <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005006:	b29b      	uxth	r3, r3
 8005008:	b2da      	uxtb	r2, r3
 800500a:	8a7b      	ldrh	r3, [r7, #18]
 800500c:	b2db      	uxtb	r3, r3
 800500e:	4013      	ands	r3, r2
 8005010:	b2da      	uxtb	r2, r3
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	3301      	adds	r3, #1
 800501a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005022:	b29b      	uxth	r3, r3
 8005024:	3b01      	subs	r3, #1
 8005026:	b29a      	uxth	r2, r3
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005034:	b29b      	uxth	r3, r3
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1c1      	bne.n	8004fbe <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2220      	movs	r2, #32
 800503e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8005042:	2300      	movs	r3, #0
 8005044:	e000      	b.n	8005048 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8005046:	2302      	movs	r3, #2
  }
}
 8005048:	4618      	mov	r0, r3
 800504a:	3720      	adds	r7, #32
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b0ba      	sub	sp, #232	@ 0xe8
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	69db      	ldr	r3, [r3, #28]
 800505e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005076:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800507a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800507e:	4013      	ands	r3, r2
 8005080:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005084:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005088:	2b00      	cmp	r3, #0
 800508a:	d115      	bne.n	80050b8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800508c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005090:	f003 0320 	and.w	r3, r3, #32
 8005094:	2b00      	cmp	r3, #0
 8005096:	d00f      	beq.n	80050b8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005098:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800509c:	f003 0320 	and.w	r3, r3, #32
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d009      	beq.n	80050b8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f000 82ca 	beq.w	8005642 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	4798      	blx	r3
      }
      return;
 80050b6:	e2c4      	b.n	8005642 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80050b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80050bc:	2b00      	cmp	r3, #0
 80050be:	f000 8117 	beq.w	80052f0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80050c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050c6:	f003 0301 	and.w	r3, r3, #1
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d106      	bne.n	80050dc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80050ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80050d2:	4b85      	ldr	r3, [pc, #532]	@ (80052e8 <HAL_UART_IRQHandler+0x298>)
 80050d4:	4013      	ands	r3, r2
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	f000 810a 	beq.w	80052f0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80050dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050e0:	f003 0301 	and.w	r3, r3, #1
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d011      	beq.n	800510c <HAL_UART_IRQHandler+0xbc>
 80050e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d00b      	beq.n	800510c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	2201      	movs	r2, #1
 80050fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005102:	f043 0201 	orr.w	r2, r3, #1
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800510c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005110:	f003 0302 	and.w	r3, r3, #2
 8005114:	2b00      	cmp	r3, #0
 8005116:	d011      	beq.n	800513c <HAL_UART_IRQHandler+0xec>
 8005118:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800511c:	f003 0301 	and.w	r3, r3, #1
 8005120:	2b00      	cmp	r3, #0
 8005122:	d00b      	beq.n	800513c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2202      	movs	r2, #2
 800512a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005132:	f043 0204 	orr.w	r2, r3, #4
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800513c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005140:	f003 0304 	and.w	r3, r3, #4
 8005144:	2b00      	cmp	r3, #0
 8005146:	d011      	beq.n	800516c <HAL_UART_IRQHandler+0x11c>
 8005148:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800514c:	f003 0301 	and.w	r3, r3, #1
 8005150:	2b00      	cmp	r3, #0
 8005152:	d00b      	beq.n	800516c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2204      	movs	r2, #4
 800515a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005162:	f043 0202 	orr.w	r2, r3, #2
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800516c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005170:	f003 0308 	and.w	r3, r3, #8
 8005174:	2b00      	cmp	r3, #0
 8005176:	d017      	beq.n	80051a8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005178:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800517c:	f003 0320 	and.w	r3, r3, #32
 8005180:	2b00      	cmp	r3, #0
 8005182:	d105      	bne.n	8005190 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005184:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005188:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800518c:	2b00      	cmp	r3, #0
 800518e:	d00b      	beq.n	80051a8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2208      	movs	r2, #8
 8005196:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800519e:	f043 0208 	orr.w	r2, r3, #8
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80051a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d012      	beq.n	80051da <HAL_UART_IRQHandler+0x18a>
 80051b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051b8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d00c      	beq.n	80051da <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80051c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051d0:	f043 0220 	orr.w	r2, r3, #32
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	f000 8230 	beq.w	8005646 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80051e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051ea:	f003 0320 	and.w	r3, r3, #32
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00d      	beq.n	800520e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80051f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051f6:	f003 0320 	and.w	r3, r3, #32
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d007      	beq.n	800520e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005202:	2b00      	cmp	r3, #0
 8005204:	d003      	beq.n	800520e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005214:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005222:	2b40      	cmp	r3, #64	@ 0x40
 8005224:	d005      	beq.n	8005232 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005226:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800522a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800522e:	2b00      	cmp	r3, #0
 8005230:	d04f      	beq.n	80052d2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 fea1 	bl	8005f7a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005242:	2b40      	cmp	r3, #64	@ 0x40
 8005244:	d141      	bne.n	80052ca <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	3308      	adds	r3, #8
 800524c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005250:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005254:	e853 3f00 	ldrex	r3, [r3]
 8005258:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800525c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005260:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005264:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	3308      	adds	r3, #8
 800526e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005272:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005276:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800527a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800527e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005282:	e841 2300 	strex	r3, r2, [r1]
 8005286:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800528a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d1d9      	bne.n	8005246 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005296:	2b00      	cmp	r3, #0
 8005298:	d013      	beq.n	80052c2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800529e:	4a13      	ldr	r2, [pc, #76]	@ (80052ec <HAL_UART_IRQHandler+0x29c>)
 80052a0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052a6:	4618      	mov	r0, r3
 80052a8:	f7fd fa0a 	bl	80026c0 <HAL_DMA_Abort_IT>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d017      	beq.n	80052e2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80052bc:	4610      	mov	r0, r2
 80052be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052c0:	e00f      	b.n	80052e2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f9d4 	bl	8005670 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052c8:	e00b      	b.n	80052e2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 f9d0 	bl	8005670 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052d0:	e007      	b.n	80052e2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 f9cc 	bl	8005670 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80052e0:	e1b1      	b.n	8005646 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052e2:	bf00      	nop
    return;
 80052e4:	e1af      	b.n	8005646 <HAL_UART_IRQHandler+0x5f6>
 80052e6:	bf00      	nop
 80052e8:	04000120 	.word	0x04000120
 80052ec:	08006043 	.word	0x08006043

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	f040 816a 	bne.w	80055ce <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80052fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052fe:	f003 0310 	and.w	r3, r3, #16
 8005302:	2b00      	cmp	r3, #0
 8005304:	f000 8163 	beq.w	80055ce <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800530c:	f003 0310 	and.w	r3, r3, #16
 8005310:	2b00      	cmp	r3, #0
 8005312:	f000 815c 	beq.w	80055ce <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2210      	movs	r2, #16
 800531c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005328:	2b40      	cmp	r3, #64	@ 0x40
 800532a:	f040 80d4 	bne.w	80054d6 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800533a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800533e:	2b00      	cmp	r3, #0
 8005340:	f000 80ad 	beq.w	800549e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800534a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800534e:	429a      	cmp	r2, r3
 8005350:	f080 80a5 	bcs.w	800549e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800535a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0320 	and.w	r3, r3, #32
 800536a:	2b00      	cmp	r3, #0
 800536c:	f040 8086 	bne.w	800547c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005378:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800537c:	e853 3f00 	ldrex	r3, [r3]
 8005380:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005384:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005388:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800538c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	461a      	mov	r2, r3
 8005396:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800539a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800539e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80053a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80053aa:	e841 2300 	strex	r3, r2, [r1]
 80053ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80053b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d1da      	bne.n	8005370 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	3308      	adds	r3, #8
 80053c0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80053c4:	e853 3f00 	ldrex	r3, [r3]
 80053c8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80053ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80053cc:	f023 0301 	bic.w	r3, r3, #1
 80053d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	3308      	adds	r3, #8
 80053da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80053de:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80053e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80053e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80053ea:	e841 2300 	strex	r3, r2, [r1]
 80053ee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80053f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d1e1      	bne.n	80053ba <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	3308      	adds	r3, #8
 80053fc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005400:	e853 3f00 	ldrex	r3, [r3]
 8005404:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005406:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005408:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800540c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	3308      	adds	r3, #8
 8005416:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800541a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800541c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800541e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005420:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005422:	e841 2300 	strex	r3, r2, [r1]
 8005426:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005428:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800542a:	2b00      	cmp	r3, #0
 800542c:	d1e3      	bne.n	80053f6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2220      	movs	r2, #32
 8005432:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005442:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005444:	e853 3f00 	ldrex	r3, [r3]
 8005448:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800544a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800544c:	f023 0310 	bic.w	r3, r3, #16
 8005450:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	461a      	mov	r2, r3
 800545a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800545e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005460:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005462:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005464:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005466:	e841 2300 	strex	r3, r2, [r1]
 800546a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800546c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800546e:	2b00      	cmp	r3, #0
 8005470:	d1e4      	bne.n	800543c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005476:	4618      	mov	r0, r3
 8005478:	f7fd f8e4 	bl	8002644 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2202      	movs	r2, #2
 8005480:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800548e:	b29b      	uxth	r3, r3
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	b29b      	uxth	r3, r3
 8005494:	4619      	mov	r1, r3
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 f8f4 	bl	8005684 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800549c:	e0d5      	b.n	800564a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80054a4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80054a8:	429a      	cmp	r2, r3
 80054aa:	f040 80ce 	bne.w	800564a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 0320 	and.w	r3, r3, #32
 80054ba:	2b20      	cmp	r3, #32
 80054bc:	f040 80c5 	bne.w	800564a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2202      	movs	r2, #2
 80054c4:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80054cc:	4619      	mov	r1, r3
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 f8d8 	bl	8005684 <HAL_UARTEx_RxEventCallback>
      return;
 80054d4:	e0b9      	b.n	800564a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	f000 80ab 	beq.w	800564e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80054f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	f000 80a6 	beq.w	800564e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800550a:	e853 3f00 	ldrex	r3, [r3]
 800550e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005510:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005512:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005516:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	461a      	mov	r2, r3
 8005520:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005524:	647b      	str	r3, [r7, #68]	@ 0x44
 8005526:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005528:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800552a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800552c:	e841 2300 	strex	r3, r2, [r1]
 8005530:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005532:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005534:	2b00      	cmp	r3, #0
 8005536:	d1e4      	bne.n	8005502 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	3308      	adds	r3, #8
 800553e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005542:	e853 3f00 	ldrex	r3, [r3]
 8005546:	623b      	str	r3, [r7, #32]
   return(result);
 8005548:	6a3b      	ldr	r3, [r7, #32]
 800554a:	f023 0301 	bic.w	r3, r3, #1
 800554e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	3308      	adds	r3, #8
 8005558:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800555c:	633a      	str	r2, [r7, #48]	@ 0x30
 800555e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005560:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005562:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005564:	e841 2300 	strex	r3, r2, [r1]
 8005568:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800556a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800556c:	2b00      	cmp	r3, #0
 800556e:	d1e3      	bne.n	8005538 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2220      	movs	r2, #32
 8005574:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	e853 3f00 	ldrex	r3, [r3]
 8005590:	60fb      	str	r3, [r7, #12]
   return(result);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f023 0310 	bic.w	r3, r3, #16
 8005598:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	461a      	mov	r2, r3
 80055a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80055a6:	61fb      	str	r3, [r7, #28]
 80055a8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055aa:	69b9      	ldr	r1, [r7, #24]
 80055ac:	69fa      	ldr	r2, [r7, #28]
 80055ae:	e841 2300 	strex	r3, r2, [r1]
 80055b2:	617b      	str	r3, [r7, #20]
   return(result);
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d1e4      	bne.n	8005584 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2202      	movs	r2, #2
 80055be:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80055c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80055c4:	4619      	mov	r1, r3
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 f85c 	bl	8005684 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80055cc:	e03f      	b.n	800564e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80055ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d00e      	beq.n	80055f8 <HAL_UART_IRQHandler+0x5a8>
 80055da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d008      	beq.n	80055f8 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80055ee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f000 fd66 	bl	80060c2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80055f6:	e02d      	b.n	8005654 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80055f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005600:	2b00      	cmp	r3, #0
 8005602:	d00e      	beq.n	8005622 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005608:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800560c:	2b00      	cmp	r3, #0
 800560e:	d008      	beq.n	8005622 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005614:	2b00      	cmp	r3, #0
 8005616:	d01c      	beq.n	8005652 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	4798      	blx	r3
    }
    return;
 8005620:	e017      	b.n	8005652 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005626:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800562a:	2b00      	cmp	r3, #0
 800562c:	d012      	beq.n	8005654 <HAL_UART_IRQHandler+0x604>
 800562e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005632:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005636:	2b00      	cmp	r3, #0
 8005638:	d00c      	beq.n	8005654 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 fd17 	bl	800606e <UART_EndTransmit_IT>
    return;
 8005640:	e008      	b.n	8005654 <HAL_UART_IRQHandler+0x604>
      return;
 8005642:	bf00      	nop
 8005644:	e006      	b.n	8005654 <HAL_UART_IRQHandler+0x604>
    return;
 8005646:	bf00      	nop
 8005648:	e004      	b.n	8005654 <HAL_UART_IRQHandler+0x604>
      return;
 800564a:	bf00      	nop
 800564c:	e002      	b.n	8005654 <HAL_UART_IRQHandler+0x604>
      return;
 800564e:	bf00      	nop
 8005650:	e000      	b.n	8005654 <HAL_UART_IRQHandler+0x604>
    return;
 8005652:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005654:	37e8      	adds	r7, #232	@ 0xe8
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop

0800565c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005664:	bf00      	nop
 8005666:	370c      	adds	r7, #12
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005678:	bf00      	nop
 800567a:	370c      	adds	r7, #12
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr

08005684 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005684:	b480      	push	{r7}
 8005686:	b083      	sub	sp, #12
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	460b      	mov	r3, r1
 800568e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005690:	bf00      	nop
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr

0800569c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800569c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056a0:	b08a      	sub	sp, #40	@ 0x28
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80056a6:	2300      	movs	r3, #0
 80056a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	689a      	ldr	r2, [r3, #8]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	431a      	orrs	r2, r3
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	695b      	ldr	r3, [r3, #20]
 80056ba:	431a      	orrs	r2, r3
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	69db      	ldr	r3, [r3, #28]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	4ba4      	ldr	r3, [pc, #656]	@ (800595c <UART_SetConfig+0x2c0>)
 80056cc:	4013      	ands	r3, r2
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	6812      	ldr	r2, [r2, #0]
 80056d2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80056d4:	430b      	orrs	r3, r1
 80056d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	68da      	ldr	r2, [r3, #12]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	430a      	orrs	r2, r1
 80056ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	699b      	ldr	r3, [r3, #24]
 80056f2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a99      	ldr	r2, [pc, #612]	@ (8005960 <UART_SetConfig+0x2c4>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d004      	beq.n	8005708 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6a1b      	ldr	r3, [r3, #32]
 8005702:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005704:	4313      	orrs	r3, r2
 8005706:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005718:	430a      	orrs	r2, r1
 800571a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a90      	ldr	r2, [pc, #576]	@ (8005964 <UART_SetConfig+0x2c8>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d126      	bne.n	8005774 <UART_SetConfig+0xd8>
 8005726:	4b90      	ldr	r3, [pc, #576]	@ (8005968 <UART_SetConfig+0x2cc>)
 8005728:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800572c:	f003 0303 	and.w	r3, r3, #3
 8005730:	2b03      	cmp	r3, #3
 8005732:	d81b      	bhi.n	800576c <UART_SetConfig+0xd0>
 8005734:	a201      	add	r2, pc, #4	@ (adr r2, 800573c <UART_SetConfig+0xa0>)
 8005736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800573a:	bf00      	nop
 800573c:	0800574d 	.word	0x0800574d
 8005740:	0800575d 	.word	0x0800575d
 8005744:	08005755 	.word	0x08005755
 8005748:	08005765 	.word	0x08005765
 800574c:	2301      	movs	r3, #1
 800574e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005752:	e116      	b.n	8005982 <UART_SetConfig+0x2e6>
 8005754:	2302      	movs	r3, #2
 8005756:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800575a:	e112      	b.n	8005982 <UART_SetConfig+0x2e6>
 800575c:	2304      	movs	r3, #4
 800575e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005762:	e10e      	b.n	8005982 <UART_SetConfig+0x2e6>
 8005764:	2308      	movs	r3, #8
 8005766:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800576a:	e10a      	b.n	8005982 <UART_SetConfig+0x2e6>
 800576c:	2310      	movs	r3, #16
 800576e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005772:	e106      	b.n	8005982 <UART_SetConfig+0x2e6>
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a7c      	ldr	r2, [pc, #496]	@ (800596c <UART_SetConfig+0x2d0>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d138      	bne.n	80057f0 <UART_SetConfig+0x154>
 800577e:	4b7a      	ldr	r3, [pc, #488]	@ (8005968 <UART_SetConfig+0x2cc>)
 8005780:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005784:	f003 030c 	and.w	r3, r3, #12
 8005788:	2b0c      	cmp	r3, #12
 800578a:	d82d      	bhi.n	80057e8 <UART_SetConfig+0x14c>
 800578c:	a201      	add	r2, pc, #4	@ (adr r2, 8005794 <UART_SetConfig+0xf8>)
 800578e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005792:	bf00      	nop
 8005794:	080057c9 	.word	0x080057c9
 8005798:	080057e9 	.word	0x080057e9
 800579c:	080057e9 	.word	0x080057e9
 80057a0:	080057e9 	.word	0x080057e9
 80057a4:	080057d9 	.word	0x080057d9
 80057a8:	080057e9 	.word	0x080057e9
 80057ac:	080057e9 	.word	0x080057e9
 80057b0:	080057e9 	.word	0x080057e9
 80057b4:	080057d1 	.word	0x080057d1
 80057b8:	080057e9 	.word	0x080057e9
 80057bc:	080057e9 	.word	0x080057e9
 80057c0:	080057e9 	.word	0x080057e9
 80057c4:	080057e1 	.word	0x080057e1
 80057c8:	2300      	movs	r3, #0
 80057ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057ce:	e0d8      	b.n	8005982 <UART_SetConfig+0x2e6>
 80057d0:	2302      	movs	r3, #2
 80057d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057d6:	e0d4      	b.n	8005982 <UART_SetConfig+0x2e6>
 80057d8:	2304      	movs	r3, #4
 80057da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057de:	e0d0      	b.n	8005982 <UART_SetConfig+0x2e6>
 80057e0:	2308      	movs	r3, #8
 80057e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057e6:	e0cc      	b.n	8005982 <UART_SetConfig+0x2e6>
 80057e8:	2310      	movs	r3, #16
 80057ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057ee:	e0c8      	b.n	8005982 <UART_SetConfig+0x2e6>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a5e      	ldr	r2, [pc, #376]	@ (8005970 <UART_SetConfig+0x2d4>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d125      	bne.n	8005846 <UART_SetConfig+0x1aa>
 80057fa:	4b5b      	ldr	r3, [pc, #364]	@ (8005968 <UART_SetConfig+0x2cc>)
 80057fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005800:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005804:	2b30      	cmp	r3, #48	@ 0x30
 8005806:	d016      	beq.n	8005836 <UART_SetConfig+0x19a>
 8005808:	2b30      	cmp	r3, #48	@ 0x30
 800580a:	d818      	bhi.n	800583e <UART_SetConfig+0x1a2>
 800580c:	2b20      	cmp	r3, #32
 800580e:	d00a      	beq.n	8005826 <UART_SetConfig+0x18a>
 8005810:	2b20      	cmp	r3, #32
 8005812:	d814      	bhi.n	800583e <UART_SetConfig+0x1a2>
 8005814:	2b00      	cmp	r3, #0
 8005816:	d002      	beq.n	800581e <UART_SetConfig+0x182>
 8005818:	2b10      	cmp	r3, #16
 800581a:	d008      	beq.n	800582e <UART_SetConfig+0x192>
 800581c:	e00f      	b.n	800583e <UART_SetConfig+0x1a2>
 800581e:	2300      	movs	r3, #0
 8005820:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005824:	e0ad      	b.n	8005982 <UART_SetConfig+0x2e6>
 8005826:	2302      	movs	r3, #2
 8005828:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800582c:	e0a9      	b.n	8005982 <UART_SetConfig+0x2e6>
 800582e:	2304      	movs	r3, #4
 8005830:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005834:	e0a5      	b.n	8005982 <UART_SetConfig+0x2e6>
 8005836:	2308      	movs	r3, #8
 8005838:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800583c:	e0a1      	b.n	8005982 <UART_SetConfig+0x2e6>
 800583e:	2310      	movs	r3, #16
 8005840:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005844:	e09d      	b.n	8005982 <UART_SetConfig+0x2e6>
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a4a      	ldr	r2, [pc, #296]	@ (8005974 <UART_SetConfig+0x2d8>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d125      	bne.n	800589c <UART_SetConfig+0x200>
 8005850:	4b45      	ldr	r3, [pc, #276]	@ (8005968 <UART_SetConfig+0x2cc>)
 8005852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005856:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800585a:	2bc0      	cmp	r3, #192	@ 0xc0
 800585c:	d016      	beq.n	800588c <UART_SetConfig+0x1f0>
 800585e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005860:	d818      	bhi.n	8005894 <UART_SetConfig+0x1f8>
 8005862:	2b80      	cmp	r3, #128	@ 0x80
 8005864:	d00a      	beq.n	800587c <UART_SetConfig+0x1e0>
 8005866:	2b80      	cmp	r3, #128	@ 0x80
 8005868:	d814      	bhi.n	8005894 <UART_SetConfig+0x1f8>
 800586a:	2b00      	cmp	r3, #0
 800586c:	d002      	beq.n	8005874 <UART_SetConfig+0x1d8>
 800586e:	2b40      	cmp	r3, #64	@ 0x40
 8005870:	d008      	beq.n	8005884 <UART_SetConfig+0x1e8>
 8005872:	e00f      	b.n	8005894 <UART_SetConfig+0x1f8>
 8005874:	2300      	movs	r3, #0
 8005876:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800587a:	e082      	b.n	8005982 <UART_SetConfig+0x2e6>
 800587c:	2302      	movs	r3, #2
 800587e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005882:	e07e      	b.n	8005982 <UART_SetConfig+0x2e6>
 8005884:	2304      	movs	r3, #4
 8005886:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800588a:	e07a      	b.n	8005982 <UART_SetConfig+0x2e6>
 800588c:	2308      	movs	r3, #8
 800588e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005892:	e076      	b.n	8005982 <UART_SetConfig+0x2e6>
 8005894:	2310      	movs	r3, #16
 8005896:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800589a:	e072      	b.n	8005982 <UART_SetConfig+0x2e6>
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a35      	ldr	r2, [pc, #212]	@ (8005978 <UART_SetConfig+0x2dc>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d12a      	bne.n	80058fc <UART_SetConfig+0x260>
 80058a6:	4b30      	ldr	r3, [pc, #192]	@ (8005968 <UART_SetConfig+0x2cc>)
 80058a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058b4:	d01a      	beq.n	80058ec <UART_SetConfig+0x250>
 80058b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058ba:	d81b      	bhi.n	80058f4 <UART_SetConfig+0x258>
 80058bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058c0:	d00c      	beq.n	80058dc <UART_SetConfig+0x240>
 80058c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058c6:	d815      	bhi.n	80058f4 <UART_SetConfig+0x258>
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d003      	beq.n	80058d4 <UART_SetConfig+0x238>
 80058cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058d0:	d008      	beq.n	80058e4 <UART_SetConfig+0x248>
 80058d2:	e00f      	b.n	80058f4 <UART_SetConfig+0x258>
 80058d4:	2300      	movs	r3, #0
 80058d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058da:	e052      	b.n	8005982 <UART_SetConfig+0x2e6>
 80058dc:	2302      	movs	r3, #2
 80058de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058e2:	e04e      	b.n	8005982 <UART_SetConfig+0x2e6>
 80058e4:	2304      	movs	r3, #4
 80058e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058ea:	e04a      	b.n	8005982 <UART_SetConfig+0x2e6>
 80058ec:	2308      	movs	r3, #8
 80058ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058f2:	e046      	b.n	8005982 <UART_SetConfig+0x2e6>
 80058f4:	2310      	movs	r3, #16
 80058f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058fa:	e042      	b.n	8005982 <UART_SetConfig+0x2e6>
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a17      	ldr	r2, [pc, #92]	@ (8005960 <UART_SetConfig+0x2c4>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d13a      	bne.n	800597c <UART_SetConfig+0x2e0>
 8005906:	4b18      	ldr	r3, [pc, #96]	@ (8005968 <UART_SetConfig+0x2cc>)
 8005908:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800590c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005910:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005914:	d01a      	beq.n	800594c <UART_SetConfig+0x2b0>
 8005916:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800591a:	d81b      	bhi.n	8005954 <UART_SetConfig+0x2b8>
 800591c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005920:	d00c      	beq.n	800593c <UART_SetConfig+0x2a0>
 8005922:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005926:	d815      	bhi.n	8005954 <UART_SetConfig+0x2b8>
 8005928:	2b00      	cmp	r3, #0
 800592a:	d003      	beq.n	8005934 <UART_SetConfig+0x298>
 800592c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005930:	d008      	beq.n	8005944 <UART_SetConfig+0x2a8>
 8005932:	e00f      	b.n	8005954 <UART_SetConfig+0x2b8>
 8005934:	2300      	movs	r3, #0
 8005936:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800593a:	e022      	b.n	8005982 <UART_SetConfig+0x2e6>
 800593c:	2302      	movs	r3, #2
 800593e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005942:	e01e      	b.n	8005982 <UART_SetConfig+0x2e6>
 8005944:	2304      	movs	r3, #4
 8005946:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800594a:	e01a      	b.n	8005982 <UART_SetConfig+0x2e6>
 800594c:	2308      	movs	r3, #8
 800594e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005952:	e016      	b.n	8005982 <UART_SetConfig+0x2e6>
 8005954:	2310      	movs	r3, #16
 8005956:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800595a:	e012      	b.n	8005982 <UART_SetConfig+0x2e6>
 800595c:	efff69f3 	.word	0xefff69f3
 8005960:	40008000 	.word	0x40008000
 8005964:	40013800 	.word	0x40013800
 8005968:	40021000 	.word	0x40021000
 800596c:	40004400 	.word	0x40004400
 8005970:	40004800 	.word	0x40004800
 8005974:	40004c00 	.word	0x40004c00
 8005978:	40005000 	.word	0x40005000
 800597c:	2310      	movs	r3, #16
 800597e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a9f      	ldr	r2, [pc, #636]	@ (8005c04 <UART_SetConfig+0x568>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d17a      	bne.n	8005a82 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800598c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005990:	2b08      	cmp	r3, #8
 8005992:	d824      	bhi.n	80059de <UART_SetConfig+0x342>
 8005994:	a201      	add	r2, pc, #4	@ (adr r2, 800599c <UART_SetConfig+0x300>)
 8005996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800599a:	bf00      	nop
 800599c:	080059c1 	.word	0x080059c1
 80059a0:	080059df 	.word	0x080059df
 80059a4:	080059c9 	.word	0x080059c9
 80059a8:	080059df 	.word	0x080059df
 80059ac:	080059cf 	.word	0x080059cf
 80059b0:	080059df 	.word	0x080059df
 80059b4:	080059df 	.word	0x080059df
 80059b8:	080059df 	.word	0x080059df
 80059bc:	080059d7 	.word	0x080059d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059c0:	f7fd ff46 	bl	8003850 <HAL_RCC_GetPCLK1Freq>
 80059c4:	61f8      	str	r0, [r7, #28]
        break;
 80059c6:	e010      	b.n	80059ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059c8:	4b8f      	ldr	r3, [pc, #572]	@ (8005c08 <UART_SetConfig+0x56c>)
 80059ca:	61fb      	str	r3, [r7, #28]
        break;
 80059cc:	e00d      	b.n	80059ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059ce:	f7fd fea7 	bl	8003720 <HAL_RCC_GetSysClockFreq>
 80059d2:	61f8      	str	r0, [r7, #28]
        break;
 80059d4:	e009      	b.n	80059ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80059da:	61fb      	str	r3, [r7, #28]
        break;
 80059dc:	e005      	b.n	80059ea <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80059de:	2300      	movs	r3, #0
 80059e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80059e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	f000 80fb 	beq.w	8005be8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	685a      	ldr	r2, [r3, #4]
 80059f6:	4613      	mov	r3, r2
 80059f8:	005b      	lsls	r3, r3, #1
 80059fa:	4413      	add	r3, r2
 80059fc:	69fa      	ldr	r2, [r7, #28]
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d305      	bcc.n	8005a0e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005a08:	69fa      	ldr	r2, [r7, #28]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d903      	bls.n	8005a16 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005a14:	e0e8      	b.n	8005be8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	461c      	mov	r4, r3
 8005a1c:	4615      	mov	r5, r2
 8005a1e:	f04f 0200 	mov.w	r2, #0
 8005a22:	f04f 0300 	mov.w	r3, #0
 8005a26:	022b      	lsls	r3, r5, #8
 8005a28:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005a2c:	0222      	lsls	r2, r4, #8
 8005a2e:	68f9      	ldr	r1, [r7, #12]
 8005a30:	6849      	ldr	r1, [r1, #4]
 8005a32:	0849      	lsrs	r1, r1, #1
 8005a34:	2000      	movs	r0, #0
 8005a36:	4688      	mov	r8, r1
 8005a38:	4681      	mov	r9, r0
 8005a3a:	eb12 0a08 	adds.w	sl, r2, r8
 8005a3e:	eb43 0b09 	adc.w	fp, r3, r9
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	603b      	str	r3, [r7, #0]
 8005a4a:	607a      	str	r2, [r7, #4]
 8005a4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a50:	4650      	mov	r0, sl
 8005a52:	4659      	mov	r1, fp
 8005a54:	f7fb f918 	bl	8000c88 <__aeabi_uldivmod>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	460b      	mov	r3, r1
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a66:	d308      	bcc.n	8005a7a <UART_SetConfig+0x3de>
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a6e:	d204      	bcs.n	8005a7a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	69ba      	ldr	r2, [r7, #24]
 8005a76:	60da      	str	r2, [r3, #12]
 8005a78:	e0b6      	b.n	8005be8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005a80:	e0b2      	b.n	8005be8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	69db      	ldr	r3, [r3, #28]
 8005a86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a8a:	d15e      	bne.n	8005b4a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005a8c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005a90:	2b08      	cmp	r3, #8
 8005a92:	d828      	bhi.n	8005ae6 <UART_SetConfig+0x44a>
 8005a94:	a201      	add	r2, pc, #4	@ (adr r2, 8005a9c <UART_SetConfig+0x400>)
 8005a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a9a:	bf00      	nop
 8005a9c:	08005ac1 	.word	0x08005ac1
 8005aa0:	08005ac9 	.word	0x08005ac9
 8005aa4:	08005ad1 	.word	0x08005ad1
 8005aa8:	08005ae7 	.word	0x08005ae7
 8005aac:	08005ad7 	.word	0x08005ad7
 8005ab0:	08005ae7 	.word	0x08005ae7
 8005ab4:	08005ae7 	.word	0x08005ae7
 8005ab8:	08005ae7 	.word	0x08005ae7
 8005abc:	08005adf 	.word	0x08005adf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ac0:	f7fd fec6 	bl	8003850 <HAL_RCC_GetPCLK1Freq>
 8005ac4:	61f8      	str	r0, [r7, #28]
        break;
 8005ac6:	e014      	b.n	8005af2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ac8:	f7fd fed8 	bl	800387c <HAL_RCC_GetPCLK2Freq>
 8005acc:	61f8      	str	r0, [r7, #28]
        break;
 8005ace:	e010      	b.n	8005af2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ad0:	4b4d      	ldr	r3, [pc, #308]	@ (8005c08 <UART_SetConfig+0x56c>)
 8005ad2:	61fb      	str	r3, [r7, #28]
        break;
 8005ad4:	e00d      	b.n	8005af2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ad6:	f7fd fe23 	bl	8003720 <HAL_RCC_GetSysClockFreq>
 8005ada:	61f8      	str	r0, [r7, #28]
        break;
 8005adc:	e009      	b.n	8005af2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ade:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ae2:	61fb      	str	r3, [r7, #28]
        break;
 8005ae4:	e005      	b.n	8005af2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005af0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d077      	beq.n	8005be8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	005a      	lsls	r2, r3, #1
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	085b      	lsrs	r3, r3, #1
 8005b02:	441a      	add	r2, r3
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b0c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	2b0f      	cmp	r3, #15
 8005b12:	d916      	bls.n	8005b42 <UART_SetConfig+0x4a6>
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b1a:	d212      	bcs.n	8005b42 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b1c:	69bb      	ldr	r3, [r7, #24]
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	f023 030f 	bic.w	r3, r3, #15
 8005b24:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b26:	69bb      	ldr	r3, [r7, #24]
 8005b28:	085b      	lsrs	r3, r3, #1
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	f003 0307 	and.w	r3, r3, #7
 8005b30:	b29a      	uxth	r2, r3
 8005b32:	8afb      	ldrh	r3, [r7, #22]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	8afa      	ldrh	r2, [r7, #22]
 8005b3e:	60da      	str	r2, [r3, #12]
 8005b40:	e052      	b.n	8005be8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005b48:	e04e      	b.n	8005be8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b4a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005b4e:	2b08      	cmp	r3, #8
 8005b50:	d827      	bhi.n	8005ba2 <UART_SetConfig+0x506>
 8005b52:	a201      	add	r2, pc, #4	@ (adr r2, 8005b58 <UART_SetConfig+0x4bc>)
 8005b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b58:	08005b7d 	.word	0x08005b7d
 8005b5c:	08005b85 	.word	0x08005b85
 8005b60:	08005b8d 	.word	0x08005b8d
 8005b64:	08005ba3 	.word	0x08005ba3
 8005b68:	08005b93 	.word	0x08005b93
 8005b6c:	08005ba3 	.word	0x08005ba3
 8005b70:	08005ba3 	.word	0x08005ba3
 8005b74:	08005ba3 	.word	0x08005ba3
 8005b78:	08005b9b 	.word	0x08005b9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b7c:	f7fd fe68 	bl	8003850 <HAL_RCC_GetPCLK1Freq>
 8005b80:	61f8      	str	r0, [r7, #28]
        break;
 8005b82:	e014      	b.n	8005bae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b84:	f7fd fe7a 	bl	800387c <HAL_RCC_GetPCLK2Freq>
 8005b88:	61f8      	str	r0, [r7, #28]
        break;
 8005b8a:	e010      	b.n	8005bae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b8c:	4b1e      	ldr	r3, [pc, #120]	@ (8005c08 <UART_SetConfig+0x56c>)
 8005b8e:	61fb      	str	r3, [r7, #28]
        break;
 8005b90:	e00d      	b.n	8005bae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b92:	f7fd fdc5 	bl	8003720 <HAL_RCC_GetSysClockFreq>
 8005b96:	61f8      	str	r0, [r7, #28]
        break;
 8005b98:	e009      	b.n	8005bae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b9e:	61fb      	str	r3, [r7, #28]
        break;
 8005ba0:	e005      	b.n	8005bae <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005bac:	bf00      	nop
    }

    if (pclk != 0U)
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d019      	beq.n	8005be8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	085a      	lsrs	r2, r3, #1
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	441a      	add	r2, r3
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bc6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bc8:	69bb      	ldr	r3, [r7, #24]
 8005bca:	2b0f      	cmp	r3, #15
 8005bcc:	d909      	bls.n	8005be2 <UART_SetConfig+0x546>
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bd4:	d205      	bcs.n	8005be2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	b29a      	uxth	r2, r3
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	60da      	str	r2, [r3, #12]
 8005be0:	e002      	b.n	8005be8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2200      	movs	r2, #0
 8005bec:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005bf4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3728      	adds	r7, #40	@ 0x28
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c02:	bf00      	nop
 8005c04:	40008000 	.word	0x40008000
 8005c08:	00f42400 	.word	0x00f42400

08005c0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c18:	f003 0308 	and.w	r3, r3, #8
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d00a      	beq.n	8005c36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	430a      	orrs	r2, r1
 8005c34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c3a:	f003 0301 	and.w	r3, r3, #1
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d00a      	beq.n	8005c58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	430a      	orrs	r2, r1
 8005c56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c5c:	f003 0302 	and.w	r3, r3, #2
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d00a      	beq.n	8005c7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	430a      	orrs	r2, r1
 8005c78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c7e:	f003 0304 	and.w	r3, r3, #4
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00a      	beq.n	8005c9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	430a      	orrs	r2, r1
 8005c9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ca0:	f003 0310 	and.w	r3, r3, #16
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d00a      	beq.n	8005cbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	430a      	orrs	r2, r1
 8005cbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cc2:	f003 0320 	and.w	r3, r3, #32
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d00a      	beq.n	8005ce0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	430a      	orrs	r2, r1
 8005cde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ce4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d01a      	beq.n	8005d22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	430a      	orrs	r2, r1
 8005d00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d0a:	d10a      	bne.n	8005d22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	430a      	orrs	r2, r1
 8005d20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00a      	beq.n	8005d44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	430a      	orrs	r2, r1
 8005d42:	605a      	str	r2, [r3, #4]
  }
}
 8005d44:	bf00      	nop
 8005d46:	370c      	adds	r7, #12
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr

08005d50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b098      	sub	sp, #96	@ 0x60
 8005d54:	af02      	add	r7, sp, #8
 8005d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d60:	f7fc f92e 	bl	8001fc0 <HAL_GetTick>
 8005d64:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 0308 	and.w	r3, r3, #8
 8005d70:	2b08      	cmp	r3, #8
 8005d72:	d12e      	bne.n	8005dd2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d74:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005d78:	9300      	str	r3, [sp, #0]
 8005d7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 f88c 	bl	8005ea0 <UART_WaitOnFlagUntilTimeout>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d021      	beq.n	8005dd2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d96:	e853 3f00 	ldrex	r3, [r3]
 8005d9a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005d9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005da2:	653b      	str	r3, [r7, #80]	@ 0x50
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	461a      	mov	r2, r3
 8005daa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005dac:	647b      	str	r3, [r7, #68]	@ 0x44
 8005dae:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005db2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005db4:	e841 2300 	strex	r3, r2, [r1]
 8005db8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005dba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d1e6      	bne.n	8005d8e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2220      	movs	r2, #32
 8005dc4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005dce:	2303      	movs	r3, #3
 8005dd0:	e062      	b.n	8005e98 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 0304 	and.w	r3, r3, #4
 8005ddc:	2b04      	cmp	r3, #4
 8005dde:	d149      	bne.n	8005e74 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005de0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005de4:	9300      	str	r3, [sp, #0]
 8005de6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005de8:	2200      	movs	r2, #0
 8005dea:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 f856 	bl	8005ea0 <UART_WaitOnFlagUntilTimeout>
 8005df4:	4603      	mov	r3, r0
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d03c      	beq.n	8005e74 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e02:	e853 3f00 	ldrex	r3, [r3]
 8005e06:	623b      	str	r3, [r7, #32]
   return(result);
 8005e08:	6a3b      	ldr	r3, [r7, #32]
 8005e0a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	461a      	mov	r2, r3
 8005e16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e18:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e1c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e20:	e841 2300 	strex	r3, r2, [r1]
 8005e24:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d1e6      	bne.n	8005dfa <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	3308      	adds	r3, #8
 8005e32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	e853 3f00 	ldrex	r3, [r3]
 8005e3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f023 0301 	bic.w	r3, r3, #1
 8005e42:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	3308      	adds	r3, #8
 8005e4a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e4c:	61fa      	str	r2, [r7, #28]
 8005e4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e50:	69b9      	ldr	r1, [r7, #24]
 8005e52:	69fa      	ldr	r2, [r7, #28]
 8005e54:	e841 2300 	strex	r3, r2, [r1]
 8005e58:	617b      	str	r3, [r7, #20]
   return(result);
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d1e5      	bne.n	8005e2c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2220      	movs	r2, #32
 8005e64:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e70:	2303      	movs	r3, #3
 8005e72:	e011      	b.n	8005e98 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2220      	movs	r2, #32
 8005e78:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2220      	movs	r2, #32
 8005e7e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005e96:	2300      	movs	r3, #0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3758      	adds	r7, #88	@ 0x58
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	603b      	str	r3, [r7, #0]
 8005eac:	4613      	mov	r3, r2
 8005eae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005eb0:	e04f      	b.n	8005f52 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eb8:	d04b      	beq.n	8005f52 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005eba:	f7fc f881 	bl	8001fc0 <HAL_GetTick>
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	1ad3      	subs	r3, r2, r3
 8005ec4:	69ba      	ldr	r2, [r7, #24]
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d302      	bcc.n	8005ed0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d101      	bne.n	8005ed4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005ed0:	2303      	movs	r3, #3
 8005ed2:	e04e      	b.n	8005f72 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 0304 	and.w	r3, r3, #4
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d037      	beq.n	8005f52 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	2b80      	cmp	r3, #128	@ 0x80
 8005ee6:	d034      	beq.n	8005f52 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	2b40      	cmp	r3, #64	@ 0x40
 8005eec:	d031      	beq.n	8005f52 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	69db      	ldr	r3, [r3, #28]
 8005ef4:	f003 0308 	and.w	r3, r3, #8
 8005ef8:	2b08      	cmp	r3, #8
 8005efa:	d110      	bne.n	8005f1e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	2208      	movs	r2, #8
 8005f02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f04:	68f8      	ldr	r0, [r7, #12]
 8005f06:	f000 f838 	bl	8005f7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2208      	movs	r2, #8
 8005f0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2200      	movs	r2, #0
 8005f16:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e029      	b.n	8005f72 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	69db      	ldr	r3, [r3, #28]
 8005f24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f2c:	d111      	bne.n	8005f52 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005f36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f38:	68f8      	ldr	r0, [r7, #12]
 8005f3a:	f000 f81e 	bl	8005f7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2220      	movs	r2, #32
 8005f42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005f4e:	2303      	movs	r3, #3
 8005f50:	e00f      	b.n	8005f72 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	69da      	ldr	r2, [r3, #28]
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	68ba      	ldr	r2, [r7, #8]
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	bf0c      	ite	eq
 8005f62:	2301      	moveq	r3, #1
 8005f64:	2300      	movne	r3, #0
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	461a      	mov	r2, r3
 8005f6a:	79fb      	ldrb	r3, [r7, #7]
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d0a0      	beq.n	8005eb2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3710      	adds	r7, #16
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}

08005f7a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f7a:	b480      	push	{r7}
 8005f7c:	b095      	sub	sp, #84	@ 0x54
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f8a:	e853 3f00 	ldrex	r3, [r3]
 8005f8e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005fa0:	643b      	str	r3, [r7, #64]	@ 0x40
 8005fa2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005fa6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005fa8:	e841 2300 	strex	r3, r2, [r1]
 8005fac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d1e6      	bne.n	8005f82 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	3308      	adds	r3, #8
 8005fba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fbc:	6a3b      	ldr	r3, [r7, #32]
 8005fbe:	e853 3f00 	ldrex	r3, [r3]
 8005fc2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	f023 0301 	bic.w	r3, r3, #1
 8005fca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	3308      	adds	r3, #8
 8005fd2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005fd4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005fd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005fda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005fdc:	e841 2300 	strex	r3, r2, [r1]
 8005fe0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d1e5      	bne.n	8005fb4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d118      	bne.n	8006022 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	e853 3f00 	ldrex	r3, [r3]
 8005ffc:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	f023 0310 	bic.w	r3, r3, #16
 8006004:	647b      	str	r3, [r7, #68]	@ 0x44
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	461a      	mov	r2, r3
 800600c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800600e:	61bb      	str	r3, [r7, #24]
 8006010:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006012:	6979      	ldr	r1, [r7, #20]
 8006014:	69ba      	ldr	r2, [r7, #24]
 8006016:	e841 2300 	strex	r3, r2, [r1]
 800601a:	613b      	str	r3, [r7, #16]
   return(result);
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d1e6      	bne.n	8005ff0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2220      	movs	r2, #32
 8006026:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006036:	bf00      	nop
 8006038:	3754      	adds	r7, #84	@ 0x54
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr

08006042 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006042:	b580      	push	{r7, lr}
 8006044:	b084      	sub	sp, #16
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800604e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2200      	movs	r2, #0
 8006054:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2200      	movs	r2, #0
 800605c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006060:	68f8      	ldr	r0, [r7, #12]
 8006062:	f7ff fb05 	bl	8005670 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006066:	bf00      	nop
 8006068:	3710      	adds	r7, #16
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}

0800606e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800606e:	b580      	push	{r7, lr}
 8006070:	b088      	sub	sp, #32
 8006072:	af00      	add	r7, sp, #0
 8006074:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	e853 3f00 	ldrex	r3, [r3]
 8006082:	60bb      	str	r3, [r7, #8]
   return(result);
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800608a:	61fb      	str	r3, [r7, #28]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	461a      	mov	r2, r3
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	61bb      	str	r3, [r7, #24]
 8006096:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006098:	6979      	ldr	r1, [r7, #20]
 800609a:	69ba      	ldr	r2, [r7, #24]
 800609c:	e841 2300 	strex	r3, r2, [r1]
 80060a0:	613b      	str	r3, [r7, #16]
   return(result);
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d1e6      	bne.n	8006076 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2220      	movs	r2, #32
 80060ac:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f7ff fad1 	bl	800565c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060ba:	bf00      	nop
 80060bc:	3720      	adds	r7, #32
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}

080060c2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80060c2:	b480      	push	{r7}
 80060c4:	b083      	sub	sp, #12
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80060ca:	bf00      	nop
 80060cc:	370c      	adds	r7, #12
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr

080060d6 <__cvt>:
 80060d6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060da:	ec57 6b10 	vmov	r6, r7, d0
 80060de:	2f00      	cmp	r7, #0
 80060e0:	460c      	mov	r4, r1
 80060e2:	4619      	mov	r1, r3
 80060e4:	463b      	mov	r3, r7
 80060e6:	bfbb      	ittet	lt
 80060e8:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80060ec:	461f      	movlt	r7, r3
 80060ee:	2300      	movge	r3, #0
 80060f0:	232d      	movlt	r3, #45	@ 0x2d
 80060f2:	700b      	strb	r3, [r1, #0]
 80060f4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80060f6:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80060fa:	4691      	mov	r9, r2
 80060fc:	f023 0820 	bic.w	r8, r3, #32
 8006100:	bfbc      	itt	lt
 8006102:	4632      	movlt	r2, r6
 8006104:	4616      	movlt	r6, r2
 8006106:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800610a:	d005      	beq.n	8006118 <__cvt+0x42>
 800610c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006110:	d100      	bne.n	8006114 <__cvt+0x3e>
 8006112:	3401      	adds	r4, #1
 8006114:	2102      	movs	r1, #2
 8006116:	e000      	b.n	800611a <__cvt+0x44>
 8006118:	2103      	movs	r1, #3
 800611a:	ab03      	add	r3, sp, #12
 800611c:	9301      	str	r3, [sp, #4]
 800611e:	ab02      	add	r3, sp, #8
 8006120:	9300      	str	r3, [sp, #0]
 8006122:	ec47 6b10 	vmov	d0, r6, r7
 8006126:	4653      	mov	r3, sl
 8006128:	4622      	mov	r2, r4
 800612a:	f001 f99d 	bl	8007468 <_dtoa_r>
 800612e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006132:	4605      	mov	r5, r0
 8006134:	d119      	bne.n	800616a <__cvt+0x94>
 8006136:	f019 0f01 	tst.w	r9, #1
 800613a:	d00e      	beq.n	800615a <__cvt+0x84>
 800613c:	eb00 0904 	add.w	r9, r0, r4
 8006140:	2200      	movs	r2, #0
 8006142:	2300      	movs	r3, #0
 8006144:	4630      	mov	r0, r6
 8006146:	4639      	mov	r1, r7
 8006148:	f7fa fcbe 	bl	8000ac8 <__aeabi_dcmpeq>
 800614c:	b108      	cbz	r0, 8006152 <__cvt+0x7c>
 800614e:	f8cd 900c 	str.w	r9, [sp, #12]
 8006152:	2230      	movs	r2, #48	@ 0x30
 8006154:	9b03      	ldr	r3, [sp, #12]
 8006156:	454b      	cmp	r3, r9
 8006158:	d31e      	bcc.n	8006198 <__cvt+0xc2>
 800615a:	9b03      	ldr	r3, [sp, #12]
 800615c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800615e:	1b5b      	subs	r3, r3, r5
 8006160:	4628      	mov	r0, r5
 8006162:	6013      	str	r3, [r2, #0]
 8006164:	b004      	add	sp, #16
 8006166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800616a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800616e:	eb00 0904 	add.w	r9, r0, r4
 8006172:	d1e5      	bne.n	8006140 <__cvt+0x6a>
 8006174:	7803      	ldrb	r3, [r0, #0]
 8006176:	2b30      	cmp	r3, #48	@ 0x30
 8006178:	d10a      	bne.n	8006190 <__cvt+0xba>
 800617a:	2200      	movs	r2, #0
 800617c:	2300      	movs	r3, #0
 800617e:	4630      	mov	r0, r6
 8006180:	4639      	mov	r1, r7
 8006182:	f7fa fca1 	bl	8000ac8 <__aeabi_dcmpeq>
 8006186:	b918      	cbnz	r0, 8006190 <__cvt+0xba>
 8006188:	f1c4 0401 	rsb	r4, r4, #1
 800618c:	f8ca 4000 	str.w	r4, [sl]
 8006190:	f8da 3000 	ldr.w	r3, [sl]
 8006194:	4499      	add	r9, r3
 8006196:	e7d3      	b.n	8006140 <__cvt+0x6a>
 8006198:	1c59      	adds	r1, r3, #1
 800619a:	9103      	str	r1, [sp, #12]
 800619c:	701a      	strb	r2, [r3, #0]
 800619e:	e7d9      	b.n	8006154 <__cvt+0x7e>

080061a0 <__exponent>:
 80061a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061a2:	2900      	cmp	r1, #0
 80061a4:	bfba      	itte	lt
 80061a6:	4249      	neglt	r1, r1
 80061a8:	232d      	movlt	r3, #45	@ 0x2d
 80061aa:	232b      	movge	r3, #43	@ 0x2b
 80061ac:	2909      	cmp	r1, #9
 80061ae:	7002      	strb	r2, [r0, #0]
 80061b0:	7043      	strb	r3, [r0, #1]
 80061b2:	dd29      	ble.n	8006208 <__exponent+0x68>
 80061b4:	f10d 0307 	add.w	r3, sp, #7
 80061b8:	461d      	mov	r5, r3
 80061ba:	270a      	movs	r7, #10
 80061bc:	461a      	mov	r2, r3
 80061be:	fbb1 f6f7 	udiv	r6, r1, r7
 80061c2:	fb07 1416 	mls	r4, r7, r6, r1
 80061c6:	3430      	adds	r4, #48	@ 0x30
 80061c8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80061cc:	460c      	mov	r4, r1
 80061ce:	2c63      	cmp	r4, #99	@ 0x63
 80061d0:	f103 33ff 	add.w	r3, r3, #4294967295
 80061d4:	4631      	mov	r1, r6
 80061d6:	dcf1      	bgt.n	80061bc <__exponent+0x1c>
 80061d8:	3130      	adds	r1, #48	@ 0x30
 80061da:	1e94      	subs	r4, r2, #2
 80061dc:	f803 1c01 	strb.w	r1, [r3, #-1]
 80061e0:	1c41      	adds	r1, r0, #1
 80061e2:	4623      	mov	r3, r4
 80061e4:	42ab      	cmp	r3, r5
 80061e6:	d30a      	bcc.n	80061fe <__exponent+0x5e>
 80061e8:	f10d 0309 	add.w	r3, sp, #9
 80061ec:	1a9b      	subs	r3, r3, r2
 80061ee:	42ac      	cmp	r4, r5
 80061f0:	bf88      	it	hi
 80061f2:	2300      	movhi	r3, #0
 80061f4:	3302      	adds	r3, #2
 80061f6:	4403      	add	r3, r0
 80061f8:	1a18      	subs	r0, r3, r0
 80061fa:	b003      	add	sp, #12
 80061fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061fe:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006202:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006206:	e7ed      	b.n	80061e4 <__exponent+0x44>
 8006208:	2330      	movs	r3, #48	@ 0x30
 800620a:	3130      	adds	r1, #48	@ 0x30
 800620c:	7083      	strb	r3, [r0, #2]
 800620e:	70c1      	strb	r1, [r0, #3]
 8006210:	1d03      	adds	r3, r0, #4
 8006212:	e7f1      	b.n	80061f8 <__exponent+0x58>

08006214 <_printf_float>:
 8006214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006218:	b08d      	sub	sp, #52	@ 0x34
 800621a:	460c      	mov	r4, r1
 800621c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006220:	4616      	mov	r6, r2
 8006222:	461f      	mov	r7, r3
 8006224:	4605      	mov	r5, r0
 8006226:	f001 f809 	bl	800723c <_localeconv_r>
 800622a:	6803      	ldr	r3, [r0, #0]
 800622c:	9304      	str	r3, [sp, #16]
 800622e:	4618      	mov	r0, r3
 8006230:	f7fa f81e 	bl	8000270 <strlen>
 8006234:	2300      	movs	r3, #0
 8006236:	930a      	str	r3, [sp, #40]	@ 0x28
 8006238:	f8d8 3000 	ldr.w	r3, [r8]
 800623c:	9005      	str	r0, [sp, #20]
 800623e:	3307      	adds	r3, #7
 8006240:	f023 0307 	bic.w	r3, r3, #7
 8006244:	f103 0208 	add.w	r2, r3, #8
 8006248:	f894 a018 	ldrb.w	sl, [r4, #24]
 800624c:	f8d4 b000 	ldr.w	fp, [r4]
 8006250:	f8c8 2000 	str.w	r2, [r8]
 8006254:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006258:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800625c:	9307      	str	r3, [sp, #28]
 800625e:	f8cd 8018 	str.w	r8, [sp, #24]
 8006262:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006266:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800626a:	4b9c      	ldr	r3, [pc, #624]	@ (80064dc <_printf_float+0x2c8>)
 800626c:	f04f 32ff 	mov.w	r2, #4294967295
 8006270:	f7fa fc5c 	bl	8000b2c <__aeabi_dcmpun>
 8006274:	bb70      	cbnz	r0, 80062d4 <_printf_float+0xc0>
 8006276:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800627a:	4b98      	ldr	r3, [pc, #608]	@ (80064dc <_printf_float+0x2c8>)
 800627c:	f04f 32ff 	mov.w	r2, #4294967295
 8006280:	f7fa fc36 	bl	8000af0 <__aeabi_dcmple>
 8006284:	bb30      	cbnz	r0, 80062d4 <_printf_float+0xc0>
 8006286:	2200      	movs	r2, #0
 8006288:	2300      	movs	r3, #0
 800628a:	4640      	mov	r0, r8
 800628c:	4649      	mov	r1, r9
 800628e:	f7fa fc25 	bl	8000adc <__aeabi_dcmplt>
 8006292:	b110      	cbz	r0, 800629a <_printf_float+0x86>
 8006294:	232d      	movs	r3, #45	@ 0x2d
 8006296:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800629a:	4a91      	ldr	r2, [pc, #580]	@ (80064e0 <_printf_float+0x2cc>)
 800629c:	4b91      	ldr	r3, [pc, #580]	@ (80064e4 <_printf_float+0x2d0>)
 800629e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80062a2:	bf94      	ite	ls
 80062a4:	4690      	movls	r8, r2
 80062a6:	4698      	movhi	r8, r3
 80062a8:	2303      	movs	r3, #3
 80062aa:	6123      	str	r3, [r4, #16]
 80062ac:	f02b 0304 	bic.w	r3, fp, #4
 80062b0:	6023      	str	r3, [r4, #0]
 80062b2:	f04f 0900 	mov.w	r9, #0
 80062b6:	9700      	str	r7, [sp, #0]
 80062b8:	4633      	mov	r3, r6
 80062ba:	aa0b      	add	r2, sp, #44	@ 0x2c
 80062bc:	4621      	mov	r1, r4
 80062be:	4628      	mov	r0, r5
 80062c0:	f000 f9d2 	bl	8006668 <_printf_common>
 80062c4:	3001      	adds	r0, #1
 80062c6:	f040 808d 	bne.w	80063e4 <_printf_float+0x1d0>
 80062ca:	f04f 30ff 	mov.w	r0, #4294967295
 80062ce:	b00d      	add	sp, #52	@ 0x34
 80062d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062d4:	4642      	mov	r2, r8
 80062d6:	464b      	mov	r3, r9
 80062d8:	4640      	mov	r0, r8
 80062da:	4649      	mov	r1, r9
 80062dc:	f7fa fc26 	bl	8000b2c <__aeabi_dcmpun>
 80062e0:	b140      	cbz	r0, 80062f4 <_printf_float+0xe0>
 80062e2:	464b      	mov	r3, r9
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	bfbc      	itt	lt
 80062e8:	232d      	movlt	r3, #45	@ 0x2d
 80062ea:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80062ee:	4a7e      	ldr	r2, [pc, #504]	@ (80064e8 <_printf_float+0x2d4>)
 80062f0:	4b7e      	ldr	r3, [pc, #504]	@ (80064ec <_printf_float+0x2d8>)
 80062f2:	e7d4      	b.n	800629e <_printf_float+0x8a>
 80062f4:	6863      	ldr	r3, [r4, #4]
 80062f6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80062fa:	9206      	str	r2, [sp, #24]
 80062fc:	1c5a      	adds	r2, r3, #1
 80062fe:	d13b      	bne.n	8006378 <_printf_float+0x164>
 8006300:	2306      	movs	r3, #6
 8006302:	6063      	str	r3, [r4, #4]
 8006304:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006308:	2300      	movs	r3, #0
 800630a:	6022      	str	r2, [r4, #0]
 800630c:	9303      	str	r3, [sp, #12]
 800630e:	ab0a      	add	r3, sp, #40	@ 0x28
 8006310:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006314:	ab09      	add	r3, sp, #36	@ 0x24
 8006316:	9300      	str	r3, [sp, #0]
 8006318:	6861      	ldr	r1, [r4, #4]
 800631a:	ec49 8b10 	vmov	d0, r8, r9
 800631e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006322:	4628      	mov	r0, r5
 8006324:	f7ff fed7 	bl	80060d6 <__cvt>
 8006328:	9b06      	ldr	r3, [sp, #24]
 800632a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800632c:	2b47      	cmp	r3, #71	@ 0x47
 800632e:	4680      	mov	r8, r0
 8006330:	d129      	bne.n	8006386 <_printf_float+0x172>
 8006332:	1cc8      	adds	r0, r1, #3
 8006334:	db02      	blt.n	800633c <_printf_float+0x128>
 8006336:	6863      	ldr	r3, [r4, #4]
 8006338:	4299      	cmp	r1, r3
 800633a:	dd41      	ble.n	80063c0 <_printf_float+0x1ac>
 800633c:	f1aa 0a02 	sub.w	sl, sl, #2
 8006340:	fa5f fa8a 	uxtb.w	sl, sl
 8006344:	3901      	subs	r1, #1
 8006346:	4652      	mov	r2, sl
 8006348:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800634c:	9109      	str	r1, [sp, #36]	@ 0x24
 800634e:	f7ff ff27 	bl	80061a0 <__exponent>
 8006352:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006354:	1813      	adds	r3, r2, r0
 8006356:	2a01      	cmp	r2, #1
 8006358:	4681      	mov	r9, r0
 800635a:	6123      	str	r3, [r4, #16]
 800635c:	dc02      	bgt.n	8006364 <_printf_float+0x150>
 800635e:	6822      	ldr	r2, [r4, #0]
 8006360:	07d2      	lsls	r2, r2, #31
 8006362:	d501      	bpl.n	8006368 <_printf_float+0x154>
 8006364:	3301      	adds	r3, #1
 8006366:	6123      	str	r3, [r4, #16]
 8006368:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800636c:	2b00      	cmp	r3, #0
 800636e:	d0a2      	beq.n	80062b6 <_printf_float+0xa2>
 8006370:	232d      	movs	r3, #45	@ 0x2d
 8006372:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006376:	e79e      	b.n	80062b6 <_printf_float+0xa2>
 8006378:	9a06      	ldr	r2, [sp, #24]
 800637a:	2a47      	cmp	r2, #71	@ 0x47
 800637c:	d1c2      	bne.n	8006304 <_printf_float+0xf0>
 800637e:	2b00      	cmp	r3, #0
 8006380:	d1c0      	bne.n	8006304 <_printf_float+0xf0>
 8006382:	2301      	movs	r3, #1
 8006384:	e7bd      	b.n	8006302 <_printf_float+0xee>
 8006386:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800638a:	d9db      	bls.n	8006344 <_printf_float+0x130>
 800638c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006390:	d118      	bne.n	80063c4 <_printf_float+0x1b0>
 8006392:	2900      	cmp	r1, #0
 8006394:	6863      	ldr	r3, [r4, #4]
 8006396:	dd0b      	ble.n	80063b0 <_printf_float+0x19c>
 8006398:	6121      	str	r1, [r4, #16]
 800639a:	b913      	cbnz	r3, 80063a2 <_printf_float+0x18e>
 800639c:	6822      	ldr	r2, [r4, #0]
 800639e:	07d0      	lsls	r0, r2, #31
 80063a0:	d502      	bpl.n	80063a8 <_printf_float+0x194>
 80063a2:	3301      	adds	r3, #1
 80063a4:	440b      	add	r3, r1
 80063a6:	6123      	str	r3, [r4, #16]
 80063a8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80063aa:	f04f 0900 	mov.w	r9, #0
 80063ae:	e7db      	b.n	8006368 <_printf_float+0x154>
 80063b0:	b913      	cbnz	r3, 80063b8 <_printf_float+0x1a4>
 80063b2:	6822      	ldr	r2, [r4, #0]
 80063b4:	07d2      	lsls	r2, r2, #31
 80063b6:	d501      	bpl.n	80063bc <_printf_float+0x1a8>
 80063b8:	3302      	adds	r3, #2
 80063ba:	e7f4      	b.n	80063a6 <_printf_float+0x192>
 80063bc:	2301      	movs	r3, #1
 80063be:	e7f2      	b.n	80063a6 <_printf_float+0x192>
 80063c0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80063c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80063c6:	4299      	cmp	r1, r3
 80063c8:	db05      	blt.n	80063d6 <_printf_float+0x1c2>
 80063ca:	6823      	ldr	r3, [r4, #0]
 80063cc:	6121      	str	r1, [r4, #16]
 80063ce:	07d8      	lsls	r0, r3, #31
 80063d0:	d5ea      	bpl.n	80063a8 <_printf_float+0x194>
 80063d2:	1c4b      	adds	r3, r1, #1
 80063d4:	e7e7      	b.n	80063a6 <_printf_float+0x192>
 80063d6:	2900      	cmp	r1, #0
 80063d8:	bfd4      	ite	le
 80063da:	f1c1 0202 	rsble	r2, r1, #2
 80063de:	2201      	movgt	r2, #1
 80063e0:	4413      	add	r3, r2
 80063e2:	e7e0      	b.n	80063a6 <_printf_float+0x192>
 80063e4:	6823      	ldr	r3, [r4, #0]
 80063e6:	055a      	lsls	r2, r3, #21
 80063e8:	d407      	bmi.n	80063fa <_printf_float+0x1e6>
 80063ea:	6923      	ldr	r3, [r4, #16]
 80063ec:	4642      	mov	r2, r8
 80063ee:	4631      	mov	r1, r6
 80063f0:	4628      	mov	r0, r5
 80063f2:	47b8      	blx	r7
 80063f4:	3001      	adds	r0, #1
 80063f6:	d12b      	bne.n	8006450 <_printf_float+0x23c>
 80063f8:	e767      	b.n	80062ca <_printf_float+0xb6>
 80063fa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80063fe:	f240 80dd 	bls.w	80065bc <_printf_float+0x3a8>
 8006402:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006406:	2200      	movs	r2, #0
 8006408:	2300      	movs	r3, #0
 800640a:	f7fa fb5d 	bl	8000ac8 <__aeabi_dcmpeq>
 800640e:	2800      	cmp	r0, #0
 8006410:	d033      	beq.n	800647a <_printf_float+0x266>
 8006412:	4a37      	ldr	r2, [pc, #220]	@ (80064f0 <_printf_float+0x2dc>)
 8006414:	2301      	movs	r3, #1
 8006416:	4631      	mov	r1, r6
 8006418:	4628      	mov	r0, r5
 800641a:	47b8      	blx	r7
 800641c:	3001      	adds	r0, #1
 800641e:	f43f af54 	beq.w	80062ca <_printf_float+0xb6>
 8006422:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006426:	4543      	cmp	r3, r8
 8006428:	db02      	blt.n	8006430 <_printf_float+0x21c>
 800642a:	6823      	ldr	r3, [r4, #0]
 800642c:	07d8      	lsls	r0, r3, #31
 800642e:	d50f      	bpl.n	8006450 <_printf_float+0x23c>
 8006430:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006434:	4631      	mov	r1, r6
 8006436:	4628      	mov	r0, r5
 8006438:	47b8      	blx	r7
 800643a:	3001      	adds	r0, #1
 800643c:	f43f af45 	beq.w	80062ca <_printf_float+0xb6>
 8006440:	f04f 0900 	mov.w	r9, #0
 8006444:	f108 38ff 	add.w	r8, r8, #4294967295
 8006448:	f104 0a1a 	add.w	sl, r4, #26
 800644c:	45c8      	cmp	r8, r9
 800644e:	dc09      	bgt.n	8006464 <_printf_float+0x250>
 8006450:	6823      	ldr	r3, [r4, #0]
 8006452:	079b      	lsls	r3, r3, #30
 8006454:	f100 8103 	bmi.w	800665e <_printf_float+0x44a>
 8006458:	68e0      	ldr	r0, [r4, #12]
 800645a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800645c:	4298      	cmp	r0, r3
 800645e:	bfb8      	it	lt
 8006460:	4618      	movlt	r0, r3
 8006462:	e734      	b.n	80062ce <_printf_float+0xba>
 8006464:	2301      	movs	r3, #1
 8006466:	4652      	mov	r2, sl
 8006468:	4631      	mov	r1, r6
 800646a:	4628      	mov	r0, r5
 800646c:	47b8      	blx	r7
 800646e:	3001      	adds	r0, #1
 8006470:	f43f af2b 	beq.w	80062ca <_printf_float+0xb6>
 8006474:	f109 0901 	add.w	r9, r9, #1
 8006478:	e7e8      	b.n	800644c <_printf_float+0x238>
 800647a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800647c:	2b00      	cmp	r3, #0
 800647e:	dc39      	bgt.n	80064f4 <_printf_float+0x2e0>
 8006480:	4a1b      	ldr	r2, [pc, #108]	@ (80064f0 <_printf_float+0x2dc>)
 8006482:	2301      	movs	r3, #1
 8006484:	4631      	mov	r1, r6
 8006486:	4628      	mov	r0, r5
 8006488:	47b8      	blx	r7
 800648a:	3001      	adds	r0, #1
 800648c:	f43f af1d 	beq.w	80062ca <_printf_float+0xb6>
 8006490:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006494:	ea59 0303 	orrs.w	r3, r9, r3
 8006498:	d102      	bne.n	80064a0 <_printf_float+0x28c>
 800649a:	6823      	ldr	r3, [r4, #0]
 800649c:	07d9      	lsls	r1, r3, #31
 800649e:	d5d7      	bpl.n	8006450 <_printf_float+0x23c>
 80064a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064a4:	4631      	mov	r1, r6
 80064a6:	4628      	mov	r0, r5
 80064a8:	47b8      	blx	r7
 80064aa:	3001      	adds	r0, #1
 80064ac:	f43f af0d 	beq.w	80062ca <_printf_float+0xb6>
 80064b0:	f04f 0a00 	mov.w	sl, #0
 80064b4:	f104 0b1a 	add.w	fp, r4, #26
 80064b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064ba:	425b      	negs	r3, r3
 80064bc:	4553      	cmp	r3, sl
 80064be:	dc01      	bgt.n	80064c4 <_printf_float+0x2b0>
 80064c0:	464b      	mov	r3, r9
 80064c2:	e793      	b.n	80063ec <_printf_float+0x1d8>
 80064c4:	2301      	movs	r3, #1
 80064c6:	465a      	mov	r2, fp
 80064c8:	4631      	mov	r1, r6
 80064ca:	4628      	mov	r0, r5
 80064cc:	47b8      	blx	r7
 80064ce:	3001      	adds	r0, #1
 80064d0:	f43f aefb 	beq.w	80062ca <_printf_float+0xb6>
 80064d4:	f10a 0a01 	add.w	sl, sl, #1
 80064d8:	e7ee      	b.n	80064b8 <_printf_float+0x2a4>
 80064da:	bf00      	nop
 80064dc:	7fefffff 	.word	0x7fefffff
 80064e0:	0800aa1c 	.word	0x0800aa1c
 80064e4:	0800aa20 	.word	0x0800aa20
 80064e8:	0800aa24 	.word	0x0800aa24
 80064ec:	0800aa28 	.word	0x0800aa28
 80064f0:	0800aa2c 	.word	0x0800aa2c
 80064f4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80064f6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80064fa:	4553      	cmp	r3, sl
 80064fc:	bfa8      	it	ge
 80064fe:	4653      	movge	r3, sl
 8006500:	2b00      	cmp	r3, #0
 8006502:	4699      	mov	r9, r3
 8006504:	dc36      	bgt.n	8006574 <_printf_float+0x360>
 8006506:	f04f 0b00 	mov.w	fp, #0
 800650a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800650e:	f104 021a 	add.w	r2, r4, #26
 8006512:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006514:	9306      	str	r3, [sp, #24]
 8006516:	eba3 0309 	sub.w	r3, r3, r9
 800651a:	455b      	cmp	r3, fp
 800651c:	dc31      	bgt.n	8006582 <_printf_float+0x36e>
 800651e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006520:	459a      	cmp	sl, r3
 8006522:	dc3a      	bgt.n	800659a <_printf_float+0x386>
 8006524:	6823      	ldr	r3, [r4, #0]
 8006526:	07da      	lsls	r2, r3, #31
 8006528:	d437      	bmi.n	800659a <_printf_float+0x386>
 800652a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800652c:	ebaa 0903 	sub.w	r9, sl, r3
 8006530:	9b06      	ldr	r3, [sp, #24]
 8006532:	ebaa 0303 	sub.w	r3, sl, r3
 8006536:	4599      	cmp	r9, r3
 8006538:	bfa8      	it	ge
 800653a:	4699      	movge	r9, r3
 800653c:	f1b9 0f00 	cmp.w	r9, #0
 8006540:	dc33      	bgt.n	80065aa <_printf_float+0x396>
 8006542:	f04f 0800 	mov.w	r8, #0
 8006546:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800654a:	f104 0b1a 	add.w	fp, r4, #26
 800654e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006550:	ebaa 0303 	sub.w	r3, sl, r3
 8006554:	eba3 0309 	sub.w	r3, r3, r9
 8006558:	4543      	cmp	r3, r8
 800655a:	f77f af79 	ble.w	8006450 <_printf_float+0x23c>
 800655e:	2301      	movs	r3, #1
 8006560:	465a      	mov	r2, fp
 8006562:	4631      	mov	r1, r6
 8006564:	4628      	mov	r0, r5
 8006566:	47b8      	blx	r7
 8006568:	3001      	adds	r0, #1
 800656a:	f43f aeae 	beq.w	80062ca <_printf_float+0xb6>
 800656e:	f108 0801 	add.w	r8, r8, #1
 8006572:	e7ec      	b.n	800654e <_printf_float+0x33a>
 8006574:	4642      	mov	r2, r8
 8006576:	4631      	mov	r1, r6
 8006578:	4628      	mov	r0, r5
 800657a:	47b8      	blx	r7
 800657c:	3001      	adds	r0, #1
 800657e:	d1c2      	bne.n	8006506 <_printf_float+0x2f2>
 8006580:	e6a3      	b.n	80062ca <_printf_float+0xb6>
 8006582:	2301      	movs	r3, #1
 8006584:	4631      	mov	r1, r6
 8006586:	4628      	mov	r0, r5
 8006588:	9206      	str	r2, [sp, #24]
 800658a:	47b8      	blx	r7
 800658c:	3001      	adds	r0, #1
 800658e:	f43f ae9c 	beq.w	80062ca <_printf_float+0xb6>
 8006592:	9a06      	ldr	r2, [sp, #24]
 8006594:	f10b 0b01 	add.w	fp, fp, #1
 8006598:	e7bb      	b.n	8006512 <_printf_float+0x2fe>
 800659a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800659e:	4631      	mov	r1, r6
 80065a0:	4628      	mov	r0, r5
 80065a2:	47b8      	blx	r7
 80065a4:	3001      	adds	r0, #1
 80065a6:	d1c0      	bne.n	800652a <_printf_float+0x316>
 80065a8:	e68f      	b.n	80062ca <_printf_float+0xb6>
 80065aa:	9a06      	ldr	r2, [sp, #24]
 80065ac:	464b      	mov	r3, r9
 80065ae:	4442      	add	r2, r8
 80065b0:	4631      	mov	r1, r6
 80065b2:	4628      	mov	r0, r5
 80065b4:	47b8      	blx	r7
 80065b6:	3001      	adds	r0, #1
 80065b8:	d1c3      	bne.n	8006542 <_printf_float+0x32e>
 80065ba:	e686      	b.n	80062ca <_printf_float+0xb6>
 80065bc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80065c0:	f1ba 0f01 	cmp.w	sl, #1
 80065c4:	dc01      	bgt.n	80065ca <_printf_float+0x3b6>
 80065c6:	07db      	lsls	r3, r3, #31
 80065c8:	d536      	bpl.n	8006638 <_printf_float+0x424>
 80065ca:	2301      	movs	r3, #1
 80065cc:	4642      	mov	r2, r8
 80065ce:	4631      	mov	r1, r6
 80065d0:	4628      	mov	r0, r5
 80065d2:	47b8      	blx	r7
 80065d4:	3001      	adds	r0, #1
 80065d6:	f43f ae78 	beq.w	80062ca <_printf_float+0xb6>
 80065da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065de:	4631      	mov	r1, r6
 80065e0:	4628      	mov	r0, r5
 80065e2:	47b8      	blx	r7
 80065e4:	3001      	adds	r0, #1
 80065e6:	f43f ae70 	beq.w	80062ca <_printf_float+0xb6>
 80065ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80065ee:	2200      	movs	r2, #0
 80065f0:	2300      	movs	r3, #0
 80065f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80065f6:	f7fa fa67 	bl	8000ac8 <__aeabi_dcmpeq>
 80065fa:	b9c0      	cbnz	r0, 800662e <_printf_float+0x41a>
 80065fc:	4653      	mov	r3, sl
 80065fe:	f108 0201 	add.w	r2, r8, #1
 8006602:	4631      	mov	r1, r6
 8006604:	4628      	mov	r0, r5
 8006606:	47b8      	blx	r7
 8006608:	3001      	adds	r0, #1
 800660a:	d10c      	bne.n	8006626 <_printf_float+0x412>
 800660c:	e65d      	b.n	80062ca <_printf_float+0xb6>
 800660e:	2301      	movs	r3, #1
 8006610:	465a      	mov	r2, fp
 8006612:	4631      	mov	r1, r6
 8006614:	4628      	mov	r0, r5
 8006616:	47b8      	blx	r7
 8006618:	3001      	adds	r0, #1
 800661a:	f43f ae56 	beq.w	80062ca <_printf_float+0xb6>
 800661e:	f108 0801 	add.w	r8, r8, #1
 8006622:	45d0      	cmp	r8, sl
 8006624:	dbf3      	blt.n	800660e <_printf_float+0x3fa>
 8006626:	464b      	mov	r3, r9
 8006628:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800662c:	e6df      	b.n	80063ee <_printf_float+0x1da>
 800662e:	f04f 0800 	mov.w	r8, #0
 8006632:	f104 0b1a 	add.w	fp, r4, #26
 8006636:	e7f4      	b.n	8006622 <_printf_float+0x40e>
 8006638:	2301      	movs	r3, #1
 800663a:	4642      	mov	r2, r8
 800663c:	e7e1      	b.n	8006602 <_printf_float+0x3ee>
 800663e:	2301      	movs	r3, #1
 8006640:	464a      	mov	r2, r9
 8006642:	4631      	mov	r1, r6
 8006644:	4628      	mov	r0, r5
 8006646:	47b8      	blx	r7
 8006648:	3001      	adds	r0, #1
 800664a:	f43f ae3e 	beq.w	80062ca <_printf_float+0xb6>
 800664e:	f108 0801 	add.w	r8, r8, #1
 8006652:	68e3      	ldr	r3, [r4, #12]
 8006654:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006656:	1a5b      	subs	r3, r3, r1
 8006658:	4543      	cmp	r3, r8
 800665a:	dcf0      	bgt.n	800663e <_printf_float+0x42a>
 800665c:	e6fc      	b.n	8006458 <_printf_float+0x244>
 800665e:	f04f 0800 	mov.w	r8, #0
 8006662:	f104 0919 	add.w	r9, r4, #25
 8006666:	e7f4      	b.n	8006652 <_printf_float+0x43e>

08006668 <_printf_common>:
 8006668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800666c:	4616      	mov	r6, r2
 800666e:	4698      	mov	r8, r3
 8006670:	688a      	ldr	r2, [r1, #8]
 8006672:	690b      	ldr	r3, [r1, #16]
 8006674:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006678:	4293      	cmp	r3, r2
 800667a:	bfb8      	it	lt
 800667c:	4613      	movlt	r3, r2
 800667e:	6033      	str	r3, [r6, #0]
 8006680:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006684:	4607      	mov	r7, r0
 8006686:	460c      	mov	r4, r1
 8006688:	b10a      	cbz	r2, 800668e <_printf_common+0x26>
 800668a:	3301      	adds	r3, #1
 800668c:	6033      	str	r3, [r6, #0]
 800668e:	6823      	ldr	r3, [r4, #0]
 8006690:	0699      	lsls	r1, r3, #26
 8006692:	bf42      	ittt	mi
 8006694:	6833      	ldrmi	r3, [r6, #0]
 8006696:	3302      	addmi	r3, #2
 8006698:	6033      	strmi	r3, [r6, #0]
 800669a:	6825      	ldr	r5, [r4, #0]
 800669c:	f015 0506 	ands.w	r5, r5, #6
 80066a0:	d106      	bne.n	80066b0 <_printf_common+0x48>
 80066a2:	f104 0a19 	add.w	sl, r4, #25
 80066a6:	68e3      	ldr	r3, [r4, #12]
 80066a8:	6832      	ldr	r2, [r6, #0]
 80066aa:	1a9b      	subs	r3, r3, r2
 80066ac:	42ab      	cmp	r3, r5
 80066ae:	dc26      	bgt.n	80066fe <_printf_common+0x96>
 80066b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80066b4:	6822      	ldr	r2, [r4, #0]
 80066b6:	3b00      	subs	r3, #0
 80066b8:	bf18      	it	ne
 80066ba:	2301      	movne	r3, #1
 80066bc:	0692      	lsls	r2, r2, #26
 80066be:	d42b      	bmi.n	8006718 <_printf_common+0xb0>
 80066c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80066c4:	4641      	mov	r1, r8
 80066c6:	4638      	mov	r0, r7
 80066c8:	47c8      	blx	r9
 80066ca:	3001      	adds	r0, #1
 80066cc:	d01e      	beq.n	800670c <_printf_common+0xa4>
 80066ce:	6823      	ldr	r3, [r4, #0]
 80066d0:	6922      	ldr	r2, [r4, #16]
 80066d2:	f003 0306 	and.w	r3, r3, #6
 80066d6:	2b04      	cmp	r3, #4
 80066d8:	bf02      	ittt	eq
 80066da:	68e5      	ldreq	r5, [r4, #12]
 80066dc:	6833      	ldreq	r3, [r6, #0]
 80066de:	1aed      	subeq	r5, r5, r3
 80066e0:	68a3      	ldr	r3, [r4, #8]
 80066e2:	bf0c      	ite	eq
 80066e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80066e8:	2500      	movne	r5, #0
 80066ea:	4293      	cmp	r3, r2
 80066ec:	bfc4      	itt	gt
 80066ee:	1a9b      	subgt	r3, r3, r2
 80066f0:	18ed      	addgt	r5, r5, r3
 80066f2:	2600      	movs	r6, #0
 80066f4:	341a      	adds	r4, #26
 80066f6:	42b5      	cmp	r5, r6
 80066f8:	d11a      	bne.n	8006730 <_printf_common+0xc8>
 80066fa:	2000      	movs	r0, #0
 80066fc:	e008      	b.n	8006710 <_printf_common+0xa8>
 80066fe:	2301      	movs	r3, #1
 8006700:	4652      	mov	r2, sl
 8006702:	4641      	mov	r1, r8
 8006704:	4638      	mov	r0, r7
 8006706:	47c8      	blx	r9
 8006708:	3001      	adds	r0, #1
 800670a:	d103      	bne.n	8006714 <_printf_common+0xac>
 800670c:	f04f 30ff 	mov.w	r0, #4294967295
 8006710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006714:	3501      	adds	r5, #1
 8006716:	e7c6      	b.n	80066a6 <_printf_common+0x3e>
 8006718:	18e1      	adds	r1, r4, r3
 800671a:	1c5a      	adds	r2, r3, #1
 800671c:	2030      	movs	r0, #48	@ 0x30
 800671e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006722:	4422      	add	r2, r4
 8006724:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006728:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800672c:	3302      	adds	r3, #2
 800672e:	e7c7      	b.n	80066c0 <_printf_common+0x58>
 8006730:	2301      	movs	r3, #1
 8006732:	4622      	mov	r2, r4
 8006734:	4641      	mov	r1, r8
 8006736:	4638      	mov	r0, r7
 8006738:	47c8      	blx	r9
 800673a:	3001      	adds	r0, #1
 800673c:	d0e6      	beq.n	800670c <_printf_common+0xa4>
 800673e:	3601      	adds	r6, #1
 8006740:	e7d9      	b.n	80066f6 <_printf_common+0x8e>
	...

08006744 <_printf_i>:
 8006744:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006748:	7e0f      	ldrb	r7, [r1, #24]
 800674a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800674c:	2f78      	cmp	r7, #120	@ 0x78
 800674e:	4691      	mov	r9, r2
 8006750:	4680      	mov	r8, r0
 8006752:	460c      	mov	r4, r1
 8006754:	469a      	mov	sl, r3
 8006756:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800675a:	d807      	bhi.n	800676c <_printf_i+0x28>
 800675c:	2f62      	cmp	r7, #98	@ 0x62
 800675e:	d80a      	bhi.n	8006776 <_printf_i+0x32>
 8006760:	2f00      	cmp	r7, #0
 8006762:	f000 80d2 	beq.w	800690a <_printf_i+0x1c6>
 8006766:	2f58      	cmp	r7, #88	@ 0x58
 8006768:	f000 80b9 	beq.w	80068de <_printf_i+0x19a>
 800676c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006770:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006774:	e03a      	b.n	80067ec <_printf_i+0xa8>
 8006776:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800677a:	2b15      	cmp	r3, #21
 800677c:	d8f6      	bhi.n	800676c <_printf_i+0x28>
 800677e:	a101      	add	r1, pc, #4	@ (adr r1, 8006784 <_printf_i+0x40>)
 8006780:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006784:	080067dd 	.word	0x080067dd
 8006788:	080067f1 	.word	0x080067f1
 800678c:	0800676d 	.word	0x0800676d
 8006790:	0800676d 	.word	0x0800676d
 8006794:	0800676d 	.word	0x0800676d
 8006798:	0800676d 	.word	0x0800676d
 800679c:	080067f1 	.word	0x080067f1
 80067a0:	0800676d 	.word	0x0800676d
 80067a4:	0800676d 	.word	0x0800676d
 80067a8:	0800676d 	.word	0x0800676d
 80067ac:	0800676d 	.word	0x0800676d
 80067b0:	080068f1 	.word	0x080068f1
 80067b4:	0800681b 	.word	0x0800681b
 80067b8:	080068ab 	.word	0x080068ab
 80067bc:	0800676d 	.word	0x0800676d
 80067c0:	0800676d 	.word	0x0800676d
 80067c4:	08006913 	.word	0x08006913
 80067c8:	0800676d 	.word	0x0800676d
 80067cc:	0800681b 	.word	0x0800681b
 80067d0:	0800676d 	.word	0x0800676d
 80067d4:	0800676d 	.word	0x0800676d
 80067d8:	080068b3 	.word	0x080068b3
 80067dc:	6833      	ldr	r3, [r6, #0]
 80067de:	1d1a      	adds	r2, r3, #4
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	6032      	str	r2, [r6, #0]
 80067e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80067e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80067ec:	2301      	movs	r3, #1
 80067ee:	e09d      	b.n	800692c <_printf_i+0x1e8>
 80067f0:	6833      	ldr	r3, [r6, #0]
 80067f2:	6820      	ldr	r0, [r4, #0]
 80067f4:	1d19      	adds	r1, r3, #4
 80067f6:	6031      	str	r1, [r6, #0]
 80067f8:	0606      	lsls	r6, r0, #24
 80067fa:	d501      	bpl.n	8006800 <_printf_i+0xbc>
 80067fc:	681d      	ldr	r5, [r3, #0]
 80067fe:	e003      	b.n	8006808 <_printf_i+0xc4>
 8006800:	0645      	lsls	r5, r0, #25
 8006802:	d5fb      	bpl.n	80067fc <_printf_i+0xb8>
 8006804:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006808:	2d00      	cmp	r5, #0
 800680a:	da03      	bge.n	8006814 <_printf_i+0xd0>
 800680c:	232d      	movs	r3, #45	@ 0x2d
 800680e:	426d      	negs	r5, r5
 8006810:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006814:	4859      	ldr	r0, [pc, #356]	@ (800697c <_printf_i+0x238>)
 8006816:	230a      	movs	r3, #10
 8006818:	e011      	b.n	800683e <_printf_i+0xfa>
 800681a:	6821      	ldr	r1, [r4, #0]
 800681c:	6833      	ldr	r3, [r6, #0]
 800681e:	0608      	lsls	r0, r1, #24
 8006820:	f853 5b04 	ldr.w	r5, [r3], #4
 8006824:	d402      	bmi.n	800682c <_printf_i+0xe8>
 8006826:	0649      	lsls	r1, r1, #25
 8006828:	bf48      	it	mi
 800682a:	b2ad      	uxthmi	r5, r5
 800682c:	2f6f      	cmp	r7, #111	@ 0x6f
 800682e:	4853      	ldr	r0, [pc, #332]	@ (800697c <_printf_i+0x238>)
 8006830:	6033      	str	r3, [r6, #0]
 8006832:	bf14      	ite	ne
 8006834:	230a      	movne	r3, #10
 8006836:	2308      	moveq	r3, #8
 8006838:	2100      	movs	r1, #0
 800683a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800683e:	6866      	ldr	r6, [r4, #4]
 8006840:	60a6      	str	r6, [r4, #8]
 8006842:	2e00      	cmp	r6, #0
 8006844:	bfa2      	ittt	ge
 8006846:	6821      	ldrge	r1, [r4, #0]
 8006848:	f021 0104 	bicge.w	r1, r1, #4
 800684c:	6021      	strge	r1, [r4, #0]
 800684e:	b90d      	cbnz	r5, 8006854 <_printf_i+0x110>
 8006850:	2e00      	cmp	r6, #0
 8006852:	d04b      	beq.n	80068ec <_printf_i+0x1a8>
 8006854:	4616      	mov	r6, r2
 8006856:	fbb5 f1f3 	udiv	r1, r5, r3
 800685a:	fb03 5711 	mls	r7, r3, r1, r5
 800685e:	5dc7      	ldrb	r7, [r0, r7]
 8006860:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006864:	462f      	mov	r7, r5
 8006866:	42bb      	cmp	r3, r7
 8006868:	460d      	mov	r5, r1
 800686a:	d9f4      	bls.n	8006856 <_printf_i+0x112>
 800686c:	2b08      	cmp	r3, #8
 800686e:	d10b      	bne.n	8006888 <_printf_i+0x144>
 8006870:	6823      	ldr	r3, [r4, #0]
 8006872:	07df      	lsls	r7, r3, #31
 8006874:	d508      	bpl.n	8006888 <_printf_i+0x144>
 8006876:	6923      	ldr	r3, [r4, #16]
 8006878:	6861      	ldr	r1, [r4, #4]
 800687a:	4299      	cmp	r1, r3
 800687c:	bfde      	ittt	le
 800687e:	2330      	movle	r3, #48	@ 0x30
 8006880:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006884:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006888:	1b92      	subs	r2, r2, r6
 800688a:	6122      	str	r2, [r4, #16]
 800688c:	f8cd a000 	str.w	sl, [sp]
 8006890:	464b      	mov	r3, r9
 8006892:	aa03      	add	r2, sp, #12
 8006894:	4621      	mov	r1, r4
 8006896:	4640      	mov	r0, r8
 8006898:	f7ff fee6 	bl	8006668 <_printf_common>
 800689c:	3001      	adds	r0, #1
 800689e:	d14a      	bne.n	8006936 <_printf_i+0x1f2>
 80068a0:	f04f 30ff 	mov.w	r0, #4294967295
 80068a4:	b004      	add	sp, #16
 80068a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068aa:	6823      	ldr	r3, [r4, #0]
 80068ac:	f043 0320 	orr.w	r3, r3, #32
 80068b0:	6023      	str	r3, [r4, #0]
 80068b2:	4833      	ldr	r0, [pc, #204]	@ (8006980 <_printf_i+0x23c>)
 80068b4:	2778      	movs	r7, #120	@ 0x78
 80068b6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80068ba:	6823      	ldr	r3, [r4, #0]
 80068bc:	6831      	ldr	r1, [r6, #0]
 80068be:	061f      	lsls	r7, r3, #24
 80068c0:	f851 5b04 	ldr.w	r5, [r1], #4
 80068c4:	d402      	bmi.n	80068cc <_printf_i+0x188>
 80068c6:	065f      	lsls	r7, r3, #25
 80068c8:	bf48      	it	mi
 80068ca:	b2ad      	uxthmi	r5, r5
 80068cc:	6031      	str	r1, [r6, #0]
 80068ce:	07d9      	lsls	r1, r3, #31
 80068d0:	bf44      	itt	mi
 80068d2:	f043 0320 	orrmi.w	r3, r3, #32
 80068d6:	6023      	strmi	r3, [r4, #0]
 80068d8:	b11d      	cbz	r5, 80068e2 <_printf_i+0x19e>
 80068da:	2310      	movs	r3, #16
 80068dc:	e7ac      	b.n	8006838 <_printf_i+0xf4>
 80068de:	4827      	ldr	r0, [pc, #156]	@ (800697c <_printf_i+0x238>)
 80068e0:	e7e9      	b.n	80068b6 <_printf_i+0x172>
 80068e2:	6823      	ldr	r3, [r4, #0]
 80068e4:	f023 0320 	bic.w	r3, r3, #32
 80068e8:	6023      	str	r3, [r4, #0]
 80068ea:	e7f6      	b.n	80068da <_printf_i+0x196>
 80068ec:	4616      	mov	r6, r2
 80068ee:	e7bd      	b.n	800686c <_printf_i+0x128>
 80068f0:	6833      	ldr	r3, [r6, #0]
 80068f2:	6825      	ldr	r5, [r4, #0]
 80068f4:	6961      	ldr	r1, [r4, #20]
 80068f6:	1d18      	adds	r0, r3, #4
 80068f8:	6030      	str	r0, [r6, #0]
 80068fa:	062e      	lsls	r6, r5, #24
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	d501      	bpl.n	8006904 <_printf_i+0x1c0>
 8006900:	6019      	str	r1, [r3, #0]
 8006902:	e002      	b.n	800690a <_printf_i+0x1c6>
 8006904:	0668      	lsls	r0, r5, #25
 8006906:	d5fb      	bpl.n	8006900 <_printf_i+0x1bc>
 8006908:	8019      	strh	r1, [r3, #0]
 800690a:	2300      	movs	r3, #0
 800690c:	6123      	str	r3, [r4, #16]
 800690e:	4616      	mov	r6, r2
 8006910:	e7bc      	b.n	800688c <_printf_i+0x148>
 8006912:	6833      	ldr	r3, [r6, #0]
 8006914:	1d1a      	adds	r2, r3, #4
 8006916:	6032      	str	r2, [r6, #0]
 8006918:	681e      	ldr	r6, [r3, #0]
 800691a:	6862      	ldr	r2, [r4, #4]
 800691c:	2100      	movs	r1, #0
 800691e:	4630      	mov	r0, r6
 8006920:	f7f9 fc56 	bl	80001d0 <memchr>
 8006924:	b108      	cbz	r0, 800692a <_printf_i+0x1e6>
 8006926:	1b80      	subs	r0, r0, r6
 8006928:	6060      	str	r0, [r4, #4]
 800692a:	6863      	ldr	r3, [r4, #4]
 800692c:	6123      	str	r3, [r4, #16]
 800692e:	2300      	movs	r3, #0
 8006930:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006934:	e7aa      	b.n	800688c <_printf_i+0x148>
 8006936:	6923      	ldr	r3, [r4, #16]
 8006938:	4632      	mov	r2, r6
 800693a:	4649      	mov	r1, r9
 800693c:	4640      	mov	r0, r8
 800693e:	47d0      	blx	sl
 8006940:	3001      	adds	r0, #1
 8006942:	d0ad      	beq.n	80068a0 <_printf_i+0x15c>
 8006944:	6823      	ldr	r3, [r4, #0]
 8006946:	079b      	lsls	r3, r3, #30
 8006948:	d413      	bmi.n	8006972 <_printf_i+0x22e>
 800694a:	68e0      	ldr	r0, [r4, #12]
 800694c:	9b03      	ldr	r3, [sp, #12]
 800694e:	4298      	cmp	r0, r3
 8006950:	bfb8      	it	lt
 8006952:	4618      	movlt	r0, r3
 8006954:	e7a6      	b.n	80068a4 <_printf_i+0x160>
 8006956:	2301      	movs	r3, #1
 8006958:	4632      	mov	r2, r6
 800695a:	4649      	mov	r1, r9
 800695c:	4640      	mov	r0, r8
 800695e:	47d0      	blx	sl
 8006960:	3001      	adds	r0, #1
 8006962:	d09d      	beq.n	80068a0 <_printf_i+0x15c>
 8006964:	3501      	adds	r5, #1
 8006966:	68e3      	ldr	r3, [r4, #12]
 8006968:	9903      	ldr	r1, [sp, #12]
 800696a:	1a5b      	subs	r3, r3, r1
 800696c:	42ab      	cmp	r3, r5
 800696e:	dcf2      	bgt.n	8006956 <_printf_i+0x212>
 8006970:	e7eb      	b.n	800694a <_printf_i+0x206>
 8006972:	2500      	movs	r5, #0
 8006974:	f104 0619 	add.w	r6, r4, #25
 8006978:	e7f5      	b.n	8006966 <_printf_i+0x222>
 800697a:	bf00      	nop
 800697c:	0800aa2e 	.word	0x0800aa2e
 8006980:	0800aa3f 	.word	0x0800aa3f

08006984 <_scanf_float>:
 8006984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006988:	b087      	sub	sp, #28
 800698a:	4617      	mov	r7, r2
 800698c:	9303      	str	r3, [sp, #12]
 800698e:	688b      	ldr	r3, [r1, #8]
 8006990:	1e5a      	subs	r2, r3, #1
 8006992:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006996:	bf81      	itttt	hi
 8006998:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800699c:	eb03 0b05 	addhi.w	fp, r3, r5
 80069a0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80069a4:	608b      	strhi	r3, [r1, #8]
 80069a6:	680b      	ldr	r3, [r1, #0]
 80069a8:	460a      	mov	r2, r1
 80069aa:	f04f 0500 	mov.w	r5, #0
 80069ae:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80069b2:	f842 3b1c 	str.w	r3, [r2], #28
 80069b6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80069ba:	4680      	mov	r8, r0
 80069bc:	460c      	mov	r4, r1
 80069be:	bf98      	it	ls
 80069c0:	f04f 0b00 	movls.w	fp, #0
 80069c4:	9201      	str	r2, [sp, #4]
 80069c6:	4616      	mov	r6, r2
 80069c8:	46aa      	mov	sl, r5
 80069ca:	46a9      	mov	r9, r5
 80069cc:	9502      	str	r5, [sp, #8]
 80069ce:	68a2      	ldr	r2, [r4, #8]
 80069d0:	b152      	cbz	r2, 80069e8 <_scanf_float+0x64>
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	2b4e      	cmp	r3, #78	@ 0x4e
 80069d8:	d864      	bhi.n	8006aa4 <_scanf_float+0x120>
 80069da:	2b40      	cmp	r3, #64	@ 0x40
 80069dc:	d83c      	bhi.n	8006a58 <_scanf_float+0xd4>
 80069de:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80069e2:	b2c8      	uxtb	r0, r1
 80069e4:	280e      	cmp	r0, #14
 80069e6:	d93a      	bls.n	8006a5e <_scanf_float+0xda>
 80069e8:	f1b9 0f00 	cmp.w	r9, #0
 80069ec:	d003      	beq.n	80069f6 <_scanf_float+0x72>
 80069ee:	6823      	ldr	r3, [r4, #0]
 80069f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80069f4:	6023      	str	r3, [r4, #0]
 80069f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80069fa:	f1ba 0f01 	cmp.w	sl, #1
 80069fe:	f200 8117 	bhi.w	8006c30 <_scanf_float+0x2ac>
 8006a02:	9b01      	ldr	r3, [sp, #4]
 8006a04:	429e      	cmp	r6, r3
 8006a06:	f200 8108 	bhi.w	8006c1a <_scanf_float+0x296>
 8006a0a:	2001      	movs	r0, #1
 8006a0c:	b007      	add	sp, #28
 8006a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a12:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006a16:	2a0d      	cmp	r2, #13
 8006a18:	d8e6      	bhi.n	80069e8 <_scanf_float+0x64>
 8006a1a:	a101      	add	r1, pc, #4	@ (adr r1, 8006a20 <_scanf_float+0x9c>)
 8006a1c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006a20:	08006b67 	.word	0x08006b67
 8006a24:	080069e9 	.word	0x080069e9
 8006a28:	080069e9 	.word	0x080069e9
 8006a2c:	080069e9 	.word	0x080069e9
 8006a30:	08006bc7 	.word	0x08006bc7
 8006a34:	08006b9f 	.word	0x08006b9f
 8006a38:	080069e9 	.word	0x080069e9
 8006a3c:	080069e9 	.word	0x080069e9
 8006a40:	08006b75 	.word	0x08006b75
 8006a44:	080069e9 	.word	0x080069e9
 8006a48:	080069e9 	.word	0x080069e9
 8006a4c:	080069e9 	.word	0x080069e9
 8006a50:	080069e9 	.word	0x080069e9
 8006a54:	08006b2d 	.word	0x08006b2d
 8006a58:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006a5c:	e7db      	b.n	8006a16 <_scanf_float+0x92>
 8006a5e:	290e      	cmp	r1, #14
 8006a60:	d8c2      	bhi.n	80069e8 <_scanf_float+0x64>
 8006a62:	a001      	add	r0, pc, #4	@ (adr r0, 8006a68 <_scanf_float+0xe4>)
 8006a64:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006a68:	08006b1d 	.word	0x08006b1d
 8006a6c:	080069e9 	.word	0x080069e9
 8006a70:	08006b1d 	.word	0x08006b1d
 8006a74:	08006bb3 	.word	0x08006bb3
 8006a78:	080069e9 	.word	0x080069e9
 8006a7c:	08006ac5 	.word	0x08006ac5
 8006a80:	08006b03 	.word	0x08006b03
 8006a84:	08006b03 	.word	0x08006b03
 8006a88:	08006b03 	.word	0x08006b03
 8006a8c:	08006b03 	.word	0x08006b03
 8006a90:	08006b03 	.word	0x08006b03
 8006a94:	08006b03 	.word	0x08006b03
 8006a98:	08006b03 	.word	0x08006b03
 8006a9c:	08006b03 	.word	0x08006b03
 8006aa0:	08006b03 	.word	0x08006b03
 8006aa4:	2b6e      	cmp	r3, #110	@ 0x6e
 8006aa6:	d809      	bhi.n	8006abc <_scanf_float+0x138>
 8006aa8:	2b60      	cmp	r3, #96	@ 0x60
 8006aaa:	d8b2      	bhi.n	8006a12 <_scanf_float+0x8e>
 8006aac:	2b54      	cmp	r3, #84	@ 0x54
 8006aae:	d07b      	beq.n	8006ba8 <_scanf_float+0x224>
 8006ab0:	2b59      	cmp	r3, #89	@ 0x59
 8006ab2:	d199      	bne.n	80069e8 <_scanf_float+0x64>
 8006ab4:	2d07      	cmp	r5, #7
 8006ab6:	d197      	bne.n	80069e8 <_scanf_float+0x64>
 8006ab8:	2508      	movs	r5, #8
 8006aba:	e02c      	b.n	8006b16 <_scanf_float+0x192>
 8006abc:	2b74      	cmp	r3, #116	@ 0x74
 8006abe:	d073      	beq.n	8006ba8 <_scanf_float+0x224>
 8006ac0:	2b79      	cmp	r3, #121	@ 0x79
 8006ac2:	e7f6      	b.n	8006ab2 <_scanf_float+0x12e>
 8006ac4:	6821      	ldr	r1, [r4, #0]
 8006ac6:	05c8      	lsls	r0, r1, #23
 8006ac8:	d51b      	bpl.n	8006b02 <_scanf_float+0x17e>
 8006aca:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006ace:	6021      	str	r1, [r4, #0]
 8006ad0:	f109 0901 	add.w	r9, r9, #1
 8006ad4:	f1bb 0f00 	cmp.w	fp, #0
 8006ad8:	d003      	beq.n	8006ae2 <_scanf_float+0x15e>
 8006ada:	3201      	adds	r2, #1
 8006adc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006ae0:	60a2      	str	r2, [r4, #8]
 8006ae2:	68a3      	ldr	r3, [r4, #8]
 8006ae4:	3b01      	subs	r3, #1
 8006ae6:	60a3      	str	r3, [r4, #8]
 8006ae8:	6923      	ldr	r3, [r4, #16]
 8006aea:	3301      	adds	r3, #1
 8006aec:	6123      	str	r3, [r4, #16]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	3b01      	subs	r3, #1
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	607b      	str	r3, [r7, #4]
 8006af6:	f340 8087 	ble.w	8006c08 <_scanf_float+0x284>
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	3301      	adds	r3, #1
 8006afe:	603b      	str	r3, [r7, #0]
 8006b00:	e765      	b.n	80069ce <_scanf_float+0x4a>
 8006b02:	eb1a 0105 	adds.w	r1, sl, r5
 8006b06:	f47f af6f 	bne.w	80069e8 <_scanf_float+0x64>
 8006b0a:	6822      	ldr	r2, [r4, #0]
 8006b0c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006b10:	6022      	str	r2, [r4, #0]
 8006b12:	460d      	mov	r5, r1
 8006b14:	468a      	mov	sl, r1
 8006b16:	f806 3b01 	strb.w	r3, [r6], #1
 8006b1a:	e7e2      	b.n	8006ae2 <_scanf_float+0x15e>
 8006b1c:	6822      	ldr	r2, [r4, #0]
 8006b1e:	0610      	lsls	r0, r2, #24
 8006b20:	f57f af62 	bpl.w	80069e8 <_scanf_float+0x64>
 8006b24:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006b28:	6022      	str	r2, [r4, #0]
 8006b2a:	e7f4      	b.n	8006b16 <_scanf_float+0x192>
 8006b2c:	f1ba 0f00 	cmp.w	sl, #0
 8006b30:	d10e      	bne.n	8006b50 <_scanf_float+0x1cc>
 8006b32:	f1b9 0f00 	cmp.w	r9, #0
 8006b36:	d10e      	bne.n	8006b56 <_scanf_float+0x1d2>
 8006b38:	6822      	ldr	r2, [r4, #0]
 8006b3a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006b3e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006b42:	d108      	bne.n	8006b56 <_scanf_float+0x1d2>
 8006b44:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006b48:	6022      	str	r2, [r4, #0]
 8006b4a:	f04f 0a01 	mov.w	sl, #1
 8006b4e:	e7e2      	b.n	8006b16 <_scanf_float+0x192>
 8006b50:	f1ba 0f02 	cmp.w	sl, #2
 8006b54:	d055      	beq.n	8006c02 <_scanf_float+0x27e>
 8006b56:	2d01      	cmp	r5, #1
 8006b58:	d002      	beq.n	8006b60 <_scanf_float+0x1dc>
 8006b5a:	2d04      	cmp	r5, #4
 8006b5c:	f47f af44 	bne.w	80069e8 <_scanf_float+0x64>
 8006b60:	3501      	adds	r5, #1
 8006b62:	b2ed      	uxtb	r5, r5
 8006b64:	e7d7      	b.n	8006b16 <_scanf_float+0x192>
 8006b66:	f1ba 0f01 	cmp.w	sl, #1
 8006b6a:	f47f af3d 	bne.w	80069e8 <_scanf_float+0x64>
 8006b6e:	f04f 0a02 	mov.w	sl, #2
 8006b72:	e7d0      	b.n	8006b16 <_scanf_float+0x192>
 8006b74:	b97d      	cbnz	r5, 8006b96 <_scanf_float+0x212>
 8006b76:	f1b9 0f00 	cmp.w	r9, #0
 8006b7a:	f47f af38 	bne.w	80069ee <_scanf_float+0x6a>
 8006b7e:	6822      	ldr	r2, [r4, #0]
 8006b80:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006b84:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006b88:	f040 8108 	bne.w	8006d9c <_scanf_float+0x418>
 8006b8c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006b90:	6022      	str	r2, [r4, #0]
 8006b92:	2501      	movs	r5, #1
 8006b94:	e7bf      	b.n	8006b16 <_scanf_float+0x192>
 8006b96:	2d03      	cmp	r5, #3
 8006b98:	d0e2      	beq.n	8006b60 <_scanf_float+0x1dc>
 8006b9a:	2d05      	cmp	r5, #5
 8006b9c:	e7de      	b.n	8006b5c <_scanf_float+0x1d8>
 8006b9e:	2d02      	cmp	r5, #2
 8006ba0:	f47f af22 	bne.w	80069e8 <_scanf_float+0x64>
 8006ba4:	2503      	movs	r5, #3
 8006ba6:	e7b6      	b.n	8006b16 <_scanf_float+0x192>
 8006ba8:	2d06      	cmp	r5, #6
 8006baa:	f47f af1d 	bne.w	80069e8 <_scanf_float+0x64>
 8006bae:	2507      	movs	r5, #7
 8006bb0:	e7b1      	b.n	8006b16 <_scanf_float+0x192>
 8006bb2:	6822      	ldr	r2, [r4, #0]
 8006bb4:	0591      	lsls	r1, r2, #22
 8006bb6:	f57f af17 	bpl.w	80069e8 <_scanf_float+0x64>
 8006bba:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006bbe:	6022      	str	r2, [r4, #0]
 8006bc0:	f8cd 9008 	str.w	r9, [sp, #8]
 8006bc4:	e7a7      	b.n	8006b16 <_scanf_float+0x192>
 8006bc6:	6822      	ldr	r2, [r4, #0]
 8006bc8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006bcc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006bd0:	d006      	beq.n	8006be0 <_scanf_float+0x25c>
 8006bd2:	0550      	lsls	r0, r2, #21
 8006bd4:	f57f af08 	bpl.w	80069e8 <_scanf_float+0x64>
 8006bd8:	f1b9 0f00 	cmp.w	r9, #0
 8006bdc:	f000 80de 	beq.w	8006d9c <_scanf_float+0x418>
 8006be0:	0591      	lsls	r1, r2, #22
 8006be2:	bf58      	it	pl
 8006be4:	9902      	ldrpl	r1, [sp, #8]
 8006be6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006bea:	bf58      	it	pl
 8006bec:	eba9 0101 	subpl.w	r1, r9, r1
 8006bf0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006bf4:	bf58      	it	pl
 8006bf6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006bfa:	6022      	str	r2, [r4, #0]
 8006bfc:	f04f 0900 	mov.w	r9, #0
 8006c00:	e789      	b.n	8006b16 <_scanf_float+0x192>
 8006c02:	f04f 0a03 	mov.w	sl, #3
 8006c06:	e786      	b.n	8006b16 <_scanf_float+0x192>
 8006c08:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006c0c:	4639      	mov	r1, r7
 8006c0e:	4640      	mov	r0, r8
 8006c10:	4798      	blx	r3
 8006c12:	2800      	cmp	r0, #0
 8006c14:	f43f aedb 	beq.w	80069ce <_scanf_float+0x4a>
 8006c18:	e6e6      	b.n	80069e8 <_scanf_float+0x64>
 8006c1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006c1e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006c22:	463a      	mov	r2, r7
 8006c24:	4640      	mov	r0, r8
 8006c26:	4798      	blx	r3
 8006c28:	6923      	ldr	r3, [r4, #16]
 8006c2a:	3b01      	subs	r3, #1
 8006c2c:	6123      	str	r3, [r4, #16]
 8006c2e:	e6e8      	b.n	8006a02 <_scanf_float+0x7e>
 8006c30:	1e6b      	subs	r3, r5, #1
 8006c32:	2b06      	cmp	r3, #6
 8006c34:	d824      	bhi.n	8006c80 <_scanf_float+0x2fc>
 8006c36:	2d02      	cmp	r5, #2
 8006c38:	d836      	bhi.n	8006ca8 <_scanf_float+0x324>
 8006c3a:	9b01      	ldr	r3, [sp, #4]
 8006c3c:	429e      	cmp	r6, r3
 8006c3e:	f67f aee4 	bls.w	8006a0a <_scanf_float+0x86>
 8006c42:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006c46:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006c4a:	463a      	mov	r2, r7
 8006c4c:	4640      	mov	r0, r8
 8006c4e:	4798      	blx	r3
 8006c50:	6923      	ldr	r3, [r4, #16]
 8006c52:	3b01      	subs	r3, #1
 8006c54:	6123      	str	r3, [r4, #16]
 8006c56:	e7f0      	b.n	8006c3a <_scanf_float+0x2b6>
 8006c58:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006c5c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006c60:	463a      	mov	r2, r7
 8006c62:	4640      	mov	r0, r8
 8006c64:	4798      	blx	r3
 8006c66:	6923      	ldr	r3, [r4, #16]
 8006c68:	3b01      	subs	r3, #1
 8006c6a:	6123      	str	r3, [r4, #16]
 8006c6c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006c70:	fa5f fa8a 	uxtb.w	sl, sl
 8006c74:	f1ba 0f02 	cmp.w	sl, #2
 8006c78:	d1ee      	bne.n	8006c58 <_scanf_float+0x2d4>
 8006c7a:	3d03      	subs	r5, #3
 8006c7c:	b2ed      	uxtb	r5, r5
 8006c7e:	1b76      	subs	r6, r6, r5
 8006c80:	6823      	ldr	r3, [r4, #0]
 8006c82:	05da      	lsls	r2, r3, #23
 8006c84:	d530      	bpl.n	8006ce8 <_scanf_float+0x364>
 8006c86:	055b      	lsls	r3, r3, #21
 8006c88:	d511      	bpl.n	8006cae <_scanf_float+0x32a>
 8006c8a:	9b01      	ldr	r3, [sp, #4]
 8006c8c:	429e      	cmp	r6, r3
 8006c8e:	f67f aebc 	bls.w	8006a0a <_scanf_float+0x86>
 8006c92:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006c96:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006c9a:	463a      	mov	r2, r7
 8006c9c:	4640      	mov	r0, r8
 8006c9e:	4798      	blx	r3
 8006ca0:	6923      	ldr	r3, [r4, #16]
 8006ca2:	3b01      	subs	r3, #1
 8006ca4:	6123      	str	r3, [r4, #16]
 8006ca6:	e7f0      	b.n	8006c8a <_scanf_float+0x306>
 8006ca8:	46aa      	mov	sl, r5
 8006caa:	46b3      	mov	fp, r6
 8006cac:	e7de      	b.n	8006c6c <_scanf_float+0x2e8>
 8006cae:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006cb2:	6923      	ldr	r3, [r4, #16]
 8006cb4:	2965      	cmp	r1, #101	@ 0x65
 8006cb6:	f103 33ff 	add.w	r3, r3, #4294967295
 8006cba:	f106 35ff 	add.w	r5, r6, #4294967295
 8006cbe:	6123      	str	r3, [r4, #16]
 8006cc0:	d00c      	beq.n	8006cdc <_scanf_float+0x358>
 8006cc2:	2945      	cmp	r1, #69	@ 0x45
 8006cc4:	d00a      	beq.n	8006cdc <_scanf_float+0x358>
 8006cc6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006cca:	463a      	mov	r2, r7
 8006ccc:	4640      	mov	r0, r8
 8006cce:	4798      	blx	r3
 8006cd0:	6923      	ldr	r3, [r4, #16]
 8006cd2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006cd6:	3b01      	subs	r3, #1
 8006cd8:	1eb5      	subs	r5, r6, #2
 8006cda:	6123      	str	r3, [r4, #16]
 8006cdc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006ce0:	463a      	mov	r2, r7
 8006ce2:	4640      	mov	r0, r8
 8006ce4:	4798      	blx	r3
 8006ce6:	462e      	mov	r6, r5
 8006ce8:	6822      	ldr	r2, [r4, #0]
 8006cea:	f012 0210 	ands.w	r2, r2, #16
 8006cee:	d001      	beq.n	8006cf4 <_scanf_float+0x370>
 8006cf0:	2000      	movs	r0, #0
 8006cf2:	e68b      	b.n	8006a0c <_scanf_float+0x88>
 8006cf4:	7032      	strb	r2, [r6, #0]
 8006cf6:	6823      	ldr	r3, [r4, #0]
 8006cf8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006cfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d00:	d11c      	bne.n	8006d3c <_scanf_float+0x3b8>
 8006d02:	9b02      	ldr	r3, [sp, #8]
 8006d04:	454b      	cmp	r3, r9
 8006d06:	eba3 0209 	sub.w	r2, r3, r9
 8006d0a:	d123      	bne.n	8006d54 <_scanf_float+0x3d0>
 8006d0c:	9901      	ldr	r1, [sp, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	4640      	mov	r0, r8
 8006d12:	f002 fd21 	bl	8009758 <_strtod_r>
 8006d16:	9b03      	ldr	r3, [sp, #12]
 8006d18:	6821      	ldr	r1, [r4, #0]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f011 0f02 	tst.w	r1, #2
 8006d20:	ec57 6b10 	vmov	r6, r7, d0
 8006d24:	f103 0204 	add.w	r2, r3, #4
 8006d28:	d01f      	beq.n	8006d6a <_scanf_float+0x3e6>
 8006d2a:	9903      	ldr	r1, [sp, #12]
 8006d2c:	600a      	str	r2, [r1, #0]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	e9c3 6700 	strd	r6, r7, [r3]
 8006d34:	68e3      	ldr	r3, [r4, #12]
 8006d36:	3301      	adds	r3, #1
 8006d38:	60e3      	str	r3, [r4, #12]
 8006d3a:	e7d9      	b.n	8006cf0 <_scanf_float+0x36c>
 8006d3c:	9b04      	ldr	r3, [sp, #16]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d0e4      	beq.n	8006d0c <_scanf_float+0x388>
 8006d42:	9905      	ldr	r1, [sp, #20]
 8006d44:	230a      	movs	r3, #10
 8006d46:	3101      	adds	r1, #1
 8006d48:	4640      	mov	r0, r8
 8006d4a:	f002 fd85 	bl	8009858 <_strtol_r>
 8006d4e:	9b04      	ldr	r3, [sp, #16]
 8006d50:	9e05      	ldr	r6, [sp, #20]
 8006d52:	1ac2      	subs	r2, r0, r3
 8006d54:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006d58:	429e      	cmp	r6, r3
 8006d5a:	bf28      	it	cs
 8006d5c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006d60:	4910      	ldr	r1, [pc, #64]	@ (8006da4 <_scanf_float+0x420>)
 8006d62:	4630      	mov	r0, r6
 8006d64:	f000 f954 	bl	8007010 <siprintf>
 8006d68:	e7d0      	b.n	8006d0c <_scanf_float+0x388>
 8006d6a:	f011 0f04 	tst.w	r1, #4
 8006d6e:	9903      	ldr	r1, [sp, #12]
 8006d70:	600a      	str	r2, [r1, #0]
 8006d72:	d1dc      	bne.n	8006d2e <_scanf_float+0x3aa>
 8006d74:	681d      	ldr	r5, [r3, #0]
 8006d76:	4632      	mov	r2, r6
 8006d78:	463b      	mov	r3, r7
 8006d7a:	4630      	mov	r0, r6
 8006d7c:	4639      	mov	r1, r7
 8006d7e:	f7f9 fed5 	bl	8000b2c <__aeabi_dcmpun>
 8006d82:	b128      	cbz	r0, 8006d90 <_scanf_float+0x40c>
 8006d84:	4808      	ldr	r0, [pc, #32]	@ (8006da8 <_scanf_float+0x424>)
 8006d86:	f000 fadf 	bl	8007348 <nanf>
 8006d8a:	ed85 0a00 	vstr	s0, [r5]
 8006d8e:	e7d1      	b.n	8006d34 <_scanf_float+0x3b0>
 8006d90:	4630      	mov	r0, r6
 8006d92:	4639      	mov	r1, r7
 8006d94:	f7f9 ff28 	bl	8000be8 <__aeabi_d2f>
 8006d98:	6028      	str	r0, [r5, #0]
 8006d9a:	e7cb      	b.n	8006d34 <_scanf_float+0x3b0>
 8006d9c:	f04f 0900 	mov.w	r9, #0
 8006da0:	e629      	b.n	80069f6 <_scanf_float+0x72>
 8006da2:	bf00      	nop
 8006da4:	0800aa50 	.word	0x0800aa50
 8006da8:	0800ade5 	.word	0x0800ade5

08006dac <std>:
 8006dac:	2300      	movs	r3, #0
 8006dae:	b510      	push	{r4, lr}
 8006db0:	4604      	mov	r4, r0
 8006db2:	e9c0 3300 	strd	r3, r3, [r0]
 8006db6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006dba:	6083      	str	r3, [r0, #8]
 8006dbc:	8181      	strh	r1, [r0, #12]
 8006dbe:	6643      	str	r3, [r0, #100]	@ 0x64
 8006dc0:	81c2      	strh	r2, [r0, #14]
 8006dc2:	6183      	str	r3, [r0, #24]
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	2208      	movs	r2, #8
 8006dc8:	305c      	adds	r0, #92	@ 0x5c
 8006dca:	f000 fa19 	bl	8007200 <memset>
 8006dce:	4b0d      	ldr	r3, [pc, #52]	@ (8006e04 <std+0x58>)
 8006dd0:	6263      	str	r3, [r4, #36]	@ 0x24
 8006dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8006e08 <std+0x5c>)
 8006dd4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006dd6:	4b0d      	ldr	r3, [pc, #52]	@ (8006e0c <std+0x60>)
 8006dd8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006dda:	4b0d      	ldr	r3, [pc, #52]	@ (8006e10 <std+0x64>)
 8006ddc:	6323      	str	r3, [r4, #48]	@ 0x30
 8006dde:	4b0d      	ldr	r3, [pc, #52]	@ (8006e14 <std+0x68>)
 8006de0:	6224      	str	r4, [r4, #32]
 8006de2:	429c      	cmp	r4, r3
 8006de4:	d006      	beq.n	8006df4 <std+0x48>
 8006de6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006dea:	4294      	cmp	r4, r2
 8006dec:	d002      	beq.n	8006df4 <std+0x48>
 8006dee:	33d0      	adds	r3, #208	@ 0xd0
 8006df0:	429c      	cmp	r4, r3
 8006df2:	d105      	bne.n	8006e00 <std+0x54>
 8006df4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006df8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dfc:	f000 ba92 	b.w	8007324 <__retarget_lock_init_recursive>
 8006e00:	bd10      	pop	{r4, pc}
 8006e02:	bf00      	nop
 8006e04:	08007051 	.word	0x08007051
 8006e08:	08007073 	.word	0x08007073
 8006e0c:	080070ab 	.word	0x080070ab
 8006e10:	080070cf 	.word	0x080070cf
 8006e14:	200007c0 	.word	0x200007c0

08006e18 <stdio_exit_handler>:
 8006e18:	4a02      	ldr	r2, [pc, #8]	@ (8006e24 <stdio_exit_handler+0xc>)
 8006e1a:	4903      	ldr	r1, [pc, #12]	@ (8006e28 <stdio_exit_handler+0x10>)
 8006e1c:	4803      	ldr	r0, [pc, #12]	@ (8006e2c <stdio_exit_handler+0x14>)
 8006e1e:	f000 b869 	b.w	8006ef4 <_fwalk_sglue>
 8006e22:	bf00      	nop
 8006e24:	2000000c 	.word	0x2000000c
 8006e28:	08009e99 	.word	0x08009e99
 8006e2c:	2000001c 	.word	0x2000001c

08006e30 <cleanup_stdio>:
 8006e30:	6841      	ldr	r1, [r0, #4]
 8006e32:	4b0c      	ldr	r3, [pc, #48]	@ (8006e64 <cleanup_stdio+0x34>)
 8006e34:	4299      	cmp	r1, r3
 8006e36:	b510      	push	{r4, lr}
 8006e38:	4604      	mov	r4, r0
 8006e3a:	d001      	beq.n	8006e40 <cleanup_stdio+0x10>
 8006e3c:	f003 f82c 	bl	8009e98 <_fflush_r>
 8006e40:	68a1      	ldr	r1, [r4, #8]
 8006e42:	4b09      	ldr	r3, [pc, #36]	@ (8006e68 <cleanup_stdio+0x38>)
 8006e44:	4299      	cmp	r1, r3
 8006e46:	d002      	beq.n	8006e4e <cleanup_stdio+0x1e>
 8006e48:	4620      	mov	r0, r4
 8006e4a:	f003 f825 	bl	8009e98 <_fflush_r>
 8006e4e:	68e1      	ldr	r1, [r4, #12]
 8006e50:	4b06      	ldr	r3, [pc, #24]	@ (8006e6c <cleanup_stdio+0x3c>)
 8006e52:	4299      	cmp	r1, r3
 8006e54:	d004      	beq.n	8006e60 <cleanup_stdio+0x30>
 8006e56:	4620      	mov	r0, r4
 8006e58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e5c:	f003 b81c 	b.w	8009e98 <_fflush_r>
 8006e60:	bd10      	pop	{r4, pc}
 8006e62:	bf00      	nop
 8006e64:	200007c0 	.word	0x200007c0
 8006e68:	20000828 	.word	0x20000828
 8006e6c:	20000890 	.word	0x20000890

08006e70 <global_stdio_init.part.0>:
 8006e70:	b510      	push	{r4, lr}
 8006e72:	4b0b      	ldr	r3, [pc, #44]	@ (8006ea0 <global_stdio_init.part.0+0x30>)
 8006e74:	4c0b      	ldr	r4, [pc, #44]	@ (8006ea4 <global_stdio_init.part.0+0x34>)
 8006e76:	4a0c      	ldr	r2, [pc, #48]	@ (8006ea8 <global_stdio_init.part.0+0x38>)
 8006e78:	601a      	str	r2, [r3, #0]
 8006e7a:	4620      	mov	r0, r4
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	2104      	movs	r1, #4
 8006e80:	f7ff ff94 	bl	8006dac <std>
 8006e84:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006e88:	2201      	movs	r2, #1
 8006e8a:	2109      	movs	r1, #9
 8006e8c:	f7ff ff8e 	bl	8006dac <std>
 8006e90:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006e94:	2202      	movs	r2, #2
 8006e96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e9a:	2112      	movs	r1, #18
 8006e9c:	f7ff bf86 	b.w	8006dac <std>
 8006ea0:	200008f8 	.word	0x200008f8
 8006ea4:	200007c0 	.word	0x200007c0
 8006ea8:	08006e19 	.word	0x08006e19

08006eac <__sfp_lock_acquire>:
 8006eac:	4801      	ldr	r0, [pc, #4]	@ (8006eb4 <__sfp_lock_acquire+0x8>)
 8006eae:	f000 ba3a 	b.w	8007326 <__retarget_lock_acquire_recursive>
 8006eb2:	bf00      	nop
 8006eb4:	20000901 	.word	0x20000901

08006eb8 <__sfp_lock_release>:
 8006eb8:	4801      	ldr	r0, [pc, #4]	@ (8006ec0 <__sfp_lock_release+0x8>)
 8006eba:	f000 ba35 	b.w	8007328 <__retarget_lock_release_recursive>
 8006ebe:	bf00      	nop
 8006ec0:	20000901 	.word	0x20000901

08006ec4 <__sinit>:
 8006ec4:	b510      	push	{r4, lr}
 8006ec6:	4604      	mov	r4, r0
 8006ec8:	f7ff fff0 	bl	8006eac <__sfp_lock_acquire>
 8006ecc:	6a23      	ldr	r3, [r4, #32]
 8006ece:	b11b      	cbz	r3, 8006ed8 <__sinit+0x14>
 8006ed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ed4:	f7ff bff0 	b.w	8006eb8 <__sfp_lock_release>
 8006ed8:	4b04      	ldr	r3, [pc, #16]	@ (8006eec <__sinit+0x28>)
 8006eda:	6223      	str	r3, [r4, #32]
 8006edc:	4b04      	ldr	r3, [pc, #16]	@ (8006ef0 <__sinit+0x2c>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d1f5      	bne.n	8006ed0 <__sinit+0xc>
 8006ee4:	f7ff ffc4 	bl	8006e70 <global_stdio_init.part.0>
 8006ee8:	e7f2      	b.n	8006ed0 <__sinit+0xc>
 8006eea:	bf00      	nop
 8006eec:	08006e31 	.word	0x08006e31
 8006ef0:	200008f8 	.word	0x200008f8

08006ef4 <_fwalk_sglue>:
 8006ef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ef8:	4607      	mov	r7, r0
 8006efa:	4688      	mov	r8, r1
 8006efc:	4614      	mov	r4, r2
 8006efe:	2600      	movs	r6, #0
 8006f00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f04:	f1b9 0901 	subs.w	r9, r9, #1
 8006f08:	d505      	bpl.n	8006f16 <_fwalk_sglue+0x22>
 8006f0a:	6824      	ldr	r4, [r4, #0]
 8006f0c:	2c00      	cmp	r4, #0
 8006f0e:	d1f7      	bne.n	8006f00 <_fwalk_sglue+0xc>
 8006f10:	4630      	mov	r0, r6
 8006f12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f16:	89ab      	ldrh	r3, [r5, #12]
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d907      	bls.n	8006f2c <_fwalk_sglue+0x38>
 8006f1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f20:	3301      	adds	r3, #1
 8006f22:	d003      	beq.n	8006f2c <_fwalk_sglue+0x38>
 8006f24:	4629      	mov	r1, r5
 8006f26:	4638      	mov	r0, r7
 8006f28:	47c0      	blx	r8
 8006f2a:	4306      	orrs	r6, r0
 8006f2c:	3568      	adds	r5, #104	@ 0x68
 8006f2e:	e7e9      	b.n	8006f04 <_fwalk_sglue+0x10>

08006f30 <iprintf>:
 8006f30:	b40f      	push	{r0, r1, r2, r3}
 8006f32:	b507      	push	{r0, r1, r2, lr}
 8006f34:	4906      	ldr	r1, [pc, #24]	@ (8006f50 <iprintf+0x20>)
 8006f36:	ab04      	add	r3, sp, #16
 8006f38:	6808      	ldr	r0, [r1, #0]
 8006f3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f3e:	6881      	ldr	r1, [r0, #8]
 8006f40:	9301      	str	r3, [sp, #4]
 8006f42:	f002 fe0d 	bl	8009b60 <_vfiprintf_r>
 8006f46:	b003      	add	sp, #12
 8006f48:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f4c:	b004      	add	sp, #16
 8006f4e:	4770      	bx	lr
 8006f50:	20000018 	.word	0x20000018

08006f54 <_puts_r>:
 8006f54:	6a03      	ldr	r3, [r0, #32]
 8006f56:	b570      	push	{r4, r5, r6, lr}
 8006f58:	6884      	ldr	r4, [r0, #8]
 8006f5a:	4605      	mov	r5, r0
 8006f5c:	460e      	mov	r6, r1
 8006f5e:	b90b      	cbnz	r3, 8006f64 <_puts_r+0x10>
 8006f60:	f7ff ffb0 	bl	8006ec4 <__sinit>
 8006f64:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006f66:	07db      	lsls	r3, r3, #31
 8006f68:	d405      	bmi.n	8006f76 <_puts_r+0x22>
 8006f6a:	89a3      	ldrh	r3, [r4, #12]
 8006f6c:	0598      	lsls	r0, r3, #22
 8006f6e:	d402      	bmi.n	8006f76 <_puts_r+0x22>
 8006f70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f72:	f000 f9d8 	bl	8007326 <__retarget_lock_acquire_recursive>
 8006f76:	89a3      	ldrh	r3, [r4, #12]
 8006f78:	0719      	lsls	r1, r3, #28
 8006f7a:	d502      	bpl.n	8006f82 <_puts_r+0x2e>
 8006f7c:	6923      	ldr	r3, [r4, #16]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d135      	bne.n	8006fee <_puts_r+0x9a>
 8006f82:	4621      	mov	r1, r4
 8006f84:	4628      	mov	r0, r5
 8006f86:	f000 f8e5 	bl	8007154 <__swsetup_r>
 8006f8a:	b380      	cbz	r0, 8006fee <_puts_r+0x9a>
 8006f8c:	f04f 35ff 	mov.w	r5, #4294967295
 8006f90:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006f92:	07da      	lsls	r2, r3, #31
 8006f94:	d405      	bmi.n	8006fa2 <_puts_r+0x4e>
 8006f96:	89a3      	ldrh	r3, [r4, #12]
 8006f98:	059b      	lsls	r3, r3, #22
 8006f9a:	d402      	bmi.n	8006fa2 <_puts_r+0x4e>
 8006f9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f9e:	f000 f9c3 	bl	8007328 <__retarget_lock_release_recursive>
 8006fa2:	4628      	mov	r0, r5
 8006fa4:	bd70      	pop	{r4, r5, r6, pc}
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	da04      	bge.n	8006fb4 <_puts_r+0x60>
 8006faa:	69a2      	ldr	r2, [r4, #24]
 8006fac:	429a      	cmp	r2, r3
 8006fae:	dc17      	bgt.n	8006fe0 <_puts_r+0x8c>
 8006fb0:	290a      	cmp	r1, #10
 8006fb2:	d015      	beq.n	8006fe0 <_puts_r+0x8c>
 8006fb4:	6823      	ldr	r3, [r4, #0]
 8006fb6:	1c5a      	adds	r2, r3, #1
 8006fb8:	6022      	str	r2, [r4, #0]
 8006fba:	7019      	strb	r1, [r3, #0]
 8006fbc:	68a3      	ldr	r3, [r4, #8]
 8006fbe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006fc2:	3b01      	subs	r3, #1
 8006fc4:	60a3      	str	r3, [r4, #8]
 8006fc6:	2900      	cmp	r1, #0
 8006fc8:	d1ed      	bne.n	8006fa6 <_puts_r+0x52>
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	da11      	bge.n	8006ff2 <_puts_r+0x9e>
 8006fce:	4622      	mov	r2, r4
 8006fd0:	210a      	movs	r1, #10
 8006fd2:	4628      	mov	r0, r5
 8006fd4:	f000 f87f 	bl	80070d6 <__swbuf_r>
 8006fd8:	3001      	adds	r0, #1
 8006fda:	d0d7      	beq.n	8006f8c <_puts_r+0x38>
 8006fdc:	250a      	movs	r5, #10
 8006fde:	e7d7      	b.n	8006f90 <_puts_r+0x3c>
 8006fe0:	4622      	mov	r2, r4
 8006fe2:	4628      	mov	r0, r5
 8006fe4:	f000 f877 	bl	80070d6 <__swbuf_r>
 8006fe8:	3001      	adds	r0, #1
 8006fea:	d1e7      	bne.n	8006fbc <_puts_r+0x68>
 8006fec:	e7ce      	b.n	8006f8c <_puts_r+0x38>
 8006fee:	3e01      	subs	r6, #1
 8006ff0:	e7e4      	b.n	8006fbc <_puts_r+0x68>
 8006ff2:	6823      	ldr	r3, [r4, #0]
 8006ff4:	1c5a      	adds	r2, r3, #1
 8006ff6:	6022      	str	r2, [r4, #0]
 8006ff8:	220a      	movs	r2, #10
 8006ffa:	701a      	strb	r2, [r3, #0]
 8006ffc:	e7ee      	b.n	8006fdc <_puts_r+0x88>
	...

08007000 <puts>:
 8007000:	4b02      	ldr	r3, [pc, #8]	@ (800700c <puts+0xc>)
 8007002:	4601      	mov	r1, r0
 8007004:	6818      	ldr	r0, [r3, #0]
 8007006:	f7ff bfa5 	b.w	8006f54 <_puts_r>
 800700a:	bf00      	nop
 800700c:	20000018 	.word	0x20000018

08007010 <siprintf>:
 8007010:	b40e      	push	{r1, r2, r3}
 8007012:	b500      	push	{lr}
 8007014:	b09c      	sub	sp, #112	@ 0x70
 8007016:	ab1d      	add	r3, sp, #116	@ 0x74
 8007018:	9002      	str	r0, [sp, #8]
 800701a:	9006      	str	r0, [sp, #24]
 800701c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007020:	4809      	ldr	r0, [pc, #36]	@ (8007048 <siprintf+0x38>)
 8007022:	9107      	str	r1, [sp, #28]
 8007024:	9104      	str	r1, [sp, #16]
 8007026:	4909      	ldr	r1, [pc, #36]	@ (800704c <siprintf+0x3c>)
 8007028:	f853 2b04 	ldr.w	r2, [r3], #4
 800702c:	9105      	str	r1, [sp, #20]
 800702e:	6800      	ldr	r0, [r0, #0]
 8007030:	9301      	str	r3, [sp, #4]
 8007032:	a902      	add	r1, sp, #8
 8007034:	f002 fc6e 	bl	8009914 <_svfiprintf_r>
 8007038:	9b02      	ldr	r3, [sp, #8]
 800703a:	2200      	movs	r2, #0
 800703c:	701a      	strb	r2, [r3, #0]
 800703e:	b01c      	add	sp, #112	@ 0x70
 8007040:	f85d eb04 	ldr.w	lr, [sp], #4
 8007044:	b003      	add	sp, #12
 8007046:	4770      	bx	lr
 8007048:	20000018 	.word	0x20000018
 800704c:	ffff0208 	.word	0xffff0208

08007050 <__sread>:
 8007050:	b510      	push	{r4, lr}
 8007052:	460c      	mov	r4, r1
 8007054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007058:	f000 f916 	bl	8007288 <_read_r>
 800705c:	2800      	cmp	r0, #0
 800705e:	bfab      	itete	ge
 8007060:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007062:	89a3      	ldrhlt	r3, [r4, #12]
 8007064:	181b      	addge	r3, r3, r0
 8007066:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800706a:	bfac      	ite	ge
 800706c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800706e:	81a3      	strhlt	r3, [r4, #12]
 8007070:	bd10      	pop	{r4, pc}

08007072 <__swrite>:
 8007072:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007076:	461f      	mov	r7, r3
 8007078:	898b      	ldrh	r3, [r1, #12]
 800707a:	05db      	lsls	r3, r3, #23
 800707c:	4605      	mov	r5, r0
 800707e:	460c      	mov	r4, r1
 8007080:	4616      	mov	r6, r2
 8007082:	d505      	bpl.n	8007090 <__swrite+0x1e>
 8007084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007088:	2302      	movs	r3, #2
 800708a:	2200      	movs	r2, #0
 800708c:	f000 f8ea 	bl	8007264 <_lseek_r>
 8007090:	89a3      	ldrh	r3, [r4, #12]
 8007092:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007096:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800709a:	81a3      	strh	r3, [r4, #12]
 800709c:	4632      	mov	r2, r6
 800709e:	463b      	mov	r3, r7
 80070a0:	4628      	mov	r0, r5
 80070a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070a6:	f000 b901 	b.w	80072ac <_write_r>

080070aa <__sseek>:
 80070aa:	b510      	push	{r4, lr}
 80070ac:	460c      	mov	r4, r1
 80070ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070b2:	f000 f8d7 	bl	8007264 <_lseek_r>
 80070b6:	1c43      	adds	r3, r0, #1
 80070b8:	89a3      	ldrh	r3, [r4, #12]
 80070ba:	bf15      	itete	ne
 80070bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80070be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80070c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80070c6:	81a3      	strheq	r3, [r4, #12]
 80070c8:	bf18      	it	ne
 80070ca:	81a3      	strhne	r3, [r4, #12]
 80070cc:	bd10      	pop	{r4, pc}

080070ce <__sclose>:
 80070ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070d2:	f000 b8b7 	b.w	8007244 <_close_r>

080070d6 <__swbuf_r>:
 80070d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070d8:	460e      	mov	r6, r1
 80070da:	4614      	mov	r4, r2
 80070dc:	4605      	mov	r5, r0
 80070de:	b118      	cbz	r0, 80070e8 <__swbuf_r+0x12>
 80070e0:	6a03      	ldr	r3, [r0, #32]
 80070e2:	b90b      	cbnz	r3, 80070e8 <__swbuf_r+0x12>
 80070e4:	f7ff feee 	bl	8006ec4 <__sinit>
 80070e8:	69a3      	ldr	r3, [r4, #24]
 80070ea:	60a3      	str	r3, [r4, #8]
 80070ec:	89a3      	ldrh	r3, [r4, #12]
 80070ee:	071a      	lsls	r2, r3, #28
 80070f0:	d501      	bpl.n	80070f6 <__swbuf_r+0x20>
 80070f2:	6923      	ldr	r3, [r4, #16]
 80070f4:	b943      	cbnz	r3, 8007108 <__swbuf_r+0x32>
 80070f6:	4621      	mov	r1, r4
 80070f8:	4628      	mov	r0, r5
 80070fa:	f000 f82b 	bl	8007154 <__swsetup_r>
 80070fe:	b118      	cbz	r0, 8007108 <__swbuf_r+0x32>
 8007100:	f04f 37ff 	mov.w	r7, #4294967295
 8007104:	4638      	mov	r0, r7
 8007106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007108:	6823      	ldr	r3, [r4, #0]
 800710a:	6922      	ldr	r2, [r4, #16]
 800710c:	1a98      	subs	r0, r3, r2
 800710e:	6963      	ldr	r3, [r4, #20]
 8007110:	b2f6      	uxtb	r6, r6
 8007112:	4283      	cmp	r3, r0
 8007114:	4637      	mov	r7, r6
 8007116:	dc05      	bgt.n	8007124 <__swbuf_r+0x4e>
 8007118:	4621      	mov	r1, r4
 800711a:	4628      	mov	r0, r5
 800711c:	f002 febc 	bl	8009e98 <_fflush_r>
 8007120:	2800      	cmp	r0, #0
 8007122:	d1ed      	bne.n	8007100 <__swbuf_r+0x2a>
 8007124:	68a3      	ldr	r3, [r4, #8]
 8007126:	3b01      	subs	r3, #1
 8007128:	60a3      	str	r3, [r4, #8]
 800712a:	6823      	ldr	r3, [r4, #0]
 800712c:	1c5a      	adds	r2, r3, #1
 800712e:	6022      	str	r2, [r4, #0]
 8007130:	701e      	strb	r6, [r3, #0]
 8007132:	6962      	ldr	r2, [r4, #20]
 8007134:	1c43      	adds	r3, r0, #1
 8007136:	429a      	cmp	r2, r3
 8007138:	d004      	beq.n	8007144 <__swbuf_r+0x6e>
 800713a:	89a3      	ldrh	r3, [r4, #12]
 800713c:	07db      	lsls	r3, r3, #31
 800713e:	d5e1      	bpl.n	8007104 <__swbuf_r+0x2e>
 8007140:	2e0a      	cmp	r6, #10
 8007142:	d1df      	bne.n	8007104 <__swbuf_r+0x2e>
 8007144:	4621      	mov	r1, r4
 8007146:	4628      	mov	r0, r5
 8007148:	f002 fea6 	bl	8009e98 <_fflush_r>
 800714c:	2800      	cmp	r0, #0
 800714e:	d0d9      	beq.n	8007104 <__swbuf_r+0x2e>
 8007150:	e7d6      	b.n	8007100 <__swbuf_r+0x2a>
	...

08007154 <__swsetup_r>:
 8007154:	b538      	push	{r3, r4, r5, lr}
 8007156:	4b29      	ldr	r3, [pc, #164]	@ (80071fc <__swsetup_r+0xa8>)
 8007158:	4605      	mov	r5, r0
 800715a:	6818      	ldr	r0, [r3, #0]
 800715c:	460c      	mov	r4, r1
 800715e:	b118      	cbz	r0, 8007168 <__swsetup_r+0x14>
 8007160:	6a03      	ldr	r3, [r0, #32]
 8007162:	b90b      	cbnz	r3, 8007168 <__swsetup_r+0x14>
 8007164:	f7ff feae 	bl	8006ec4 <__sinit>
 8007168:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800716c:	0719      	lsls	r1, r3, #28
 800716e:	d422      	bmi.n	80071b6 <__swsetup_r+0x62>
 8007170:	06da      	lsls	r2, r3, #27
 8007172:	d407      	bmi.n	8007184 <__swsetup_r+0x30>
 8007174:	2209      	movs	r2, #9
 8007176:	602a      	str	r2, [r5, #0]
 8007178:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800717c:	81a3      	strh	r3, [r4, #12]
 800717e:	f04f 30ff 	mov.w	r0, #4294967295
 8007182:	e033      	b.n	80071ec <__swsetup_r+0x98>
 8007184:	0758      	lsls	r0, r3, #29
 8007186:	d512      	bpl.n	80071ae <__swsetup_r+0x5a>
 8007188:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800718a:	b141      	cbz	r1, 800719e <__swsetup_r+0x4a>
 800718c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007190:	4299      	cmp	r1, r3
 8007192:	d002      	beq.n	800719a <__swsetup_r+0x46>
 8007194:	4628      	mov	r0, r5
 8007196:	f000 ff2b 	bl	8007ff0 <_free_r>
 800719a:	2300      	movs	r3, #0
 800719c:	6363      	str	r3, [r4, #52]	@ 0x34
 800719e:	89a3      	ldrh	r3, [r4, #12]
 80071a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80071a4:	81a3      	strh	r3, [r4, #12]
 80071a6:	2300      	movs	r3, #0
 80071a8:	6063      	str	r3, [r4, #4]
 80071aa:	6923      	ldr	r3, [r4, #16]
 80071ac:	6023      	str	r3, [r4, #0]
 80071ae:	89a3      	ldrh	r3, [r4, #12]
 80071b0:	f043 0308 	orr.w	r3, r3, #8
 80071b4:	81a3      	strh	r3, [r4, #12]
 80071b6:	6923      	ldr	r3, [r4, #16]
 80071b8:	b94b      	cbnz	r3, 80071ce <__swsetup_r+0x7a>
 80071ba:	89a3      	ldrh	r3, [r4, #12]
 80071bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80071c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071c4:	d003      	beq.n	80071ce <__swsetup_r+0x7a>
 80071c6:	4621      	mov	r1, r4
 80071c8:	4628      	mov	r0, r5
 80071ca:	f002 feb3 	bl	8009f34 <__smakebuf_r>
 80071ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071d2:	f013 0201 	ands.w	r2, r3, #1
 80071d6:	d00a      	beq.n	80071ee <__swsetup_r+0x9a>
 80071d8:	2200      	movs	r2, #0
 80071da:	60a2      	str	r2, [r4, #8]
 80071dc:	6962      	ldr	r2, [r4, #20]
 80071de:	4252      	negs	r2, r2
 80071e0:	61a2      	str	r2, [r4, #24]
 80071e2:	6922      	ldr	r2, [r4, #16]
 80071e4:	b942      	cbnz	r2, 80071f8 <__swsetup_r+0xa4>
 80071e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80071ea:	d1c5      	bne.n	8007178 <__swsetup_r+0x24>
 80071ec:	bd38      	pop	{r3, r4, r5, pc}
 80071ee:	0799      	lsls	r1, r3, #30
 80071f0:	bf58      	it	pl
 80071f2:	6962      	ldrpl	r2, [r4, #20]
 80071f4:	60a2      	str	r2, [r4, #8]
 80071f6:	e7f4      	b.n	80071e2 <__swsetup_r+0x8e>
 80071f8:	2000      	movs	r0, #0
 80071fa:	e7f7      	b.n	80071ec <__swsetup_r+0x98>
 80071fc:	20000018 	.word	0x20000018

08007200 <memset>:
 8007200:	4402      	add	r2, r0
 8007202:	4603      	mov	r3, r0
 8007204:	4293      	cmp	r3, r2
 8007206:	d100      	bne.n	800720a <memset+0xa>
 8007208:	4770      	bx	lr
 800720a:	f803 1b01 	strb.w	r1, [r3], #1
 800720e:	e7f9      	b.n	8007204 <memset+0x4>

08007210 <strstr>:
 8007210:	780a      	ldrb	r2, [r1, #0]
 8007212:	b570      	push	{r4, r5, r6, lr}
 8007214:	b96a      	cbnz	r2, 8007232 <strstr+0x22>
 8007216:	bd70      	pop	{r4, r5, r6, pc}
 8007218:	429a      	cmp	r2, r3
 800721a:	d109      	bne.n	8007230 <strstr+0x20>
 800721c:	460c      	mov	r4, r1
 800721e:	4605      	mov	r5, r0
 8007220:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007224:	2b00      	cmp	r3, #0
 8007226:	d0f6      	beq.n	8007216 <strstr+0x6>
 8007228:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800722c:	429e      	cmp	r6, r3
 800722e:	d0f7      	beq.n	8007220 <strstr+0x10>
 8007230:	3001      	adds	r0, #1
 8007232:	7803      	ldrb	r3, [r0, #0]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d1ef      	bne.n	8007218 <strstr+0x8>
 8007238:	4618      	mov	r0, r3
 800723a:	e7ec      	b.n	8007216 <strstr+0x6>

0800723c <_localeconv_r>:
 800723c:	4800      	ldr	r0, [pc, #0]	@ (8007240 <_localeconv_r+0x4>)
 800723e:	4770      	bx	lr
 8007240:	20000158 	.word	0x20000158

08007244 <_close_r>:
 8007244:	b538      	push	{r3, r4, r5, lr}
 8007246:	4d06      	ldr	r5, [pc, #24]	@ (8007260 <_close_r+0x1c>)
 8007248:	2300      	movs	r3, #0
 800724a:	4604      	mov	r4, r0
 800724c:	4608      	mov	r0, r1
 800724e:	602b      	str	r3, [r5, #0]
 8007250:	f7fa fda8 	bl	8001da4 <_close>
 8007254:	1c43      	adds	r3, r0, #1
 8007256:	d102      	bne.n	800725e <_close_r+0x1a>
 8007258:	682b      	ldr	r3, [r5, #0]
 800725a:	b103      	cbz	r3, 800725e <_close_r+0x1a>
 800725c:	6023      	str	r3, [r4, #0]
 800725e:	bd38      	pop	{r3, r4, r5, pc}
 8007260:	200008fc 	.word	0x200008fc

08007264 <_lseek_r>:
 8007264:	b538      	push	{r3, r4, r5, lr}
 8007266:	4d07      	ldr	r5, [pc, #28]	@ (8007284 <_lseek_r+0x20>)
 8007268:	4604      	mov	r4, r0
 800726a:	4608      	mov	r0, r1
 800726c:	4611      	mov	r1, r2
 800726e:	2200      	movs	r2, #0
 8007270:	602a      	str	r2, [r5, #0]
 8007272:	461a      	mov	r2, r3
 8007274:	f7fa fdbd 	bl	8001df2 <_lseek>
 8007278:	1c43      	adds	r3, r0, #1
 800727a:	d102      	bne.n	8007282 <_lseek_r+0x1e>
 800727c:	682b      	ldr	r3, [r5, #0]
 800727e:	b103      	cbz	r3, 8007282 <_lseek_r+0x1e>
 8007280:	6023      	str	r3, [r4, #0]
 8007282:	bd38      	pop	{r3, r4, r5, pc}
 8007284:	200008fc 	.word	0x200008fc

08007288 <_read_r>:
 8007288:	b538      	push	{r3, r4, r5, lr}
 800728a:	4d07      	ldr	r5, [pc, #28]	@ (80072a8 <_read_r+0x20>)
 800728c:	4604      	mov	r4, r0
 800728e:	4608      	mov	r0, r1
 8007290:	4611      	mov	r1, r2
 8007292:	2200      	movs	r2, #0
 8007294:	602a      	str	r2, [r5, #0]
 8007296:	461a      	mov	r2, r3
 8007298:	f7fa fd4b 	bl	8001d32 <_read>
 800729c:	1c43      	adds	r3, r0, #1
 800729e:	d102      	bne.n	80072a6 <_read_r+0x1e>
 80072a0:	682b      	ldr	r3, [r5, #0]
 80072a2:	b103      	cbz	r3, 80072a6 <_read_r+0x1e>
 80072a4:	6023      	str	r3, [r4, #0]
 80072a6:	bd38      	pop	{r3, r4, r5, pc}
 80072a8:	200008fc 	.word	0x200008fc

080072ac <_write_r>:
 80072ac:	b538      	push	{r3, r4, r5, lr}
 80072ae:	4d07      	ldr	r5, [pc, #28]	@ (80072cc <_write_r+0x20>)
 80072b0:	4604      	mov	r4, r0
 80072b2:	4608      	mov	r0, r1
 80072b4:	4611      	mov	r1, r2
 80072b6:	2200      	movs	r2, #0
 80072b8:	602a      	str	r2, [r5, #0]
 80072ba:	461a      	mov	r2, r3
 80072bc:	f7fa fd56 	bl	8001d6c <_write>
 80072c0:	1c43      	adds	r3, r0, #1
 80072c2:	d102      	bne.n	80072ca <_write_r+0x1e>
 80072c4:	682b      	ldr	r3, [r5, #0]
 80072c6:	b103      	cbz	r3, 80072ca <_write_r+0x1e>
 80072c8:	6023      	str	r3, [r4, #0]
 80072ca:	bd38      	pop	{r3, r4, r5, pc}
 80072cc:	200008fc 	.word	0x200008fc

080072d0 <__errno>:
 80072d0:	4b01      	ldr	r3, [pc, #4]	@ (80072d8 <__errno+0x8>)
 80072d2:	6818      	ldr	r0, [r3, #0]
 80072d4:	4770      	bx	lr
 80072d6:	bf00      	nop
 80072d8:	20000018 	.word	0x20000018

080072dc <__libc_init_array>:
 80072dc:	b570      	push	{r4, r5, r6, lr}
 80072de:	4d0d      	ldr	r5, [pc, #52]	@ (8007314 <__libc_init_array+0x38>)
 80072e0:	4c0d      	ldr	r4, [pc, #52]	@ (8007318 <__libc_init_array+0x3c>)
 80072e2:	1b64      	subs	r4, r4, r5
 80072e4:	10a4      	asrs	r4, r4, #2
 80072e6:	2600      	movs	r6, #0
 80072e8:	42a6      	cmp	r6, r4
 80072ea:	d109      	bne.n	8007300 <__libc_init_array+0x24>
 80072ec:	4d0b      	ldr	r5, [pc, #44]	@ (800731c <__libc_init_array+0x40>)
 80072ee:	4c0c      	ldr	r4, [pc, #48]	@ (8007320 <__libc_init_array+0x44>)
 80072f0:	f003 fae0 	bl	800a8b4 <_init>
 80072f4:	1b64      	subs	r4, r4, r5
 80072f6:	10a4      	asrs	r4, r4, #2
 80072f8:	2600      	movs	r6, #0
 80072fa:	42a6      	cmp	r6, r4
 80072fc:	d105      	bne.n	800730a <__libc_init_array+0x2e>
 80072fe:	bd70      	pop	{r4, r5, r6, pc}
 8007300:	f855 3b04 	ldr.w	r3, [r5], #4
 8007304:	4798      	blx	r3
 8007306:	3601      	adds	r6, #1
 8007308:	e7ee      	b.n	80072e8 <__libc_init_array+0xc>
 800730a:	f855 3b04 	ldr.w	r3, [r5], #4
 800730e:	4798      	blx	r3
 8007310:	3601      	adds	r6, #1
 8007312:	e7f2      	b.n	80072fa <__libc_init_array+0x1e>
 8007314:	0800ae50 	.word	0x0800ae50
 8007318:	0800ae50 	.word	0x0800ae50
 800731c:	0800ae50 	.word	0x0800ae50
 8007320:	0800ae54 	.word	0x0800ae54

08007324 <__retarget_lock_init_recursive>:
 8007324:	4770      	bx	lr

08007326 <__retarget_lock_acquire_recursive>:
 8007326:	4770      	bx	lr

08007328 <__retarget_lock_release_recursive>:
 8007328:	4770      	bx	lr

0800732a <memcpy>:
 800732a:	440a      	add	r2, r1
 800732c:	4291      	cmp	r1, r2
 800732e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007332:	d100      	bne.n	8007336 <memcpy+0xc>
 8007334:	4770      	bx	lr
 8007336:	b510      	push	{r4, lr}
 8007338:	f811 4b01 	ldrb.w	r4, [r1], #1
 800733c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007340:	4291      	cmp	r1, r2
 8007342:	d1f9      	bne.n	8007338 <memcpy+0xe>
 8007344:	bd10      	pop	{r4, pc}
	...

08007348 <nanf>:
 8007348:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007350 <nanf+0x8>
 800734c:	4770      	bx	lr
 800734e:	bf00      	nop
 8007350:	7fc00000 	.word	0x7fc00000

08007354 <quorem>:
 8007354:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007358:	6903      	ldr	r3, [r0, #16]
 800735a:	690c      	ldr	r4, [r1, #16]
 800735c:	42a3      	cmp	r3, r4
 800735e:	4607      	mov	r7, r0
 8007360:	db7e      	blt.n	8007460 <quorem+0x10c>
 8007362:	3c01      	subs	r4, #1
 8007364:	f101 0814 	add.w	r8, r1, #20
 8007368:	00a3      	lsls	r3, r4, #2
 800736a:	f100 0514 	add.w	r5, r0, #20
 800736e:	9300      	str	r3, [sp, #0]
 8007370:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007374:	9301      	str	r3, [sp, #4]
 8007376:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800737a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800737e:	3301      	adds	r3, #1
 8007380:	429a      	cmp	r2, r3
 8007382:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007386:	fbb2 f6f3 	udiv	r6, r2, r3
 800738a:	d32e      	bcc.n	80073ea <quorem+0x96>
 800738c:	f04f 0a00 	mov.w	sl, #0
 8007390:	46c4      	mov	ip, r8
 8007392:	46ae      	mov	lr, r5
 8007394:	46d3      	mov	fp, sl
 8007396:	f85c 3b04 	ldr.w	r3, [ip], #4
 800739a:	b298      	uxth	r0, r3
 800739c:	fb06 a000 	mla	r0, r6, r0, sl
 80073a0:	0c02      	lsrs	r2, r0, #16
 80073a2:	0c1b      	lsrs	r3, r3, #16
 80073a4:	fb06 2303 	mla	r3, r6, r3, r2
 80073a8:	f8de 2000 	ldr.w	r2, [lr]
 80073ac:	b280      	uxth	r0, r0
 80073ae:	b292      	uxth	r2, r2
 80073b0:	1a12      	subs	r2, r2, r0
 80073b2:	445a      	add	r2, fp
 80073b4:	f8de 0000 	ldr.w	r0, [lr]
 80073b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80073bc:	b29b      	uxth	r3, r3
 80073be:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80073c2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80073c6:	b292      	uxth	r2, r2
 80073c8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80073cc:	45e1      	cmp	r9, ip
 80073ce:	f84e 2b04 	str.w	r2, [lr], #4
 80073d2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80073d6:	d2de      	bcs.n	8007396 <quorem+0x42>
 80073d8:	9b00      	ldr	r3, [sp, #0]
 80073da:	58eb      	ldr	r3, [r5, r3]
 80073dc:	b92b      	cbnz	r3, 80073ea <quorem+0x96>
 80073de:	9b01      	ldr	r3, [sp, #4]
 80073e0:	3b04      	subs	r3, #4
 80073e2:	429d      	cmp	r5, r3
 80073e4:	461a      	mov	r2, r3
 80073e6:	d32f      	bcc.n	8007448 <quorem+0xf4>
 80073e8:	613c      	str	r4, [r7, #16]
 80073ea:	4638      	mov	r0, r7
 80073ec:	f001 f9c4 	bl	8008778 <__mcmp>
 80073f0:	2800      	cmp	r0, #0
 80073f2:	db25      	blt.n	8007440 <quorem+0xec>
 80073f4:	4629      	mov	r1, r5
 80073f6:	2000      	movs	r0, #0
 80073f8:	f858 2b04 	ldr.w	r2, [r8], #4
 80073fc:	f8d1 c000 	ldr.w	ip, [r1]
 8007400:	fa1f fe82 	uxth.w	lr, r2
 8007404:	fa1f f38c 	uxth.w	r3, ip
 8007408:	eba3 030e 	sub.w	r3, r3, lr
 800740c:	4403      	add	r3, r0
 800740e:	0c12      	lsrs	r2, r2, #16
 8007410:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007414:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007418:	b29b      	uxth	r3, r3
 800741a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800741e:	45c1      	cmp	r9, r8
 8007420:	f841 3b04 	str.w	r3, [r1], #4
 8007424:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007428:	d2e6      	bcs.n	80073f8 <quorem+0xa4>
 800742a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800742e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007432:	b922      	cbnz	r2, 800743e <quorem+0xea>
 8007434:	3b04      	subs	r3, #4
 8007436:	429d      	cmp	r5, r3
 8007438:	461a      	mov	r2, r3
 800743a:	d30b      	bcc.n	8007454 <quorem+0x100>
 800743c:	613c      	str	r4, [r7, #16]
 800743e:	3601      	adds	r6, #1
 8007440:	4630      	mov	r0, r6
 8007442:	b003      	add	sp, #12
 8007444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007448:	6812      	ldr	r2, [r2, #0]
 800744a:	3b04      	subs	r3, #4
 800744c:	2a00      	cmp	r2, #0
 800744e:	d1cb      	bne.n	80073e8 <quorem+0x94>
 8007450:	3c01      	subs	r4, #1
 8007452:	e7c6      	b.n	80073e2 <quorem+0x8e>
 8007454:	6812      	ldr	r2, [r2, #0]
 8007456:	3b04      	subs	r3, #4
 8007458:	2a00      	cmp	r2, #0
 800745a:	d1ef      	bne.n	800743c <quorem+0xe8>
 800745c:	3c01      	subs	r4, #1
 800745e:	e7ea      	b.n	8007436 <quorem+0xe2>
 8007460:	2000      	movs	r0, #0
 8007462:	e7ee      	b.n	8007442 <quorem+0xee>
 8007464:	0000      	movs	r0, r0
	...

08007468 <_dtoa_r>:
 8007468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800746c:	69c7      	ldr	r7, [r0, #28]
 800746e:	b099      	sub	sp, #100	@ 0x64
 8007470:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007474:	ec55 4b10 	vmov	r4, r5, d0
 8007478:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800747a:	9109      	str	r1, [sp, #36]	@ 0x24
 800747c:	4683      	mov	fp, r0
 800747e:	920e      	str	r2, [sp, #56]	@ 0x38
 8007480:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007482:	b97f      	cbnz	r7, 80074a4 <_dtoa_r+0x3c>
 8007484:	2010      	movs	r0, #16
 8007486:	f000 fdfd 	bl	8008084 <malloc>
 800748a:	4602      	mov	r2, r0
 800748c:	f8cb 001c 	str.w	r0, [fp, #28]
 8007490:	b920      	cbnz	r0, 800749c <_dtoa_r+0x34>
 8007492:	4ba7      	ldr	r3, [pc, #668]	@ (8007730 <_dtoa_r+0x2c8>)
 8007494:	21ef      	movs	r1, #239	@ 0xef
 8007496:	48a7      	ldr	r0, [pc, #668]	@ (8007734 <_dtoa_r+0x2cc>)
 8007498:	f002 fdee 	bl	800a078 <__assert_func>
 800749c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80074a0:	6007      	str	r7, [r0, #0]
 80074a2:	60c7      	str	r7, [r0, #12]
 80074a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80074a8:	6819      	ldr	r1, [r3, #0]
 80074aa:	b159      	cbz	r1, 80074c4 <_dtoa_r+0x5c>
 80074ac:	685a      	ldr	r2, [r3, #4]
 80074ae:	604a      	str	r2, [r1, #4]
 80074b0:	2301      	movs	r3, #1
 80074b2:	4093      	lsls	r3, r2
 80074b4:	608b      	str	r3, [r1, #8]
 80074b6:	4658      	mov	r0, fp
 80074b8:	f000 feda 	bl	8008270 <_Bfree>
 80074bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80074c0:	2200      	movs	r2, #0
 80074c2:	601a      	str	r2, [r3, #0]
 80074c4:	1e2b      	subs	r3, r5, #0
 80074c6:	bfb9      	ittee	lt
 80074c8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80074cc:	9303      	strlt	r3, [sp, #12]
 80074ce:	2300      	movge	r3, #0
 80074d0:	6033      	strge	r3, [r6, #0]
 80074d2:	9f03      	ldr	r7, [sp, #12]
 80074d4:	4b98      	ldr	r3, [pc, #608]	@ (8007738 <_dtoa_r+0x2d0>)
 80074d6:	bfbc      	itt	lt
 80074d8:	2201      	movlt	r2, #1
 80074da:	6032      	strlt	r2, [r6, #0]
 80074dc:	43bb      	bics	r3, r7
 80074de:	d112      	bne.n	8007506 <_dtoa_r+0x9e>
 80074e0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80074e2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80074e6:	6013      	str	r3, [r2, #0]
 80074e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80074ec:	4323      	orrs	r3, r4
 80074ee:	f000 854d 	beq.w	8007f8c <_dtoa_r+0xb24>
 80074f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80074f4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800774c <_dtoa_r+0x2e4>
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	f000 854f 	beq.w	8007f9c <_dtoa_r+0xb34>
 80074fe:	f10a 0303 	add.w	r3, sl, #3
 8007502:	f000 bd49 	b.w	8007f98 <_dtoa_r+0xb30>
 8007506:	ed9d 7b02 	vldr	d7, [sp, #8]
 800750a:	2200      	movs	r2, #0
 800750c:	ec51 0b17 	vmov	r0, r1, d7
 8007510:	2300      	movs	r3, #0
 8007512:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007516:	f7f9 fad7 	bl	8000ac8 <__aeabi_dcmpeq>
 800751a:	4680      	mov	r8, r0
 800751c:	b158      	cbz	r0, 8007536 <_dtoa_r+0xce>
 800751e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007520:	2301      	movs	r3, #1
 8007522:	6013      	str	r3, [r2, #0]
 8007524:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007526:	b113      	cbz	r3, 800752e <_dtoa_r+0xc6>
 8007528:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800752a:	4b84      	ldr	r3, [pc, #528]	@ (800773c <_dtoa_r+0x2d4>)
 800752c:	6013      	str	r3, [r2, #0]
 800752e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007750 <_dtoa_r+0x2e8>
 8007532:	f000 bd33 	b.w	8007f9c <_dtoa_r+0xb34>
 8007536:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800753a:	aa16      	add	r2, sp, #88	@ 0x58
 800753c:	a917      	add	r1, sp, #92	@ 0x5c
 800753e:	4658      	mov	r0, fp
 8007540:	f001 fa3a 	bl	80089b8 <__d2b>
 8007544:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007548:	4681      	mov	r9, r0
 800754a:	2e00      	cmp	r6, #0
 800754c:	d077      	beq.n	800763e <_dtoa_r+0x1d6>
 800754e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007550:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007554:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007558:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800755c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007560:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007564:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007568:	4619      	mov	r1, r3
 800756a:	2200      	movs	r2, #0
 800756c:	4b74      	ldr	r3, [pc, #464]	@ (8007740 <_dtoa_r+0x2d8>)
 800756e:	f7f8 fe8b 	bl	8000288 <__aeabi_dsub>
 8007572:	a369      	add	r3, pc, #420	@ (adr r3, 8007718 <_dtoa_r+0x2b0>)
 8007574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007578:	f7f9 f83e 	bl	80005f8 <__aeabi_dmul>
 800757c:	a368      	add	r3, pc, #416	@ (adr r3, 8007720 <_dtoa_r+0x2b8>)
 800757e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007582:	f7f8 fe83 	bl	800028c <__adddf3>
 8007586:	4604      	mov	r4, r0
 8007588:	4630      	mov	r0, r6
 800758a:	460d      	mov	r5, r1
 800758c:	f7f8 ffca 	bl	8000524 <__aeabi_i2d>
 8007590:	a365      	add	r3, pc, #404	@ (adr r3, 8007728 <_dtoa_r+0x2c0>)
 8007592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007596:	f7f9 f82f 	bl	80005f8 <__aeabi_dmul>
 800759a:	4602      	mov	r2, r0
 800759c:	460b      	mov	r3, r1
 800759e:	4620      	mov	r0, r4
 80075a0:	4629      	mov	r1, r5
 80075a2:	f7f8 fe73 	bl	800028c <__adddf3>
 80075a6:	4604      	mov	r4, r0
 80075a8:	460d      	mov	r5, r1
 80075aa:	f7f9 fad5 	bl	8000b58 <__aeabi_d2iz>
 80075ae:	2200      	movs	r2, #0
 80075b0:	4607      	mov	r7, r0
 80075b2:	2300      	movs	r3, #0
 80075b4:	4620      	mov	r0, r4
 80075b6:	4629      	mov	r1, r5
 80075b8:	f7f9 fa90 	bl	8000adc <__aeabi_dcmplt>
 80075bc:	b140      	cbz	r0, 80075d0 <_dtoa_r+0x168>
 80075be:	4638      	mov	r0, r7
 80075c0:	f7f8 ffb0 	bl	8000524 <__aeabi_i2d>
 80075c4:	4622      	mov	r2, r4
 80075c6:	462b      	mov	r3, r5
 80075c8:	f7f9 fa7e 	bl	8000ac8 <__aeabi_dcmpeq>
 80075cc:	b900      	cbnz	r0, 80075d0 <_dtoa_r+0x168>
 80075ce:	3f01      	subs	r7, #1
 80075d0:	2f16      	cmp	r7, #22
 80075d2:	d851      	bhi.n	8007678 <_dtoa_r+0x210>
 80075d4:	4b5b      	ldr	r3, [pc, #364]	@ (8007744 <_dtoa_r+0x2dc>)
 80075d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80075da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80075e2:	f7f9 fa7b 	bl	8000adc <__aeabi_dcmplt>
 80075e6:	2800      	cmp	r0, #0
 80075e8:	d048      	beq.n	800767c <_dtoa_r+0x214>
 80075ea:	3f01      	subs	r7, #1
 80075ec:	2300      	movs	r3, #0
 80075ee:	9312      	str	r3, [sp, #72]	@ 0x48
 80075f0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80075f2:	1b9b      	subs	r3, r3, r6
 80075f4:	1e5a      	subs	r2, r3, #1
 80075f6:	bf44      	itt	mi
 80075f8:	f1c3 0801 	rsbmi	r8, r3, #1
 80075fc:	2300      	movmi	r3, #0
 80075fe:	9208      	str	r2, [sp, #32]
 8007600:	bf54      	ite	pl
 8007602:	f04f 0800 	movpl.w	r8, #0
 8007606:	9308      	strmi	r3, [sp, #32]
 8007608:	2f00      	cmp	r7, #0
 800760a:	db39      	blt.n	8007680 <_dtoa_r+0x218>
 800760c:	9b08      	ldr	r3, [sp, #32]
 800760e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007610:	443b      	add	r3, r7
 8007612:	9308      	str	r3, [sp, #32]
 8007614:	2300      	movs	r3, #0
 8007616:	930a      	str	r3, [sp, #40]	@ 0x28
 8007618:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800761a:	2b09      	cmp	r3, #9
 800761c:	d864      	bhi.n	80076e8 <_dtoa_r+0x280>
 800761e:	2b05      	cmp	r3, #5
 8007620:	bfc4      	itt	gt
 8007622:	3b04      	subgt	r3, #4
 8007624:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007626:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007628:	f1a3 0302 	sub.w	r3, r3, #2
 800762c:	bfcc      	ite	gt
 800762e:	2400      	movgt	r4, #0
 8007630:	2401      	movle	r4, #1
 8007632:	2b03      	cmp	r3, #3
 8007634:	d863      	bhi.n	80076fe <_dtoa_r+0x296>
 8007636:	e8df f003 	tbb	[pc, r3]
 800763a:	372a      	.short	0x372a
 800763c:	5535      	.short	0x5535
 800763e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007642:	441e      	add	r6, r3
 8007644:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007648:	2b20      	cmp	r3, #32
 800764a:	bfc1      	itttt	gt
 800764c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007650:	409f      	lslgt	r7, r3
 8007652:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007656:	fa24 f303 	lsrgt.w	r3, r4, r3
 800765a:	bfd6      	itet	le
 800765c:	f1c3 0320 	rsble	r3, r3, #32
 8007660:	ea47 0003 	orrgt.w	r0, r7, r3
 8007664:	fa04 f003 	lslle.w	r0, r4, r3
 8007668:	f7f8 ff4c 	bl	8000504 <__aeabi_ui2d>
 800766c:	2201      	movs	r2, #1
 800766e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007672:	3e01      	subs	r6, #1
 8007674:	9214      	str	r2, [sp, #80]	@ 0x50
 8007676:	e777      	b.n	8007568 <_dtoa_r+0x100>
 8007678:	2301      	movs	r3, #1
 800767a:	e7b8      	b.n	80075ee <_dtoa_r+0x186>
 800767c:	9012      	str	r0, [sp, #72]	@ 0x48
 800767e:	e7b7      	b.n	80075f0 <_dtoa_r+0x188>
 8007680:	427b      	negs	r3, r7
 8007682:	930a      	str	r3, [sp, #40]	@ 0x28
 8007684:	2300      	movs	r3, #0
 8007686:	eba8 0807 	sub.w	r8, r8, r7
 800768a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800768c:	e7c4      	b.n	8007618 <_dtoa_r+0x1b0>
 800768e:	2300      	movs	r3, #0
 8007690:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007692:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007694:	2b00      	cmp	r3, #0
 8007696:	dc35      	bgt.n	8007704 <_dtoa_r+0x29c>
 8007698:	2301      	movs	r3, #1
 800769a:	9300      	str	r3, [sp, #0]
 800769c:	9307      	str	r3, [sp, #28]
 800769e:	461a      	mov	r2, r3
 80076a0:	920e      	str	r2, [sp, #56]	@ 0x38
 80076a2:	e00b      	b.n	80076bc <_dtoa_r+0x254>
 80076a4:	2301      	movs	r3, #1
 80076a6:	e7f3      	b.n	8007690 <_dtoa_r+0x228>
 80076a8:	2300      	movs	r3, #0
 80076aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80076ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80076ae:	18fb      	adds	r3, r7, r3
 80076b0:	9300      	str	r3, [sp, #0]
 80076b2:	3301      	adds	r3, #1
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	9307      	str	r3, [sp, #28]
 80076b8:	bfb8      	it	lt
 80076ba:	2301      	movlt	r3, #1
 80076bc:	f8db 001c 	ldr.w	r0, [fp, #28]
 80076c0:	2100      	movs	r1, #0
 80076c2:	2204      	movs	r2, #4
 80076c4:	f102 0514 	add.w	r5, r2, #20
 80076c8:	429d      	cmp	r5, r3
 80076ca:	d91f      	bls.n	800770c <_dtoa_r+0x2a4>
 80076cc:	6041      	str	r1, [r0, #4]
 80076ce:	4658      	mov	r0, fp
 80076d0:	f000 fd8e 	bl	80081f0 <_Balloc>
 80076d4:	4682      	mov	sl, r0
 80076d6:	2800      	cmp	r0, #0
 80076d8:	d13c      	bne.n	8007754 <_dtoa_r+0x2ec>
 80076da:	4b1b      	ldr	r3, [pc, #108]	@ (8007748 <_dtoa_r+0x2e0>)
 80076dc:	4602      	mov	r2, r0
 80076de:	f240 11af 	movw	r1, #431	@ 0x1af
 80076e2:	e6d8      	b.n	8007496 <_dtoa_r+0x2e>
 80076e4:	2301      	movs	r3, #1
 80076e6:	e7e0      	b.n	80076aa <_dtoa_r+0x242>
 80076e8:	2401      	movs	r4, #1
 80076ea:	2300      	movs	r3, #0
 80076ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80076ee:	940b      	str	r4, [sp, #44]	@ 0x2c
 80076f0:	f04f 33ff 	mov.w	r3, #4294967295
 80076f4:	9300      	str	r3, [sp, #0]
 80076f6:	9307      	str	r3, [sp, #28]
 80076f8:	2200      	movs	r2, #0
 80076fa:	2312      	movs	r3, #18
 80076fc:	e7d0      	b.n	80076a0 <_dtoa_r+0x238>
 80076fe:	2301      	movs	r3, #1
 8007700:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007702:	e7f5      	b.n	80076f0 <_dtoa_r+0x288>
 8007704:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007706:	9300      	str	r3, [sp, #0]
 8007708:	9307      	str	r3, [sp, #28]
 800770a:	e7d7      	b.n	80076bc <_dtoa_r+0x254>
 800770c:	3101      	adds	r1, #1
 800770e:	0052      	lsls	r2, r2, #1
 8007710:	e7d8      	b.n	80076c4 <_dtoa_r+0x25c>
 8007712:	bf00      	nop
 8007714:	f3af 8000 	nop.w
 8007718:	636f4361 	.word	0x636f4361
 800771c:	3fd287a7 	.word	0x3fd287a7
 8007720:	8b60c8b3 	.word	0x8b60c8b3
 8007724:	3fc68a28 	.word	0x3fc68a28
 8007728:	509f79fb 	.word	0x509f79fb
 800772c:	3fd34413 	.word	0x3fd34413
 8007730:	0800aa62 	.word	0x0800aa62
 8007734:	0800aa79 	.word	0x0800aa79
 8007738:	7ff00000 	.word	0x7ff00000
 800773c:	0800aa2d 	.word	0x0800aa2d
 8007740:	3ff80000 	.word	0x3ff80000
 8007744:	0800ab70 	.word	0x0800ab70
 8007748:	0800aad1 	.word	0x0800aad1
 800774c:	0800aa5e 	.word	0x0800aa5e
 8007750:	0800aa2c 	.word	0x0800aa2c
 8007754:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007758:	6018      	str	r0, [r3, #0]
 800775a:	9b07      	ldr	r3, [sp, #28]
 800775c:	2b0e      	cmp	r3, #14
 800775e:	f200 80a4 	bhi.w	80078aa <_dtoa_r+0x442>
 8007762:	2c00      	cmp	r4, #0
 8007764:	f000 80a1 	beq.w	80078aa <_dtoa_r+0x442>
 8007768:	2f00      	cmp	r7, #0
 800776a:	dd33      	ble.n	80077d4 <_dtoa_r+0x36c>
 800776c:	4bad      	ldr	r3, [pc, #692]	@ (8007a24 <_dtoa_r+0x5bc>)
 800776e:	f007 020f 	and.w	r2, r7, #15
 8007772:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007776:	ed93 7b00 	vldr	d7, [r3]
 800777a:	05f8      	lsls	r0, r7, #23
 800777c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007780:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007784:	d516      	bpl.n	80077b4 <_dtoa_r+0x34c>
 8007786:	4ba8      	ldr	r3, [pc, #672]	@ (8007a28 <_dtoa_r+0x5c0>)
 8007788:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800778c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007790:	f7f9 f85c 	bl	800084c <__aeabi_ddiv>
 8007794:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007798:	f004 040f 	and.w	r4, r4, #15
 800779c:	2603      	movs	r6, #3
 800779e:	4da2      	ldr	r5, [pc, #648]	@ (8007a28 <_dtoa_r+0x5c0>)
 80077a0:	b954      	cbnz	r4, 80077b8 <_dtoa_r+0x350>
 80077a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077aa:	f7f9 f84f 	bl	800084c <__aeabi_ddiv>
 80077ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077b2:	e028      	b.n	8007806 <_dtoa_r+0x39e>
 80077b4:	2602      	movs	r6, #2
 80077b6:	e7f2      	b.n	800779e <_dtoa_r+0x336>
 80077b8:	07e1      	lsls	r1, r4, #31
 80077ba:	d508      	bpl.n	80077ce <_dtoa_r+0x366>
 80077bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80077c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80077c4:	f7f8 ff18 	bl	80005f8 <__aeabi_dmul>
 80077c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80077cc:	3601      	adds	r6, #1
 80077ce:	1064      	asrs	r4, r4, #1
 80077d0:	3508      	adds	r5, #8
 80077d2:	e7e5      	b.n	80077a0 <_dtoa_r+0x338>
 80077d4:	f000 80d2 	beq.w	800797c <_dtoa_r+0x514>
 80077d8:	427c      	negs	r4, r7
 80077da:	4b92      	ldr	r3, [pc, #584]	@ (8007a24 <_dtoa_r+0x5bc>)
 80077dc:	4d92      	ldr	r5, [pc, #584]	@ (8007a28 <_dtoa_r+0x5c0>)
 80077de:	f004 020f 	and.w	r2, r4, #15
 80077e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80077e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80077ee:	f7f8 ff03 	bl	80005f8 <__aeabi_dmul>
 80077f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077f6:	1124      	asrs	r4, r4, #4
 80077f8:	2300      	movs	r3, #0
 80077fa:	2602      	movs	r6, #2
 80077fc:	2c00      	cmp	r4, #0
 80077fe:	f040 80b2 	bne.w	8007966 <_dtoa_r+0x4fe>
 8007802:	2b00      	cmp	r3, #0
 8007804:	d1d3      	bne.n	80077ae <_dtoa_r+0x346>
 8007806:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007808:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800780c:	2b00      	cmp	r3, #0
 800780e:	f000 80b7 	beq.w	8007980 <_dtoa_r+0x518>
 8007812:	4b86      	ldr	r3, [pc, #536]	@ (8007a2c <_dtoa_r+0x5c4>)
 8007814:	2200      	movs	r2, #0
 8007816:	4620      	mov	r0, r4
 8007818:	4629      	mov	r1, r5
 800781a:	f7f9 f95f 	bl	8000adc <__aeabi_dcmplt>
 800781e:	2800      	cmp	r0, #0
 8007820:	f000 80ae 	beq.w	8007980 <_dtoa_r+0x518>
 8007824:	9b07      	ldr	r3, [sp, #28]
 8007826:	2b00      	cmp	r3, #0
 8007828:	f000 80aa 	beq.w	8007980 <_dtoa_r+0x518>
 800782c:	9b00      	ldr	r3, [sp, #0]
 800782e:	2b00      	cmp	r3, #0
 8007830:	dd37      	ble.n	80078a2 <_dtoa_r+0x43a>
 8007832:	1e7b      	subs	r3, r7, #1
 8007834:	9304      	str	r3, [sp, #16]
 8007836:	4620      	mov	r0, r4
 8007838:	4b7d      	ldr	r3, [pc, #500]	@ (8007a30 <_dtoa_r+0x5c8>)
 800783a:	2200      	movs	r2, #0
 800783c:	4629      	mov	r1, r5
 800783e:	f7f8 fedb 	bl	80005f8 <__aeabi_dmul>
 8007842:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007846:	9c00      	ldr	r4, [sp, #0]
 8007848:	3601      	adds	r6, #1
 800784a:	4630      	mov	r0, r6
 800784c:	f7f8 fe6a 	bl	8000524 <__aeabi_i2d>
 8007850:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007854:	f7f8 fed0 	bl	80005f8 <__aeabi_dmul>
 8007858:	4b76      	ldr	r3, [pc, #472]	@ (8007a34 <_dtoa_r+0x5cc>)
 800785a:	2200      	movs	r2, #0
 800785c:	f7f8 fd16 	bl	800028c <__adddf3>
 8007860:	4605      	mov	r5, r0
 8007862:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007866:	2c00      	cmp	r4, #0
 8007868:	f040 808d 	bne.w	8007986 <_dtoa_r+0x51e>
 800786c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007870:	4b71      	ldr	r3, [pc, #452]	@ (8007a38 <_dtoa_r+0x5d0>)
 8007872:	2200      	movs	r2, #0
 8007874:	f7f8 fd08 	bl	8000288 <__aeabi_dsub>
 8007878:	4602      	mov	r2, r0
 800787a:	460b      	mov	r3, r1
 800787c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007880:	462a      	mov	r2, r5
 8007882:	4633      	mov	r3, r6
 8007884:	f7f9 f948 	bl	8000b18 <__aeabi_dcmpgt>
 8007888:	2800      	cmp	r0, #0
 800788a:	f040 828b 	bne.w	8007da4 <_dtoa_r+0x93c>
 800788e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007892:	462a      	mov	r2, r5
 8007894:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007898:	f7f9 f920 	bl	8000adc <__aeabi_dcmplt>
 800789c:	2800      	cmp	r0, #0
 800789e:	f040 8128 	bne.w	8007af2 <_dtoa_r+0x68a>
 80078a2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80078a6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80078aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	f2c0 815a 	blt.w	8007b66 <_dtoa_r+0x6fe>
 80078b2:	2f0e      	cmp	r7, #14
 80078b4:	f300 8157 	bgt.w	8007b66 <_dtoa_r+0x6fe>
 80078b8:	4b5a      	ldr	r3, [pc, #360]	@ (8007a24 <_dtoa_r+0x5bc>)
 80078ba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80078be:	ed93 7b00 	vldr	d7, [r3]
 80078c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	ed8d 7b00 	vstr	d7, [sp]
 80078ca:	da03      	bge.n	80078d4 <_dtoa_r+0x46c>
 80078cc:	9b07      	ldr	r3, [sp, #28]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	f340 8101 	ble.w	8007ad6 <_dtoa_r+0x66e>
 80078d4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80078d8:	4656      	mov	r6, sl
 80078da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80078de:	4620      	mov	r0, r4
 80078e0:	4629      	mov	r1, r5
 80078e2:	f7f8 ffb3 	bl	800084c <__aeabi_ddiv>
 80078e6:	f7f9 f937 	bl	8000b58 <__aeabi_d2iz>
 80078ea:	4680      	mov	r8, r0
 80078ec:	f7f8 fe1a 	bl	8000524 <__aeabi_i2d>
 80078f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80078f4:	f7f8 fe80 	bl	80005f8 <__aeabi_dmul>
 80078f8:	4602      	mov	r2, r0
 80078fa:	460b      	mov	r3, r1
 80078fc:	4620      	mov	r0, r4
 80078fe:	4629      	mov	r1, r5
 8007900:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007904:	f7f8 fcc0 	bl	8000288 <__aeabi_dsub>
 8007908:	f806 4b01 	strb.w	r4, [r6], #1
 800790c:	9d07      	ldr	r5, [sp, #28]
 800790e:	eba6 040a 	sub.w	r4, r6, sl
 8007912:	42a5      	cmp	r5, r4
 8007914:	4602      	mov	r2, r0
 8007916:	460b      	mov	r3, r1
 8007918:	f040 8117 	bne.w	8007b4a <_dtoa_r+0x6e2>
 800791c:	f7f8 fcb6 	bl	800028c <__adddf3>
 8007920:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007924:	4604      	mov	r4, r0
 8007926:	460d      	mov	r5, r1
 8007928:	f7f9 f8f6 	bl	8000b18 <__aeabi_dcmpgt>
 800792c:	2800      	cmp	r0, #0
 800792e:	f040 80f9 	bne.w	8007b24 <_dtoa_r+0x6bc>
 8007932:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007936:	4620      	mov	r0, r4
 8007938:	4629      	mov	r1, r5
 800793a:	f7f9 f8c5 	bl	8000ac8 <__aeabi_dcmpeq>
 800793e:	b118      	cbz	r0, 8007948 <_dtoa_r+0x4e0>
 8007940:	f018 0f01 	tst.w	r8, #1
 8007944:	f040 80ee 	bne.w	8007b24 <_dtoa_r+0x6bc>
 8007948:	4649      	mov	r1, r9
 800794a:	4658      	mov	r0, fp
 800794c:	f000 fc90 	bl	8008270 <_Bfree>
 8007950:	2300      	movs	r3, #0
 8007952:	7033      	strb	r3, [r6, #0]
 8007954:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007956:	3701      	adds	r7, #1
 8007958:	601f      	str	r7, [r3, #0]
 800795a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800795c:	2b00      	cmp	r3, #0
 800795e:	f000 831d 	beq.w	8007f9c <_dtoa_r+0xb34>
 8007962:	601e      	str	r6, [r3, #0]
 8007964:	e31a      	b.n	8007f9c <_dtoa_r+0xb34>
 8007966:	07e2      	lsls	r2, r4, #31
 8007968:	d505      	bpl.n	8007976 <_dtoa_r+0x50e>
 800796a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800796e:	f7f8 fe43 	bl	80005f8 <__aeabi_dmul>
 8007972:	3601      	adds	r6, #1
 8007974:	2301      	movs	r3, #1
 8007976:	1064      	asrs	r4, r4, #1
 8007978:	3508      	adds	r5, #8
 800797a:	e73f      	b.n	80077fc <_dtoa_r+0x394>
 800797c:	2602      	movs	r6, #2
 800797e:	e742      	b.n	8007806 <_dtoa_r+0x39e>
 8007980:	9c07      	ldr	r4, [sp, #28]
 8007982:	9704      	str	r7, [sp, #16]
 8007984:	e761      	b.n	800784a <_dtoa_r+0x3e2>
 8007986:	4b27      	ldr	r3, [pc, #156]	@ (8007a24 <_dtoa_r+0x5bc>)
 8007988:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800798a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800798e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007992:	4454      	add	r4, sl
 8007994:	2900      	cmp	r1, #0
 8007996:	d053      	beq.n	8007a40 <_dtoa_r+0x5d8>
 8007998:	4928      	ldr	r1, [pc, #160]	@ (8007a3c <_dtoa_r+0x5d4>)
 800799a:	2000      	movs	r0, #0
 800799c:	f7f8 ff56 	bl	800084c <__aeabi_ddiv>
 80079a0:	4633      	mov	r3, r6
 80079a2:	462a      	mov	r2, r5
 80079a4:	f7f8 fc70 	bl	8000288 <__aeabi_dsub>
 80079a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80079ac:	4656      	mov	r6, sl
 80079ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079b2:	f7f9 f8d1 	bl	8000b58 <__aeabi_d2iz>
 80079b6:	4605      	mov	r5, r0
 80079b8:	f7f8 fdb4 	bl	8000524 <__aeabi_i2d>
 80079bc:	4602      	mov	r2, r0
 80079be:	460b      	mov	r3, r1
 80079c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079c4:	f7f8 fc60 	bl	8000288 <__aeabi_dsub>
 80079c8:	3530      	adds	r5, #48	@ 0x30
 80079ca:	4602      	mov	r2, r0
 80079cc:	460b      	mov	r3, r1
 80079ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80079d2:	f806 5b01 	strb.w	r5, [r6], #1
 80079d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80079da:	f7f9 f87f 	bl	8000adc <__aeabi_dcmplt>
 80079de:	2800      	cmp	r0, #0
 80079e0:	d171      	bne.n	8007ac6 <_dtoa_r+0x65e>
 80079e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80079e6:	4911      	ldr	r1, [pc, #68]	@ (8007a2c <_dtoa_r+0x5c4>)
 80079e8:	2000      	movs	r0, #0
 80079ea:	f7f8 fc4d 	bl	8000288 <__aeabi_dsub>
 80079ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80079f2:	f7f9 f873 	bl	8000adc <__aeabi_dcmplt>
 80079f6:	2800      	cmp	r0, #0
 80079f8:	f040 8095 	bne.w	8007b26 <_dtoa_r+0x6be>
 80079fc:	42a6      	cmp	r6, r4
 80079fe:	f43f af50 	beq.w	80078a2 <_dtoa_r+0x43a>
 8007a02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007a06:	4b0a      	ldr	r3, [pc, #40]	@ (8007a30 <_dtoa_r+0x5c8>)
 8007a08:	2200      	movs	r2, #0
 8007a0a:	f7f8 fdf5 	bl	80005f8 <__aeabi_dmul>
 8007a0e:	4b08      	ldr	r3, [pc, #32]	@ (8007a30 <_dtoa_r+0x5c8>)
 8007a10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007a14:	2200      	movs	r2, #0
 8007a16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a1a:	f7f8 fded 	bl	80005f8 <__aeabi_dmul>
 8007a1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a22:	e7c4      	b.n	80079ae <_dtoa_r+0x546>
 8007a24:	0800ab70 	.word	0x0800ab70
 8007a28:	0800ab48 	.word	0x0800ab48
 8007a2c:	3ff00000 	.word	0x3ff00000
 8007a30:	40240000 	.word	0x40240000
 8007a34:	401c0000 	.word	0x401c0000
 8007a38:	40140000 	.word	0x40140000
 8007a3c:	3fe00000 	.word	0x3fe00000
 8007a40:	4631      	mov	r1, r6
 8007a42:	4628      	mov	r0, r5
 8007a44:	f7f8 fdd8 	bl	80005f8 <__aeabi_dmul>
 8007a48:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007a4c:	9415      	str	r4, [sp, #84]	@ 0x54
 8007a4e:	4656      	mov	r6, sl
 8007a50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a54:	f7f9 f880 	bl	8000b58 <__aeabi_d2iz>
 8007a58:	4605      	mov	r5, r0
 8007a5a:	f7f8 fd63 	bl	8000524 <__aeabi_i2d>
 8007a5e:	4602      	mov	r2, r0
 8007a60:	460b      	mov	r3, r1
 8007a62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a66:	f7f8 fc0f 	bl	8000288 <__aeabi_dsub>
 8007a6a:	3530      	adds	r5, #48	@ 0x30
 8007a6c:	f806 5b01 	strb.w	r5, [r6], #1
 8007a70:	4602      	mov	r2, r0
 8007a72:	460b      	mov	r3, r1
 8007a74:	42a6      	cmp	r6, r4
 8007a76:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007a7a:	f04f 0200 	mov.w	r2, #0
 8007a7e:	d124      	bne.n	8007aca <_dtoa_r+0x662>
 8007a80:	4bac      	ldr	r3, [pc, #688]	@ (8007d34 <_dtoa_r+0x8cc>)
 8007a82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007a86:	f7f8 fc01 	bl	800028c <__adddf3>
 8007a8a:	4602      	mov	r2, r0
 8007a8c:	460b      	mov	r3, r1
 8007a8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a92:	f7f9 f841 	bl	8000b18 <__aeabi_dcmpgt>
 8007a96:	2800      	cmp	r0, #0
 8007a98:	d145      	bne.n	8007b26 <_dtoa_r+0x6be>
 8007a9a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007a9e:	49a5      	ldr	r1, [pc, #660]	@ (8007d34 <_dtoa_r+0x8cc>)
 8007aa0:	2000      	movs	r0, #0
 8007aa2:	f7f8 fbf1 	bl	8000288 <__aeabi_dsub>
 8007aa6:	4602      	mov	r2, r0
 8007aa8:	460b      	mov	r3, r1
 8007aaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007aae:	f7f9 f815 	bl	8000adc <__aeabi_dcmplt>
 8007ab2:	2800      	cmp	r0, #0
 8007ab4:	f43f aef5 	beq.w	80078a2 <_dtoa_r+0x43a>
 8007ab8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007aba:	1e73      	subs	r3, r6, #1
 8007abc:	9315      	str	r3, [sp, #84]	@ 0x54
 8007abe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007ac2:	2b30      	cmp	r3, #48	@ 0x30
 8007ac4:	d0f8      	beq.n	8007ab8 <_dtoa_r+0x650>
 8007ac6:	9f04      	ldr	r7, [sp, #16]
 8007ac8:	e73e      	b.n	8007948 <_dtoa_r+0x4e0>
 8007aca:	4b9b      	ldr	r3, [pc, #620]	@ (8007d38 <_dtoa_r+0x8d0>)
 8007acc:	f7f8 fd94 	bl	80005f8 <__aeabi_dmul>
 8007ad0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ad4:	e7bc      	b.n	8007a50 <_dtoa_r+0x5e8>
 8007ad6:	d10c      	bne.n	8007af2 <_dtoa_r+0x68a>
 8007ad8:	4b98      	ldr	r3, [pc, #608]	@ (8007d3c <_dtoa_r+0x8d4>)
 8007ada:	2200      	movs	r2, #0
 8007adc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ae0:	f7f8 fd8a 	bl	80005f8 <__aeabi_dmul>
 8007ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ae8:	f7f9 f80c 	bl	8000b04 <__aeabi_dcmpge>
 8007aec:	2800      	cmp	r0, #0
 8007aee:	f000 8157 	beq.w	8007da0 <_dtoa_r+0x938>
 8007af2:	2400      	movs	r4, #0
 8007af4:	4625      	mov	r5, r4
 8007af6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007af8:	43db      	mvns	r3, r3
 8007afa:	9304      	str	r3, [sp, #16]
 8007afc:	4656      	mov	r6, sl
 8007afe:	2700      	movs	r7, #0
 8007b00:	4621      	mov	r1, r4
 8007b02:	4658      	mov	r0, fp
 8007b04:	f000 fbb4 	bl	8008270 <_Bfree>
 8007b08:	2d00      	cmp	r5, #0
 8007b0a:	d0dc      	beq.n	8007ac6 <_dtoa_r+0x65e>
 8007b0c:	b12f      	cbz	r7, 8007b1a <_dtoa_r+0x6b2>
 8007b0e:	42af      	cmp	r7, r5
 8007b10:	d003      	beq.n	8007b1a <_dtoa_r+0x6b2>
 8007b12:	4639      	mov	r1, r7
 8007b14:	4658      	mov	r0, fp
 8007b16:	f000 fbab 	bl	8008270 <_Bfree>
 8007b1a:	4629      	mov	r1, r5
 8007b1c:	4658      	mov	r0, fp
 8007b1e:	f000 fba7 	bl	8008270 <_Bfree>
 8007b22:	e7d0      	b.n	8007ac6 <_dtoa_r+0x65e>
 8007b24:	9704      	str	r7, [sp, #16]
 8007b26:	4633      	mov	r3, r6
 8007b28:	461e      	mov	r6, r3
 8007b2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b2e:	2a39      	cmp	r2, #57	@ 0x39
 8007b30:	d107      	bne.n	8007b42 <_dtoa_r+0x6da>
 8007b32:	459a      	cmp	sl, r3
 8007b34:	d1f8      	bne.n	8007b28 <_dtoa_r+0x6c0>
 8007b36:	9a04      	ldr	r2, [sp, #16]
 8007b38:	3201      	adds	r2, #1
 8007b3a:	9204      	str	r2, [sp, #16]
 8007b3c:	2230      	movs	r2, #48	@ 0x30
 8007b3e:	f88a 2000 	strb.w	r2, [sl]
 8007b42:	781a      	ldrb	r2, [r3, #0]
 8007b44:	3201      	adds	r2, #1
 8007b46:	701a      	strb	r2, [r3, #0]
 8007b48:	e7bd      	b.n	8007ac6 <_dtoa_r+0x65e>
 8007b4a:	4b7b      	ldr	r3, [pc, #492]	@ (8007d38 <_dtoa_r+0x8d0>)
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	f7f8 fd53 	bl	80005f8 <__aeabi_dmul>
 8007b52:	2200      	movs	r2, #0
 8007b54:	2300      	movs	r3, #0
 8007b56:	4604      	mov	r4, r0
 8007b58:	460d      	mov	r5, r1
 8007b5a:	f7f8 ffb5 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b5e:	2800      	cmp	r0, #0
 8007b60:	f43f aebb 	beq.w	80078da <_dtoa_r+0x472>
 8007b64:	e6f0      	b.n	8007948 <_dtoa_r+0x4e0>
 8007b66:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007b68:	2a00      	cmp	r2, #0
 8007b6a:	f000 80db 	beq.w	8007d24 <_dtoa_r+0x8bc>
 8007b6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007b70:	2a01      	cmp	r2, #1
 8007b72:	f300 80bf 	bgt.w	8007cf4 <_dtoa_r+0x88c>
 8007b76:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007b78:	2a00      	cmp	r2, #0
 8007b7a:	f000 80b7 	beq.w	8007cec <_dtoa_r+0x884>
 8007b7e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007b82:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007b84:	4646      	mov	r6, r8
 8007b86:	9a08      	ldr	r2, [sp, #32]
 8007b88:	2101      	movs	r1, #1
 8007b8a:	441a      	add	r2, r3
 8007b8c:	4658      	mov	r0, fp
 8007b8e:	4498      	add	r8, r3
 8007b90:	9208      	str	r2, [sp, #32]
 8007b92:	f000 fc6b 	bl	800846c <__i2b>
 8007b96:	4605      	mov	r5, r0
 8007b98:	b15e      	cbz	r6, 8007bb2 <_dtoa_r+0x74a>
 8007b9a:	9b08      	ldr	r3, [sp, #32]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	dd08      	ble.n	8007bb2 <_dtoa_r+0x74a>
 8007ba0:	42b3      	cmp	r3, r6
 8007ba2:	9a08      	ldr	r2, [sp, #32]
 8007ba4:	bfa8      	it	ge
 8007ba6:	4633      	movge	r3, r6
 8007ba8:	eba8 0803 	sub.w	r8, r8, r3
 8007bac:	1af6      	subs	r6, r6, r3
 8007bae:	1ad3      	subs	r3, r2, r3
 8007bb0:	9308      	str	r3, [sp, #32]
 8007bb2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007bb4:	b1f3      	cbz	r3, 8007bf4 <_dtoa_r+0x78c>
 8007bb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	f000 80b7 	beq.w	8007d2c <_dtoa_r+0x8c4>
 8007bbe:	b18c      	cbz	r4, 8007be4 <_dtoa_r+0x77c>
 8007bc0:	4629      	mov	r1, r5
 8007bc2:	4622      	mov	r2, r4
 8007bc4:	4658      	mov	r0, fp
 8007bc6:	f000 fd11 	bl	80085ec <__pow5mult>
 8007bca:	464a      	mov	r2, r9
 8007bcc:	4601      	mov	r1, r0
 8007bce:	4605      	mov	r5, r0
 8007bd0:	4658      	mov	r0, fp
 8007bd2:	f000 fc61 	bl	8008498 <__multiply>
 8007bd6:	4649      	mov	r1, r9
 8007bd8:	9004      	str	r0, [sp, #16]
 8007bda:	4658      	mov	r0, fp
 8007bdc:	f000 fb48 	bl	8008270 <_Bfree>
 8007be0:	9b04      	ldr	r3, [sp, #16]
 8007be2:	4699      	mov	r9, r3
 8007be4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007be6:	1b1a      	subs	r2, r3, r4
 8007be8:	d004      	beq.n	8007bf4 <_dtoa_r+0x78c>
 8007bea:	4649      	mov	r1, r9
 8007bec:	4658      	mov	r0, fp
 8007bee:	f000 fcfd 	bl	80085ec <__pow5mult>
 8007bf2:	4681      	mov	r9, r0
 8007bf4:	2101      	movs	r1, #1
 8007bf6:	4658      	mov	r0, fp
 8007bf8:	f000 fc38 	bl	800846c <__i2b>
 8007bfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007bfe:	4604      	mov	r4, r0
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	f000 81cf 	beq.w	8007fa4 <_dtoa_r+0xb3c>
 8007c06:	461a      	mov	r2, r3
 8007c08:	4601      	mov	r1, r0
 8007c0a:	4658      	mov	r0, fp
 8007c0c:	f000 fcee 	bl	80085ec <__pow5mult>
 8007c10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	4604      	mov	r4, r0
 8007c16:	f300 8095 	bgt.w	8007d44 <_dtoa_r+0x8dc>
 8007c1a:	9b02      	ldr	r3, [sp, #8]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	f040 8087 	bne.w	8007d30 <_dtoa_r+0x8c8>
 8007c22:	9b03      	ldr	r3, [sp, #12]
 8007c24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	f040 8089 	bne.w	8007d40 <_dtoa_r+0x8d8>
 8007c2e:	9b03      	ldr	r3, [sp, #12]
 8007c30:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007c34:	0d1b      	lsrs	r3, r3, #20
 8007c36:	051b      	lsls	r3, r3, #20
 8007c38:	b12b      	cbz	r3, 8007c46 <_dtoa_r+0x7de>
 8007c3a:	9b08      	ldr	r3, [sp, #32]
 8007c3c:	3301      	adds	r3, #1
 8007c3e:	9308      	str	r3, [sp, #32]
 8007c40:	f108 0801 	add.w	r8, r8, #1
 8007c44:	2301      	movs	r3, #1
 8007c46:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	f000 81b0 	beq.w	8007fb0 <_dtoa_r+0xb48>
 8007c50:	6923      	ldr	r3, [r4, #16]
 8007c52:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007c56:	6918      	ldr	r0, [r3, #16]
 8007c58:	f000 fbbc 	bl	80083d4 <__hi0bits>
 8007c5c:	f1c0 0020 	rsb	r0, r0, #32
 8007c60:	9b08      	ldr	r3, [sp, #32]
 8007c62:	4418      	add	r0, r3
 8007c64:	f010 001f 	ands.w	r0, r0, #31
 8007c68:	d077      	beq.n	8007d5a <_dtoa_r+0x8f2>
 8007c6a:	f1c0 0320 	rsb	r3, r0, #32
 8007c6e:	2b04      	cmp	r3, #4
 8007c70:	dd6b      	ble.n	8007d4a <_dtoa_r+0x8e2>
 8007c72:	9b08      	ldr	r3, [sp, #32]
 8007c74:	f1c0 001c 	rsb	r0, r0, #28
 8007c78:	4403      	add	r3, r0
 8007c7a:	4480      	add	r8, r0
 8007c7c:	4406      	add	r6, r0
 8007c7e:	9308      	str	r3, [sp, #32]
 8007c80:	f1b8 0f00 	cmp.w	r8, #0
 8007c84:	dd05      	ble.n	8007c92 <_dtoa_r+0x82a>
 8007c86:	4649      	mov	r1, r9
 8007c88:	4642      	mov	r2, r8
 8007c8a:	4658      	mov	r0, fp
 8007c8c:	f000 fd08 	bl	80086a0 <__lshift>
 8007c90:	4681      	mov	r9, r0
 8007c92:	9b08      	ldr	r3, [sp, #32]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	dd05      	ble.n	8007ca4 <_dtoa_r+0x83c>
 8007c98:	4621      	mov	r1, r4
 8007c9a:	461a      	mov	r2, r3
 8007c9c:	4658      	mov	r0, fp
 8007c9e:	f000 fcff 	bl	80086a0 <__lshift>
 8007ca2:	4604      	mov	r4, r0
 8007ca4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d059      	beq.n	8007d5e <_dtoa_r+0x8f6>
 8007caa:	4621      	mov	r1, r4
 8007cac:	4648      	mov	r0, r9
 8007cae:	f000 fd63 	bl	8008778 <__mcmp>
 8007cb2:	2800      	cmp	r0, #0
 8007cb4:	da53      	bge.n	8007d5e <_dtoa_r+0x8f6>
 8007cb6:	1e7b      	subs	r3, r7, #1
 8007cb8:	9304      	str	r3, [sp, #16]
 8007cba:	4649      	mov	r1, r9
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	220a      	movs	r2, #10
 8007cc0:	4658      	mov	r0, fp
 8007cc2:	f000 faf7 	bl	80082b4 <__multadd>
 8007cc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007cc8:	4681      	mov	r9, r0
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	f000 8172 	beq.w	8007fb4 <_dtoa_r+0xb4c>
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	4629      	mov	r1, r5
 8007cd4:	220a      	movs	r2, #10
 8007cd6:	4658      	mov	r0, fp
 8007cd8:	f000 faec 	bl	80082b4 <__multadd>
 8007cdc:	9b00      	ldr	r3, [sp, #0]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	4605      	mov	r5, r0
 8007ce2:	dc67      	bgt.n	8007db4 <_dtoa_r+0x94c>
 8007ce4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ce6:	2b02      	cmp	r3, #2
 8007ce8:	dc41      	bgt.n	8007d6e <_dtoa_r+0x906>
 8007cea:	e063      	b.n	8007db4 <_dtoa_r+0x94c>
 8007cec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007cee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007cf2:	e746      	b.n	8007b82 <_dtoa_r+0x71a>
 8007cf4:	9b07      	ldr	r3, [sp, #28]
 8007cf6:	1e5c      	subs	r4, r3, #1
 8007cf8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007cfa:	42a3      	cmp	r3, r4
 8007cfc:	bfbf      	itttt	lt
 8007cfe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007d00:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007d02:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007d04:	1ae3      	sublt	r3, r4, r3
 8007d06:	bfb4      	ite	lt
 8007d08:	18d2      	addlt	r2, r2, r3
 8007d0a:	1b1c      	subge	r4, r3, r4
 8007d0c:	9b07      	ldr	r3, [sp, #28]
 8007d0e:	bfbc      	itt	lt
 8007d10:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007d12:	2400      	movlt	r4, #0
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	bfb5      	itete	lt
 8007d18:	eba8 0603 	sublt.w	r6, r8, r3
 8007d1c:	9b07      	ldrge	r3, [sp, #28]
 8007d1e:	2300      	movlt	r3, #0
 8007d20:	4646      	movge	r6, r8
 8007d22:	e730      	b.n	8007b86 <_dtoa_r+0x71e>
 8007d24:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007d26:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007d28:	4646      	mov	r6, r8
 8007d2a:	e735      	b.n	8007b98 <_dtoa_r+0x730>
 8007d2c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007d2e:	e75c      	b.n	8007bea <_dtoa_r+0x782>
 8007d30:	2300      	movs	r3, #0
 8007d32:	e788      	b.n	8007c46 <_dtoa_r+0x7de>
 8007d34:	3fe00000 	.word	0x3fe00000
 8007d38:	40240000 	.word	0x40240000
 8007d3c:	40140000 	.word	0x40140000
 8007d40:	9b02      	ldr	r3, [sp, #8]
 8007d42:	e780      	b.n	8007c46 <_dtoa_r+0x7de>
 8007d44:	2300      	movs	r3, #0
 8007d46:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d48:	e782      	b.n	8007c50 <_dtoa_r+0x7e8>
 8007d4a:	d099      	beq.n	8007c80 <_dtoa_r+0x818>
 8007d4c:	9a08      	ldr	r2, [sp, #32]
 8007d4e:	331c      	adds	r3, #28
 8007d50:	441a      	add	r2, r3
 8007d52:	4498      	add	r8, r3
 8007d54:	441e      	add	r6, r3
 8007d56:	9208      	str	r2, [sp, #32]
 8007d58:	e792      	b.n	8007c80 <_dtoa_r+0x818>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	e7f6      	b.n	8007d4c <_dtoa_r+0x8e4>
 8007d5e:	9b07      	ldr	r3, [sp, #28]
 8007d60:	9704      	str	r7, [sp, #16]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	dc20      	bgt.n	8007da8 <_dtoa_r+0x940>
 8007d66:	9300      	str	r3, [sp, #0]
 8007d68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d6a:	2b02      	cmp	r3, #2
 8007d6c:	dd1e      	ble.n	8007dac <_dtoa_r+0x944>
 8007d6e:	9b00      	ldr	r3, [sp, #0]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	f47f aec0 	bne.w	8007af6 <_dtoa_r+0x68e>
 8007d76:	4621      	mov	r1, r4
 8007d78:	2205      	movs	r2, #5
 8007d7a:	4658      	mov	r0, fp
 8007d7c:	f000 fa9a 	bl	80082b4 <__multadd>
 8007d80:	4601      	mov	r1, r0
 8007d82:	4604      	mov	r4, r0
 8007d84:	4648      	mov	r0, r9
 8007d86:	f000 fcf7 	bl	8008778 <__mcmp>
 8007d8a:	2800      	cmp	r0, #0
 8007d8c:	f77f aeb3 	ble.w	8007af6 <_dtoa_r+0x68e>
 8007d90:	4656      	mov	r6, sl
 8007d92:	2331      	movs	r3, #49	@ 0x31
 8007d94:	f806 3b01 	strb.w	r3, [r6], #1
 8007d98:	9b04      	ldr	r3, [sp, #16]
 8007d9a:	3301      	adds	r3, #1
 8007d9c:	9304      	str	r3, [sp, #16]
 8007d9e:	e6ae      	b.n	8007afe <_dtoa_r+0x696>
 8007da0:	9c07      	ldr	r4, [sp, #28]
 8007da2:	9704      	str	r7, [sp, #16]
 8007da4:	4625      	mov	r5, r4
 8007da6:	e7f3      	b.n	8007d90 <_dtoa_r+0x928>
 8007da8:	9b07      	ldr	r3, [sp, #28]
 8007daa:	9300      	str	r3, [sp, #0]
 8007dac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	f000 8104 	beq.w	8007fbc <_dtoa_r+0xb54>
 8007db4:	2e00      	cmp	r6, #0
 8007db6:	dd05      	ble.n	8007dc4 <_dtoa_r+0x95c>
 8007db8:	4629      	mov	r1, r5
 8007dba:	4632      	mov	r2, r6
 8007dbc:	4658      	mov	r0, fp
 8007dbe:	f000 fc6f 	bl	80086a0 <__lshift>
 8007dc2:	4605      	mov	r5, r0
 8007dc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d05a      	beq.n	8007e80 <_dtoa_r+0xa18>
 8007dca:	6869      	ldr	r1, [r5, #4]
 8007dcc:	4658      	mov	r0, fp
 8007dce:	f000 fa0f 	bl	80081f0 <_Balloc>
 8007dd2:	4606      	mov	r6, r0
 8007dd4:	b928      	cbnz	r0, 8007de2 <_dtoa_r+0x97a>
 8007dd6:	4b84      	ldr	r3, [pc, #528]	@ (8007fe8 <_dtoa_r+0xb80>)
 8007dd8:	4602      	mov	r2, r0
 8007dda:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007dde:	f7ff bb5a 	b.w	8007496 <_dtoa_r+0x2e>
 8007de2:	692a      	ldr	r2, [r5, #16]
 8007de4:	3202      	adds	r2, #2
 8007de6:	0092      	lsls	r2, r2, #2
 8007de8:	f105 010c 	add.w	r1, r5, #12
 8007dec:	300c      	adds	r0, #12
 8007dee:	f7ff fa9c 	bl	800732a <memcpy>
 8007df2:	2201      	movs	r2, #1
 8007df4:	4631      	mov	r1, r6
 8007df6:	4658      	mov	r0, fp
 8007df8:	f000 fc52 	bl	80086a0 <__lshift>
 8007dfc:	f10a 0301 	add.w	r3, sl, #1
 8007e00:	9307      	str	r3, [sp, #28]
 8007e02:	9b00      	ldr	r3, [sp, #0]
 8007e04:	4453      	add	r3, sl
 8007e06:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007e08:	9b02      	ldr	r3, [sp, #8]
 8007e0a:	f003 0301 	and.w	r3, r3, #1
 8007e0e:	462f      	mov	r7, r5
 8007e10:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e12:	4605      	mov	r5, r0
 8007e14:	9b07      	ldr	r3, [sp, #28]
 8007e16:	4621      	mov	r1, r4
 8007e18:	3b01      	subs	r3, #1
 8007e1a:	4648      	mov	r0, r9
 8007e1c:	9300      	str	r3, [sp, #0]
 8007e1e:	f7ff fa99 	bl	8007354 <quorem>
 8007e22:	4639      	mov	r1, r7
 8007e24:	9002      	str	r0, [sp, #8]
 8007e26:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007e2a:	4648      	mov	r0, r9
 8007e2c:	f000 fca4 	bl	8008778 <__mcmp>
 8007e30:	462a      	mov	r2, r5
 8007e32:	9008      	str	r0, [sp, #32]
 8007e34:	4621      	mov	r1, r4
 8007e36:	4658      	mov	r0, fp
 8007e38:	f000 fcba 	bl	80087b0 <__mdiff>
 8007e3c:	68c2      	ldr	r2, [r0, #12]
 8007e3e:	4606      	mov	r6, r0
 8007e40:	bb02      	cbnz	r2, 8007e84 <_dtoa_r+0xa1c>
 8007e42:	4601      	mov	r1, r0
 8007e44:	4648      	mov	r0, r9
 8007e46:	f000 fc97 	bl	8008778 <__mcmp>
 8007e4a:	4602      	mov	r2, r0
 8007e4c:	4631      	mov	r1, r6
 8007e4e:	4658      	mov	r0, fp
 8007e50:	920e      	str	r2, [sp, #56]	@ 0x38
 8007e52:	f000 fa0d 	bl	8008270 <_Bfree>
 8007e56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e58:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007e5a:	9e07      	ldr	r6, [sp, #28]
 8007e5c:	ea43 0102 	orr.w	r1, r3, r2
 8007e60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e62:	4319      	orrs	r1, r3
 8007e64:	d110      	bne.n	8007e88 <_dtoa_r+0xa20>
 8007e66:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007e6a:	d029      	beq.n	8007ec0 <_dtoa_r+0xa58>
 8007e6c:	9b08      	ldr	r3, [sp, #32]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	dd02      	ble.n	8007e78 <_dtoa_r+0xa10>
 8007e72:	9b02      	ldr	r3, [sp, #8]
 8007e74:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007e78:	9b00      	ldr	r3, [sp, #0]
 8007e7a:	f883 8000 	strb.w	r8, [r3]
 8007e7e:	e63f      	b.n	8007b00 <_dtoa_r+0x698>
 8007e80:	4628      	mov	r0, r5
 8007e82:	e7bb      	b.n	8007dfc <_dtoa_r+0x994>
 8007e84:	2201      	movs	r2, #1
 8007e86:	e7e1      	b.n	8007e4c <_dtoa_r+0x9e4>
 8007e88:	9b08      	ldr	r3, [sp, #32]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	db04      	blt.n	8007e98 <_dtoa_r+0xa30>
 8007e8e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007e90:	430b      	orrs	r3, r1
 8007e92:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007e94:	430b      	orrs	r3, r1
 8007e96:	d120      	bne.n	8007eda <_dtoa_r+0xa72>
 8007e98:	2a00      	cmp	r2, #0
 8007e9a:	dded      	ble.n	8007e78 <_dtoa_r+0xa10>
 8007e9c:	4649      	mov	r1, r9
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	4658      	mov	r0, fp
 8007ea2:	f000 fbfd 	bl	80086a0 <__lshift>
 8007ea6:	4621      	mov	r1, r4
 8007ea8:	4681      	mov	r9, r0
 8007eaa:	f000 fc65 	bl	8008778 <__mcmp>
 8007eae:	2800      	cmp	r0, #0
 8007eb0:	dc03      	bgt.n	8007eba <_dtoa_r+0xa52>
 8007eb2:	d1e1      	bne.n	8007e78 <_dtoa_r+0xa10>
 8007eb4:	f018 0f01 	tst.w	r8, #1
 8007eb8:	d0de      	beq.n	8007e78 <_dtoa_r+0xa10>
 8007eba:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007ebe:	d1d8      	bne.n	8007e72 <_dtoa_r+0xa0a>
 8007ec0:	9a00      	ldr	r2, [sp, #0]
 8007ec2:	2339      	movs	r3, #57	@ 0x39
 8007ec4:	7013      	strb	r3, [r2, #0]
 8007ec6:	4633      	mov	r3, r6
 8007ec8:	461e      	mov	r6, r3
 8007eca:	3b01      	subs	r3, #1
 8007ecc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007ed0:	2a39      	cmp	r2, #57	@ 0x39
 8007ed2:	d052      	beq.n	8007f7a <_dtoa_r+0xb12>
 8007ed4:	3201      	adds	r2, #1
 8007ed6:	701a      	strb	r2, [r3, #0]
 8007ed8:	e612      	b.n	8007b00 <_dtoa_r+0x698>
 8007eda:	2a00      	cmp	r2, #0
 8007edc:	dd07      	ble.n	8007eee <_dtoa_r+0xa86>
 8007ede:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007ee2:	d0ed      	beq.n	8007ec0 <_dtoa_r+0xa58>
 8007ee4:	9a00      	ldr	r2, [sp, #0]
 8007ee6:	f108 0301 	add.w	r3, r8, #1
 8007eea:	7013      	strb	r3, [r2, #0]
 8007eec:	e608      	b.n	8007b00 <_dtoa_r+0x698>
 8007eee:	9b07      	ldr	r3, [sp, #28]
 8007ef0:	9a07      	ldr	r2, [sp, #28]
 8007ef2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007ef6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d028      	beq.n	8007f4e <_dtoa_r+0xae6>
 8007efc:	4649      	mov	r1, r9
 8007efe:	2300      	movs	r3, #0
 8007f00:	220a      	movs	r2, #10
 8007f02:	4658      	mov	r0, fp
 8007f04:	f000 f9d6 	bl	80082b4 <__multadd>
 8007f08:	42af      	cmp	r7, r5
 8007f0a:	4681      	mov	r9, r0
 8007f0c:	f04f 0300 	mov.w	r3, #0
 8007f10:	f04f 020a 	mov.w	r2, #10
 8007f14:	4639      	mov	r1, r7
 8007f16:	4658      	mov	r0, fp
 8007f18:	d107      	bne.n	8007f2a <_dtoa_r+0xac2>
 8007f1a:	f000 f9cb 	bl	80082b4 <__multadd>
 8007f1e:	4607      	mov	r7, r0
 8007f20:	4605      	mov	r5, r0
 8007f22:	9b07      	ldr	r3, [sp, #28]
 8007f24:	3301      	adds	r3, #1
 8007f26:	9307      	str	r3, [sp, #28]
 8007f28:	e774      	b.n	8007e14 <_dtoa_r+0x9ac>
 8007f2a:	f000 f9c3 	bl	80082b4 <__multadd>
 8007f2e:	4629      	mov	r1, r5
 8007f30:	4607      	mov	r7, r0
 8007f32:	2300      	movs	r3, #0
 8007f34:	220a      	movs	r2, #10
 8007f36:	4658      	mov	r0, fp
 8007f38:	f000 f9bc 	bl	80082b4 <__multadd>
 8007f3c:	4605      	mov	r5, r0
 8007f3e:	e7f0      	b.n	8007f22 <_dtoa_r+0xaba>
 8007f40:	9b00      	ldr	r3, [sp, #0]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	bfcc      	ite	gt
 8007f46:	461e      	movgt	r6, r3
 8007f48:	2601      	movle	r6, #1
 8007f4a:	4456      	add	r6, sl
 8007f4c:	2700      	movs	r7, #0
 8007f4e:	4649      	mov	r1, r9
 8007f50:	2201      	movs	r2, #1
 8007f52:	4658      	mov	r0, fp
 8007f54:	f000 fba4 	bl	80086a0 <__lshift>
 8007f58:	4621      	mov	r1, r4
 8007f5a:	4681      	mov	r9, r0
 8007f5c:	f000 fc0c 	bl	8008778 <__mcmp>
 8007f60:	2800      	cmp	r0, #0
 8007f62:	dcb0      	bgt.n	8007ec6 <_dtoa_r+0xa5e>
 8007f64:	d102      	bne.n	8007f6c <_dtoa_r+0xb04>
 8007f66:	f018 0f01 	tst.w	r8, #1
 8007f6a:	d1ac      	bne.n	8007ec6 <_dtoa_r+0xa5e>
 8007f6c:	4633      	mov	r3, r6
 8007f6e:	461e      	mov	r6, r3
 8007f70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f74:	2a30      	cmp	r2, #48	@ 0x30
 8007f76:	d0fa      	beq.n	8007f6e <_dtoa_r+0xb06>
 8007f78:	e5c2      	b.n	8007b00 <_dtoa_r+0x698>
 8007f7a:	459a      	cmp	sl, r3
 8007f7c:	d1a4      	bne.n	8007ec8 <_dtoa_r+0xa60>
 8007f7e:	9b04      	ldr	r3, [sp, #16]
 8007f80:	3301      	adds	r3, #1
 8007f82:	9304      	str	r3, [sp, #16]
 8007f84:	2331      	movs	r3, #49	@ 0x31
 8007f86:	f88a 3000 	strb.w	r3, [sl]
 8007f8a:	e5b9      	b.n	8007b00 <_dtoa_r+0x698>
 8007f8c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007f8e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007fec <_dtoa_r+0xb84>
 8007f92:	b11b      	cbz	r3, 8007f9c <_dtoa_r+0xb34>
 8007f94:	f10a 0308 	add.w	r3, sl, #8
 8007f98:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007f9a:	6013      	str	r3, [r2, #0]
 8007f9c:	4650      	mov	r0, sl
 8007f9e:	b019      	add	sp, #100	@ 0x64
 8007fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fa4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	f77f ae37 	ble.w	8007c1a <_dtoa_r+0x7b2>
 8007fac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007fae:	930a      	str	r3, [sp, #40]	@ 0x28
 8007fb0:	2001      	movs	r0, #1
 8007fb2:	e655      	b.n	8007c60 <_dtoa_r+0x7f8>
 8007fb4:	9b00      	ldr	r3, [sp, #0]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	f77f aed6 	ble.w	8007d68 <_dtoa_r+0x900>
 8007fbc:	4656      	mov	r6, sl
 8007fbe:	4621      	mov	r1, r4
 8007fc0:	4648      	mov	r0, r9
 8007fc2:	f7ff f9c7 	bl	8007354 <quorem>
 8007fc6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007fca:	f806 8b01 	strb.w	r8, [r6], #1
 8007fce:	9b00      	ldr	r3, [sp, #0]
 8007fd0:	eba6 020a 	sub.w	r2, r6, sl
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	ddb3      	ble.n	8007f40 <_dtoa_r+0xad8>
 8007fd8:	4649      	mov	r1, r9
 8007fda:	2300      	movs	r3, #0
 8007fdc:	220a      	movs	r2, #10
 8007fde:	4658      	mov	r0, fp
 8007fe0:	f000 f968 	bl	80082b4 <__multadd>
 8007fe4:	4681      	mov	r9, r0
 8007fe6:	e7ea      	b.n	8007fbe <_dtoa_r+0xb56>
 8007fe8:	0800aad1 	.word	0x0800aad1
 8007fec:	0800aa55 	.word	0x0800aa55

08007ff0 <_free_r>:
 8007ff0:	b538      	push	{r3, r4, r5, lr}
 8007ff2:	4605      	mov	r5, r0
 8007ff4:	2900      	cmp	r1, #0
 8007ff6:	d041      	beq.n	800807c <_free_r+0x8c>
 8007ff8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ffc:	1f0c      	subs	r4, r1, #4
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	bfb8      	it	lt
 8008002:	18e4      	addlt	r4, r4, r3
 8008004:	f000 f8e8 	bl	80081d8 <__malloc_lock>
 8008008:	4a1d      	ldr	r2, [pc, #116]	@ (8008080 <_free_r+0x90>)
 800800a:	6813      	ldr	r3, [r2, #0]
 800800c:	b933      	cbnz	r3, 800801c <_free_r+0x2c>
 800800e:	6063      	str	r3, [r4, #4]
 8008010:	6014      	str	r4, [r2, #0]
 8008012:	4628      	mov	r0, r5
 8008014:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008018:	f000 b8e4 	b.w	80081e4 <__malloc_unlock>
 800801c:	42a3      	cmp	r3, r4
 800801e:	d908      	bls.n	8008032 <_free_r+0x42>
 8008020:	6820      	ldr	r0, [r4, #0]
 8008022:	1821      	adds	r1, r4, r0
 8008024:	428b      	cmp	r3, r1
 8008026:	bf01      	itttt	eq
 8008028:	6819      	ldreq	r1, [r3, #0]
 800802a:	685b      	ldreq	r3, [r3, #4]
 800802c:	1809      	addeq	r1, r1, r0
 800802e:	6021      	streq	r1, [r4, #0]
 8008030:	e7ed      	b.n	800800e <_free_r+0x1e>
 8008032:	461a      	mov	r2, r3
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	b10b      	cbz	r3, 800803c <_free_r+0x4c>
 8008038:	42a3      	cmp	r3, r4
 800803a:	d9fa      	bls.n	8008032 <_free_r+0x42>
 800803c:	6811      	ldr	r1, [r2, #0]
 800803e:	1850      	adds	r0, r2, r1
 8008040:	42a0      	cmp	r0, r4
 8008042:	d10b      	bne.n	800805c <_free_r+0x6c>
 8008044:	6820      	ldr	r0, [r4, #0]
 8008046:	4401      	add	r1, r0
 8008048:	1850      	adds	r0, r2, r1
 800804a:	4283      	cmp	r3, r0
 800804c:	6011      	str	r1, [r2, #0]
 800804e:	d1e0      	bne.n	8008012 <_free_r+0x22>
 8008050:	6818      	ldr	r0, [r3, #0]
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	6053      	str	r3, [r2, #4]
 8008056:	4408      	add	r0, r1
 8008058:	6010      	str	r0, [r2, #0]
 800805a:	e7da      	b.n	8008012 <_free_r+0x22>
 800805c:	d902      	bls.n	8008064 <_free_r+0x74>
 800805e:	230c      	movs	r3, #12
 8008060:	602b      	str	r3, [r5, #0]
 8008062:	e7d6      	b.n	8008012 <_free_r+0x22>
 8008064:	6820      	ldr	r0, [r4, #0]
 8008066:	1821      	adds	r1, r4, r0
 8008068:	428b      	cmp	r3, r1
 800806a:	bf04      	itt	eq
 800806c:	6819      	ldreq	r1, [r3, #0]
 800806e:	685b      	ldreq	r3, [r3, #4]
 8008070:	6063      	str	r3, [r4, #4]
 8008072:	bf04      	itt	eq
 8008074:	1809      	addeq	r1, r1, r0
 8008076:	6021      	streq	r1, [r4, #0]
 8008078:	6054      	str	r4, [r2, #4]
 800807a:	e7ca      	b.n	8008012 <_free_r+0x22>
 800807c:	bd38      	pop	{r3, r4, r5, pc}
 800807e:	bf00      	nop
 8008080:	20000908 	.word	0x20000908

08008084 <malloc>:
 8008084:	4b02      	ldr	r3, [pc, #8]	@ (8008090 <malloc+0xc>)
 8008086:	4601      	mov	r1, r0
 8008088:	6818      	ldr	r0, [r3, #0]
 800808a:	f000 b825 	b.w	80080d8 <_malloc_r>
 800808e:	bf00      	nop
 8008090:	20000018 	.word	0x20000018

08008094 <sbrk_aligned>:
 8008094:	b570      	push	{r4, r5, r6, lr}
 8008096:	4e0f      	ldr	r6, [pc, #60]	@ (80080d4 <sbrk_aligned+0x40>)
 8008098:	460c      	mov	r4, r1
 800809a:	6831      	ldr	r1, [r6, #0]
 800809c:	4605      	mov	r5, r0
 800809e:	b911      	cbnz	r1, 80080a6 <sbrk_aligned+0x12>
 80080a0:	f001 ffd2 	bl	800a048 <_sbrk_r>
 80080a4:	6030      	str	r0, [r6, #0]
 80080a6:	4621      	mov	r1, r4
 80080a8:	4628      	mov	r0, r5
 80080aa:	f001 ffcd 	bl	800a048 <_sbrk_r>
 80080ae:	1c43      	adds	r3, r0, #1
 80080b0:	d103      	bne.n	80080ba <sbrk_aligned+0x26>
 80080b2:	f04f 34ff 	mov.w	r4, #4294967295
 80080b6:	4620      	mov	r0, r4
 80080b8:	bd70      	pop	{r4, r5, r6, pc}
 80080ba:	1cc4      	adds	r4, r0, #3
 80080bc:	f024 0403 	bic.w	r4, r4, #3
 80080c0:	42a0      	cmp	r0, r4
 80080c2:	d0f8      	beq.n	80080b6 <sbrk_aligned+0x22>
 80080c4:	1a21      	subs	r1, r4, r0
 80080c6:	4628      	mov	r0, r5
 80080c8:	f001 ffbe 	bl	800a048 <_sbrk_r>
 80080cc:	3001      	adds	r0, #1
 80080ce:	d1f2      	bne.n	80080b6 <sbrk_aligned+0x22>
 80080d0:	e7ef      	b.n	80080b2 <sbrk_aligned+0x1e>
 80080d2:	bf00      	nop
 80080d4:	20000904 	.word	0x20000904

080080d8 <_malloc_r>:
 80080d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080dc:	1ccd      	adds	r5, r1, #3
 80080de:	f025 0503 	bic.w	r5, r5, #3
 80080e2:	3508      	adds	r5, #8
 80080e4:	2d0c      	cmp	r5, #12
 80080e6:	bf38      	it	cc
 80080e8:	250c      	movcc	r5, #12
 80080ea:	2d00      	cmp	r5, #0
 80080ec:	4606      	mov	r6, r0
 80080ee:	db01      	blt.n	80080f4 <_malloc_r+0x1c>
 80080f0:	42a9      	cmp	r1, r5
 80080f2:	d904      	bls.n	80080fe <_malloc_r+0x26>
 80080f4:	230c      	movs	r3, #12
 80080f6:	6033      	str	r3, [r6, #0]
 80080f8:	2000      	movs	r0, #0
 80080fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80081d4 <_malloc_r+0xfc>
 8008102:	f000 f869 	bl	80081d8 <__malloc_lock>
 8008106:	f8d8 3000 	ldr.w	r3, [r8]
 800810a:	461c      	mov	r4, r3
 800810c:	bb44      	cbnz	r4, 8008160 <_malloc_r+0x88>
 800810e:	4629      	mov	r1, r5
 8008110:	4630      	mov	r0, r6
 8008112:	f7ff ffbf 	bl	8008094 <sbrk_aligned>
 8008116:	1c43      	adds	r3, r0, #1
 8008118:	4604      	mov	r4, r0
 800811a:	d158      	bne.n	80081ce <_malloc_r+0xf6>
 800811c:	f8d8 4000 	ldr.w	r4, [r8]
 8008120:	4627      	mov	r7, r4
 8008122:	2f00      	cmp	r7, #0
 8008124:	d143      	bne.n	80081ae <_malloc_r+0xd6>
 8008126:	2c00      	cmp	r4, #0
 8008128:	d04b      	beq.n	80081c2 <_malloc_r+0xea>
 800812a:	6823      	ldr	r3, [r4, #0]
 800812c:	4639      	mov	r1, r7
 800812e:	4630      	mov	r0, r6
 8008130:	eb04 0903 	add.w	r9, r4, r3
 8008134:	f001 ff88 	bl	800a048 <_sbrk_r>
 8008138:	4581      	cmp	r9, r0
 800813a:	d142      	bne.n	80081c2 <_malloc_r+0xea>
 800813c:	6821      	ldr	r1, [r4, #0]
 800813e:	1a6d      	subs	r5, r5, r1
 8008140:	4629      	mov	r1, r5
 8008142:	4630      	mov	r0, r6
 8008144:	f7ff ffa6 	bl	8008094 <sbrk_aligned>
 8008148:	3001      	adds	r0, #1
 800814a:	d03a      	beq.n	80081c2 <_malloc_r+0xea>
 800814c:	6823      	ldr	r3, [r4, #0]
 800814e:	442b      	add	r3, r5
 8008150:	6023      	str	r3, [r4, #0]
 8008152:	f8d8 3000 	ldr.w	r3, [r8]
 8008156:	685a      	ldr	r2, [r3, #4]
 8008158:	bb62      	cbnz	r2, 80081b4 <_malloc_r+0xdc>
 800815a:	f8c8 7000 	str.w	r7, [r8]
 800815e:	e00f      	b.n	8008180 <_malloc_r+0xa8>
 8008160:	6822      	ldr	r2, [r4, #0]
 8008162:	1b52      	subs	r2, r2, r5
 8008164:	d420      	bmi.n	80081a8 <_malloc_r+0xd0>
 8008166:	2a0b      	cmp	r2, #11
 8008168:	d917      	bls.n	800819a <_malloc_r+0xc2>
 800816a:	1961      	adds	r1, r4, r5
 800816c:	42a3      	cmp	r3, r4
 800816e:	6025      	str	r5, [r4, #0]
 8008170:	bf18      	it	ne
 8008172:	6059      	strne	r1, [r3, #4]
 8008174:	6863      	ldr	r3, [r4, #4]
 8008176:	bf08      	it	eq
 8008178:	f8c8 1000 	streq.w	r1, [r8]
 800817c:	5162      	str	r2, [r4, r5]
 800817e:	604b      	str	r3, [r1, #4]
 8008180:	4630      	mov	r0, r6
 8008182:	f000 f82f 	bl	80081e4 <__malloc_unlock>
 8008186:	f104 000b 	add.w	r0, r4, #11
 800818a:	1d23      	adds	r3, r4, #4
 800818c:	f020 0007 	bic.w	r0, r0, #7
 8008190:	1ac2      	subs	r2, r0, r3
 8008192:	bf1c      	itt	ne
 8008194:	1a1b      	subne	r3, r3, r0
 8008196:	50a3      	strne	r3, [r4, r2]
 8008198:	e7af      	b.n	80080fa <_malloc_r+0x22>
 800819a:	6862      	ldr	r2, [r4, #4]
 800819c:	42a3      	cmp	r3, r4
 800819e:	bf0c      	ite	eq
 80081a0:	f8c8 2000 	streq.w	r2, [r8]
 80081a4:	605a      	strne	r2, [r3, #4]
 80081a6:	e7eb      	b.n	8008180 <_malloc_r+0xa8>
 80081a8:	4623      	mov	r3, r4
 80081aa:	6864      	ldr	r4, [r4, #4]
 80081ac:	e7ae      	b.n	800810c <_malloc_r+0x34>
 80081ae:	463c      	mov	r4, r7
 80081b0:	687f      	ldr	r7, [r7, #4]
 80081b2:	e7b6      	b.n	8008122 <_malloc_r+0x4a>
 80081b4:	461a      	mov	r2, r3
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	42a3      	cmp	r3, r4
 80081ba:	d1fb      	bne.n	80081b4 <_malloc_r+0xdc>
 80081bc:	2300      	movs	r3, #0
 80081be:	6053      	str	r3, [r2, #4]
 80081c0:	e7de      	b.n	8008180 <_malloc_r+0xa8>
 80081c2:	230c      	movs	r3, #12
 80081c4:	6033      	str	r3, [r6, #0]
 80081c6:	4630      	mov	r0, r6
 80081c8:	f000 f80c 	bl	80081e4 <__malloc_unlock>
 80081cc:	e794      	b.n	80080f8 <_malloc_r+0x20>
 80081ce:	6005      	str	r5, [r0, #0]
 80081d0:	e7d6      	b.n	8008180 <_malloc_r+0xa8>
 80081d2:	bf00      	nop
 80081d4:	20000908 	.word	0x20000908

080081d8 <__malloc_lock>:
 80081d8:	4801      	ldr	r0, [pc, #4]	@ (80081e0 <__malloc_lock+0x8>)
 80081da:	f7ff b8a4 	b.w	8007326 <__retarget_lock_acquire_recursive>
 80081de:	bf00      	nop
 80081e0:	20000900 	.word	0x20000900

080081e4 <__malloc_unlock>:
 80081e4:	4801      	ldr	r0, [pc, #4]	@ (80081ec <__malloc_unlock+0x8>)
 80081e6:	f7ff b89f 	b.w	8007328 <__retarget_lock_release_recursive>
 80081ea:	bf00      	nop
 80081ec:	20000900 	.word	0x20000900

080081f0 <_Balloc>:
 80081f0:	b570      	push	{r4, r5, r6, lr}
 80081f2:	69c6      	ldr	r6, [r0, #28]
 80081f4:	4604      	mov	r4, r0
 80081f6:	460d      	mov	r5, r1
 80081f8:	b976      	cbnz	r6, 8008218 <_Balloc+0x28>
 80081fa:	2010      	movs	r0, #16
 80081fc:	f7ff ff42 	bl	8008084 <malloc>
 8008200:	4602      	mov	r2, r0
 8008202:	61e0      	str	r0, [r4, #28]
 8008204:	b920      	cbnz	r0, 8008210 <_Balloc+0x20>
 8008206:	4b18      	ldr	r3, [pc, #96]	@ (8008268 <_Balloc+0x78>)
 8008208:	4818      	ldr	r0, [pc, #96]	@ (800826c <_Balloc+0x7c>)
 800820a:	216b      	movs	r1, #107	@ 0x6b
 800820c:	f001 ff34 	bl	800a078 <__assert_func>
 8008210:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008214:	6006      	str	r6, [r0, #0]
 8008216:	60c6      	str	r6, [r0, #12]
 8008218:	69e6      	ldr	r6, [r4, #28]
 800821a:	68f3      	ldr	r3, [r6, #12]
 800821c:	b183      	cbz	r3, 8008240 <_Balloc+0x50>
 800821e:	69e3      	ldr	r3, [r4, #28]
 8008220:	68db      	ldr	r3, [r3, #12]
 8008222:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008226:	b9b8      	cbnz	r0, 8008258 <_Balloc+0x68>
 8008228:	2101      	movs	r1, #1
 800822a:	fa01 f605 	lsl.w	r6, r1, r5
 800822e:	1d72      	adds	r2, r6, #5
 8008230:	0092      	lsls	r2, r2, #2
 8008232:	4620      	mov	r0, r4
 8008234:	f001 ff3e 	bl	800a0b4 <_calloc_r>
 8008238:	b160      	cbz	r0, 8008254 <_Balloc+0x64>
 800823a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800823e:	e00e      	b.n	800825e <_Balloc+0x6e>
 8008240:	2221      	movs	r2, #33	@ 0x21
 8008242:	2104      	movs	r1, #4
 8008244:	4620      	mov	r0, r4
 8008246:	f001 ff35 	bl	800a0b4 <_calloc_r>
 800824a:	69e3      	ldr	r3, [r4, #28]
 800824c:	60f0      	str	r0, [r6, #12]
 800824e:	68db      	ldr	r3, [r3, #12]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d1e4      	bne.n	800821e <_Balloc+0x2e>
 8008254:	2000      	movs	r0, #0
 8008256:	bd70      	pop	{r4, r5, r6, pc}
 8008258:	6802      	ldr	r2, [r0, #0]
 800825a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800825e:	2300      	movs	r3, #0
 8008260:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008264:	e7f7      	b.n	8008256 <_Balloc+0x66>
 8008266:	bf00      	nop
 8008268:	0800aa62 	.word	0x0800aa62
 800826c:	0800aae2 	.word	0x0800aae2

08008270 <_Bfree>:
 8008270:	b570      	push	{r4, r5, r6, lr}
 8008272:	69c6      	ldr	r6, [r0, #28]
 8008274:	4605      	mov	r5, r0
 8008276:	460c      	mov	r4, r1
 8008278:	b976      	cbnz	r6, 8008298 <_Bfree+0x28>
 800827a:	2010      	movs	r0, #16
 800827c:	f7ff ff02 	bl	8008084 <malloc>
 8008280:	4602      	mov	r2, r0
 8008282:	61e8      	str	r0, [r5, #28]
 8008284:	b920      	cbnz	r0, 8008290 <_Bfree+0x20>
 8008286:	4b09      	ldr	r3, [pc, #36]	@ (80082ac <_Bfree+0x3c>)
 8008288:	4809      	ldr	r0, [pc, #36]	@ (80082b0 <_Bfree+0x40>)
 800828a:	218f      	movs	r1, #143	@ 0x8f
 800828c:	f001 fef4 	bl	800a078 <__assert_func>
 8008290:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008294:	6006      	str	r6, [r0, #0]
 8008296:	60c6      	str	r6, [r0, #12]
 8008298:	b13c      	cbz	r4, 80082aa <_Bfree+0x3a>
 800829a:	69eb      	ldr	r3, [r5, #28]
 800829c:	6862      	ldr	r2, [r4, #4]
 800829e:	68db      	ldr	r3, [r3, #12]
 80082a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80082a4:	6021      	str	r1, [r4, #0]
 80082a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80082aa:	bd70      	pop	{r4, r5, r6, pc}
 80082ac:	0800aa62 	.word	0x0800aa62
 80082b0:	0800aae2 	.word	0x0800aae2

080082b4 <__multadd>:
 80082b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082b8:	690d      	ldr	r5, [r1, #16]
 80082ba:	4607      	mov	r7, r0
 80082bc:	460c      	mov	r4, r1
 80082be:	461e      	mov	r6, r3
 80082c0:	f101 0c14 	add.w	ip, r1, #20
 80082c4:	2000      	movs	r0, #0
 80082c6:	f8dc 3000 	ldr.w	r3, [ip]
 80082ca:	b299      	uxth	r1, r3
 80082cc:	fb02 6101 	mla	r1, r2, r1, r6
 80082d0:	0c1e      	lsrs	r6, r3, #16
 80082d2:	0c0b      	lsrs	r3, r1, #16
 80082d4:	fb02 3306 	mla	r3, r2, r6, r3
 80082d8:	b289      	uxth	r1, r1
 80082da:	3001      	adds	r0, #1
 80082dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80082e0:	4285      	cmp	r5, r0
 80082e2:	f84c 1b04 	str.w	r1, [ip], #4
 80082e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80082ea:	dcec      	bgt.n	80082c6 <__multadd+0x12>
 80082ec:	b30e      	cbz	r6, 8008332 <__multadd+0x7e>
 80082ee:	68a3      	ldr	r3, [r4, #8]
 80082f0:	42ab      	cmp	r3, r5
 80082f2:	dc19      	bgt.n	8008328 <__multadd+0x74>
 80082f4:	6861      	ldr	r1, [r4, #4]
 80082f6:	4638      	mov	r0, r7
 80082f8:	3101      	adds	r1, #1
 80082fa:	f7ff ff79 	bl	80081f0 <_Balloc>
 80082fe:	4680      	mov	r8, r0
 8008300:	b928      	cbnz	r0, 800830e <__multadd+0x5a>
 8008302:	4602      	mov	r2, r0
 8008304:	4b0c      	ldr	r3, [pc, #48]	@ (8008338 <__multadd+0x84>)
 8008306:	480d      	ldr	r0, [pc, #52]	@ (800833c <__multadd+0x88>)
 8008308:	21ba      	movs	r1, #186	@ 0xba
 800830a:	f001 feb5 	bl	800a078 <__assert_func>
 800830e:	6922      	ldr	r2, [r4, #16]
 8008310:	3202      	adds	r2, #2
 8008312:	f104 010c 	add.w	r1, r4, #12
 8008316:	0092      	lsls	r2, r2, #2
 8008318:	300c      	adds	r0, #12
 800831a:	f7ff f806 	bl	800732a <memcpy>
 800831e:	4621      	mov	r1, r4
 8008320:	4638      	mov	r0, r7
 8008322:	f7ff ffa5 	bl	8008270 <_Bfree>
 8008326:	4644      	mov	r4, r8
 8008328:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800832c:	3501      	adds	r5, #1
 800832e:	615e      	str	r6, [r3, #20]
 8008330:	6125      	str	r5, [r4, #16]
 8008332:	4620      	mov	r0, r4
 8008334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008338:	0800aad1 	.word	0x0800aad1
 800833c:	0800aae2 	.word	0x0800aae2

08008340 <__s2b>:
 8008340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008344:	460c      	mov	r4, r1
 8008346:	4615      	mov	r5, r2
 8008348:	461f      	mov	r7, r3
 800834a:	2209      	movs	r2, #9
 800834c:	3308      	adds	r3, #8
 800834e:	4606      	mov	r6, r0
 8008350:	fb93 f3f2 	sdiv	r3, r3, r2
 8008354:	2100      	movs	r1, #0
 8008356:	2201      	movs	r2, #1
 8008358:	429a      	cmp	r2, r3
 800835a:	db09      	blt.n	8008370 <__s2b+0x30>
 800835c:	4630      	mov	r0, r6
 800835e:	f7ff ff47 	bl	80081f0 <_Balloc>
 8008362:	b940      	cbnz	r0, 8008376 <__s2b+0x36>
 8008364:	4602      	mov	r2, r0
 8008366:	4b19      	ldr	r3, [pc, #100]	@ (80083cc <__s2b+0x8c>)
 8008368:	4819      	ldr	r0, [pc, #100]	@ (80083d0 <__s2b+0x90>)
 800836a:	21d3      	movs	r1, #211	@ 0xd3
 800836c:	f001 fe84 	bl	800a078 <__assert_func>
 8008370:	0052      	lsls	r2, r2, #1
 8008372:	3101      	adds	r1, #1
 8008374:	e7f0      	b.n	8008358 <__s2b+0x18>
 8008376:	9b08      	ldr	r3, [sp, #32]
 8008378:	6143      	str	r3, [r0, #20]
 800837a:	2d09      	cmp	r5, #9
 800837c:	f04f 0301 	mov.w	r3, #1
 8008380:	6103      	str	r3, [r0, #16]
 8008382:	dd16      	ble.n	80083b2 <__s2b+0x72>
 8008384:	f104 0909 	add.w	r9, r4, #9
 8008388:	46c8      	mov	r8, r9
 800838a:	442c      	add	r4, r5
 800838c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008390:	4601      	mov	r1, r0
 8008392:	3b30      	subs	r3, #48	@ 0x30
 8008394:	220a      	movs	r2, #10
 8008396:	4630      	mov	r0, r6
 8008398:	f7ff ff8c 	bl	80082b4 <__multadd>
 800839c:	45a0      	cmp	r8, r4
 800839e:	d1f5      	bne.n	800838c <__s2b+0x4c>
 80083a0:	f1a5 0408 	sub.w	r4, r5, #8
 80083a4:	444c      	add	r4, r9
 80083a6:	1b2d      	subs	r5, r5, r4
 80083a8:	1963      	adds	r3, r4, r5
 80083aa:	42bb      	cmp	r3, r7
 80083ac:	db04      	blt.n	80083b8 <__s2b+0x78>
 80083ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083b2:	340a      	adds	r4, #10
 80083b4:	2509      	movs	r5, #9
 80083b6:	e7f6      	b.n	80083a6 <__s2b+0x66>
 80083b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80083bc:	4601      	mov	r1, r0
 80083be:	3b30      	subs	r3, #48	@ 0x30
 80083c0:	220a      	movs	r2, #10
 80083c2:	4630      	mov	r0, r6
 80083c4:	f7ff ff76 	bl	80082b4 <__multadd>
 80083c8:	e7ee      	b.n	80083a8 <__s2b+0x68>
 80083ca:	bf00      	nop
 80083cc:	0800aad1 	.word	0x0800aad1
 80083d0:	0800aae2 	.word	0x0800aae2

080083d4 <__hi0bits>:
 80083d4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80083d8:	4603      	mov	r3, r0
 80083da:	bf36      	itet	cc
 80083dc:	0403      	lslcc	r3, r0, #16
 80083de:	2000      	movcs	r0, #0
 80083e0:	2010      	movcc	r0, #16
 80083e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80083e6:	bf3c      	itt	cc
 80083e8:	021b      	lslcc	r3, r3, #8
 80083ea:	3008      	addcc	r0, #8
 80083ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80083f0:	bf3c      	itt	cc
 80083f2:	011b      	lslcc	r3, r3, #4
 80083f4:	3004      	addcc	r0, #4
 80083f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083fa:	bf3c      	itt	cc
 80083fc:	009b      	lslcc	r3, r3, #2
 80083fe:	3002      	addcc	r0, #2
 8008400:	2b00      	cmp	r3, #0
 8008402:	db05      	blt.n	8008410 <__hi0bits+0x3c>
 8008404:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008408:	f100 0001 	add.w	r0, r0, #1
 800840c:	bf08      	it	eq
 800840e:	2020      	moveq	r0, #32
 8008410:	4770      	bx	lr

08008412 <__lo0bits>:
 8008412:	6803      	ldr	r3, [r0, #0]
 8008414:	4602      	mov	r2, r0
 8008416:	f013 0007 	ands.w	r0, r3, #7
 800841a:	d00b      	beq.n	8008434 <__lo0bits+0x22>
 800841c:	07d9      	lsls	r1, r3, #31
 800841e:	d421      	bmi.n	8008464 <__lo0bits+0x52>
 8008420:	0798      	lsls	r0, r3, #30
 8008422:	bf49      	itett	mi
 8008424:	085b      	lsrmi	r3, r3, #1
 8008426:	089b      	lsrpl	r3, r3, #2
 8008428:	2001      	movmi	r0, #1
 800842a:	6013      	strmi	r3, [r2, #0]
 800842c:	bf5c      	itt	pl
 800842e:	6013      	strpl	r3, [r2, #0]
 8008430:	2002      	movpl	r0, #2
 8008432:	4770      	bx	lr
 8008434:	b299      	uxth	r1, r3
 8008436:	b909      	cbnz	r1, 800843c <__lo0bits+0x2a>
 8008438:	0c1b      	lsrs	r3, r3, #16
 800843a:	2010      	movs	r0, #16
 800843c:	b2d9      	uxtb	r1, r3
 800843e:	b909      	cbnz	r1, 8008444 <__lo0bits+0x32>
 8008440:	3008      	adds	r0, #8
 8008442:	0a1b      	lsrs	r3, r3, #8
 8008444:	0719      	lsls	r1, r3, #28
 8008446:	bf04      	itt	eq
 8008448:	091b      	lsreq	r3, r3, #4
 800844a:	3004      	addeq	r0, #4
 800844c:	0799      	lsls	r1, r3, #30
 800844e:	bf04      	itt	eq
 8008450:	089b      	lsreq	r3, r3, #2
 8008452:	3002      	addeq	r0, #2
 8008454:	07d9      	lsls	r1, r3, #31
 8008456:	d403      	bmi.n	8008460 <__lo0bits+0x4e>
 8008458:	085b      	lsrs	r3, r3, #1
 800845a:	f100 0001 	add.w	r0, r0, #1
 800845e:	d003      	beq.n	8008468 <__lo0bits+0x56>
 8008460:	6013      	str	r3, [r2, #0]
 8008462:	4770      	bx	lr
 8008464:	2000      	movs	r0, #0
 8008466:	4770      	bx	lr
 8008468:	2020      	movs	r0, #32
 800846a:	4770      	bx	lr

0800846c <__i2b>:
 800846c:	b510      	push	{r4, lr}
 800846e:	460c      	mov	r4, r1
 8008470:	2101      	movs	r1, #1
 8008472:	f7ff febd 	bl	80081f0 <_Balloc>
 8008476:	4602      	mov	r2, r0
 8008478:	b928      	cbnz	r0, 8008486 <__i2b+0x1a>
 800847a:	4b05      	ldr	r3, [pc, #20]	@ (8008490 <__i2b+0x24>)
 800847c:	4805      	ldr	r0, [pc, #20]	@ (8008494 <__i2b+0x28>)
 800847e:	f240 1145 	movw	r1, #325	@ 0x145
 8008482:	f001 fdf9 	bl	800a078 <__assert_func>
 8008486:	2301      	movs	r3, #1
 8008488:	6144      	str	r4, [r0, #20]
 800848a:	6103      	str	r3, [r0, #16]
 800848c:	bd10      	pop	{r4, pc}
 800848e:	bf00      	nop
 8008490:	0800aad1 	.word	0x0800aad1
 8008494:	0800aae2 	.word	0x0800aae2

08008498 <__multiply>:
 8008498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800849c:	4614      	mov	r4, r2
 800849e:	690a      	ldr	r2, [r1, #16]
 80084a0:	6923      	ldr	r3, [r4, #16]
 80084a2:	429a      	cmp	r2, r3
 80084a4:	bfa8      	it	ge
 80084a6:	4623      	movge	r3, r4
 80084a8:	460f      	mov	r7, r1
 80084aa:	bfa4      	itt	ge
 80084ac:	460c      	movge	r4, r1
 80084ae:	461f      	movge	r7, r3
 80084b0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80084b4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80084b8:	68a3      	ldr	r3, [r4, #8]
 80084ba:	6861      	ldr	r1, [r4, #4]
 80084bc:	eb0a 0609 	add.w	r6, sl, r9
 80084c0:	42b3      	cmp	r3, r6
 80084c2:	b085      	sub	sp, #20
 80084c4:	bfb8      	it	lt
 80084c6:	3101      	addlt	r1, #1
 80084c8:	f7ff fe92 	bl	80081f0 <_Balloc>
 80084cc:	b930      	cbnz	r0, 80084dc <__multiply+0x44>
 80084ce:	4602      	mov	r2, r0
 80084d0:	4b44      	ldr	r3, [pc, #272]	@ (80085e4 <__multiply+0x14c>)
 80084d2:	4845      	ldr	r0, [pc, #276]	@ (80085e8 <__multiply+0x150>)
 80084d4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80084d8:	f001 fdce 	bl	800a078 <__assert_func>
 80084dc:	f100 0514 	add.w	r5, r0, #20
 80084e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80084e4:	462b      	mov	r3, r5
 80084e6:	2200      	movs	r2, #0
 80084e8:	4543      	cmp	r3, r8
 80084ea:	d321      	bcc.n	8008530 <__multiply+0x98>
 80084ec:	f107 0114 	add.w	r1, r7, #20
 80084f0:	f104 0214 	add.w	r2, r4, #20
 80084f4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80084f8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80084fc:	9302      	str	r3, [sp, #8]
 80084fe:	1b13      	subs	r3, r2, r4
 8008500:	3b15      	subs	r3, #21
 8008502:	f023 0303 	bic.w	r3, r3, #3
 8008506:	3304      	adds	r3, #4
 8008508:	f104 0715 	add.w	r7, r4, #21
 800850c:	42ba      	cmp	r2, r7
 800850e:	bf38      	it	cc
 8008510:	2304      	movcc	r3, #4
 8008512:	9301      	str	r3, [sp, #4]
 8008514:	9b02      	ldr	r3, [sp, #8]
 8008516:	9103      	str	r1, [sp, #12]
 8008518:	428b      	cmp	r3, r1
 800851a:	d80c      	bhi.n	8008536 <__multiply+0x9e>
 800851c:	2e00      	cmp	r6, #0
 800851e:	dd03      	ble.n	8008528 <__multiply+0x90>
 8008520:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008524:	2b00      	cmp	r3, #0
 8008526:	d05b      	beq.n	80085e0 <__multiply+0x148>
 8008528:	6106      	str	r6, [r0, #16]
 800852a:	b005      	add	sp, #20
 800852c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008530:	f843 2b04 	str.w	r2, [r3], #4
 8008534:	e7d8      	b.n	80084e8 <__multiply+0x50>
 8008536:	f8b1 a000 	ldrh.w	sl, [r1]
 800853a:	f1ba 0f00 	cmp.w	sl, #0
 800853e:	d024      	beq.n	800858a <__multiply+0xf2>
 8008540:	f104 0e14 	add.w	lr, r4, #20
 8008544:	46a9      	mov	r9, r5
 8008546:	f04f 0c00 	mov.w	ip, #0
 800854a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800854e:	f8d9 3000 	ldr.w	r3, [r9]
 8008552:	fa1f fb87 	uxth.w	fp, r7
 8008556:	b29b      	uxth	r3, r3
 8008558:	fb0a 330b 	mla	r3, sl, fp, r3
 800855c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008560:	f8d9 7000 	ldr.w	r7, [r9]
 8008564:	4463      	add	r3, ip
 8008566:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800856a:	fb0a c70b 	mla	r7, sl, fp, ip
 800856e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008572:	b29b      	uxth	r3, r3
 8008574:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008578:	4572      	cmp	r2, lr
 800857a:	f849 3b04 	str.w	r3, [r9], #4
 800857e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008582:	d8e2      	bhi.n	800854a <__multiply+0xb2>
 8008584:	9b01      	ldr	r3, [sp, #4]
 8008586:	f845 c003 	str.w	ip, [r5, r3]
 800858a:	9b03      	ldr	r3, [sp, #12]
 800858c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008590:	3104      	adds	r1, #4
 8008592:	f1b9 0f00 	cmp.w	r9, #0
 8008596:	d021      	beq.n	80085dc <__multiply+0x144>
 8008598:	682b      	ldr	r3, [r5, #0]
 800859a:	f104 0c14 	add.w	ip, r4, #20
 800859e:	46ae      	mov	lr, r5
 80085a0:	f04f 0a00 	mov.w	sl, #0
 80085a4:	f8bc b000 	ldrh.w	fp, [ip]
 80085a8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80085ac:	fb09 770b 	mla	r7, r9, fp, r7
 80085b0:	4457      	add	r7, sl
 80085b2:	b29b      	uxth	r3, r3
 80085b4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80085b8:	f84e 3b04 	str.w	r3, [lr], #4
 80085bc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80085c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80085c4:	f8be 3000 	ldrh.w	r3, [lr]
 80085c8:	fb09 330a 	mla	r3, r9, sl, r3
 80085cc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80085d0:	4562      	cmp	r2, ip
 80085d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80085d6:	d8e5      	bhi.n	80085a4 <__multiply+0x10c>
 80085d8:	9f01      	ldr	r7, [sp, #4]
 80085da:	51eb      	str	r3, [r5, r7]
 80085dc:	3504      	adds	r5, #4
 80085de:	e799      	b.n	8008514 <__multiply+0x7c>
 80085e0:	3e01      	subs	r6, #1
 80085e2:	e79b      	b.n	800851c <__multiply+0x84>
 80085e4:	0800aad1 	.word	0x0800aad1
 80085e8:	0800aae2 	.word	0x0800aae2

080085ec <__pow5mult>:
 80085ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085f0:	4615      	mov	r5, r2
 80085f2:	f012 0203 	ands.w	r2, r2, #3
 80085f6:	4607      	mov	r7, r0
 80085f8:	460e      	mov	r6, r1
 80085fa:	d007      	beq.n	800860c <__pow5mult+0x20>
 80085fc:	4c25      	ldr	r4, [pc, #148]	@ (8008694 <__pow5mult+0xa8>)
 80085fe:	3a01      	subs	r2, #1
 8008600:	2300      	movs	r3, #0
 8008602:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008606:	f7ff fe55 	bl	80082b4 <__multadd>
 800860a:	4606      	mov	r6, r0
 800860c:	10ad      	asrs	r5, r5, #2
 800860e:	d03d      	beq.n	800868c <__pow5mult+0xa0>
 8008610:	69fc      	ldr	r4, [r7, #28]
 8008612:	b97c      	cbnz	r4, 8008634 <__pow5mult+0x48>
 8008614:	2010      	movs	r0, #16
 8008616:	f7ff fd35 	bl	8008084 <malloc>
 800861a:	4602      	mov	r2, r0
 800861c:	61f8      	str	r0, [r7, #28]
 800861e:	b928      	cbnz	r0, 800862c <__pow5mult+0x40>
 8008620:	4b1d      	ldr	r3, [pc, #116]	@ (8008698 <__pow5mult+0xac>)
 8008622:	481e      	ldr	r0, [pc, #120]	@ (800869c <__pow5mult+0xb0>)
 8008624:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008628:	f001 fd26 	bl	800a078 <__assert_func>
 800862c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008630:	6004      	str	r4, [r0, #0]
 8008632:	60c4      	str	r4, [r0, #12]
 8008634:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008638:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800863c:	b94c      	cbnz	r4, 8008652 <__pow5mult+0x66>
 800863e:	f240 2171 	movw	r1, #625	@ 0x271
 8008642:	4638      	mov	r0, r7
 8008644:	f7ff ff12 	bl	800846c <__i2b>
 8008648:	2300      	movs	r3, #0
 800864a:	f8c8 0008 	str.w	r0, [r8, #8]
 800864e:	4604      	mov	r4, r0
 8008650:	6003      	str	r3, [r0, #0]
 8008652:	f04f 0900 	mov.w	r9, #0
 8008656:	07eb      	lsls	r3, r5, #31
 8008658:	d50a      	bpl.n	8008670 <__pow5mult+0x84>
 800865a:	4631      	mov	r1, r6
 800865c:	4622      	mov	r2, r4
 800865e:	4638      	mov	r0, r7
 8008660:	f7ff ff1a 	bl	8008498 <__multiply>
 8008664:	4631      	mov	r1, r6
 8008666:	4680      	mov	r8, r0
 8008668:	4638      	mov	r0, r7
 800866a:	f7ff fe01 	bl	8008270 <_Bfree>
 800866e:	4646      	mov	r6, r8
 8008670:	106d      	asrs	r5, r5, #1
 8008672:	d00b      	beq.n	800868c <__pow5mult+0xa0>
 8008674:	6820      	ldr	r0, [r4, #0]
 8008676:	b938      	cbnz	r0, 8008688 <__pow5mult+0x9c>
 8008678:	4622      	mov	r2, r4
 800867a:	4621      	mov	r1, r4
 800867c:	4638      	mov	r0, r7
 800867e:	f7ff ff0b 	bl	8008498 <__multiply>
 8008682:	6020      	str	r0, [r4, #0]
 8008684:	f8c0 9000 	str.w	r9, [r0]
 8008688:	4604      	mov	r4, r0
 800868a:	e7e4      	b.n	8008656 <__pow5mult+0x6a>
 800868c:	4630      	mov	r0, r6
 800868e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008692:	bf00      	nop
 8008694:	0800ab3c 	.word	0x0800ab3c
 8008698:	0800aa62 	.word	0x0800aa62
 800869c:	0800aae2 	.word	0x0800aae2

080086a0 <__lshift>:
 80086a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086a4:	460c      	mov	r4, r1
 80086a6:	6849      	ldr	r1, [r1, #4]
 80086a8:	6923      	ldr	r3, [r4, #16]
 80086aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80086ae:	68a3      	ldr	r3, [r4, #8]
 80086b0:	4607      	mov	r7, r0
 80086b2:	4691      	mov	r9, r2
 80086b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80086b8:	f108 0601 	add.w	r6, r8, #1
 80086bc:	42b3      	cmp	r3, r6
 80086be:	db0b      	blt.n	80086d8 <__lshift+0x38>
 80086c0:	4638      	mov	r0, r7
 80086c2:	f7ff fd95 	bl	80081f0 <_Balloc>
 80086c6:	4605      	mov	r5, r0
 80086c8:	b948      	cbnz	r0, 80086de <__lshift+0x3e>
 80086ca:	4602      	mov	r2, r0
 80086cc:	4b28      	ldr	r3, [pc, #160]	@ (8008770 <__lshift+0xd0>)
 80086ce:	4829      	ldr	r0, [pc, #164]	@ (8008774 <__lshift+0xd4>)
 80086d0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80086d4:	f001 fcd0 	bl	800a078 <__assert_func>
 80086d8:	3101      	adds	r1, #1
 80086da:	005b      	lsls	r3, r3, #1
 80086dc:	e7ee      	b.n	80086bc <__lshift+0x1c>
 80086de:	2300      	movs	r3, #0
 80086e0:	f100 0114 	add.w	r1, r0, #20
 80086e4:	f100 0210 	add.w	r2, r0, #16
 80086e8:	4618      	mov	r0, r3
 80086ea:	4553      	cmp	r3, sl
 80086ec:	db33      	blt.n	8008756 <__lshift+0xb6>
 80086ee:	6920      	ldr	r0, [r4, #16]
 80086f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80086f4:	f104 0314 	add.w	r3, r4, #20
 80086f8:	f019 091f 	ands.w	r9, r9, #31
 80086fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008700:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008704:	d02b      	beq.n	800875e <__lshift+0xbe>
 8008706:	f1c9 0e20 	rsb	lr, r9, #32
 800870a:	468a      	mov	sl, r1
 800870c:	2200      	movs	r2, #0
 800870e:	6818      	ldr	r0, [r3, #0]
 8008710:	fa00 f009 	lsl.w	r0, r0, r9
 8008714:	4310      	orrs	r0, r2
 8008716:	f84a 0b04 	str.w	r0, [sl], #4
 800871a:	f853 2b04 	ldr.w	r2, [r3], #4
 800871e:	459c      	cmp	ip, r3
 8008720:	fa22 f20e 	lsr.w	r2, r2, lr
 8008724:	d8f3      	bhi.n	800870e <__lshift+0x6e>
 8008726:	ebac 0304 	sub.w	r3, ip, r4
 800872a:	3b15      	subs	r3, #21
 800872c:	f023 0303 	bic.w	r3, r3, #3
 8008730:	3304      	adds	r3, #4
 8008732:	f104 0015 	add.w	r0, r4, #21
 8008736:	4584      	cmp	ip, r0
 8008738:	bf38      	it	cc
 800873a:	2304      	movcc	r3, #4
 800873c:	50ca      	str	r2, [r1, r3]
 800873e:	b10a      	cbz	r2, 8008744 <__lshift+0xa4>
 8008740:	f108 0602 	add.w	r6, r8, #2
 8008744:	3e01      	subs	r6, #1
 8008746:	4638      	mov	r0, r7
 8008748:	612e      	str	r6, [r5, #16]
 800874a:	4621      	mov	r1, r4
 800874c:	f7ff fd90 	bl	8008270 <_Bfree>
 8008750:	4628      	mov	r0, r5
 8008752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008756:	f842 0f04 	str.w	r0, [r2, #4]!
 800875a:	3301      	adds	r3, #1
 800875c:	e7c5      	b.n	80086ea <__lshift+0x4a>
 800875e:	3904      	subs	r1, #4
 8008760:	f853 2b04 	ldr.w	r2, [r3], #4
 8008764:	f841 2f04 	str.w	r2, [r1, #4]!
 8008768:	459c      	cmp	ip, r3
 800876a:	d8f9      	bhi.n	8008760 <__lshift+0xc0>
 800876c:	e7ea      	b.n	8008744 <__lshift+0xa4>
 800876e:	bf00      	nop
 8008770:	0800aad1 	.word	0x0800aad1
 8008774:	0800aae2 	.word	0x0800aae2

08008778 <__mcmp>:
 8008778:	690a      	ldr	r2, [r1, #16]
 800877a:	4603      	mov	r3, r0
 800877c:	6900      	ldr	r0, [r0, #16]
 800877e:	1a80      	subs	r0, r0, r2
 8008780:	b530      	push	{r4, r5, lr}
 8008782:	d10e      	bne.n	80087a2 <__mcmp+0x2a>
 8008784:	3314      	adds	r3, #20
 8008786:	3114      	adds	r1, #20
 8008788:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800878c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008790:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008794:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008798:	4295      	cmp	r5, r2
 800879a:	d003      	beq.n	80087a4 <__mcmp+0x2c>
 800879c:	d205      	bcs.n	80087aa <__mcmp+0x32>
 800879e:	f04f 30ff 	mov.w	r0, #4294967295
 80087a2:	bd30      	pop	{r4, r5, pc}
 80087a4:	42a3      	cmp	r3, r4
 80087a6:	d3f3      	bcc.n	8008790 <__mcmp+0x18>
 80087a8:	e7fb      	b.n	80087a2 <__mcmp+0x2a>
 80087aa:	2001      	movs	r0, #1
 80087ac:	e7f9      	b.n	80087a2 <__mcmp+0x2a>
	...

080087b0 <__mdiff>:
 80087b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087b4:	4689      	mov	r9, r1
 80087b6:	4606      	mov	r6, r0
 80087b8:	4611      	mov	r1, r2
 80087ba:	4648      	mov	r0, r9
 80087bc:	4614      	mov	r4, r2
 80087be:	f7ff ffdb 	bl	8008778 <__mcmp>
 80087c2:	1e05      	subs	r5, r0, #0
 80087c4:	d112      	bne.n	80087ec <__mdiff+0x3c>
 80087c6:	4629      	mov	r1, r5
 80087c8:	4630      	mov	r0, r6
 80087ca:	f7ff fd11 	bl	80081f0 <_Balloc>
 80087ce:	4602      	mov	r2, r0
 80087d0:	b928      	cbnz	r0, 80087de <__mdiff+0x2e>
 80087d2:	4b3f      	ldr	r3, [pc, #252]	@ (80088d0 <__mdiff+0x120>)
 80087d4:	f240 2137 	movw	r1, #567	@ 0x237
 80087d8:	483e      	ldr	r0, [pc, #248]	@ (80088d4 <__mdiff+0x124>)
 80087da:	f001 fc4d 	bl	800a078 <__assert_func>
 80087de:	2301      	movs	r3, #1
 80087e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80087e4:	4610      	mov	r0, r2
 80087e6:	b003      	add	sp, #12
 80087e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087ec:	bfbc      	itt	lt
 80087ee:	464b      	movlt	r3, r9
 80087f0:	46a1      	movlt	r9, r4
 80087f2:	4630      	mov	r0, r6
 80087f4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80087f8:	bfba      	itte	lt
 80087fa:	461c      	movlt	r4, r3
 80087fc:	2501      	movlt	r5, #1
 80087fe:	2500      	movge	r5, #0
 8008800:	f7ff fcf6 	bl	80081f0 <_Balloc>
 8008804:	4602      	mov	r2, r0
 8008806:	b918      	cbnz	r0, 8008810 <__mdiff+0x60>
 8008808:	4b31      	ldr	r3, [pc, #196]	@ (80088d0 <__mdiff+0x120>)
 800880a:	f240 2145 	movw	r1, #581	@ 0x245
 800880e:	e7e3      	b.n	80087d8 <__mdiff+0x28>
 8008810:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008814:	6926      	ldr	r6, [r4, #16]
 8008816:	60c5      	str	r5, [r0, #12]
 8008818:	f109 0310 	add.w	r3, r9, #16
 800881c:	f109 0514 	add.w	r5, r9, #20
 8008820:	f104 0e14 	add.w	lr, r4, #20
 8008824:	f100 0b14 	add.w	fp, r0, #20
 8008828:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800882c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008830:	9301      	str	r3, [sp, #4]
 8008832:	46d9      	mov	r9, fp
 8008834:	f04f 0c00 	mov.w	ip, #0
 8008838:	9b01      	ldr	r3, [sp, #4]
 800883a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800883e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008842:	9301      	str	r3, [sp, #4]
 8008844:	fa1f f38a 	uxth.w	r3, sl
 8008848:	4619      	mov	r1, r3
 800884a:	b283      	uxth	r3, r0
 800884c:	1acb      	subs	r3, r1, r3
 800884e:	0c00      	lsrs	r0, r0, #16
 8008850:	4463      	add	r3, ip
 8008852:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008856:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800885a:	b29b      	uxth	r3, r3
 800885c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008860:	4576      	cmp	r6, lr
 8008862:	f849 3b04 	str.w	r3, [r9], #4
 8008866:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800886a:	d8e5      	bhi.n	8008838 <__mdiff+0x88>
 800886c:	1b33      	subs	r3, r6, r4
 800886e:	3b15      	subs	r3, #21
 8008870:	f023 0303 	bic.w	r3, r3, #3
 8008874:	3415      	adds	r4, #21
 8008876:	3304      	adds	r3, #4
 8008878:	42a6      	cmp	r6, r4
 800887a:	bf38      	it	cc
 800887c:	2304      	movcc	r3, #4
 800887e:	441d      	add	r5, r3
 8008880:	445b      	add	r3, fp
 8008882:	461e      	mov	r6, r3
 8008884:	462c      	mov	r4, r5
 8008886:	4544      	cmp	r4, r8
 8008888:	d30e      	bcc.n	80088a8 <__mdiff+0xf8>
 800888a:	f108 0103 	add.w	r1, r8, #3
 800888e:	1b49      	subs	r1, r1, r5
 8008890:	f021 0103 	bic.w	r1, r1, #3
 8008894:	3d03      	subs	r5, #3
 8008896:	45a8      	cmp	r8, r5
 8008898:	bf38      	it	cc
 800889a:	2100      	movcc	r1, #0
 800889c:	440b      	add	r3, r1
 800889e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80088a2:	b191      	cbz	r1, 80088ca <__mdiff+0x11a>
 80088a4:	6117      	str	r7, [r2, #16]
 80088a6:	e79d      	b.n	80087e4 <__mdiff+0x34>
 80088a8:	f854 1b04 	ldr.w	r1, [r4], #4
 80088ac:	46e6      	mov	lr, ip
 80088ae:	0c08      	lsrs	r0, r1, #16
 80088b0:	fa1c fc81 	uxtah	ip, ip, r1
 80088b4:	4471      	add	r1, lr
 80088b6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80088ba:	b289      	uxth	r1, r1
 80088bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80088c0:	f846 1b04 	str.w	r1, [r6], #4
 80088c4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80088c8:	e7dd      	b.n	8008886 <__mdiff+0xd6>
 80088ca:	3f01      	subs	r7, #1
 80088cc:	e7e7      	b.n	800889e <__mdiff+0xee>
 80088ce:	bf00      	nop
 80088d0:	0800aad1 	.word	0x0800aad1
 80088d4:	0800aae2 	.word	0x0800aae2

080088d8 <__ulp>:
 80088d8:	b082      	sub	sp, #8
 80088da:	ed8d 0b00 	vstr	d0, [sp]
 80088de:	9a01      	ldr	r2, [sp, #4]
 80088e0:	4b0f      	ldr	r3, [pc, #60]	@ (8008920 <__ulp+0x48>)
 80088e2:	4013      	ands	r3, r2
 80088e4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	dc08      	bgt.n	80088fe <__ulp+0x26>
 80088ec:	425b      	negs	r3, r3
 80088ee:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80088f2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80088f6:	da04      	bge.n	8008902 <__ulp+0x2a>
 80088f8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80088fc:	4113      	asrs	r3, r2
 80088fe:	2200      	movs	r2, #0
 8008900:	e008      	b.n	8008914 <__ulp+0x3c>
 8008902:	f1a2 0314 	sub.w	r3, r2, #20
 8008906:	2b1e      	cmp	r3, #30
 8008908:	bfda      	itte	le
 800890a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800890e:	40da      	lsrle	r2, r3
 8008910:	2201      	movgt	r2, #1
 8008912:	2300      	movs	r3, #0
 8008914:	4619      	mov	r1, r3
 8008916:	4610      	mov	r0, r2
 8008918:	ec41 0b10 	vmov	d0, r0, r1
 800891c:	b002      	add	sp, #8
 800891e:	4770      	bx	lr
 8008920:	7ff00000 	.word	0x7ff00000

08008924 <__b2d>:
 8008924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008928:	6906      	ldr	r6, [r0, #16]
 800892a:	f100 0814 	add.w	r8, r0, #20
 800892e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008932:	1f37      	subs	r7, r6, #4
 8008934:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008938:	4610      	mov	r0, r2
 800893a:	f7ff fd4b 	bl	80083d4 <__hi0bits>
 800893e:	f1c0 0320 	rsb	r3, r0, #32
 8008942:	280a      	cmp	r0, #10
 8008944:	600b      	str	r3, [r1, #0]
 8008946:	491b      	ldr	r1, [pc, #108]	@ (80089b4 <__b2d+0x90>)
 8008948:	dc15      	bgt.n	8008976 <__b2d+0x52>
 800894a:	f1c0 0c0b 	rsb	ip, r0, #11
 800894e:	fa22 f30c 	lsr.w	r3, r2, ip
 8008952:	45b8      	cmp	r8, r7
 8008954:	ea43 0501 	orr.w	r5, r3, r1
 8008958:	bf34      	ite	cc
 800895a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800895e:	2300      	movcs	r3, #0
 8008960:	3015      	adds	r0, #21
 8008962:	fa02 f000 	lsl.w	r0, r2, r0
 8008966:	fa23 f30c 	lsr.w	r3, r3, ip
 800896a:	4303      	orrs	r3, r0
 800896c:	461c      	mov	r4, r3
 800896e:	ec45 4b10 	vmov	d0, r4, r5
 8008972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008976:	45b8      	cmp	r8, r7
 8008978:	bf3a      	itte	cc
 800897a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800897e:	f1a6 0708 	subcc.w	r7, r6, #8
 8008982:	2300      	movcs	r3, #0
 8008984:	380b      	subs	r0, #11
 8008986:	d012      	beq.n	80089ae <__b2d+0x8a>
 8008988:	f1c0 0120 	rsb	r1, r0, #32
 800898c:	fa23 f401 	lsr.w	r4, r3, r1
 8008990:	4082      	lsls	r2, r0
 8008992:	4322      	orrs	r2, r4
 8008994:	4547      	cmp	r7, r8
 8008996:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800899a:	bf8c      	ite	hi
 800899c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80089a0:	2200      	movls	r2, #0
 80089a2:	4083      	lsls	r3, r0
 80089a4:	40ca      	lsrs	r2, r1
 80089a6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80089aa:	4313      	orrs	r3, r2
 80089ac:	e7de      	b.n	800896c <__b2d+0x48>
 80089ae:	ea42 0501 	orr.w	r5, r2, r1
 80089b2:	e7db      	b.n	800896c <__b2d+0x48>
 80089b4:	3ff00000 	.word	0x3ff00000

080089b8 <__d2b>:
 80089b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80089bc:	460f      	mov	r7, r1
 80089be:	2101      	movs	r1, #1
 80089c0:	ec59 8b10 	vmov	r8, r9, d0
 80089c4:	4616      	mov	r6, r2
 80089c6:	f7ff fc13 	bl	80081f0 <_Balloc>
 80089ca:	4604      	mov	r4, r0
 80089cc:	b930      	cbnz	r0, 80089dc <__d2b+0x24>
 80089ce:	4602      	mov	r2, r0
 80089d0:	4b23      	ldr	r3, [pc, #140]	@ (8008a60 <__d2b+0xa8>)
 80089d2:	4824      	ldr	r0, [pc, #144]	@ (8008a64 <__d2b+0xac>)
 80089d4:	f240 310f 	movw	r1, #783	@ 0x30f
 80089d8:	f001 fb4e 	bl	800a078 <__assert_func>
 80089dc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80089e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80089e4:	b10d      	cbz	r5, 80089ea <__d2b+0x32>
 80089e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80089ea:	9301      	str	r3, [sp, #4]
 80089ec:	f1b8 0300 	subs.w	r3, r8, #0
 80089f0:	d023      	beq.n	8008a3a <__d2b+0x82>
 80089f2:	4668      	mov	r0, sp
 80089f4:	9300      	str	r3, [sp, #0]
 80089f6:	f7ff fd0c 	bl	8008412 <__lo0bits>
 80089fa:	e9dd 1200 	ldrd	r1, r2, [sp]
 80089fe:	b1d0      	cbz	r0, 8008a36 <__d2b+0x7e>
 8008a00:	f1c0 0320 	rsb	r3, r0, #32
 8008a04:	fa02 f303 	lsl.w	r3, r2, r3
 8008a08:	430b      	orrs	r3, r1
 8008a0a:	40c2      	lsrs	r2, r0
 8008a0c:	6163      	str	r3, [r4, #20]
 8008a0e:	9201      	str	r2, [sp, #4]
 8008a10:	9b01      	ldr	r3, [sp, #4]
 8008a12:	61a3      	str	r3, [r4, #24]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	bf0c      	ite	eq
 8008a18:	2201      	moveq	r2, #1
 8008a1a:	2202      	movne	r2, #2
 8008a1c:	6122      	str	r2, [r4, #16]
 8008a1e:	b1a5      	cbz	r5, 8008a4a <__d2b+0x92>
 8008a20:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008a24:	4405      	add	r5, r0
 8008a26:	603d      	str	r5, [r7, #0]
 8008a28:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008a2c:	6030      	str	r0, [r6, #0]
 8008a2e:	4620      	mov	r0, r4
 8008a30:	b003      	add	sp, #12
 8008a32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a36:	6161      	str	r1, [r4, #20]
 8008a38:	e7ea      	b.n	8008a10 <__d2b+0x58>
 8008a3a:	a801      	add	r0, sp, #4
 8008a3c:	f7ff fce9 	bl	8008412 <__lo0bits>
 8008a40:	9b01      	ldr	r3, [sp, #4]
 8008a42:	6163      	str	r3, [r4, #20]
 8008a44:	3020      	adds	r0, #32
 8008a46:	2201      	movs	r2, #1
 8008a48:	e7e8      	b.n	8008a1c <__d2b+0x64>
 8008a4a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008a4e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008a52:	6038      	str	r0, [r7, #0]
 8008a54:	6918      	ldr	r0, [r3, #16]
 8008a56:	f7ff fcbd 	bl	80083d4 <__hi0bits>
 8008a5a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008a5e:	e7e5      	b.n	8008a2c <__d2b+0x74>
 8008a60:	0800aad1 	.word	0x0800aad1
 8008a64:	0800aae2 	.word	0x0800aae2

08008a68 <__ratio>:
 8008a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a6c:	b085      	sub	sp, #20
 8008a6e:	e9cd 1000 	strd	r1, r0, [sp]
 8008a72:	a902      	add	r1, sp, #8
 8008a74:	f7ff ff56 	bl	8008924 <__b2d>
 8008a78:	9800      	ldr	r0, [sp, #0]
 8008a7a:	a903      	add	r1, sp, #12
 8008a7c:	ec55 4b10 	vmov	r4, r5, d0
 8008a80:	f7ff ff50 	bl	8008924 <__b2d>
 8008a84:	9b01      	ldr	r3, [sp, #4]
 8008a86:	6919      	ldr	r1, [r3, #16]
 8008a88:	9b00      	ldr	r3, [sp, #0]
 8008a8a:	691b      	ldr	r3, [r3, #16]
 8008a8c:	1ac9      	subs	r1, r1, r3
 8008a8e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008a92:	1a9b      	subs	r3, r3, r2
 8008a94:	ec5b ab10 	vmov	sl, fp, d0
 8008a98:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	bfce      	itee	gt
 8008aa0:	462a      	movgt	r2, r5
 8008aa2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008aa6:	465a      	movle	r2, fp
 8008aa8:	462f      	mov	r7, r5
 8008aaa:	46d9      	mov	r9, fp
 8008aac:	bfcc      	ite	gt
 8008aae:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008ab2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008ab6:	464b      	mov	r3, r9
 8008ab8:	4652      	mov	r2, sl
 8008aba:	4620      	mov	r0, r4
 8008abc:	4639      	mov	r1, r7
 8008abe:	f7f7 fec5 	bl	800084c <__aeabi_ddiv>
 8008ac2:	ec41 0b10 	vmov	d0, r0, r1
 8008ac6:	b005      	add	sp, #20
 8008ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008acc <__copybits>:
 8008acc:	3901      	subs	r1, #1
 8008ace:	b570      	push	{r4, r5, r6, lr}
 8008ad0:	1149      	asrs	r1, r1, #5
 8008ad2:	6914      	ldr	r4, [r2, #16]
 8008ad4:	3101      	adds	r1, #1
 8008ad6:	f102 0314 	add.w	r3, r2, #20
 8008ada:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008ade:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008ae2:	1f05      	subs	r5, r0, #4
 8008ae4:	42a3      	cmp	r3, r4
 8008ae6:	d30c      	bcc.n	8008b02 <__copybits+0x36>
 8008ae8:	1aa3      	subs	r3, r4, r2
 8008aea:	3b11      	subs	r3, #17
 8008aec:	f023 0303 	bic.w	r3, r3, #3
 8008af0:	3211      	adds	r2, #17
 8008af2:	42a2      	cmp	r2, r4
 8008af4:	bf88      	it	hi
 8008af6:	2300      	movhi	r3, #0
 8008af8:	4418      	add	r0, r3
 8008afa:	2300      	movs	r3, #0
 8008afc:	4288      	cmp	r0, r1
 8008afe:	d305      	bcc.n	8008b0c <__copybits+0x40>
 8008b00:	bd70      	pop	{r4, r5, r6, pc}
 8008b02:	f853 6b04 	ldr.w	r6, [r3], #4
 8008b06:	f845 6f04 	str.w	r6, [r5, #4]!
 8008b0a:	e7eb      	b.n	8008ae4 <__copybits+0x18>
 8008b0c:	f840 3b04 	str.w	r3, [r0], #4
 8008b10:	e7f4      	b.n	8008afc <__copybits+0x30>

08008b12 <__any_on>:
 8008b12:	f100 0214 	add.w	r2, r0, #20
 8008b16:	6900      	ldr	r0, [r0, #16]
 8008b18:	114b      	asrs	r3, r1, #5
 8008b1a:	4298      	cmp	r0, r3
 8008b1c:	b510      	push	{r4, lr}
 8008b1e:	db11      	blt.n	8008b44 <__any_on+0x32>
 8008b20:	dd0a      	ble.n	8008b38 <__any_on+0x26>
 8008b22:	f011 011f 	ands.w	r1, r1, #31
 8008b26:	d007      	beq.n	8008b38 <__any_on+0x26>
 8008b28:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008b2c:	fa24 f001 	lsr.w	r0, r4, r1
 8008b30:	fa00 f101 	lsl.w	r1, r0, r1
 8008b34:	428c      	cmp	r4, r1
 8008b36:	d10b      	bne.n	8008b50 <__any_on+0x3e>
 8008b38:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d803      	bhi.n	8008b48 <__any_on+0x36>
 8008b40:	2000      	movs	r0, #0
 8008b42:	bd10      	pop	{r4, pc}
 8008b44:	4603      	mov	r3, r0
 8008b46:	e7f7      	b.n	8008b38 <__any_on+0x26>
 8008b48:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008b4c:	2900      	cmp	r1, #0
 8008b4e:	d0f5      	beq.n	8008b3c <__any_on+0x2a>
 8008b50:	2001      	movs	r0, #1
 8008b52:	e7f6      	b.n	8008b42 <__any_on+0x30>

08008b54 <sulp>:
 8008b54:	b570      	push	{r4, r5, r6, lr}
 8008b56:	4604      	mov	r4, r0
 8008b58:	460d      	mov	r5, r1
 8008b5a:	ec45 4b10 	vmov	d0, r4, r5
 8008b5e:	4616      	mov	r6, r2
 8008b60:	f7ff feba 	bl	80088d8 <__ulp>
 8008b64:	ec51 0b10 	vmov	r0, r1, d0
 8008b68:	b17e      	cbz	r6, 8008b8a <sulp+0x36>
 8008b6a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008b6e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	dd09      	ble.n	8008b8a <sulp+0x36>
 8008b76:	051b      	lsls	r3, r3, #20
 8008b78:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008b7c:	2400      	movs	r4, #0
 8008b7e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008b82:	4622      	mov	r2, r4
 8008b84:	462b      	mov	r3, r5
 8008b86:	f7f7 fd37 	bl	80005f8 <__aeabi_dmul>
 8008b8a:	ec41 0b10 	vmov	d0, r0, r1
 8008b8e:	bd70      	pop	{r4, r5, r6, pc}

08008b90 <_strtod_l>:
 8008b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b94:	b09f      	sub	sp, #124	@ 0x7c
 8008b96:	460c      	mov	r4, r1
 8008b98:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	921a      	str	r2, [sp, #104]	@ 0x68
 8008b9e:	9005      	str	r0, [sp, #20]
 8008ba0:	f04f 0a00 	mov.w	sl, #0
 8008ba4:	f04f 0b00 	mov.w	fp, #0
 8008ba8:	460a      	mov	r2, r1
 8008baa:	9219      	str	r2, [sp, #100]	@ 0x64
 8008bac:	7811      	ldrb	r1, [r2, #0]
 8008bae:	292b      	cmp	r1, #43	@ 0x2b
 8008bb0:	d04a      	beq.n	8008c48 <_strtod_l+0xb8>
 8008bb2:	d838      	bhi.n	8008c26 <_strtod_l+0x96>
 8008bb4:	290d      	cmp	r1, #13
 8008bb6:	d832      	bhi.n	8008c1e <_strtod_l+0x8e>
 8008bb8:	2908      	cmp	r1, #8
 8008bba:	d832      	bhi.n	8008c22 <_strtod_l+0x92>
 8008bbc:	2900      	cmp	r1, #0
 8008bbe:	d03b      	beq.n	8008c38 <_strtod_l+0xa8>
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008bc4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008bc6:	782a      	ldrb	r2, [r5, #0]
 8008bc8:	2a30      	cmp	r2, #48	@ 0x30
 8008bca:	f040 80b3 	bne.w	8008d34 <_strtod_l+0x1a4>
 8008bce:	786a      	ldrb	r2, [r5, #1]
 8008bd0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008bd4:	2a58      	cmp	r2, #88	@ 0x58
 8008bd6:	d16e      	bne.n	8008cb6 <_strtod_l+0x126>
 8008bd8:	9302      	str	r3, [sp, #8]
 8008bda:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008bdc:	9301      	str	r3, [sp, #4]
 8008bde:	ab1a      	add	r3, sp, #104	@ 0x68
 8008be0:	9300      	str	r3, [sp, #0]
 8008be2:	4a8e      	ldr	r2, [pc, #568]	@ (8008e1c <_strtod_l+0x28c>)
 8008be4:	9805      	ldr	r0, [sp, #20]
 8008be6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008be8:	a919      	add	r1, sp, #100	@ 0x64
 8008bea:	f001 fadf 	bl	800a1ac <__gethex>
 8008bee:	f010 060f 	ands.w	r6, r0, #15
 8008bf2:	4604      	mov	r4, r0
 8008bf4:	d005      	beq.n	8008c02 <_strtod_l+0x72>
 8008bf6:	2e06      	cmp	r6, #6
 8008bf8:	d128      	bne.n	8008c4c <_strtod_l+0xbc>
 8008bfa:	3501      	adds	r5, #1
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	9519      	str	r5, [sp, #100]	@ 0x64
 8008c00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008c02:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	f040 858e 	bne.w	8009726 <_strtod_l+0xb96>
 8008c0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008c0c:	b1cb      	cbz	r3, 8008c42 <_strtod_l+0xb2>
 8008c0e:	4652      	mov	r2, sl
 8008c10:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008c14:	ec43 2b10 	vmov	d0, r2, r3
 8008c18:	b01f      	add	sp, #124	@ 0x7c
 8008c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c1e:	2920      	cmp	r1, #32
 8008c20:	d1ce      	bne.n	8008bc0 <_strtod_l+0x30>
 8008c22:	3201      	adds	r2, #1
 8008c24:	e7c1      	b.n	8008baa <_strtod_l+0x1a>
 8008c26:	292d      	cmp	r1, #45	@ 0x2d
 8008c28:	d1ca      	bne.n	8008bc0 <_strtod_l+0x30>
 8008c2a:	2101      	movs	r1, #1
 8008c2c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008c2e:	1c51      	adds	r1, r2, #1
 8008c30:	9119      	str	r1, [sp, #100]	@ 0x64
 8008c32:	7852      	ldrb	r2, [r2, #1]
 8008c34:	2a00      	cmp	r2, #0
 8008c36:	d1c5      	bne.n	8008bc4 <_strtod_l+0x34>
 8008c38:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008c3a:	9419      	str	r4, [sp, #100]	@ 0x64
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	f040 8570 	bne.w	8009722 <_strtod_l+0xb92>
 8008c42:	4652      	mov	r2, sl
 8008c44:	465b      	mov	r3, fp
 8008c46:	e7e5      	b.n	8008c14 <_strtod_l+0x84>
 8008c48:	2100      	movs	r1, #0
 8008c4a:	e7ef      	b.n	8008c2c <_strtod_l+0x9c>
 8008c4c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008c4e:	b13a      	cbz	r2, 8008c60 <_strtod_l+0xd0>
 8008c50:	2135      	movs	r1, #53	@ 0x35
 8008c52:	a81c      	add	r0, sp, #112	@ 0x70
 8008c54:	f7ff ff3a 	bl	8008acc <__copybits>
 8008c58:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008c5a:	9805      	ldr	r0, [sp, #20]
 8008c5c:	f7ff fb08 	bl	8008270 <_Bfree>
 8008c60:	3e01      	subs	r6, #1
 8008c62:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008c64:	2e04      	cmp	r6, #4
 8008c66:	d806      	bhi.n	8008c76 <_strtod_l+0xe6>
 8008c68:	e8df f006 	tbb	[pc, r6]
 8008c6c:	201d0314 	.word	0x201d0314
 8008c70:	14          	.byte	0x14
 8008c71:	00          	.byte	0x00
 8008c72:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008c76:	05e1      	lsls	r1, r4, #23
 8008c78:	bf48      	it	mi
 8008c7a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008c7e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008c82:	0d1b      	lsrs	r3, r3, #20
 8008c84:	051b      	lsls	r3, r3, #20
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d1bb      	bne.n	8008c02 <_strtod_l+0x72>
 8008c8a:	f7fe fb21 	bl	80072d0 <__errno>
 8008c8e:	2322      	movs	r3, #34	@ 0x22
 8008c90:	6003      	str	r3, [r0, #0]
 8008c92:	e7b6      	b.n	8008c02 <_strtod_l+0x72>
 8008c94:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008c98:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008c9c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008ca0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008ca4:	e7e7      	b.n	8008c76 <_strtod_l+0xe6>
 8008ca6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8008e24 <_strtod_l+0x294>
 8008caa:	e7e4      	b.n	8008c76 <_strtod_l+0xe6>
 8008cac:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008cb0:	f04f 3aff 	mov.w	sl, #4294967295
 8008cb4:	e7df      	b.n	8008c76 <_strtod_l+0xe6>
 8008cb6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008cb8:	1c5a      	adds	r2, r3, #1
 8008cba:	9219      	str	r2, [sp, #100]	@ 0x64
 8008cbc:	785b      	ldrb	r3, [r3, #1]
 8008cbe:	2b30      	cmp	r3, #48	@ 0x30
 8008cc0:	d0f9      	beq.n	8008cb6 <_strtod_l+0x126>
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d09d      	beq.n	8008c02 <_strtod_l+0x72>
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008ccc:	930c      	str	r3, [sp, #48]	@ 0x30
 8008cce:	2300      	movs	r3, #0
 8008cd0:	9308      	str	r3, [sp, #32]
 8008cd2:	930a      	str	r3, [sp, #40]	@ 0x28
 8008cd4:	461f      	mov	r7, r3
 8008cd6:	220a      	movs	r2, #10
 8008cd8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008cda:	7805      	ldrb	r5, [r0, #0]
 8008cdc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008ce0:	b2d9      	uxtb	r1, r3
 8008ce2:	2909      	cmp	r1, #9
 8008ce4:	d928      	bls.n	8008d38 <_strtod_l+0x1a8>
 8008ce6:	494e      	ldr	r1, [pc, #312]	@ (8008e20 <_strtod_l+0x290>)
 8008ce8:	2201      	movs	r2, #1
 8008cea:	f001 f979 	bl	8009fe0 <strncmp>
 8008cee:	2800      	cmp	r0, #0
 8008cf0:	d032      	beq.n	8008d58 <_strtod_l+0x1c8>
 8008cf2:	2000      	movs	r0, #0
 8008cf4:	462a      	mov	r2, r5
 8008cf6:	4681      	mov	r9, r0
 8008cf8:	463d      	mov	r5, r7
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	2a65      	cmp	r2, #101	@ 0x65
 8008cfe:	d001      	beq.n	8008d04 <_strtod_l+0x174>
 8008d00:	2a45      	cmp	r2, #69	@ 0x45
 8008d02:	d114      	bne.n	8008d2e <_strtod_l+0x19e>
 8008d04:	b91d      	cbnz	r5, 8008d0e <_strtod_l+0x17e>
 8008d06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d08:	4302      	orrs	r2, r0
 8008d0a:	d095      	beq.n	8008c38 <_strtod_l+0xa8>
 8008d0c:	2500      	movs	r5, #0
 8008d0e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008d10:	1c62      	adds	r2, r4, #1
 8008d12:	9219      	str	r2, [sp, #100]	@ 0x64
 8008d14:	7862      	ldrb	r2, [r4, #1]
 8008d16:	2a2b      	cmp	r2, #43	@ 0x2b
 8008d18:	d077      	beq.n	8008e0a <_strtod_l+0x27a>
 8008d1a:	2a2d      	cmp	r2, #45	@ 0x2d
 8008d1c:	d07b      	beq.n	8008e16 <_strtod_l+0x286>
 8008d1e:	f04f 0c00 	mov.w	ip, #0
 8008d22:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008d26:	2909      	cmp	r1, #9
 8008d28:	f240 8082 	bls.w	8008e30 <_strtod_l+0x2a0>
 8008d2c:	9419      	str	r4, [sp, #100]	@ 0x64
 8008d2e:	f04f 0800 	mov.w	r8, #0
 8008d32:	e0a2      	b.n	8008e7a <_strtod_l+0x2ea>
 8008d34:	2300      	movs	r3, #0
 8008d36:	e7c7      	b.n	8008cc8 <_strtod_l+0x138>
 8008d38:	2f08      	cmp	r7, #8
 8008d3a:	bfd5      	itete	le
 8008d3c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8008d3e:	9908      	ldrgt	r1, [sp, #32]
 8008d40:	fb02 3301 	mlale	r3, r2, r1, r3
 8008d44:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008d48:	f100 0001 	add.w	r0, r0, #1
 8008d4c:	bfd4      	ite	le
 8008d4e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008d50:	9308      	strgt	r3, [sp, #32]
 8008d52:	3701      	adds	r7, #1
 8008d54:	9019      	str	r0, [sp, #100]	@ 0x64
 8008d56:	e7bf      	b.n	8008cd8 <_strtod_l+0x148>
 8008d58:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d5a:	1c5a      	adds	r2, r3, #1
 8008d5c:	9219      	str	r2, [sp, #100]	@ 0x64
 8008d5e:	785a      	ldrb	r2, [r3, #1]
 8008d60:	b37f      	cbz	r7, 8008dc2 <_strtod_l+0x232>
 8008d62:	4681      	mov	r9, r0
 8008d64:	463d      	mov	r5, r7
 8008d66:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008d6a:	2b09      	cmp	r3, #9
 8008d6c:	d912      	bls.n	8008d94 <_strtod_l+0x204>
 8008d6e:	2301      	movs	r3, #1
 8008d70:	e7c4      	b.n	8008cfc <_strtod_l+0x16c>
 8008d72:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d74:	1c5a      	adds	r2, r3, #1
 8008d76:	9219      	str	r2, [sp, #100]	@ 0x64
 8008d78:	785a      	ldrb	r2, [r3, #1]
 8008d7a:	3001      	adds	r0, #1
 8008d7c:	2a30      	cmp	r2, #48	@ 0x30
 8008d7e:	d0f8      	beq.n	8008d72 <_strtod_l+0x1e2>
 8008d80:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008d84:	2b08      	cmp	r3, #8
 8008d86:	f200 84d3 	bhi.w	8009730 <_strtod_l+0xba0>
 8008d8a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d8c:	930c      	str	r3, [sp, #48]	@ 0x30
 8008d8e:	4681      	mov	r9, r0
 8008d90:	2000      	movs	r0, #0
 8008d92:	4605      	mov	r5, r0
 8008d94:	3a30      	subs	r2, #48	@ 0x30
 8008d96:	f100 0301 	add.w	r3, r0, #1
 8008d9a:	d02a      	beq.n	8008df2 <_strtod_l+0x262>
 8008d9c:	4499      	add	r9, r3
 8008d9e:	eb00 0c05 	add.w	ip, r0, r5
 8008da2:	462b      	mov	r3, r5
 8008da4:	210a      	movs	r1, #10
 8008da6:	4563      	cmp	r3, ip
 8008da8:	d10d      	bne.n	8008dc6 <_strtod_l+0x236>
 8008daa:	1c69      	adds	r1, r5, #1
 8008dac:	4401      	add	r1, r0
 8008dae:	4428      	add	r0, r5
 8008db0:	2808      	cmp	r0, #8
 8008db2:	dc16      	bgt.n	8008de2 <_strtod_l+0x252>
 8008db4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008db6:	230a      	movs	r3, #10
 8008db8:	fb03 2300 	mla	r3, r3, r0, r2
 8008dbc:	930a      	str	r3, [sp, #40]	@ 0x28
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	e018      	b.n	8008df4 <_strtod_l+0x264>
 8008dc2:	4638      	mov	r0, r7
 8008dc4:	e7da      	b.n	8008d7c <_strtod_l+0x1ec>
 8008dc6:	2b08      	cmp	r3, #8
 8008dc8:	f103 0301 	add.w	r3, r3, #1
 8008dcc:	dc03      	bgt.n	8008dd6 <_strtod_l+0x246>
 8008dce:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008dd0:	434e      	muls	r6, r1
 8008dd2:	960a      	str	r6, [sp, #40]	@ 0x28
 8008dd4:	e7e7      	b.n	8008da6 <_strtod_l+0x216>
 8008dd6:	2b10      	cmp	r3, #16
 8008dd8:	bfde      	ittt	le
 8008dda:	9e08      	ldrle	r6, [sp, #32]
 8008ddc:	434e      	mulle	r6, r1
 8008dde:	9608      	strle	r6, [sp, #32]
 8008de0:	e7e1      	b.n	8008da6 <_strtod_l+0x216>
 8008de2:	280f      	cmp	r0, #15
 8008de4:	dceb      	bgt.n	8008dbe <_strtod_l+0x22e>
 8008de6:	9808      	ldr	r0, [sp, #32]
 8008de8:	230a      	movs	r3, #10
 8008dea:	fb03 2300 	mla	r3, r3, r0, r2
 8008dee:	9308      	str	r3, [sp, #32]
 8008df0:	e7e5      	b.n	8008dbe <_strtod_l+0x22e>
 8008df2:	4629      	mov	r1, r5
 8008df4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008df6:	1c50      	adds	r0, r2, #1
 8008df8:	9019      	str	r0, [sp, #100]	@ 0x64
 8008dfa:	7852      	ldrb	r2, [r2, #1]
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	460d      	mov	r5, r1
 8008e00:	e7b1      	b.n	8008d66 <_strtod_l+0x1d6>
 8008e02:	f04f 0900 	mov.w	r9, #0
 8008e06:	2301      	movs	r3, #1
 8008e08:	e77d      	b.n	8008d06 <_strtod_l+0x176>
 8008e0a:	f04f 0c00 	mov.w	ip, #0
 8008e0e:	1ca2      	adds	r2, r4, #2
 8008e10:	9219      	str	r2, [sp, #100]	@ 0x64
 8008e12:	78a2      	ldrb	r2, [r4, #2]
 8008e14:	e785      	b.n	8008d22 <_strtod_l+0x192>
 8008e16:	f04f 0c01 	mov.w	ip, #1
 8008e1a:	e7f8      	b.n	8008e0e <_strtod_l+0x27e>
 8008e1c:	0800ac50 	.word	0x0800ac50
 8008e20:	0800ac38 	.word	0x0800ac38
 8008e24:	7ff00000 	.word	0x7ff00000
 8008e28:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008e2a:	1c51      	adds	r1, r2, #1
 8008e2c:	9119      	str	r1, [sp, #100]	@ 0x64
 8008e2e:	7852      	ldrb	r2, [r2, #1]
 8008e30:	2a30      	cmp	r2, #48	@ 0x30
 8008e32:	d0f9      	beq.n	8008e28 <_strtod_l+0x298>
 8008e34:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008e38:	2908      	cmp	r1, #8
 8008e3a:	f63f af78 	bhi.w	8008d2e <_strtod_l+0x19e>
 8008e3e:	3a30      	subs	r2, #48	@ 0x30
 8008e40:	920e      	str	r2, [sp, #56]	@ 0x38
 8008e42:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008e44:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008e46:	f04f 080a 	mov.w	r8, #10
 8008e4a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008e4c:	1c56      	adds	r6, r2, #1
 8008e4e:	9619      	str	r6, [sp, #100]	@ 0x64
 8008e50:	7852      	ldrb	r2, [r2, #1]
 8008e52:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008e56:	f1be 0f09 	cmp.w	lr, #9
 8008e5a:	d939      	bls.n	8008ed0 <_strtod_l+0x340>
 8008e5c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008e5e:	1a76      	subs	r6, r6, r1
 8008e60:	2e08      	cmp	r6, #8
 8008e62:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008e66:	dc03      	bgt.n	8008e70 <_strtod_l+0x2e0>
 8008e68:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008e6a:	4588      	cmp	r8, r1
 8008e6c:	bfa8      	it	ge
 8008e6e:	4688      	movge	r8, r1
 8008e70:	f1bc 0f00 	cmp.w	ip, #0
 8008e74:	d001      	beq.n	8008e7a <_strtod_l+0x2ea>
 8008e76:	f1c8 0800 	rsb	r8, r8, #0
 8008e7a:	2d00      	cmp	r5, #0
 8008e7c:	d14e      	bne.n	8008f1c <_strtod_l+0x38c>
 8008e7e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008e80:	4308      	orrs	r0, r1
 8008e82:	f47f aebe 	bne.w	8008c02 <_strtod_l+0x72>
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	f47f aed6 	bne.w	8008c38 <_strtod_l+0xa8>
 8008e8c:	2a69      	cmp	r2, #105	@ 0x69
 8008e8e:	d028      	beq.n	8008ee2 <_strtod_l+0x352>
 8008e90:	dc25      	bgt.n	8008ede <_strtod_l+0x34e>
 8008e92:	2a49      	cmp	r2, #73	@ 0x49
 8008e94:	d025      	beq.n	8008ee2 <_strtod_l+0x352>
 8008e96:	2a4e      	cmp	r2, #78	@ 0x4e
 8008e98:	f47f aece 	bne.w	8008c38 <_strtod_l+0xa8>
 8008e9c:	499b      	ldr	r1, [pc, #620]	@ (800910c <_strtod_l+0x57c>)
 8008e9e:	a819      	add	r0, sp, #100	@ 0x64
 8008ea0:	f001 fba6 	bl	800a5f0 <__match>
 8008ea4:	2800      	cmp	r0, #0
 8008ea6:	f43f aec7 	beq.w	8008c38 <_strtod_l+0xa8>
 8008eaa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008eac:	781b      	ldrb	r3, [r3, #0]
 8008eae:	2b28      	cmp	r3, #40	@ 0x28
 8008eb0:	d12e      	bne.n	8008f10 <_strtod_l+0x380>
 8008eb2:	4997      	ldr	r1, [pc, #604]	@ (8009110 <_strtod_l+0x580>)
 8008eb4:	aa1c      	add	r2, sp, #112	@ 0x70
 8008eb6:	a819      	add	r0, sp, #100	@ 0x64
 8008eb8:	f001 fbae 	bl	800a618 <__hexnan>
 8008ebc:	2805      	cmp	r0, #5
 8008ebe:	d127      	bne.n	8008f10 <_strtod_l+0x380>
 8008ec0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008ec2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008ec6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008eca:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008ece:	e698      	b.n	8008c02 <_strtod_l+0x72>
 8008ed0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008ed2:	fb08 2101 	mla	r1, r8, r1, r2
 8008ed6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008eda:	920e      	str	r2, [sp, #56]	@ 0x38
 8008edc:	e7b5      	b.n	8008e4a <_strtod_l+0x2ba>
 8008ede:	2a6e      	cmp	r2, #110	@ 0x6e
 8008ee0:	e7da      	b.n	8008e98 <_strtod_l+0x308>
 8008ee2:	498c      	ldr	r1, [pc, #560]	@ (8009114 <_strtod_l+0x584>)
 8008ee4:	a819      	add	r0, sp, #100	@ 0x64
 8008ee6:	f001 fb83 	bl	800a5f0 <__match>
 8008eea:	2800      	cmp	r0, #0
 8008eec:	f43f aea4 	beq.w	8008c38 <_strtod_l+0xa8>
 8008ef0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008ef2:	4989      	ldr	r1, [pc, #548]	@ (8009118 <_strtod_l+0x588>)
 8008ef4:	3b01      	subs	r3, #1
 8008ef6:	a819      	add	r0, sp, #100	@ 0x64
 8008ef8:	9319      	str	r3, [sp, #100]	@ 0x64
 8008efa:	f001 fb79 	bl	800a5f0 <__match>
 8008efe:	b910      	cbnz	r0, 8008f06 <_strtod_l+0x376>
 8008f00:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f02:	3301      	adds	r3, #1
 8008f04:	9319      	str	r3, [sp, #100]	@ 0x64
 8008f06:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009128 <_strtod_l+0x598>
 8008f0a:	f04f 0a00 	mov.w	sl, #0
 8008f0e:	e678      	b.n	8008c02 <_strtod_l+0x72>
 8008f10:	4882      	ldr	r0, [pc, #520]	@ (800911c <_strtod_l+0x58c>)
 8008f12:	f001 f8a9 	bl	800a068 <nan>
 8008f16:	ec5b ab10 	vmov	sl, fp, d0
 8008f1a:	e672      	b.n	8008c02 <_strtod_l+0x72>
 8008f1c:	eba8 0309 	sub.w	r3, r8, r9
 8008f20:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008f22:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f24:	2f00      	cmp	r7, #0
 8008f26:	bf08      	it	eq
 8008f28:	462f      	moveq	r7, r5
 8008f2a:	2d10      	cmp	r5, #16
 8008f2c:	462c      	mov	r4, r5
 8008f2e:	bfa8      	it	ge
 8008f30:	2410      	movge	r4, #16
 8008f32:	f7f7 fae7 	bl	8000504 <__aeabi_ui2d>
 8008f36:	2d09      	cmp	r5, #9
 8008f38:	4682      	mov	sl, r0
 8008f3a:	468b      	mov	fp, r1
 8008f3c:	dc13      	bgt.n	8008f66 <_strtod_l+0x3d6>
 8008f3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	f43f ae5e 	beq.w	8008c02 <_strtod_l+0x72>
 8008f46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f48:	dd78      	ble.n	800903c <_strtod_l+0x4ac>
 8008f4a:	2b16      	cmp	r3, #22
 8008f4c:	dc5f      	bgt.n	800900e <_strtod_l+0x47e>
 8008f4e:	4974      	ldr	r1, [pc, #464]	@ (8009120 <_strtod_l+0x590>)
 8008f50:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008f54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f58:	4652      	mov	r2, sl
 8008f5a:	465b      	mov	r3, fp
 8008f5c:	f7f7 fb4c 	bl	80005f8 <__aeabi_dmul>
 8008f60:	4682      	mov	sl, r0
 8008f62:	468b      	mov	fp, r1
 8008f64:	e64d      	b.n	8008c02 <_strtod_l+0x72>
 8008f66:	4b6e      	ldr	r3, [pc, #440]	@ (8009120 <_strtod_l+0x590>)
 8008f68:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008f6c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008f70:	f7f7 fb42 	bl	80005f8 <__aeabi_dmul>
 8008f74:	4682      	mov	sl, r0
 8008f76:	9808      	ldr	r0, [sp, #32]
 8008f78:	468b      	mov	fp, r1
 8008f7a:	f7f7 fac3 	bl	8000504 <__aeabi_ui2d>
 8008f7e:	4602      	mov	r2, r0
 8008f80:	460b      	mov	r3, r1
 8008f82:	4650      	mov	r0, sl
 8008f84:	4659      	mov	r1, fp
 8008f86:	f7f7 f981 	bl	800028c <__adddf3>
 8008f8a:	2d0f      	cmp	r5, #15
 8008f8c:	4682      	mov	sl, r0
 8008f8e:	468b      	mov	fp, r1
 8008f90:	ddd5      	ble.n	8008f3e <_strtod_l+0x3ae>
 8008f92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f94:	1b2c      	subs	r4, r5, r4
 8008f96:	441c      	add	r4, r3
 8008f98:	2c00      	cmp	r4, #0
 8008f9a:	f340 8096 	ble.w	80090ca <_strtod_l+0x53a>
 8008f9e:	f014 030f 	ands.w	r3, r4, #15
 8008fa2:	d00a      	beq.n	8008fba <_strtod_l+0x42a>
 8008fa4:	495e      	ldr	r1, [pc, #376]	@ (8009120 <_strtod_l+0x590>)
 8008fa6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008faa:	4652      	mov	r2, sl
 8008fac:	465b      	mov	r3, fp
 8008fae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fb2:	f7f7 fb21 	bl	80005f8 <__aeabi_dmul>
 8008fb6:	4682      	mov	sl, r0
 8008fb8:	468b      	mov	fp, r1
 8008fba:	f034 040f 	bics.w	r4, r4, #15
 8008fbe:	d073      	beq.n	80090a8 <_strtod_l+0x518>
 8008fc0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008fc4:	dd48      	ble.n	8009058 <_strtod_l+0x4c8>
 8008fc6:	2400      	movs	r4, #0
 8008fc8:	46a0      	mov	r8, r4
 8008fca:	940a      	str	r4, [sp, #40]	@ 0x28
 8008fcc:	46a1      	mov	r9, r4
 8008fce:	9a05      	ldr	r2, [sp, #20]
 8008fd0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009128 <_strtod_l+0x598>
 8008fd4:	2322      	movs	r3, #34	@ 0x22
 8008fd6:	6013      	str	r3, [r2, #0]
 8008fd8:	f04f 0a00 	mov.w	sl, #0
 8008fdc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	f43f ae0f 	beq.w	8008c02 <_strtod_l+0x72>
 8008fe4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008fe6:	9805      	ldr	r0, [sp, #20]
 8008fe8:	f7ff f942 	bl	8008270 <_Bfree>
 8008fec:	9805      	ldr	r0, [sp, #20]
 8008fee:	4649      	mov	r1, r9
 8008ff0:	f7ff f93e 	bl	8008270 <_Bfree>
 8008ff4:	9805      	ldr	r0, [sp, #20]
 8008ff6:	4641      	mov	r1, r8
 8008ff8:	f7ff f93a 	bl	8008270 <_Bfree>
 8008ffc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008ffe:	9805      	ldr	r0, [sp, #20]
 8009000:	f7ff f936 	bl	8008270 <_Bfree>
 8009004:	9805      	ldr	r0, [sp, #20]
 8009006:	4621      	mov	r1, r4
 8009008:	f7ff f932 	bl	8008270 <_Bfree>
 800900c:	e5f9      	b.n	8008c02 <_strtod_l+0x72>
 800900e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009010:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009014:	4293      	cmp	r3, r2
 8009016:	dbbc      	blt.n	8008f92 <_strtod_l+0x402>
 8009018:	4c41      	ldr	r4, [pc, #260]	@ (8009120 <_strtod_l+0x590>)
 800901a:	f1c5 050f 	rsb	r5, r5, #15
 800901e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009022:	4652      	mov	r2, sl
 8009024:	465b      	mov	r3, fp
 8009026:	e9d1 0100 	ldrd	r0, r1, [r1]
 800902a:	f7f7 fae5 	bl	80005f8 <__aeabi_dmul>
 800902e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009030:	1b5d      	subs	r5, r3, r5
 8009032:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009036:	e9d4 2300 	ldrd	r2, r3, [r4]
 800903a:	e78f      	b.n	8008f5c <_strtod_l+0x3cc>
 800903c:	3316      	adds	r3, #22
 800903e:	dba8      	blt.n	8008f92 <_strtod_l+0x402>
 8009040:	4b37      	ldr	r3, [pc, #220]	@ (8009120 <_strtod_l+0x590>)
 8009042:	eba9 0808 	sub.w	r8, r9, r8
 8009046:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800904a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800904e:	4650      	mov	r0, sl
 8009050:	4659      	mov	r1, fp
 8009052:	f7f7 fbfb 	bl	800084c <__aeabi_ddiv>
 8009056:	e783      	b.n	8008f60 <_strtod_l+0x3d0>
 8009058:	4b32      	ldr	r3, [pc, #200]	@ (8009124 <_strtod_l+0x594>)
 800905a:	9308      	str	r3, [sp, #32]
 800905c:	2300      	movs	r3, #0
 800905e:	1124      	asrs	r4, r4, #4
 8009060:	4650      	mov	r0, sl
 8009062:	4659      	mov	r1, fp
 8009064:	461e      	mov	r6, r3
 8009066:	2c01      	cmp	r4, #1
 8009068:	dc21      	bgt.n	80090ae <_strtod_l+0x51e>
 800906a:	b10b      	cbz	r3, 8009070 <_strtod_l+0x4e0>
 800906c:	4682      	mov	sl, r0
 800906e:	468b      	mov	fp, r1
 8009070:	492c      	ldr	r1, [pc, #176]	@ (8009124 <_strtod_l+0x594>)
 8009072:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009076:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800907a:	4652      	mov	r2, sl
 800907c:	465b      	mov	r3, fp
 800907e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009082:	f7f7 fab9 	bl	80005f8 <__aeabi_dmul>
 8009086:	4b28      	ldr	r3, [pc, #160]	@ (8009128 <_strtod_l+0x598>)
 8009088:	460a      	mov	r2, r1
 800908a:	400b      	ands	r3, r1
 800908c:	4927      	ldr	r1, [pc, #156]	@ (800912c <_strtod_l+0x59c>)
 800908e:	428b      	cmp	r3, r1
 8009090:	4682      	mov	sl, r0
 8009092:	d898      	bhi.n	8008fc6 <_strtod_l+0x436>
 8009094:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009098:	428b      	cmp	r3, r1
 800909a:	bf86      	itte	hi
 800909c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009130 <_strtod_l+0x5a0>
 80090a0:	f04f 3aff 	movhi.w	sl, #4294967295
 80090a4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80090a8:	2300      	movs	r3, #0
 80090aa:	9308      	str	r3, [sp, #32]
 80090ac:	e07a      	b.n	80091a4 <_strtod_l+0x614>
 80090ae:	07e2      	lsls	r2, r4, #31
 80090b0:	d505      	bpl.n	80090be <_strtod_l+0x52e>
 80090b2:	9b08      	ldr	r3, [sp, #32]
 80090b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b8:	f7f7 fa9e 	bl	80005f8 <__aeabi_dmul>
 80090bc:	2301      	movs	r3, #1
 80090be:	9a08      	ldr	r2, [sp, #32]
 80090c0:	3208      	adds	r2, #8
 80090c2:	3601      	adds	r6, #1
 80090c4:	1064      	asrs	r4, r4, #1
 80090c6:	9208      	str	r2, [sp, #32]
 80090c8:	e7cd      	b.n	8009066 <_strtod_l+0x4d6>
 80090ca:	d0ed      	beq.n	80090a8 <_strtod_l+0x518>
 80090cc:	4264      	negs	r4, r4
 80090ce:	f014 020f 	ands.w	r2, r4, #15
 80090d2:	d00a      	beq.n	80090ea <_strtod_l+0x55a>
 80090d4:	4b12      	ldr	r3, [pc, #72]	@ (8009120 <_strtod_l+0x590>)
 80090d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80090da:	4650      	mov	r0, sl
 80090dc:	4659      	mov	r1, fp
 80090de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e2:	f7f7 fbb3 	bl	800084c <__aeabi_ddiv>
 80090e6:	4682      	mov	sl, r0
 80090e8:	468b      	mov	fp, r1
 80090ea:	1124      	asrs	r4, r4, #4
 80090ec:	d0dc      	beq.n	80090a8 <_strtod_l+0x518>
 80090ee:	2c1f      	cmp	r4, #31
 80090f0:	dd20      	ble.n	8009134 <_strtod_l+0x5a4>
 80090f2:	2400      	movs	r4, #0
 80090f4:	46a0      	mov	r8, r4
 80090f6:	940a      	str	r4, [sp, #40]	@ 0x28
 80090f8:	46a1      	mov	r9, r4
 80090fa:	9a05      	ldr	r2, [sp, #20]
 80090fc:	2322      	movs	r3, #34	@ 0x22
 80090fe:	f04f 0a00 	mov.w	sl, #0
 8009102:	f04f 0b00 	mov.w	fp, #0
 8009106:	6013      	str	r3, [r2, #0]
 8009108:	e768      	b.n	8008fdc <_strtod_l+0x44c>
 800910a:	bf00      	nop
 800910c:	0800aa29 	.word	0x0800aa29
 8009110:	0800ac3c 	.word	0x0800ac3c
 8009114:	0800aa21 	.word	0x0800aa21
 8009118:	0800aa58 	.word	0x0800aa58
 800911c:	0800ade5 	.word	0x0800ade5
 8009120:	0800ab70 	.word	0x0800ab70
 8009124:	0800ab48 	.word	0x0800ab48
 8009128:	7ff00000 	.word	0x7ff00000
 800912c:	7ca00000 	.word	0x7ca00000
 8009130:	7fefffff 	.word	0x7fefffff
 8009134:	f014 0310 	ands.w	r3, r4, #16
 8009138:	bf18      	it	ne
 800913a:	236a      	movne	r3, #106	@ 0x6a
 800913c:	4ea9      	ldr	r6, [pc, #676]	@ (80093e4 <_strtod_l+0x854>)
 800913e:	9308      	str	r3, [sp, #32]
 8009140:	4650      	mov	r0, sl
 8009142:	4659      	mov	r1, fp
 8009144:	2300      	movs	r3, #0
 8009146:	07e2      	lsls	r2, r4, #31
 8009148:	d504      	bpl.n	8009154 <_strtod_l+0x5c4>
 800914a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800914e:	f7f7 fa53 	bl	80005f8 <__aeabi_dmul>
 8009152:	2301      	movs	r3, #1
 8009154:	1064      	asrs	r4, r4, #1
 8009156:	f106 0608 	add.w	r6, r6, #8
 800915a:	d1f4      	bne.n	8009146 <_strtod_l+0x5b6>
 800915c:	b10b      	cbz	r3, 8009162 <_strtod_l+0x5d2>
 800915e:	4682      	mov	sl, r0
 8009160:	468b      	mov	fp, r1
 8009162:	9b08      	ldr	r3, [sp, #32]
 8009164:	b1b3      	cbz	r3, 8009194 <_strtod_l+0x604>
 8009166:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800916a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800916e:	2b00      	cmp	r3, #0
 8009170:	4659      	mov	r1, fp
 8009172:	dd0f      	ble.n	8009194 <_strtod_l+0x604>
 8009174:	2b1f      	cmp	r3, #31
 8009176:	dd55      	ble.n	8009224 <_strtod_l+0x694>
 8009178:	2b34      	cmp	r3, #52	@ 0x34
 800917a:	bfde      	ittt	le
 800917c:	f04f 33ff 	movle.w	r3, #4294967295
 8009180:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009184:	4093      	lslle	r3, r2
 8009186:	f04f 0a00 	mov.w	sl, #0
 800918a:	bfcc      	ite	gt
 800918c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009190:	ea03 0b01 	andle.w	fp, r3, r1
 8009194:	2200      	movs	r2, #0
 8009196:	2300      	movs	r3, #0
 8009198:	4650      	mov	r0, sl
 800919a:	4659      	mov	r1, fp
 800919c:	f7f7 fc94 	bl	8000ac8 <__aeabi_dcmpeq>
 80091a0:	2800      	cmp	r0, #0
 80091a2:	d1a6      	bne.n	80090f2 <_strtod_l+0x562>
 80091a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80091a6:	9300      	str	r3, [sp, #0]
 80091a8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80091aa:	9805      	ldr	r0, [sp, #20]
 80091ac:	462b      	mov	r3, r5
 80091ae:	463a      	mov	r2, r7
 80091b0:	f7ff f8c6 	bl	8008340 <__s2b>
 80091b4:	900a      	str	r0, [sp, #40]	@ 0x28
 80091b6:	2800      	cmp	r0, #0
 80091b8:	f43f af05 	beq.w	8008fc6 <_strtod_l+0x436>
 80091bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80091be:	2a00      	cmp	r2, #0
 80091c0:	eba9 0308 	sub.w	r3, r9, r8
 80091c4:	bfa8      	it	ge
 80091c6:	2300      	movge	r3, #0
 80091c8:	9312      	str	r3, [sp, #72]	@ 0x48
 80091ca:	2400      	movs	r4, #0
 80091cc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80091d0:	9316      	str	r3, [sp, #88]	@ 0x58
 80091d2:	46a0      	mov	r8, r4
 80091d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80091d6:	9805      	ldr	r0, [sp, #20]
 80091d8:	6859      	ldr	r1, [r3, #4]
 80091da:	f7ff f809 	bl	80081f0 <_Balloc>
 80091de:	4681      	mov	r9, r0
 80091e0:	2800      	cmp	r0, #0
 80091e2:	f43f aef4 	beq.w	8008fce <_strtod_l+0x43e>
 80091e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80091e8:	691a      	ldr	r2, [r3, #16]
 80091ea:	3202      	adds	r2, #2
 80091ec:	f103 010c 	add.w	r1, r3, #12
 80091f0:	0092      	lsls	r2, r2, #2
 80091f2:	300c      	adds	r0, #12
 80091f4:	f7fe f899 	bl	800732a <memcpy>
 80091f8:	ec4b ab10 	vmov	d0, sl, fp
 80091fc:	9805      	ldr	r0, [sp, #20]
 80091fe:	aa1c      	add	r2, sp, #112	@ 0x70
 8009200:	a91b      	add	r1, sp, #108	@ 0x6c
 8009202:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009206:	f7ff fbd7 	bl	80089b8 <__d2b>
 800920a:	901a      	str	r0, [sp, #104]	@ 0x68
 800920c:	2800      	cmp	r0, #0
 800920e:	f43f aede 	beq.w	8008fce <_strtod_l+0x43e>
 8009212:	9805      	ldr	r0, [sp, #20]
 8009214:	2101      	movs	r1, #1
 8009216:	f7ff f929 	bl	800846c <__i2b>
 800921a:	4680      	mov	r8, r0
 800921c:	b948      	cbnz	r0, 8009232 <_strtod_l+0x6a2>
 800921e:	f04f 0800 	mov.w	r8, #0
 8009222:	e6d4      	b.n	8008fce <_strtod_l+0x43e>
 8009224:	f04f 32ff 	mov.w	r2, #4294967295
 8009228:	fa02 f303 	lsl.w	r3, r2, r3
 800922c:	ea03 0a0a 	and.w	sl, r3, sl
 8009230:	e7b0      	b.n	8009194 <_strtod_l+0x604>
 8009232:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009234:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009236:	2d00      	cmp	r5, #0
 8009238:	bfab      	itete	ge
 800923a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800923c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800923e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009240:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009242:	bfac      	ite	ge
 8009244:	18ef      	addge	r7, r5, r3
 8009246:	1b5e      	sublt	r6, r3, r5
 8009248:	9b08      	ldr	r3, [sp, #32]
 800924a:	1aed      	subs	r5, r5, r3
 800924c:	4415      	add	r5, r2
 800924e:	4b66      	ldr	r3, [pc, #408]	@ (80093e8 <_strtod_l+0x858>)
 8009250:	3d01      	subs	r5, #1
 8009252:	429d      	cmp	r5, r3
 8009254:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009258:	da50      	bge.n	80092fc <_strtod_l+0x76c>
 800925a:	1b5b      	subs	r3, r3, r5
 800925c:	2b1f      	cmp	r3, #31
 800925e:	eba2 0203 	sub.w	r2, r2, r3
 8009262:	f04f 0101 	mov.w	r1, #1
 8009266:	dc3d      	bgt.n	80092e4 <_strtod_l+0x754>
 8009268:	fa01 f303 	lsl.w	r3, r1, r3
 800926c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800926e:	2300      	movs	r3, #0
 8009270:	9310      	str	r3, [sp, #64]	@ 0x40
 8009272:	18bd      	adds	r5, r7, r2
 8009274:	9b08      	ldr	r3, [sp, #32]
 8009276:	42af      	cmp	r7, r5
 8009278:	4416      	add	r6, r2
 800927a:	441e      	add	r6, r3
 800927c:	463b      	mov	r3, r7
 800927e:	bfa8      	it	ge
 8009280:	462b      	movge	r3, r5
 8009282:	42b3      	cmp	r3, r6
 8009284:	bfa8      	it	ge
 8009286:	4633      	movge	r3, r6
 8009288:	2b00      	cmp	r3, #0
 800928a:	bfc2      	ittt	gt
 800928c:	1aed      	subgt	r5, r5, r3
 800928e:	1af6      	subgt	r6, r6, r3
 8009290:	1aff      	subgt	r7, r7, r3
 8009292:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009294:	2b00      	cmp	r3, #0
 8009296:	dd16      	ble.n	80092c6 <_strtod_l+0x736>
 8009298:	4641      	mov	r1, r8
 800929a:	9805      	ldr	r0, [sp, #20]
 800929c:	461a      	mov	r2, r3
 800929e:	f7ff f9a5 	bl	80085ec <__pow5mult>
 80092a2:	4680      	mov	r8, r0
 80092a4:	2800      	cmp	r0, #0
 80092a6:	d0ba      	beq.n	800921e <_strtod_l+0x68e>
 80092a8:	4601      	mov	r1, r0
 80092aa:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80092ac:	9805      	ldr	r0, [sp, #20]
 80092ae:	f7ff f8f3 	bl	8008498 <__multiply>
 80092b2:	900e      	str	r0, [sp, #56]	@ 0x38
 80092b4:	2800      	cmp	r0, #0
 80092b6:	f43f ae8a 	beq.w	8008fce <_strtod_l+0x43e>
 80092ba:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80092bc:	9805      	ldr	r0, [sp, #20]
 80092be:	f7fe ffd7 	bl	8008270 <_Bfree>
 80092c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80092c4:	931a      	str	r3, [sp, #104]	@ 0x68
 80092c6:	2d00      	cmp	r5, #0
 80092c8:	dc1d      	bgt.n	8009306 <_strtod_l+0x776>
 80092ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	dd23      	ble.n	8009318 <_strtod_l+0x788>
 80092d0:	4649      	mov	r1, r9
 80092d2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80092d4:	9805      	ldr	r0, [sp, #20]
 80092d6:	f7ff f989 	bl	80085ec <__pow5mult>
 80092da:	4681      	mov	r9, r0
 80092dc:	b9e0      	cbnz	r0, 8009318 <_strtod_l+0x788>
 80092de:	f04f 0900 	mov.w	r9, #0
 80092e2:	e674      	b.n	8008fce <_strtod_l+0x43e>
 80092e4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80092e8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80092ec:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80092f0:	35e2      	adds	r5, #226	@ 0xe2
 80092f2:	fa01 f305 	lsl.w	r3, r1, r5
 80092f6:	9310      	str	r3, [sp, #64]	@ 0x40
 80092f8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80092fa:	e7ba      	b.n	8009272 <_strtod_l+0x6e2>
 80092fc:	2300      	movs	r3, #0
 80092fe:	9310      	str	r3, [sp, #64]	@ 0x40
 8009300:	2301      	movs	r3, #1
 8009302:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009304:	e7b5      	b.n	8009272 <_strtod_l+0x6e2>
 8009306:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009308:	9805      	ldr	r0, [sp, #20]
 800930a:	462a      	mov	r2, r5
 800930c:	f7ff f9c8 	bl	80086a0 <__lshift>
 8009310:	901a      	str	r0, [sp, #104]	@ 0x68
 8009312:	2800      	cmp	r0, #0
 8009314:	d1d9      	bne.n	80092ca <_strtod_l+0x73a>
 8009316:	e65a      	b.n	8008fce <_strtod_l+0x43e>
 8009318:	2e00      	cmp	r6, #0
 800931a:	dd07      	ble.n	800932c <_strtod_l+0x79c>
 800931c:	4649      	mov	r1, r9
 800931e:	9805      	ldr	r0, [sp, #20]
 8009320:	4632      	mov	r2, r6
 8009322:	f7ff f9bd 	bl	80086a0 <__lshift>
 8009326:	4681      	mov	r9, r0
 8009328:	2800      	cmp	r0, #0
 800932a:	d0d8      	beq.n	80092de <_strtod_l+0x74e>
 800932c:	2f00      	cmp	r7, #0
 800932e:	dd08      	ble.n	8009342 <_strtod_l+0x7b2>
 8009330:	4641      	mov	r1, r8
 8009332:	9805      	ldr	r0, [sp, #20]
 8009334:	463a      	mov	r2, r7
 8009336:	f7ff f9b3 	bl	80086a0 <__lshift>
 800933a:	4680      	mov	r8, r0
 800933c:	2800      	cmp	r0, #0
 800933e:	f43f ae46 	beq.w	8008fce <_strtod_l+0x43e>
 8009342:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009344:	9805      	ldr	r0, [sp, #20]
 8009346:	464a      	mov	r2, r9
 8009348:	f7ff fa32 	bl	80087b0 <__mdiff>
 800934c:	4604      	mov	r4, r0
 800934e:	2800      	cmp	r0, #0
 8009350:	f43f ae3d 	beq.w	8008fce <_strtod_l+0x43e>
 8009354:	68c3      	ldr	r3, [r0, #12]
 8009356:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009358:	2300      	movs	r3, #0
 800935a:	60c3      	str	r3, [r0, #12]
 800935c:	4641      	mov	r1, r8
 800935e:	f7ff fa0b 	bl	8008778 <__mcmp>
 8009362:	2800      	cmp	r0, #0
 8009364:	da46      	bge.n	80093f4 <_strtod_l+0x864>
 8009366:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009368:	ea53 030a 	orrs.w	r3, r3, sl
 800936c:	d16c      	bne.n	8009448 <_strtod_l+0x8b8>
 800936e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009372:	2b00      	cmp	r3, #0
 8009374:	d168      	bne.n	8009448 <_strtod_l+0x8b8>
 8009376:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800937a:	0d1b      	lsrs	r3, r3, #20
 800937c:	051b      	lsls	r3, r3, #20
 800937e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009382:	d961      	bls.n	8009448 <_strtod_l+0x8b8>
 8009384:	6963      	ldr	r3, [r4, #20]
 8009386:	b913      	cbnz	r3, 800938e <_strtod_l+0x7fe>
 8009388:	6923      	ldr	r3, [r4, #16]
 800938a:	2b01      	cmp	r3, #1
 800938c:	dd5c      	ble.n	8009448 <_strtod_l+0x8b8>
 800938e:	4621      	mov	r1, r4
 8009390:	2201      	movs	r2, #1
 8009392:	9805      	ldr	r0, [sp, #20]
 8009394:	f7ff f984 	bl	80086a0 <__lshift>
 8009398:	4641      	mov	r1, r8
 800939a:	4604      	mov	r4, r0
 800939c:	f7ff f9ec 	bl	8008778 <__mcmp>
 80093a0:	2800      	cmp	r0, #0
 80093a2:	dd51      	ble.n	8009448 <_strtod_l+0x8b8>
 80093a4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80093a8:	9a08      	ldr	r2, [sp, #32]
 80093aa:	0d1b      	lsrs	r3, r3, #20
 80093ac:	051b      	lsls	r3, r3, #20
 80093ae:	2a00      	cmp	r2, #0
 80093b0:	d06b      	beq.n	800948a <_strtod_l+0x8fa>
 80093b2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80093b6:	d868      	bhi.n	800948a <_strtod_l+0x8fa>
 80093b8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80093bc:	f67f ae9d 	bls.w	80090fa <_strtod_l+0x56a>
 80093c0:	4b0a      	ldr	r3, [pc, #40]	@ (80093ec <_strtod_l+0x85c>)
 80093c2:	4650      	mov	r0, sl
 80093c4:	4659      	mov	r1, fp
 80093c6:	2200      	movs	r2, #0
 80093c8:	f7f7 f916 	bl	80005f8 <__aeabi_dmul>
 80093cc:	4b08      	ldr	r3, [pc, #32]	@ (80093f0 <_strtod_l+0x860>)
 80093ce:	400b      	ands	r3, r1
 80093d0:	4682      	mov	sl, r0
 80093d2:	468b      	mov	fp, r1
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	f47f ae05 	bne.w	8008fe4 <_strtod_l+0x454>
 80093da:	9a05      	ldr	r2, [sp, #20]
 80093dc:	2322      	movs	r3, #34	@ 0x22
 80093de:	6013      	str	r3, [r2, #0]
 80093e0:	e600      	b.n	8008fe4 <_strtod_l+0x454>
 80093e2:	bf00      	nop
 80093e4:	0800ac68 	.word	0x0800ac68
 80093e8:	fffffc02 	.word	0xfffffc02
 80093ec:	39500000 	.word	0x39500000
 80093f0:	7ff00000 	.word	0x7ff00000
 80093f4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80093f8:	d165      	bne.n	80094c6 <_strtod_l+0x936>
 80093fa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80093fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009400:	b35a      	cbz	r2, 800945a <_strtod_l+0x8ca>
 8009402:	4a9f      	ldr	r2, [pc, #636]	@ (8009680 <_strtod_l+0xaf0>)
 8009404:	4293      	cmp	r3, r2
 8009406:	d12b      	bne.n	8009460 <_strtod_l+0x8d0>
 8009408:	9b08      	ldr	r3, [sp, #32]
 800940a:	4651      	mov	r1, sl
 800940c:	b303      	cbz	r3, 8009450 <_strtod_l+0x8c0>
 800940e:	4b9d      	ldr	r3, [pc, #628]	@ (8009684 <_strtod_l+0xaf4>)
 8009410:	465a      	mov	r2, fp
 8009412:	4013      	ands	r3, r2
 8009414:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009418:	f04f 32ff 	mov.w	r2, #4294967295
 800941c:	d81b      	bhi.n	8009456 <_strtod_l+0x8c6>
 800941e:	0d1b      	lsrs	r3, r3, #20
 8009420:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009424:	fa02 f303 	lsl.w	r3, r2, r3
 8009428:	4299      	cmp	r1, r3
 800942a:	d119      	bne.n	8009460 <_strtod_l+0x8d0>
 800942c:	4b96      	ldr	r3, [pc, #600]	@ (8009688 <_strtod_l+0xaf8>)
 800942e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009430:	429a      	cmp	r2, r3
 8009432:	d102      	bne.n	800943a <_strtod_l+0x8aa>
 8009434:	3101      	adds	r1, #1
 8009436:	f43f adca 	beq.w	8008fce <_strtod_l+0x43e>
 800943a:	4b92      	ldr	r3, [pc, #584]	@ (8009684 <_strtod_l+0xaf4>)
 800943c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800943e:	401a      	ands	r2, r3
 8009440:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009444:	f04f 0a00 	mov.w	sl, #0
 8009448:	9b08      	ldr	r3, [sp, #32]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d1b8      	bne.n	80093c0 <_strtod_l+0x830>
 800944e:	e5c9      	b.n	8008fe4 <_strtod_l+0x454>
 8009450:	f04f 33ff 	mov.w	r3, #4294967295
 8009454:	e7e8      	b.n	8009428 <_strtod_l+0x898>
 8009456:	4613      	mov	r3, r2
 8009458:	e7e6      	b.n	8009428 <_strtod_l+0x898>
 800945a:	ea53 030a 	orrs.w	r3, r3, sl
 800945e:	d0a1      	beq.n	80093a4 <_strtod_l+0x814>
 8009460:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009462:	b1db      	cbz	r3, 800949c <_strtod_l+0x90c>
 8009464:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009466:	4213      	tst	r3, r2
 8009468:	d0ee      	beq.n	8009448 <_strtod_l+0x8b8>
 800946a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800946c:	9a08      	ldr	r2, [sp, #32]
 800946e:	4650      	mov	r0, sl
 8009470:	4659      	mov	r1, fp
 8009472:	b1bb      	cbz	r3, 80094a4 <_strtod_l+0x914>
 8009474:	f7ff fb6e 	bl	8008b54 <sulp>
 8009478:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800947c:	ec53 2b10 	vmov	r2, r3, d0
 8009480:	f7f6 ff04 	bl	800028c <__adddf3>
 8009484:	4682      	mov	sl, r0
 8009486:	468b      	mov	fp, r1
 8009488:	e7de      	b.n	8009448 <_strtod_l+0x8b8>
 800948a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800948e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009492:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009496:	f04f 3aff 	mov.w	sl, #4294967295
 800949a:	e7d5      	b.n	8009448 <_strtod_l+0x8b8>
 800949c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800949e:	ea13 0f0a 	tst.w	r3, sl
 80094a2:	e7e1      	b.n	8009468 <_strtod_l+0x8d8>
 80094a4:	f7ff fb56 	bl	8008b54 <sulp>
 80094a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80094ac:	ec53 2b10 	vmov	r2, r3, d0
 80094b0:	f7f6 feea 	bl	8000288 <__aeabi_dsub>
 80094b4:	2200      	movs	r2, #0
 80094b6:	2300      	movs	r3, #0
 80094b8:	4682      	mov	sl, r0
 80094ba:	468b      	mov	fp, r1
 80094bc:	f7f7 fb04 	bl	8000ac8 <__aeabi_dcmpeq>
 80094c0:	2800      	cmp	r0, #0
 80094c2:	d0c1      	beq.n	8009448 <_strtod_l+0x8b8>
 80094c4:	e619      	b.n	80090fa <_strtod_l+0x56a>
 80094c6:	4641      	mov	r1, r8
 80094c8:	4620      	mov	r0, r4
 80094ca:	f7ff facd 	bl	8008a68 <__ratio>
 80094ce:	ec57 6b10 	vmov	r6, r7, d0
 80094d2:	2200      	movs	r2, #0
 80094d4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80094d8:	4630      	mov	r0, r6
 80094da:	4639      	mov	r1, r7
 80094dc:	f7f7 fb08 	bl	8000af0 <__aeabi_dcmple>
 80094e0:	2800      	cmp	r0, #0
 80094e2:	d06f      	beq.n	80095c4 <_strtod_l+0xa34>
 80094e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d17a      	bne.n	80095e0 <_strtod_l+0xa50>
 80094ea:	f1ba 0f00 	cmp.w	sl, #0
 80094ee:	d158      	bne.n	80095a2 <_strtod_l+0xa12>
 80094f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80094f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d15a      	bne.n	80095b0 <_strtod_l+0xa20>
 80094fa:	4b64      	ldr	r3, [pc, #400]	@ (800968c <_strtod_l+0xafc>)
 80094fc:	2200      	movs	r2, #0
 80094fe:	4630      	mov	r0, r6
 8009500:	4639      	mov	r1, r7
 8009502:	f7f7 faeb 	bl	8000adc <__aeabi_dcmplt>
 8009506:	2800      	cmp	r0, #0
 8009508:	d159      	bne.n	80095be <_strtod_l+0xa2e>
 800950a:	4630      	mov	r0, r6
 800950c:	4639      	mov	r1, r7
 800950e:	4b60      	ldr	r3, [pc, #384]	@ (8009690 <_strtod_l+0xb00>)
 8009510:	2200      	movs	r2, #0
 8009512:	f7f7 f871 	bl	80005f8 <__aeabi_dmul>
 8009516:	4606      	mov	r6, r0
 8009518:	460f      	mov	r7, r1
 800951a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800951e:	9606      	str	r6, [sp, #24]
 8009520:	9307      	str	r3, [sp, #28]
 8009522:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009526:	4d57      	ldr	r5, [pc, #348]	@ (8009684 <_strtod_l+0xaf4>)
 8009528:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800952c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800952e:	401d      	ands	r5, r3
 8009530:	4b58      	ldr	r3, [pc, #352]	@ (8009694 <_strtod_l+0xb04>)
 8009532:	429d      	cmp	r5, r3
 8009534:	f040 80b2 	bne.w	800969c <_strtod_l+0xb0c>
 8009538:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800953a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800953e:	ec4b ab10 	vmov	d0, sl, fp
 8009542:	f7ff f9c9 	bl	80088d8 <__ulp>
 8009546:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800954a:	ec51 0b10 	vmov	r0, r1, d0
 800954e:	f7f7 f853 	bl	80005f8 <__aeabi_dmul>
 8009552:	4652      	mov	r2, sl
 8009554:	465b      	mov	r3, fp
 8009556:	f7f6 fe99 	bl	800028c <__adddf3>
 800955a:	460b      	mov	r3, r1
 800955c:	4949      	ldr	r1, [pc, #292]	@ (8009684 <_strtod_l+0xaf4>)
 800955e:	4a4e      	ldr	r2, [pc, #312]	@ (8009698 <_strtod_l+0xb08>)
 8009560:	4019      	ands	r1, r3
 8009562:	4291      	cmp	r1, r2
 8009564:	4682      	mov	sl, r0
 8009566:	d942      	bls.n	80095ee <_strtod_l+0xa5e>
 8009568:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800956a:	4b47      	ldr	r3, [pc, #284]	@ (8009688 <_strtod_l+0xaf8>)
 800956c:	429a      	cmp	r2, r3
 800956e:	d103      	bne.n	8009578 <_strtod_l+0x9e8>
 8009570:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009572:	3301      	adds	r3, #1
 8009574:	f43f ad2b 	beq.w	8008fce <_strtod_l+0x43e>
 8009578:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009688 <_strtod_l+0xaf8>
 800957c:	f04f 3aff 	mov.w	sl, #4294967295
 8009580:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009582:	9805      	ldr	r0, [sp, #20]
 8009584:	f7fe fe74 	bl	8008270 <_Bfree>
 8009588:	9805      	ldr	r0, [sp, #20]
 800958a:	4649      	mov	r1, r9
 800958c:	f7fe fe70 	bl	8008270 <_Bfree>
 8009590:	9805      	ldr	r0, [sp, #20]
 8009592:	4641      	mov	r1, r8
 8009594:	f7fe fe6c 	bl	8008270 <_Bfree>
 8009598:	9805      	ldr	r0, [sp, #20]
 800959a:	4621      	mov	r1, r4
 800959c:	f7fe fe68 	bl	8008270 <_Bfree>
 80095a0:	e618      	b.n	80091d4 <_strtod_l+0x644>
 80095a2:	f1ba 0f01 	cmp.w	sl, #1
 80095a6:	d103      	bne.n	80095b0 <_strtod_l+0xa20>
 80095a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	f43f ada5 	beq.w	80090fa <_strtod_l+0x56a>
 80095b0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009660 <_strtod_l+0xad0>
 80095b4:	4f35      	ldr	r7, [pc, #212]	@ (800968c <_strtod_l+0xafc>)
 80095b6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80095ba:	2600      	movs	r6, #0
 80095bc:	e7b1      	b.n	8009522 <_strtod_l+0x992>
 80095be:	4f34      	ldr	r7, [pc, #208]	@ (8009690 <_strtod_l+0xb00>)
 80095c0:	2600      	movs	r6, #0
 80095c2:	e7aa      	b.n	800951a <_strtod_l+0x98a>
 80095c4:	4b32      	ldr	r3, [pc, #200]	@ (8009690 <_strtod_l+0xb00>)
 80095c6:	4630      	mov	r0, r6
 80095c8:	4639      	mov	r1, r7
 80095ca:	2200      	movs	r2, #0
 80095cc:	f7f7 f814 	bl	80005f8 <__aeabi_dmul>
 80095d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80095d2:	4606      	mov	r6, r0
 80095d4:	460f      	mov	r7, r1
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d09f      	beq.n	800951a <_strtod_l+0x98a>
 80095da:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80095de:	e7a0      	b.n	8009522 <_strtod_l+0x992>
 80095e0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009668 <_strtod_l+0xad8>
 80095e4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80095e8:	ec57 6b17 	vmov	r6, r7, d7
 80095ec:	e799      	b.n	8009522 <_strtod_l+0x992>
 80095ee:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80095f2:	9b08      	ldr	r3, [sp, #32]
 80095f4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d1c1      	bne.n	8009580 <_strtod_l+0x9f0>
 80095fc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009600:	0d1b      	lsrs	r3, r3, #20
 8009602:	051b      	lsls	r3, r3, #20
 8009604:	429d      	cmp	r5, r3
 8009606:	d1bb      	bne.n	8009580 <_strtod_l+0x9f0>
 8009608:	4630      	mov	r0, r6
 800960a:	4639      	mov	r1, r7
 800960c:	f7f7 fb54 	bl	8000cb8 <__aeabi_d2lz>
 8009610:	f7f6 ffc4 	bl	800059c <__aeabi_l2d>
 8009614:	4602      	mov	r2, r0
 8009616:	460b      	mov	r3, r1
 8009618:	4630      	mov	r0, r6
 800961a:	4639      	mov	r1, r7
 800961c:	f7f6 fe34 	bl	8000288 <__aeabi_dsub>
 8009620:	460b      	mov	r3, r1
 8009622:	4602      	mov	r2, r0
 8009624:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009628:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800962c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800962e:	ea46 060a 	orr.w	r6, r6, sl
 8009632:	431e      	orrs	r6, r3
 8009634:	d06f      	beq.n	8009716 <_strtod_l+0xb86>
 8009636:	a30e      	add	r3, pc, #56	@ (adr r3, 8009670 <_strtod_l+0xae0>)
 8009638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800963c:	f7f7 fa4e 	bl	8000adc <__aeabi_dcmplt>
 8009640:	2800      	cmp	r0, #0
 8009642:	f47f accf 	bne.w	8008fe4 <_strtod_l+0x454>
 8009646:	a30c      	add	r3, pc, #48	@ (adr r3, 8009678 <_strtod_l+0xae8>)
 8009648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800964c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009650:	f7f7 fa62 	bl	8000b18 <__aeabi_dcmpgt>
 8009654:	2800      	cmp	r0, #0
 8009656:	d093      	beq.n	8009580 <_strtod_l+0x9f0>
 8009658:	e4c4      	b.n	8008fe4 <_strtod_l+0x454>
 800965a:	bf00      	nop
 800965c:	f3af 8000 	nop.w
 8009660:	00000000 	.word	0x00000000
 8009664:	bff00000 	.word	0xbff00000
 8009668:	00000000 	.word	0x00000000
 800966c:	3ff00000 	.word	0x3ff00000
 8009670:	94a03595 	.word	0x94a03595
 8009674:	3fdfffff 	.word	0x3fdfffff
 8009678:	35afe535 	.word	0x35afe535
 800967c:	3fe00000 	.word	0x3fe00000
 8009680:	000fffff 	.word	0x000fffff
 8009684:	7ff00000 	.word	0x7ff00000
 8009688:	7fefffff 	.word	0x7fefffff
 800968c:	3ff00000 	.word	0x3ff00000
 8009690:	3fe00000 	.word	0x3fe00000
 8009694:	7fe00000 	.word	0x7fe00000
 8009698:	7c9fffff 	.word	0x7c9fffff
 800969c:	9b08      	ldr	r3, [sp, #32]
 800969e:	b323      	cbz	r3, 80096ea <_strtod_l+0xb5a>
 80096a0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80096a4:	d821      	bhi.n	80096ea <_strtod_l+0xb5a>
 80096a6:	a328      	add	r3, pc, #160	@ (adr r3, 8009748 <_strtod_l+0xbb8>)
 80096a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ac:	4630      	mov	r0, r6
 80096ae:	4639      	mov	r1, r7
 80096b0:	f7f7 fa1e 	bl	8000af0 <__aeabi_dcmple>
 80096b4:	b1a0      	cbz	r0, 80096e0 <_strtod_l+0xb50>
 80096b6:	4639      	mov	r1, r7
 80096b8:	4630      	mov	r0, r6
 80096ba:	f7f7 fa75 	bl	8000ba8 <__aeabi_d2uiz>
 80096be:	2801      	cmp	r0, #1
 80096c0:	bf38      	it	cc
 80096c2:	2001      	movcc	r0, #1
 80096c4:	f7f6 ff1e 	bl	8000504 <__aeabi_ui2d>
 80096c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80096ca:	4606      	mov	r6, r0
 80096cc:	460f      	mov	r7, r1
 80096ce:	b9fb      	cbnz	r3, 8009710 <_strtod_l+0xb80>
 80096d0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80096d4:	9014      	str	r0, [sp, #80]	@ 0x50
 80096d6:	9315      	str	r3, [sp, #84]	@ 0x54
 80096d8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80096dc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80096e0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80096e2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80096e6:	1b5b      	subs	r3, r3, r5
 80096e8:	9311      	str	r3, [sp, #68]	@ 0x44
 80096ea:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80096ee:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80096f2:	f7ff f8f1 	bl	80088d8 <__ulp>
 80096f6:	4650      	mov	r0, sl
 80096f8:	ec53 2b10 	vmov	r2, r3, d0
 80096fc:	4659      	mov	r1, fp
 80096fe:	f7f6 ff7b 	bl	80005f8 <__aeabi_dmul>
 8009702:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009706:	f7f6 fdc1 	bl	800028c <__adddf3>
 800970a:	4682      	mov	sl, r0
 800970c:	468b      	mov	fp, r1
 800970e:	e770      	b.n	80095f2 <_strtod_l+0xa62>
 8009710:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009714:	e7e0      	b.n	80096d8 <_strtod_l+0xb48>
 8009716:	a30e      	add	r3, pc, #56	@ (adr r3, 8009750 <_strtod_l+0xbc0>)
 8009718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800971c:	f7f7 f9de 	bl	8000adc <__aeabi_dcmplt>
 8009720:	e798      	b.n	8009654 <_strtod_l+0xac4>
 8009722:	2300      	movs	r3, #0
 8009724:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009726:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009728:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800972a:	6013      	str	r3, [r2, #0]
 800972c:	f7ff ba6d 	b.w	8008c0a <_strtod_l+0x7a>
 8009730:	2a65      	cmp	r2, #101	@ 0x65
 8009732:	f43f ab66 	beq.w	8008e02 <_strtod_l+0x272>
 8009736:	2a45      	cmp	r2, #69	@ 0x45
 8009738:	f43f ab63 	beq.w	8008e02 <_strtod_l+0x272>
 800973c:	2301      	movs	r3, #1
 800973e:	f7ff bb9e 	b.w	8008e7e <_strtod_l+0x2ee>
 8009742:	bf00      	nop
 8009744:	f3af 8000 	nop.w
 8009748:	ffc00000 	.word	0xffc00000
 800974c:	41dfffff 	.word	0x41dfffff
 8009750:	94a03595 	.word	0x94a03595
 8009754:	3fcfffff 	.word	0x3fcfffff

08009758 <_strtod_r>:
 8009758:	4b01      	ldr	r3, [pc, #4]	@ (8009760 <_strtod_r+0x8>)
 800975a:	f7ff ba19 	b.w	8008b90 <_strtod_l>
 800975e:	bf00      	nop
 8009760:	20000068 	.word	0x20000068

08009764 <_strtol_l.constprop.0>:
 8009764:	2b24      	cmp	r3, #36	@ 0x24
 8009766:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800976a:	4686      	mov	lr, r0
 800976c:	4690      	mov	r8, r2
 800976e:	d801      	bhi.n	8009774 <_strtol_l.constprop.0+0x10>
 8009770:	2b01      	cmp	r3, #1
 8009772:	d106      	bne.n	8009782 <_strtol_l.constprop.0+0x1e>
 8009774:	f7fd fdac 	bl	80072d0 <__errno>
 8009778:	2316      	movs	r3, #22
 800977a:	6003      	str	r3, [r0, #0]
 800977c:	2000      	movs	r0, #0
 800977e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009782:	4834      	ldr	r0, [pc, #208]	@ (8009854 <_strtol_l.constprop.0+0xf0>)
 8009784:	460d      	mov	r5, r1
 8009786:	462a      	mov	r2, r5
 8009788:	f815 4b01 	ldrb.w	r4, [r5], #1
 800978c:	5d06      	ldrb	r6, [r0, r4]
 800978e:	f016 0608 	ands.w	r6, r6, #8
 8009792:	d1f8      	bne.n	8009786 <_strtol_l.constprop.0+0x22>
 8009794:	2c2d      	cmp	r4, #45	@ 0x2d
 8009796:	d12d      	bne.n	80097f4 <_strtol_l.constprop.0+0x90>
 8009798:	782c      	ldrb	r4, [r5, #0]
 800979a:	2601      	movs	r6, #1
 800979c:	1c95      	adds	r5, r2, #2
 800979e:	f033 0210 	bics.w	r2, r3, #16
 80097a2:	d109      	bne.n	80097b8 <_strtol_l.constprop.0+0x54>
 80097a4:	2c30      	cmp	r4, #48	@ 0x30
 80097a6:	d12a      	bne.n	80097fe <_strtol_l.constprop.0+0x9a>
 80097a8:	782a      	ldrb	r2, [r5, #0]
 80097aa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80097ae:	2a58      	cmp	r2, #88	@ 0x58
 80097b0:	d125      	bne.n	80097fe <_strtol_l.constprop.0+0x9a>
 80097b2:	786c      	ldrb	r4, [r5, #1]
 80097b4:	2310      	movs	r3, #16
 80097b6:	3502      	adds	r5, #2
 80097b8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80097bc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80097c0:	2200      	movs	r2, #0
 80097c2:	fbbc f9f3 	udiv	r9, ip, r3
 80097c6:	4610      	mov	r0, r2
 80097c8:	fb03 ca19 	mls	sl, r3, r9, ip
 80097cc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80097d0:	2f09      	cmp	r7, #9
 80097d2:	d81b      	bhi.n	800980c <_strtol_l.constprop.0+0xa8>
 80097d4:	463c      	mov	r4, r7
 80097d6:	42a3      	cmp	r3, r4
 80097d8:	dd27      	ble.n	800982a <_strtol_l.constprop.0+0xc6>
 80097da:	1c57      	adds	r7, r2, #1
 80097dc:	d007      	beq.n	80097ee <_strtol_l.constprop.0+0x8a>
 80097de:	4581      	cmp	r9, r0
 80097e0:	d320      	bcc.n	8009824 <_strtol_l.constprop.0+0xc0>
 80097e2:	d101      	bne.n	80097e8 <_strtol_l.constprop.0+0x84>
 80097e4:	45a2      	cmp	sl, r4
 80097e6:	db1d      	blt.n	8009824 <_strtol_l.constprop.0+0xc0>
 80097e8:	fb00 4003 	mla	r0, r0, r3, r4
 80097ec:	2201      	movs	r2, #1
 80097ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 80097f2:	e7eb      	b.n	80097cc <_strtol_l.constprop.0+0x68>
 80097f4:	2c2b      	cmp	r4, #43	@ 0x2b
 80097f6:	bf04      	itt	eq
 80097f8:	782c      	ldrbeq	r4, [r5, #0]
 80097fa:	1c95      	addeq	r5, r2, #2
 80097fc:	e7cf      	b.n	800979e <_strtol_l.constprop.0+0x3a>
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d1da      	bne.n	80097b8 <_strtol_l.constprop.0+0x54>
 8009802:	2c30      	cmp	r4, #48	@ 0x30
 8009804:	bf0c      	ite	eq
 8009806:	2308      	moveq	r3, #8
 8009808:	230a      	movne	r3, #10
 800980a:	e7d5      	b.n	80097b8 <_strtol_l.constprop.0+0x54>
 800980c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009810:	2f19      	cmp	r7, #25
 8009812:	d801      	bhi.n	8009818 <_strtol_l.constprop.0+0xb4>
 8009814:	3c37      	subs	r4, #55	@ 0x37
 8009816:	e7de      	b.n	80097d6 <_strtol_l.constprop.0+0x72>
 8009818:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800981c:	2f19      	cmp	r7, #25
 800981e:	d804      	bhi.n	800982a <_strtol_l.constprop.0+0xc6>
 8009820:	3c57      	subs	r4, #87	@ 0x57
 8009822:	e7d8      	b.n	80097d6 <_strtol_l.constprop.0+0x72>
 8009824:	f04f 32ff 	mov.w	r2, #4294967295
 8009828:	e7e1      	b.n	80097ee <_strtol_l.constprop.0+0x8a>
 800982a:	1c53      	adds	r3, r2, #1
 800982c:	d108      	bne.n	8009840 <_strtol_l.constprop.0+0xdc>
 800982e:	2322      	movs	r3, #34	@ 0x22
 8009830:	f8ce 3000 	str.w	r3, [lr]
 8009834:	4660      	mov	r0, ip
 8009836:	f1b8 0f00 	cmp.w	r8, #0
 800983a:	d0a0      	beq.n	800977e <_strtol_l.constprop.0+0x1a>
 800983c:	1e69      	subs	r1, r5, #1
 800983e:	e006      	b.n	800984e <_strtol_l.constprop.0+0xea>
 8009840:	b106      	cbz	r6, 8009844 <_strtol_l.constprop.0+0xe0>
 8009842:	4240      	negs	r0, r0
 8009844:	f1b8 0f00 	cmp.w	r8, #0
 8009848:	d099      	beq.n	800977e <_strtol_l.constprop.0+0x1a>
 800984a:	2a00      	cmp	r2, #0
 800984c:	d1f6      	bne.n	800983c <_strtol_l.constprop.0+0xd8>
 800984e:	f8c8 1000 	str.w	r1, [r8]
 8009852:	e794      	b.n	800977e <_strtol_l.constprop.0+0x1a>
 8009854:	0800ac91 	.word	0x0800ac91

08009858 <_strtol_r>:
 8009858:	f7ff bf84 	b.w	8009764 <_strtol_l.constprop.0>

0800985c <__ssputs_r>:
 800985c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009860:	688e      	ldr	r6, [r1, #8]
 8009862:	461f      	mov	r7, r3
 8009864:	42be      	cmp	r6, r7
 8009866:	680b      	ldr	r3, [r1, #0]
 8009868:	4682      	mov	sl, r0
 800986a:	460c      	mov	r4, r1
 800986c:	4690      	mov	r8, r2
 800986e:	d82d      	bhi.n	80098cc <__ssputs_r+0x70>
 8009870:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009874:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009878:	d026      	beq.n	80098c8 <__ssputs_r+0x6c>
 800987a:	6965      	ldr	r5, [r4, #20]
 800987c:	6909      	ldr	r1, [r1, #16]
 800987e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009882:	eba3 0901 	sub.w	r9, r3, r1
 8009886:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800988a:	1c7b      	adds	r3, r7, #1
 800988c:	444b      	add	r3, r9
 800988e:	106d      	asrs	r5, r5, #1
 8009890:	429d      	cmp	r5, r3
 8009892:	bf38      	it	cc
 8009894:	461d      	movcc	r5, r3
 8009896:	0553      	lsls	r3, r2, #21
 8009898:	d527      	bpl.n	80098ea <__ssputs_r+0x8e>
 800989a:	4629      	mov	r1, r5
 800989c:	f7fe fc1c 	bl	80080d8 <_malloc_r>
 80098a0:	4606      	mov	r6, r0
 80098a2:	b360      	cbz	r0, 80098fe <__ssputs_r+0xa2>
 80098a4:	6921      	ldr	r1, [r4, #16]
 80098a6:	464a      	mov	r2, r9
 80098a8:	f7fd fd3f 	bl	800732a <memcpy>
 80098ac:	89a3      	ldrh	r3, [r4, #12]
 80098ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80098b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80098b6:	81a3      	strh	r3, [r4, #12]
 80098b8:	6126      	str	r6, [r4, #16]
 80098ba:	6165      	str	r5, [r4, #20]
 80098bc:	444e      	add	r6, r9
 80098be:	eba5 0509 	sub.w	r5, r5, r9
 80098c2:	6026      	str	r6, [r4, #0]
 80098c4:	60a5      	str	r5, [r4, #8]
 80098c6:	463e      	mov	r6, r7
 80098c8:	42be      	cmp	r6, r7
 80098ca:	d900      	bls.n	80098ce <__ssputs_r+0x72>
 80098cc:	463e      	mov	r6, r7
 80098ce:	6820      	ldr	r0, [r4, #0]
 80098d0:	4632      	mov	r2, r6
 80098d2:	4641      	mov	r1, r8
 80098d4:	f000 fb6a 	bl	8009fac <memmove>
 80098d8:	68a3      	ldr	r3, [r4, #8]
 80098da:	1b9b      	subs	r3, r3, r6
 80098dc:	60a3      	str	r3, [r4, #8]
 80098de:	6823      	ldr	r3, [r4, #0]
 80098e0:	4433      	add	r3, r6
 80098e2:	6023      	str	r3, [r4, #0]
 80098e4:	2000      	movs	r0, #0
 80098e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098ea:	462a      	mov	r2, r5
 80098ec:	f000 ff41 	bl	800a772 <_realloc_r>
 80098f0:	4606      	mov	r6, r0
 80098f2:	2800      	cmp	r0, #0
 80098f4:	d1e0      	bne.n	80098b8 <__ssputs_r+0x5c>
 80098f6:	6921      	ldr	r1, [r4, #16]
 80098f8:	4650      	mov	r0, sl
 80098fa:	f7fe fb79 	bl	8007ff0 <_free_r>
 80098fe:	230c      	movs	r3, #12
 8009900:	f8ca 3000 	str.w	r3, [sl]
 8009904:	89a3      	ldrh	r3, [r4, #12]
 8009906:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800990a:	81a3      	strh	r3, [r4, #12]
 800990c:	f04f 30ff 	mov.w	r0, #4294967295
 8009910:	e7e9      	b.n	80098e6 <__ssputs_r+0x8a>
	...

08009914 <_svfiprintf_r>:
 8009914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009918:	4698      	mov	r8, r3
 800991a:	898b      	ldrh	r3, [r1, #12]
 800991c:	061b      	lsls	r3, r3, #24
 800991e:	b09d      	sub	sp, #116	@ 0x74
 8009920:	4607      	mov	r7, r0
 8009922:	460d      	mov	r5, r1
 8009924:	4614      	mov	r4, r2
 8009926:	d510      	bpl.n	800994a <_svfiprintf_r+0x36>
 8009928:	690b      	ldr	r3, [r1, #16]
 800992a:	b973      	cbnz	r3, 800994a <_svfiprintf_r+0x36>
 800992c:	2140      	movs	r1, #64	@ 0x40
 800992e:	f7fe fbd3 	bl	80080d8 <_malloc_r>
 8009932:	6028      	str	r0, [r5, #0]
 8009934:	6128      	str	r0, [r5, #16]
 8009936:	b930      	cbnz	r0, 8009946 <_svfiprintf_r+0x32>
 8009938:	230c      	movs	r3, #12
 800993a:	603b      	str	r3, [r7, #0]
 800993c:	f04f 30ff 	mov.w	r0, #4294967295
 8009940:	b01d      	add	sp, #116	@ 0x74
 8009942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009946:	2340      	movs	r3, #64	@ 0x40
 8009948:	616b      	str	r3, [r5, #20]
 800994a:	2300      	movs	r3, #0
 800994c:	9309      	str	r3, [sp, #36]	@ 0x24
 800994e:	2320      	movs	r3, #32
 8009950:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009954:	f8cd 800c 	str.w	r8, [sp, #12]
 8009958:	2330      	movs	r3, #48	@ 0x30
 800995a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009af8 <_svfiprintf_r+0x1e4>
 800995e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009962:	f04f 0901 	mov.w	r9, #1
 8009966:	4623      	mov	r3, r4
 8009968:	469a      	mov	sl, r3
 800996a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800996e:	b10a      	cbz	r2, 8009974 <_svfiprintf_r+0x60>
 8009970:	2a25      	cmp	r2, #37	@ 0x25
 8009972:	d1f9      	bne.n	8009968 <_svfiprintf_r+0x54>
 8009974:	ebba 0b04 	subs.w	fp, sl, r4
 8009978:	d00b      	beq.n	8009992 <_svfiprintf_r+0x7e>
 800997a:	465b      	mov	r3, fp
 800997c:	4622      	mov	r2, r4
 800997e:	4629      	mov	r1, r5
 8009980:	4638      	mov	r0, r7
 8009982:	f7ff ff6b 	bl	800985c <__ssputs_r>
 8009986:	3001      	adds	r0, #1
 8009988:	f000 80a7 	beq.w	8009ada <_svfiprintf_r+0x1c6>
 800998c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800998e:	445a      	add	r2, fp
 8009990:	9209      	str	r2, [sp, #36]	@ 0x24
 8009992:	f89a 3000 	ldrb.w	r3, [sl]
 8009996:	2b00      	cmp	r3, #0
 8009998:	f000 809f 	beq.w	8009ada <_svfiprintf_r+0x1c6>
 800999c:	2300      	movs	r3, #0
 800999e:	f04f 32ff 	mov.w	r2, #4294967295
 80099a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099a6:	f10a 0a01 	add.w	sl, sl, #1
 80099aa:	9304      	str	r3, [sp, #16]
 80099ac:	9307      	str	r3, [sp, #28]
 80099ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80099b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80099b4:	4654      	mov	r4, sl
 80099b6:	2205      	movs	r2, #5
 80099b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099bc:	484e      	ldr	r0, [pc, #312]	@ (8009af8 <_svfiprintf_r+0x1e4>)
 80099be:	f7f6 fc07 	bl	80001d0 <memchr>
 80099c2:	9a04      	ldr	r2, [sp, #16]
 80099c4:	b9d8      	cbnz	r0, 80099fe <_svfiprintf_r+0xea>
 80099c6:	06d0      	lsls	r0, r2, #27
 80099c8:	bf44      	itt	mi
 80099ca:	2320      	movmi	r3, #32
 80099cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80099d0:	0711      	lsls	r1, r2, #28
 80099d2:	bf44      	itt	mi
 80099d4:	232b      	movmi	r3, #43	@ 0x2b
 80099d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80099da:	f89a 3000 	ldrb.w	r3, [sl]
 80099de:	2b2a      	cmp	r3, #42	@ 0x2a
 80099e0:	d015      	beq.n	8009a0e <_svfiprintf_r+0xfa>
 80099e2:	9a07      	ldr	r2, [sp, #28]
 80099e4:	4654      	mov	r4, sl
 80099e6:	2000      	movs	r0, #0
 80099e8:	f04f 0c0a 	mov.w	ip, #10
 80099ec:	4621      	mov	r1, r4
 80099ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099f2:	3b30      	subs	r3, #48	@ 0x30
 80099f4:	2b09      	cmp	r3, #9
 80099f6:	d94b      	bls.n	8009a90 <_svfiprintf_r+0x17c>
 80099f8:	b1b0      	cbz	r0, 8009a28 <_svfiprintf_r+0x114>
 80099fa:	9207      	str	r2, [sp, #28]
 80099fc:	e014      	b.n	8009a28 <_svfiprintf_r+0x114>
 80099fe:	eba0 0308 	sub.w	r3, r0, r8
 8009a02:	fa09 f303 	lsl.w	r3, r9, r3
 8009a06:	4313      	orrs	r3, r2
 8009a08:	9304      	str	r3, [sp, #16]
 8009a0a:	46a2      	mov	sl, r4
 8009a0c:	e7d2      	b.n	80099b4 <_svfiprintf_r+0xa0>
 8009a0e:	9b03      	ldr	r3, [sp, #12]
 8009a10:	1d19      	adds	r1, r3, #4
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	9103      	str	r1, [sp, #12]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	bfbb      	ittet	lt
 8009a1a:	425b      	neglt	r3, r3
 8009a1c:	f042 0202 	orrlt.w	r2, r2, #2
 8009a20:	9307      	strge	r3, [sp, #28]
 8009a22:	9307      	strlt	r3, [sp, #28]
 8009a24:	bfb8      	it	lt
 8009a26:	9204      	strlt	r2, [sp, #16]
 8009a28:	7823      	ldrb	r3, [r4, #0]
 8009a2a:	2b2e      	cmp	r3, #46	@ 0x2e
 8009a2c:	d10a      	bne.n	8009a44 <_svfiprintf_r+0x130>
 8009a2e:	7863      	ldrb	r3, [r4, #1]
 8009a30:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a32:	d132      	bne.n	8009a9a <_svfiprintf_r+0x186>
 8009a34:	9b03      	ldr	r3, [sp, #12]
 8009a36:	1d1a      	adds	r2, r3, #4
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	9203      	str	r2, [sp, #12]
 8009a3c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009a40:	3402      	adds	r4, #2
 8009a42:	9305      	str	r3, [sp, #20]
 8009a44:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009b08 <_svfiprintf_r+0x1f4>
 8009a48:	7821      	ldrb	r1, [r4, #0]
 8009a4a:	2203      	movs	r2, #3
 8009a4c:	4650      	mov	r0, sl
 8009a4e:	f7f6 fbbf 	bl	80001d0 <memchr>
 8009a52:	b138      	cbz	r0, 8009a64 <_svfiprintf_r+0x150>
 8009a54:	9b04      	ldr	r3, [sp, #16]
 8009a56:	eba0 000a 	sub.w	r0, r0, sl
 8009a5a:	2240      	movs	r2, #64	@ 0x40
 8009a5c:	4082      	lsls	r2, r0
 8009a5e:	4313      	orrs	r3, r2
 8009a60:	3401      	adds	r4, #1
 8009a62:	9304      	str	r3, [sp, #16]
 8009a64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a68:	4824      	ldr	r0, [pc, #144]	@ (8009afc <_svfiprintf_r+0x1e8>)
 8009a6a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009a6e:	2206      	movs	r2, #6
 8009a70:	f7f6 fbae 	bl	80001d0 <memchr>
 8009a74:	2800      	cmp	r0, #0
 8009a76:	d036      	beq.n	8009ae6 <_svfiprintf_r+0x1d2>
 8009a78:	4b21      	ldr	r3, [pc, #132]	@ (8009b00 <_svfiprintf_r+0x1ec>)
 8009a7a:	bb1b      	cbnz	r3, 8009ac4 <_svfiprintf_r+0x1b0>
 8009a7c:	9b03      	ldr	r3, [sp, #12]
 8009a7e:	3307      	adds	r3, #7
 8009a80:	f023 0307 	bic.w	r3, r3, #7
 8009a84:	3308      	adds	r3, #8
 8009a86:	9303      	str	r3, [sp, #12]
 8009a88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a8a:	4433      	add	r3, r6
 8009a8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a8e:	e76a      	b.n	8009966 <_svfiprintf_r+0x52>
 8009a90:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a94:	460c      	mov	r4, r1
 8009a96:	2001      	movs	r0, #1
 8009a98:	e7a8      	b.n	80099ec <_svfiprintf_r+0xd8>
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	3401      	adds	r4, #1
 8009a9e:	9305      	str	r3, [sp, #20]
 8009aa0:	4619      	mov	r1, r3
 8009aa2:	f04f 0c0a 	mov.w	ip, #10
 8009aa6:	4620      	mov	r0, r4
 8009aa8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009aac:	3a30      	subs	r2, #48	@ 0x30
 8009aae:	2a09      	cmp	r2, #9
 8009ab0:	d903      	bls.n	8009aba <_svfiprintf_r+0x1a6>
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d0c6      	beq.n	8009a44 <_svfiprintf_r+0x130>
 8009ab6:	9105      	str	r1, [sp, #20]
 8009ab8:	e7c4      	b.n	8009a44 <_svfiprintf_r+0x130>
 8009aba:	fb0c 2101 	mla	r1, ip, r1, r2
 8009abe:	4604      	mov	r4, r0
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	e7f0      	b.n	8009aa6 <_svfiprintf_r+0x192>
 8009ac4:	ab03      	add	r3, sp, #12
 8009ac6:	9300      	str	r3, [sp, #0]
 8009ac8:	462a      	mov	r2, r5
 8009aca:	4b0e      	ldr	r3, [pc, #56]	@ (8009b04 <_svfiprintf_r+0x1f0>)
 8009acc:	a904      	add	r1, sp, #16
 8009ace:	4638      	mov	r0, r7
 8009ad0:	f7fc fba0 	bl	8006214 <_printf_float>
 8009ad4:	1c42      	adds	r2, r0, #1
 8009ad6:	4606      	mov	r6, r0
 8009ad8:	d1d6      	bne.n	8009a88 <_svfiprintf_r+0x174>
 8009ada:	89ab      	ldrh	r3, [r5, #12]
 8009adc:	065b      	lsls	r3, r3, #25
 8009ade:	f53f af2d 	bmi.w	800993c <_svfiprintf_r+0x28>
 8009ae2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009ae4:	e72c      	b.n	8009940 <_svfiprintf_r+0x2c>
 8009ae6:	ab03      	add	r3, sp, #12
 8009ae8:	9300      	str	r3, [sp, #0]
 8009aea:	462a      	mov	r2, r5
 8009aec:	4b05      	ldr	r3, [pc, #20]	@ (8009b04 <_svfiprintf_r+0x1f0>)
 8009aee:	a904      	add	r1, sp, #16
 8009af0:	4638      	mov	r0, r7
 8009af2:	f7fc fe27 	bl	8006744 <_printf_i>
 8009af6:	e7ed      	b.n	8009ad4 <_svfiprintf_r+0x1c0>
 8009af8:	0800ad91 	.word	0x0800ad91
 8009afc:	0800ad9b 	.word	0x0800ad9b
 8009b00:	08006215 	.word	0x08006215
 8009b04:	0800985d 	.word	0x0800985d
 8009b08:	0800ad97 	.word	0x0800ad97

08009b0c <__sfputc_r>:
 8009b0c:	6893      	ldr	r3, [r2, #8]
 8009b0e:	3b01      	subs	r3, #1
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	b410      	push	{r4}
 8009b14:	6093      	str	r3, [r2, #8]
 8009b16:	da08      	bge.n	8009b2a <__sfputc_r+0x1e>
 8009b18:	6994      	ldr	r4, [r2, #24]
 8009b1a:	42a3      	cmp	r3, r4
 8009b1c:	db01      	blt.n	8009b22 <__sfputc_r+0x16>
 8009b1e:	290a      	cmp	r1, #10
 8009b20:	d103      	bne.n	8009b2a <__sfputc_r+0x1e>
 8009b22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b26:	f7fd bad6 	b.w	80070d6 <__swbuf_r>
 8009b2a:	6813      	ldr	r3, [r2, #0]
 8009b2c:	1c58      	adds	r0, r3, #1
 8009b2e:	6010      	str	r0, [r2, #0]
 8009b30:	7019      	strb	r1, [r3, #0]
 8009b32:	4608      	mov	r0, r1
 8009b34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b38:	4770      	bx	lr

08009b3a <__sfputs_r>:
 8009b3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b3c:	4606      	mov	r6, r0
 8009b3e:	460f      	mov	r7, r1
 8009b40:	4614      	mov	r4, r2
 8009b42:	18d5      	adds	r5, r2, r3
 8009b44:	42ac      	cmp	r4, r5
 8009b46:	d101      	bne.n	8009b4c <__sfputs_r+0x12>
 8009b48:	2000      	movs	r0, #0
 8009b4a:	e007      	b.n	8009b5c <__sfputs_r+0x22>
 8009b4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b50:	463a      	mov	r2, r7
 8009b52:	4630      	mov	r0, r6
 8009b54:	f7ff ffda 	bl	8009b0c <__sfputc_r>
 8009b58:	1c43      	adds	r3, r0, #1
 8009b5a:	d1f3      	bne.n	8009b44 <__sfputs_r+0xa>
 8009b5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009b60 <_vfiprintf_r>:
 8009b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b64:	460d      	mov	r5, r1
 8009b66:	b09d      	sub	sp, #116	@ 0x74
 8009b68:	4614      	mov	r4, r2
 8009b6a:	4698      	mov	r8, r3
 8009b6c:	4606      	mov	r6, r0
 8009b6e:	b118      	cbz	r0, 8009b78 <_vfiprintf_r+0x18>
 8009b70:	6a03      	ldr	r3, [r0, #32]
 8009b72:	b90b      	cbnz	r3, 8009b78 <_vfiprintf_r+0x18>
 8009b74:	f7fd f9a6 	bl	8006ec4 <__sinit>
 8009b78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b7a:	07d9      	lsls	r1, r3, #31
 8009b7c:	d405      	bmi.n	8009b8a <_vfiprintf_r+0x2a>
 8009b7e:	89ab      	ldrh	r3, [r5, #12]
 8009b80:	059a      	lsls	r2, r3, #22
 8009b82:	d402      	bmi.n	8009b8a <_vfiprintf_r+0x2a>
 8009b84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009b86:	f7fd fbce 	bl	8007326 <__retarget_lock_acquire_recursive>
 8009b8a:	89ab      	ldrh	r3, [r5, #12]
 8009b8c:	071b      	lsls	r3, r3, #28
 8009b8e:	d501      	bpl.n	8009b94 <_vfiprintf_r+0x34>
 8009b90:	692b      	ldr	r3, [r5, #16]
 8009b92:	b99b      	cbnz	r3, 8009bbc <_vfiprintf_r+0x5c>
 8009b94:	4629      	mov	r1, r5
 8009b96:	4630      	mov	r0, r6
 8009b98:	f7fd fadc 	bl	8007154 <__swsetup_r>
 8009b9c:	b170      	cbz	r0, 8009bbc <_vfiprintf_r+0x5c>
 8009b9e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009ba0:	07dc      	lsls	r4, r3, #31
 8009ba2:	d504      	bpl.n	8009bae <_vfiprintf_r+0x4e>
 8009ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ba8:	b01d      	add	sp, #116	@ 0x74
 8009baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bae:	89ab      	ldrh	r3, [r5, #12]
 8009bb0:	0598      	lsls	r0, r3, #22
 8009bb2:	d4f7      	bmi.n	8009ba4 <_vfiprintf_r+0x44>
 8009bb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009bb6:	f7fd fbb7 	bl	8007328 <__retarget_lock_release_recursive>
 8009bba:	e7f3      	b.n	8009ba4 <_vfiprintf_r+0x44>
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	9309      	str	r3, [sp, #36]	@ 0x24
 8009bc0:	2320      	movs	r3, #32
 8009bc2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009bc6:	f8cd 800c 	str.w	r8, [sp, #12]
 8009bca:	2330      	movs	r3, #48	@ 0x30
 8009bcc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009d7c <_vfiprintf_r+0x21c>
 8009bd0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009bd4:	f04f 0901 	mov.w	r9, #1
 8009bd8:	4623      	mov	r3, r4
 8009bda:	469a      	mov	sl, r3
 8009bdc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009be0:	b10a      	cbz	r2, 8009be6 <_vfiprintf_r+0x86>
 8009be2:	2a25      	cmp	r2, #37	@ 0x25
 8009be4:	d1f9      	bne.n	8009bda <_vfiprintf_r+0x7a>
 8009be6:	ebba 0b04 	subs.w	fp, sl, r4
 8009bea:	d00b      	beq.n	8009c04 <_vfiprintf_r+0xa4>
 8009bec:	465b      	mov	r3, fp
 8009bee:	4622      	mov	r2, r4
 8009bf0:	4629      	mov	r1, r5
 8009bf2:	4630      	mov	r0, r6
 8009bf4:	f7ff ffa1 	bl	8009b3a <__sfputs_r>
 8009bf8:	3001      	adds	r0, #1
 8009bfa:	f000 80a7 	beq.w	8009d4c <_vfiprintf_r+0x1ec>
 8009bfe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c00:	445a      	add	r2, fp
 8009c02:	9209      	str	r2, [sp, #36]	@ 0x24
 8009c04:	f89a 3000 	ldrb.w	r3, [sl]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	f000 809f 	beq.w	8009d4c <_vfiprintf_r+0x1ec>
 8009c0e:	2300      	movs	r3, #0
 8009c10:	f04f 32ff 	mov.w	r2, #4294967295
 8009c14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c18:	f10a 0a01 	add.w	sl, sl, #1
 8009c1c:	9304      	str	r3, [sp, #16]
 8009c1e:	9307      	str	r3, [sp, #28]
 8009c20:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009c24:	931a      	str	r3, [sp, #104]	@ 0x68
 8009c26:	4654      	mov	r4, sl
 8009c28:	2205      	movs	r2, #5
 8009c2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c2e:	4853      	ldr	r0, [pc, #332]	@ (8009d7c <_vfiprintf_r+0x21c>)
 8009c30:	f7f6 face 	bl	80001d0 <memchr>
 8009c34:	9a04      	ldr	r2, [sp, #16]
 8009c36:	b9d8      	cbnz	r0, 8009c70 <_vfiprintf_r+0x110>
 8009c38:	06d1      	lsls	r1, r2, #27
 8009c3a:	bf44      	itt	mi
 8009c3c:	2320      	movmi	r3, #32
 8009c3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c42:	0713      	lsls	r3, r2, #28
 8009c44:	bf44      	itt	mi
 8009c46:	232b      	movmi	r3, #43	@ 0x2b
 8009c48:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c4c:	f89a 3000 	ldrb.w	r3, [sl]
 8009c50:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c52:	d015      	beq.n	8009c80 <_vfiprintf_r+0x120>
 8009c54:	9a07      	ldr	r2, [sp, #28]
 8009c56:	4654      	mov	r4, sl
 8009c58:	2000      	movs	r0, #0
 8009c5a:	f04f 0c0a 	mov.w	ip, #10
 8009c5e:	4621      	mov	r1, r4
 8009c60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c64:	3b30      	subs	r3, #48	@ 0x30
 8009c66:	2b09      	cmp	r3, #9
 8009c68:	d94b      	bls.n	8009d02 <_vfiprintf_r+0x1a2>
 8009c6a:	b1b0      	cbz	r0, 8009c9a <_vfiprintf_r+0x13a>
 8009c6c:	9207      	str	r2, [sp, #28]
 8009c6e:	e014      	b.n	8009c9a <_vfiprintf_r+0x13a>
 8009c70:	eba0 0308 	sub.w	r3, r0, r8
 8009c74:	fa09 f303 	lsl.w	r3, r9, r3
 8009c78:	4313      	orrs	r3, r2
 8009c7a:	9304      	str	r3, [sp, #16]
 8009c7c:	46a2      	mov	sl, r4
 8009c7e:	e7d2      	b.n	8009c26 <_vfiprintf_r+0xc6>
 8009c80:	9b03      	ldr	r3, [sp, #12]
 8009c82:	1d19      	adds	r1, r3, #4
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	9103      	str	r1, [sp, #12]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	bfbb      	ittet	lt
 8009c8c:	425b      	neglt	r3, r3
 8009c8e:	f042 0202 	orrlt.w	r2, r2, #2
 8009c92:	9307      	strge	r3, [sp, #28]
 8009c94:	9307      	strlt	r3, [sp, #28]
 8009c96:	bfb8      	it	lt
 8009c98:	9204      	strlt	r2, [sp, #16]
 8009c9a:	7823      	ldrb	r3, [r4, #0]
 8009c9c:	2b2e      	cmp	r3, #46	@ 0x2e
 8009c9e:	d10a      	bne.n	8009cb6 <_vfiprintf_r+0x156>
 8009ca0:	7863      	ldrb	r3, [r4, #1]
 8009ca2:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ca4:	d132      	bne.n	8009d0c <_vfiprintf_r+0x1ac>
 8009ca6:	9b03      	ldr	r3, [sp, #12]
 8009ca8:	1d1a      	adds	r2, r3, #4
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	9203      	str	r2, [sp, #12]
 8009cae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009cb2:	3402      	adds	r4, #2
 8009cb4:	9305      	str	r3, [sp, #20]
 8009cb6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009d8c <_vfiprintf_r+0x22c>
 8009cba:	7821      	ldrb	r1, [r4, #0]
 8009cbc:	2203      	movs	r2, #3
 8009cbe:	4650      	mov	r0, sl
 8009cc0:	f7f6 fa86 	bl	80001d0 <memchr>
 8009cc4:	b138      	cbz	r0, 8009cd6 <_vfiprintf_r+0x176>
 8009cc6:	9b04      	ldr	r3, [sp, #16]
 8009cc8:	eba0 000a 	sub.w	r0, r0, sl
 8009ccc:	2240      	movs	r2, #64	@ 0x40
 8009cce:	4082      	lsls	r2, r0
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	3401      	adds	r4, #1
 8009cd4:	9304      	str	r3, [sp, #16]
 8009cd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cda:	4829      	ldr	r0, [pc, #164]	@ (8009d80 <_vfiprintf_r+0x220>)
 8009cdc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009ce0:	2206      	movs	r2, #6
 8009ce2:	f7f6 fa75 	bl	80001d0 <memchr>
 8009ce6:	2800      	cmp	r0, #0
 8009ce8:	d03f      	beq.n	8009d6a <_vfiprintf_r+0x20a>
 8009cea:	4b26      	ldr	r3, [pc, #152]	@ (8009d84 <_vfiprintf_r+0x224>)
 8009cec:	bb1b      	cbnz	r3, 8009d36 <_vfiprintf_r+0x1d6>
 8009cee:	9b03      	ldr	r3, [sp, #12]
 8009cf0:	3307      	adds	r3, #7
 8009cf2:	f023 0307 	bic.w	r3, r3, #7
 8009cf6:	3308      	adds	r3, #8
 8009cf8:	9303      	str	r3, [sp, #12]
 8009cfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cfc:	443b      	add	r3, r7
 8009cfe:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d00:	e76a      	b.n	8009bd8 <_vfiprintf_r+0x78>
 8009d02:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d06:	460c      	mov	r4, r1
 8009d08:	2001      	movs	r0, #1
 8009d0a:	e7a8      	b.n	8009c5e <_vfiprintf_r+0xfe>
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	3401      	adds	r4, #1
 8009d10:	9305      	str	r3, [sp, #20]
 8009d12:	4619      	mov	r1, r3
 8009d14:	f04f 0c0a 	mov.w	ip, #10
 8009d18:	4620      	mov	r0, r4
 8009d1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d1e:	3a30      	subs	r2, #48	@ 0x30
 8009d20:	2a09      	cmp	r2, #9
 8009d22:	d903      	bls.n	8009d2c <_vfiprintf_r+0x1cc>
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d0c6      	beq.n	8009cb6 <_vfiprintf_r+0x156>
 8009d28:	9105      	str	r1, [sp, #20]
 8009d2a:	e7c4      	b.n	8009cb6 <_vfiprintf_r+0x156>
 8009d2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d30:	4604      	mov	r4, r0
 8009d32:	2301      	movs	r3, #1
 8009d34:	e7f0      	b.n	8009d18 <_vfiprintf_r+0x1b8>
 8009d36:	ab03      	add	r3, sp, #12
 8009d38:	9300      	str	r3, [sp, #0]
 8009d3a:	462a      	mov	r2, r5
 8009d3c:	4b12      	ldr	r3, [pc, #72]	@ (8009d88 <_vfiprintf_r+0x228>)
 8009d3e:	a904      	add	r1, sp, #16
 8009d40:	4630      	mov	r0, r6
 8009d42:	f7fc fa67 	bl	8006214 <_printf_float>
 8009d46:	4607      	mov	r7, r0
 8009d48:	1c78      	adds	r0, r7, #1
 8009d4a:	d1d6      	bne.n	8009cfa <_vfiprintf_r+0x19a>
 8009d4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009d4e:	07d9      	lsls	r1, r3, #31
 8009d50:	d405      	bmi.n	8009d5e <_vfiprintf_r+0x1fe>
 8009d52:	89ab      	ldrh	r3, [r5, #12]
 8009d54:	059a      	lsls	r2, r3, #22
 8009d56:	d402      	bmi.n	8009d5e <_vfiprintf_r+0x1fe>
 8009d58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009d5a:	f7fd fae5 	bl	8007328 <__retarget_lock_release_recursive>
 8009d5e:	89ab      	ldrh	r3, [r5, #12]
 8009d60:	065b      	lsls	r3, r3, #25
 8009d62:	f53f af1f 	bmi.w	8009ba4 <_vfiprintf_r+0x44>
 8009d66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009d68:	e71e      	b.n	8009ba8 <_vfiprintf_r+0x48>
 8009d6a:	ab03      	add	r3, sp, #12
 8009d6c:	9300      	str	r3, [sp, #0]
 8009d6e:	462a      	mov	r2, r5
 8009d70:	4b05      	ldr	r3, [pc, #20]	@ (8009d88 <_vfiprintf_r+0x228>)
 8009d72:	a904      	add	r1, sp, #16
 8009d74:	4630      	mov	r0, r6
 8009d76:	f7fc fce5 	bl	8006744 <_printf_i>
 8009d7a:	e7e4      	b.n	8009d46 <_vfiprintf_r+0x1e6>
 8009d7c:	0800ad91 	.word	0x0800ad91
 8009d80:	0800ad9b 	.word	0x0800ad9b
 8009d84:	08006215 	.word	0x08006215
 8009d88:	08009b3b 	.word	0x08009b3b
 8009d8c:	0800ad97 	.word	0x0800ad97

08009d90 <__sflush_r>:
 8009d90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d98:	0716      	lsls	r6, r2, #28
 8009d9a:	4605      	mov	r5, r0
 8009d9c:	460c      	mov	r4, r1
 8009d9e:	d454      	bmi.n	8009e4a <__sflush_r+0xba>
 8009da0:	684b      	ldr	r3, [r1, #4]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	dc02      	bgt.n	8009dac <__sflush_r+0x1c>
 8009da6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	dd48      	ble.n	8009e3e <__sflush_r+0xae>
 8009dac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009dae:	2e00      	cmp	r6, #0
 8009db0:	d045      	beq.n	8009e3e <__sflush_r+0xae>
 8009db2:	2300      	movs	r3, #0
 8009db4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009db8:	682f      	ldr	r7, [r5, #0]
 8009dba:	6a21      	ldr	r1, [r4, #32]
 8009dbc:	602b      	str	r3, [r5, #0]
 8009dbe:	d030      	beq.n	8009e22 <__sflush_r+0x92>
 8009dc0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009dc2:	89a3      	ldrh	r3, [r4, #12]
 8009dc4:	0759      	lsls	r1, r3, #29
 8009dc6:	d505      	bpl.n	8009dd4 <__sflush_r+0x44>
 8009dc8:	6863      	ldr	r3, [r4, #4]
 8009dca:	1ad2      	subs	r2, r2, r3
 8009dcc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009dce:	b10b      	cbz	r3, 8009dd4 <__sflush_r+0x44>
 8009dd0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009dd2:	1ad2      	subs	r2, r2, r3
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009dd8:	6a21      	ldr	r1, [r4, #32]
 8009dda:	4628      	mov	r0, r5
 8009ddc:	47b0      	blx	r6
 8009dde:	1c43      	adds	r3, r0, #1
 8009de0:	89a3      	ldrh	r3, [r4, #12]
 8009de2:	d106      	bne.n	8009df2 <__sflush_r+0x62>
 8009de4:	6829      	ldr	r1, [r5, #0]
 8009de6:	291d      	cmp	r1, #29
 8009de8:	d82b      	bhi.n	8009e42 <__sflush_r+0xb2>
 8009dea:	4a2a      	ldr	r2, [pc, #168]	@ (8009e94 <__sflush_r+0x104>)
 8009dec:	410a      	asrs	r2, r1
 8009dee:	07d6      	lsls	r6, r2, #31
 8009df0:	d427      	bmi.n	8009e42 <__sflush_r+0xb2>
 8009df2:	2200      	movs	r2, #0
 8009df4:	6062      	str	r2, [r4, #4]
 8009df6:	04d9      	lsls	r1, r3, #19
 8009df8:	6922      	ldr	r2, [r4, #16]
 8009dfa:	6022      	str	r2, [r4, #0]
 8009dfc:	d504      	bpl.n	8009e08 <__sflush_r+0x78>
 8009dfe:	1c42      	adds	r2, r0, #1
 8009e00:	d101      	bne.n	8009e06 <__sflush_r+0x76>
 8009e02:	682b      	ldr	r3, [r5, #0]
 8009e04:	b903      	cbnz	r3, 8009e08 <__sflush_r+0x78>
 8009e06:	6560      	str	r0, [r4, #84]	@ 0x54
 8009e08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009e0a:	602f      	str	r7, [r5, #0]
 8009e0c:	b1b9      	cbz	r1, 8009e3e <__sflush_r+0xae>
 8009e0e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009e12:	4299      	cmp	r1, r3
 8009e14:	d002      	beq.n	8009e1c <__sflush_r+0x8c>
 8009e16:	4628      	mov	r0, r5
 8009e18:	f7fe f8ea 	bl	8007ff0 <_free_r>
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009e20:	e00d      	b.n	8009e3e <__sflush_r+0xae>
 8009e22:	2301      	movs	r3, #1
 8009e24:	4628      	mov	r0, r5
 8009e26:	47b0      	blx	r6
 8009e28:	4602      	mov	r2, r0
 8009e2a:	1c50      	adds	r0, r2, #1
 8009e2c:	d1c9      	bne.n	8009dc2 <__sflush_r+0x32>
 8009e2e:	682b      	ldr	r3, [r5, #0]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d0c6      	beq.n	8009dc2 <__sflush_r+0x32>
 8009e34:	2b1d      	cmp	r3, #29
 8009e36:	d001      	beq.n	8009e3c <__sflush_r+0xac>
 8009e38:	2b16      	cmp	r3, #22
 8009e3a:	d11e      	bne.n	8009e7a <__sflush_r+0xea>
 8009e3c:	602f      	str	r7, [r5, #0]
 8009e3e:	2000      	movs	r0, #0
 8009e40:	e022      	b.n	8009e88 <__sflush_r+0xf8>
 8009e42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e46:	b21b      	sxth	r3, r3
 8009e48:	e01b      	b.n	8009e82 <__sflush_r+0xf2>
 8009e4a:	690f      	ldr	r7, [r1, #16]
 8009e4c:	2f00      	cmp	r7, #0
 8009e4e:	d0f6      	beq.n	8009e3e <__sflush_r+0xae>
 8009e50:	0793      	lsls	r3, r2, #30
 8009e52:	680e      	ldr	r6, [r1, #0]
 8009e54:	bf08      	it	eq
 8009e56:	694b      	ldreq	r3, [r1, #20]
 8009e58:	600f      	str	r7, [r1, #0]
 8009e5a:	bf18      	it	ne
 8009e5c:	2300      	movne	r3, #0
 8009e5e:	eba6 0807 	sub.w	r8, r6, r7
 8009e62:	608b      	str	r3, [r1, #8]
 8009e64:	f1b8 0f00 	cmp.w	r8, #0
 8009e68:	dde9      	ble.n	8009e3e <__sflush_r+0xae>
 8009e6a:	6a21      	ldr	r1, [r4, #32]
 8009e6c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009e6e:	4643      	mov	r3, r8
 8009e70:	463a      	mov	r2, r7
 8009e72:	4628      	mov	r0, r5
 8009e74:	47b0      	blx	r6
 8009e76:	2800      	cmp	r0, #0
 8009e78:	dc08      	bgt.n	8009e8c <__sflush_r+0xfc>
 8009e7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e82:	81a3      	strh	r3, [r4, #12]
 8009e84:	f04f 30ff 	mov.w	r0, #4294967295
 8009e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e8c:	4407      	add	r7, r0
 8009e8e:	eba8 0800 	sub.w	r8, r8, r0
 8009e92:	e7e7      	b.n	8009e64 <__sflush_r+0xd4>
 8009e94:	dfbffffe 	.word	0xdfbffffe

08009e98 <_fflush_r>:
 8009e98:	b538      	push	{r3, r4, r5, lr}
 8009e9a:	690b      	ldr	r3, [r1, #16]
 8009e9c:	4605      	mov	r5, r0
 8009e9e:	460c      	mov	r4, r1
 8009ea0:	b913      	cbnz	r3, 8009ea8 <_fflush_r+0x10>
 8009ea2:	2500      	movs	r5, #0
 8009ea4:	4628      	mov	r0, r5
 8009ea6:	bd38      	pop	{r3, r4, r5, pc}
 8009ea8:	b118      	cbz	r0, 8009eb2 <_fflush_r+0x1a>
 8009eaa:	6a03      	ldr	r3, [r0, #32]
 8009eac:	b90b      	cbnz	r3, 8009eb2 <_fflush_r+0x1a>
 8009eae:	f7fd f809 	bl	8006ec4 <__sinit>
 8009eb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d0f3      	beq.n	8009ea2 <_fflush_r+0xa>
 8009eba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009ebc:	07d0      	lsls	r0, r2, #31
 8009ebe:	d404      	bmi.n	8009eca <_fflush_r+0x32>
 8009ec0:	0599      	lsls	r1, r3, #22
 8009ec2:	d402      	bmi.n	8009eca <_fflush_r+0x32>
 8009ec4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009ec6:	f7fd fa2e 	bl	8007326 <__retarget_lock_acquire_recursive>
 8009eca:	4628      	mov	r0, r5
 8009ecc:	4621      	mov	r1, r4
 8009ece:	f7ff ff5f 	bl	8009d90 <__sflush_r>
 8009ed2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009ed4:	07da      	lsls	r2, r3, #31
 8009ed6:	4605      	mov	r5, r0
 8009ed8:	d4e4      	bmi.n	8009ea4 <_fflush_r+0xc>
 8009eda:	89a3      	ldrh	r3, [r4, #12]
 8009edc:	059b      	lsls	r3, r3, #22
 8009ede:	d4e1      	bmi.n	8009ea4 <_fflush_r+0xc>
 8009ee0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009ee2:	f7fd fa21 	bl	8007328 <__retarget_lock_release_recursive>
 8009ee6:	e7dd      	b.n	8009ea4 <_fflush_r+0xc>

08009ee8 <__swhatbuf_r>:
 8009ee8:	b570      	push	{r4, r5, r6, lr}
 8009eea:	460c      	mov	r4, r1
 8009eec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ef0:	2900      	cmp	r1, #0
 8009ef2:	b096      	sub	sp, #88	@ 0x58
 8009ef4:	4615      	mov	r5, r2
 8009ef6:	461e      	mov	r6, r3
 8009ef8:	da0d      	bge.n	8009f16 <__swhatbuf_r+0x2e>
 8009efa:	89a3      	ldrh	r3, [r4, #12]
 8009efc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009f00:	f04f 0100 	mov.w	r1, #0
 8009f04:	bf14      	ite	ne
 8009f06:	2340      	movne	r3, #64	@ 0x40
 8009f08:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009f0c:	2000      	movs	r0, #0
 8009f0e:	6031      	str	r1, [r6, #0]
 8009f10:	602b      	str	r3, [r5, #0]
 8009f12:	b016      	add	sp, #88	@ 0x58
 8009f14:	bd70      	pop	{r4, r5, r6, pc}
 8009f16:	466a      	mov	r2, sp
 8009f18:	f000 f874 	bl	800a004 <_fstat_r>
 8009f1c:	2800      	cmp	r0, #0
 8009f1e:	dbec      	blt.n	8009efa <__swhatbuf_r+0x12>
 8009f20:	9901      	ldr	r1, [sp, #4]
 8009f22:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009f26:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009f2a:	4259      	negs	r1, r3
 8009f2c:	4159      	adcs	r1, r3
 8009f2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009f32:	e7eb      	b.n	8009f0c <__swhatbuf_r+0x24>

08009f34 <__smakebuf_r>:
 8009f34:	898b      	ldrh	r3, [r1, #12]
 8009f36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f38:	079d      	lsls	r5, r3, #30
 8009f3a:	4606      	mov	r6, r0
 8009f3c:	460c      	mov	r4, r1
 8009f3e:	d507      	bpl.n	8009f50 <__smakebuf_r+0x1c>
 8009f40:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009f44:	6023      	str	r3, [r4, #0]
 8009f46:	6123      	str	r3, [r4, #16]
 8009f48:	2301      	movs	r3, #1
 8009f4a:	6163      	str	r3, [r4, #20]
 8009f4c:	b003      	add	sp, #12
 8009f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f50:	ab01      	add	r3, sp, #4
 8009f52:	466a      	mov	r2, sp
 8009f54:	f7ff ffc8 	bl	8009ee8 <__swhatbuf_r>
 8009f58:	9f00      	ldr	r7, [sp, #0]
 8009f5a:	4605      	mov	r5, r0
 8009f5c:	4639      	mov	r1, r7
 8009f5e:	4630      	mov	r0, r6
 8009f60:	f7fe f8ba 	bl	80080d8 <_malloc_r>
 8009f64:	b948      	cbnz	r0, 8009f7a <__smakebuf_r+0x46>
 8009f66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f6a:	059a      	lsls	r2, r3, #22
 8009f6c:	d4ee      	bmi.n	8009f4c <__smakebuf_r+0x18>
 8009f6e:	f023 0303 	bic.w	r3, r3, #3
 8009f72:	f043 0302 	orr.w	r3, r3, #2
 8009f76:	81a3      	strh	r3, [r4, #12]
 8009f78:	e7e2      	b.n	8009f40 <__smakebuf_r+0xc>
 8009f7a:	89a3      	ldrh	r3, [r4, #12]
 8009f7c:	6020      	str	r0, [r4, #0]
 8009f7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f82:	81a3      	strh	r3, [r4, #12]
 8009f84:	9b01      	ldr	r3, [sp, #4]
 8009f86:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009f8a:	b15b      	cbz	r3, 8009fa4 <__smakebuf_r+0x70>
 8009f8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f90:	4630      	mov	r0, r6
 8009f92:	f000 f849 	bl	800a028 <_isatty_r>
 8009f96:	b128      	cbz	r0, 8009fa4 <__smakebuf_r+0x70>
 8009f98:	89a3      	ldrh	r3, [r4, #12]
 8009f9a:	f023 0303 	bic.w	r3, r3, #3
 8009f9e:	f043 0301 	orr.w	r3, r3, #1
 8009fa2:	81a3      	strh	r3, [r4, #12]
 8009fa4:	89a3      	ldrh	r3, [r4, #12]
 8009fa6:	431d      	orrs	r5, r3
 8009fa8:	81a5      	strh	r5, [r4, #12]
 8009faa:	e7cf      	b.n	8009f4c <__smakebuf_r+0x18>

08009fac <memmove>:
 8009fac:	4288      	cmp	r0, r1
 8009fae:	b510      	push	{r4, lr}
 8009fb0:	eb01 0402 	add.w	r4, r1, r2
 8009fb4:	d902      	bls.n	8009fbc <memmove+0x10>
 8009fb6:	4284      	cmp	r4, r0
 8009fb8:	4623      	mov	r3, r4
 8009fba:	d807      	bhi.n	8009fcc <memmove+0x20>
 8009fbc:	1e43      	subs	r3, r0, #1
 8009fbe:	42a1      	cmp	r1, r4
 8009fc0:	d008      	beq.n	8009fd4 <memmove+0x28>
 8009fc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009fc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009fca:	e7f8      	b.n	8009fbe <memmove+0x12>
 8009fcc:	4402      	add	r2, r0
 8009fce:	4601      	mov	r1, r0
 8009fd0:	428a      	cmp	r2, r1
 8009fd2:	d100      	bne.n	8009fd6 <memmove+0x2a>
 8009fd4:	bd10      	pop	{r4, pc}
 8009fd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009fda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009fde:	e7f7      	b.n	8009fd0 <memmove+0x24>

08009fe0 <strncmp>:
 8009fe0:	b510      	push	{r4, lr}
 8009fe2:	b16a      	cbz	r2, 800a000 <strncmp+0x20>
 8009fe4:	3901      	subs	r1, #1
 8009fe6:	1884      	adds	r4, r0, r2
 8009fe8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009fec:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009ff0:	429a      	cmp	r2, r3
 8009ff2:	d103      	bne.n	8009ffc <strncmp+0x1c>
 8009ff4:	42a0      	cmp	r0, r4
 8009ff6:	d001      	beq.n	8009ffc <strncmp+0x1c>
 8009ff8:	2a00      	cmp	r2, #0
 8009ffa:	d1f5      	bne.n	8009fe8 <strncmp+0x8>
 8009ffc:	1ad0      	subs	r0, r2, r3
 8009ffe:	bd10      	pop	{r4, pc}
 800a000:	4610      	mov	r0, r2
 800a002:	e7fc      	b.n	8009ffe <strncmp+0x1e>

0800a004 <_fstat_r>:
 800a004:	b538      	push	{r3, r4, r5, lr}
 800a006:	4d07      	ldr	r5, [pc, #28]	@ (800a024 <_fstat_r+0x20>)
 800a008:	2300      	movs	r3, #0
 800a00a:	4604      	mov	r4, r0
 800a00c:	4608      	mov	r0, r1
 800a00e:	4611      	mov	r1, r2
 800a010:	602b      	str	r3, [r5, #0]
 800a012:	f7f7 fed3 	bl	8001dbc <_fstat>
 800a016:	1c43      	adds	r3, r0, #1
 800a018:	d102      	bne.n	800a020 <_fstat_r+0x1c>
 800a01a:	682b      	ldr	r3, [r5, #0]
 800a01c:	b103      	cbz	r3, 800a020 <_fstat_r+0x1c>
 800a01e:	6023      	str	r3, [r4, #0]
 800a020:	bd38      	pop	{r3, r4, r5, pc}
 800a022:	bf00      	nop
 800a024:	200008fc 	.word	0x200008fc

0800a028 <_isatty_r>:
 800a028:	b538      	push	{r3, r4, r5, lr}
 800a02a:	4d06      	ldr	r5, [pc, #24]	@ (800a044 <_isatty_r+0x1c>)
 800a02c:	2300      	movs	r3, #0
 800a02e:	4604      	mov	r4, r0
 800a030:	4608      	mov	r0, r1
 800a032:	602b      	str	r3, [r5, #0]
 800a034:	f7f7 fed2 	bl	8001ddc <_isatty>
 800a038:	1c43      	adds	r3, r0, #1
 800a03a:	d102      	bne.n	800a042 <_isatty_r+0x1a>
 800a03c:	682b      	ldr	r3, [r5, #0]
 800a03e:	b103      	cbz	r3, 800a042 <_isatty_r+0x1a>
 800a040:	6023      	str	r3, [r4, #0]
 800a042:	bd38      	pop	{r3, r4, r5, pc}
 800a044:	200008fc 	.word	0x200008fc

0800a048 <_sbrk_r>:
 800a048:	b538      	push	{r3, r4, r5, lr}
 800a04a:	4d06      	ldr	r5, [pc, #24]	@ (800a064 <_sbrk_r+0x1c>)
 800a04c:	2300      	movs	r3, #0
 800a04e:	4604      	mov	r4, r0
 800a050:	4608      	mov	r0, r1
 800a052:	602b      	str	r3, [r5, #0]
 800a054:	f7f7 feda 	bl	8001e0c <_sbrk>
 800a058:	1c43      	adds	r3, r0, #1
 800a05a:	d102      	bne.n	800a062 <_sbrk_r+0x1a>
 800a05c:	682b      	ldr	r3, [r5, #0]
 800a05e:	b103      	cbz	r3, 800a062 <_sbrk_r+0x1a>
 800a060:	6023      	str	r3, [r4, #0]
 800a062:	bd38      	pop	{r3, r4, r5, pc}
 800a064:	200008fc 	.word	0x200008fc

0800a068 <nan>:
 800a068:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a070 <nan+0x8>
 800a06c:	4770      	bx	lr
 800a06e:	bf00      	nop
 800a070:	00000000 	.word	0x00000000
 800a074:	7ff80000 	.word	0x7ff80000

0800a078 <__assert_func>:
 800a078:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a07a:	4614      	mov	r4, r2
 800a07c:	461a      	mov	r2, r3
 800a07e:	4b09      	ldr	r3, [pc, #36]	@ (800a0a4 <__assert_func+0x2c>)
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	4605      	mov	r5, r0
 800a084:	68d8      	ldr	r0, [r3, #12]
 800a086:	b954      	cbnz	r4, 800a09e <__assert_func+0x26>
 800a088:	4b07      	ldr	r3, [pc, #28]	@ (800a0a8 <__assert_func+0x30>)
 800a08a:	461c      	mov	r4, r3
 800a08c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a090:	9100      	str	r1, [sp, #0]
 800a092:	462b      	mov	r3, r5
 800a094:	4905      	ldr	r1, [pc, #20]	@ (800a0ac <__assert_func+0x34>)
 800a096:	f000 fba7 	bl	800a7e8 <fiprintf>
 800a09a:	f000 fbb7 	bl	800a80c <abort>
 800a09e:	4b04      	ldr	r3, [pc, #16]	@ (800a0b0 <__assert_func+0x38>)
 800a0a0:	e7f4      	b.n	800a08c <__assert_func+0x14>
 800a0a2:	bf00      	nop
 800a0a4:	20000018 	.word	0x20000018
 800a0a8:	0800ade5 	.word	0x0800ade5
 800a0ac:	0800adb7 	.word	0x0800adb7
 800a0b0:	0800adaa 	.word	0x0800adaa

0800a0b4 <_calloc_r>:
 800a0b4:	b570      	push	{r4, r5, r6, lr}
 800a0b6:	fba1 5402 	umull	r5, r4, r1, r2
 800a0ba:	b93c      	cbnz	r4, 800a0cc <_calloc_r+0x18>
 800a0bc:	4629      	mov	r1, r5
 800a0be:	f7fe f80b 	bl	80080d8 <_malloc_r>
 800a0c2:	4606      	mov	r6, r0
 800a0c4:	b928      	cbnz	r0, 800a0d2 <_calloc_r+0x1e>
 800a0c6:	2600      	movs	r6, #0
 800a0c8:	4630      	mov	r0, r6
 800a0ca:	bd70      	pop	{r4, r5, r6, pc}
 800a0cc:	220c      	movs	r2, #12
 800a0ce:	6002      	str	r2, [r0, #0]
 800a0d0:	e7f9      	b.n	800a0c6 <_calloc_r+0x12>
 800a0d2:	462a      	mov	r2, r5
 800a0d4:	4621      	mov	r1, r4
 800a0d6:	f7fd f893 	bl	8007200 <memset>
 800a0da:	e7f5      	b.n	800a0c8 <_calloc_r+0x14>

0800a0dc <rshift>:
 800a0dc:	6903      	ldr	r3, [r0, #16]
 800a0de:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a0e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a0e6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a0ea:	f100 0414 	add.w	r4, r0, #20
 800a0ee:	dd45      	ble.n	800a17c <rshift+0xa0>
 800a0f0:	f011 011f 	ands.w	r1, r1, #31
 800a0f4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a0f8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a0fc:	d10c      	bne.n	800a118 <rshift+0x3c>
 800a0fe:	f100 0710 	add.w	r7, r0, #16
 800a102:	4629      	mov	r1, r5
 800a104:	42b1      	cmp	r1, r6
 800a106:	d334      	bcc.n	800a172 <rshift+0x96>
 800a108:	1a9b      	subs	r3, r3, r2
 800a10a:	009b      	lsls	r3, r3, #2
 800a10c:	1eea      	subs	r2, r5, #3
 800a10e:	4296      	cmp	r6, r2
 800a110:	bf38      	it	cc
 800a112:	2300      	movcc	r3, #0
 800a114:	4423      	add	r3, r4
 800a116:	e015      	b.n	800a144 <rshift+0x68>
 800a118:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a11c:	f1c1 0820 	rsb	r8, r1, #32
 800a120:	40cf      	lsrs	r7, r1
 800a122:	f105 0e04 	add.w	lr, r5, #4
 800a126:	46a1      	mov	r9, r4
 800a128:	4576      	cmp	r6, lr
 800a12a:	46f4      	mov	ip, lr
 800a12c:	d815      	bhi.n	800a15a <rshift+0x7e>
 800a12e:	1a9a      	subs	r2, r3, r2
 800a130:	0092      	lsls	r2, r2, #2
 800a132:	3a04      	subs	r2, #4
 800a134:	3501      	adds	r5, #1
 800a136:	42ae      	cmp	r6, r5
 800a138:	bf38      	it	cc
 800a13a:	2200      	movcc	r2, #0
 800a13c:	18a3      	adds	r3, r4, r2
 800a13e:	50a7      	str	r7, [r4, r2]
 800a140:	b107      	cbz	r7, 800a144 <rshift+0x68>
 800a142:	3304      	adds	r3, #4
 800a144:	1b1a      	subs	r2, r3, r4
 800a146:	42a3      	cmp	r3, r4
 800a148:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a14c:	bf08      	it	eq
 800a14e:	2300      	moveq	r3, #0
 800a150:	6102      	str	r2, [r0, #16]
 800a152:	bf08      	it	eq
 800a154:	6143      	streq	r3, [r0, #20]
 800a156:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a15a:	f8dc c000 	ldr.w	ip, [ip]
 800a15e:	fa0c fc08 	lsl.w	ip, ip, r8
 800a162:	ea4c 0707 	orr.w	r7, ip, r7
 800a166:	f849 7b04 	str.w	r7, [r9], #4
 800a16a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a16e:	40cf      	lsrs	r7, r1
 800a170:	e7da      	b.n	800a128 <rshift+0x4c>
 800a172:	f851 cb04 	ldr.w	ip, [r1], #4
 800a176:	f847 cf04 	str.w	ip, [r7, #4]!
 800a17a:	e7c3      	b.n	800a104 <rshift+0x28>
 800a17c:	4623      	mov	r3, r4
 800a17e:	e7e1      	b.n	800a144 <rshift+0x68>

0800a180 <__hexdig_fun>:
 800a180:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a184:	2b09      	cmp	r3, #9
 800a186:	d802      	bhi.n	800a18e <__hexdig_fun+0xe>
 800a188:	3820      	subs	r0, #32
 800a18a:	b2c0      	uxtb	r0, r0
 800a18c:	4770      	bx	lr
 800a18e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a192:	2b05      	cmp	r3, #5
 800a194:	d801      	bhi.n	800a19a <__hexdig_fun+0x1a>
 800a196:	3847      	subs	r0, #71	@ 0x47
 800a198:	e7f7      	b.n	800a18a <__hexdig_fun+0xa>
 800a19a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a19e:	2b05      	cmp	r3, #5
 800a1a0:	d801      	bhi.n	800a1a6 <__hexdig_fun+0x26>
 800a1a2:	3827      	subs	r0, #39	@ 0x27
 800a1a4:	e7f1      	b.n	800a18a <__hexdig_fun+0xa>
 800a1a6:	2000      	movs	r0, #0
 800a1a8:	4770      	bx	lr
	...

0800a1ac <__gethex>:
 800a1ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1b0:	b085      	sub	sp, #20
 800a1b2:	468a      	mov	sl, r1
 800a1b4:	9302      	str	r3, [sp, #8]
 800a1b6:	680b      	ldr	r3, [r1, #0]
 800a1b8:	9001      	str	r0, [sp, #4]
 800a1ba:	4690      	mov	r8, r2
 800a1bc:	1c9c      	adds	r4, r3, #2
 800a1be:	46a1      	mov	r9, r4
 800a1c0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a1c4:	2830      	cmp	r0, #48	@ 0x30
 800a1c6:	d0fa      	beq.n	800a1be <__gethex+0x12>
 800a1c8:	eba9 0303 	sub.w	r3, r9, r3
 800a1cc:	f1a3 0b02 	sub.w	fp, r3, #2
 800a1d0:	f7ff ffd6 	bl	800a180 <__hexdig_fun>
 800a1d4:	4605      	mov	r5, r0
 800a1d6:	2800      	cmp	r0, #0
 800a1d8:	d168      	bne.n	800a2ac <__gethex+0x100>
 800a1da:	49a0      	ldr	r1, [pc, #640]	@ (800a45c <__gethex+0x2b0>)
 800a1dc:	2201      	movs	r2, #1
 800a1de:	4648      	mov	r0, r9
 800a1e0:	f7ff fefe 	bl	8009fe0 <strncmp>
 800a1e4:	4607      	mov	r7, r0
 800a1e6:	2800      	cmp	r0, #0
 800a1e8:	d167      	bne.n	800a2ba <__gethex+0x10e>
 800a1ea:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a1ee:	4626      	mov	r6, r4
 800a1f0:	f7ff ffc6 	bl	800a180 <__hexdig_fun>
 800a1f4:	2800      	cmp	r0, #0
 800a1f6:	d062      	beq.n	800a2be <__gethex+0x112>
 800a1f8:	4623      	mov	r3, r4
 800a1fa:	7818      	ldrb	r0, [r3, #0]
 800a1fc:	2830      	cmp	r0, #48	@ 0x30
 800a1fe:	4699      	mov	r9, r3
 800a200:	f103 0301 	add.w	r3, r3, #1
 800a204:	d0f9      	beq.n	800a1fa <__gethex+0x4e>
 800a206:	f7ff ffbb 	bl	800a180 <__hexdig_fun>
 800a20a:	fab0 f580 	clz	r5, r0
 800a20e:	096d      	lsrs	r5, r5, #5
 800a210:	f04f 0b01 	mov.w	fp, #1
 800a214:	464a      	mov	r2, r9
 800a216:	4616      	mov	r6, r2
 800a218:	3201      	adds	r2, #1
 800a21a:	7830      	ldrb	r0, [r6, #0]
 800a21c:	f7ff ffb0 	bl	800a180 <__hexdig_fun>
 800a220:	2800      	cmp	r0, #0
 800a222:	d1f8      	bne.n	800a216 <__gethex+0x6a>
 800a224:	498d      	ldr	r1, [pc, #564]	@ (800a45c <__gethex+0x2b0>)
 800a226:	2201      	movs	r2, #1
 800a228:	4630      	mov	r0, r6
 800a22a:	f7ff fed9 	bl	8009fe0 <strncmp>
 800a22e:	2800      	cmp	r0, #0
 800a230:	d13f      	bne.n	800a2b2 <__gethex+0x106>
 800a232:	b944      	cbnz	r4, 800a246 <__gethex+0x9a>
 800a234:	1c74      	adds	r4, r6, #1
 800a236:	4622      	mov	r2, r4
 800a238:	4616      	mov	r6, r2
 800a23a:	3201      	adds	r2, #1
 800a23c:	7830      	ldrb	r0, [r6, #0]
 800a23e:	f7ff ff9f 	bl	800a180 <__hexdig_fun>
 800a242:	2800      	cmp	r0, #0
 800a244:	d1f8      	bne.n	800a238 <__gethex+0x8c>
 800a246:	1ba4      	subs	r4, r4, r6
 800a248:	00a7      	lsls	r7, r4, #2
 800a24a:	7833      	ldrb	r3, [r6, #0]
 800a24c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a250:	2b50      	cmp	r3, #80	@ 0x50
 800a252:	d13e      	bne.n	800a2d2 <__gethex+0x126>
 800a254:	7873      	ldrb	r3, [r6, #1]
 800a256:	2b2b      	cmp	r3, #43	@ 0x2b
 800a258:	d033      	beq.n	800a2c2 <__gethex+0x116>
 800a25a:	2b2d      	cmp	r3, #45	@ 0x2d
 800a25c:	d034      	beq.n	800a2c8 <__gethex+0x11c>
 800a25e:	1c71      	adds	r1, r6, #1
 800a260:	2400      	movs	r4, #0
 800a262:	7808      	ldrb	r0, [r1, #0]
 800a264:	f7ff ff8c 	bl	800a180 <__hexdig_fun>
 800a268:	1e43      	subs	r3, r0, #1
 800a26a:	b2db      	uxtb	r3, r3
 800a26c:	2b18      	cmp	r3, #24
 800a26e:	d830      	bhi.n	800a2d2 <__gethex+0x126>
 800a270:	f1a0 0210 	sub.w	r2, r0, #16
 800a274:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a278:	f7ff ff82 	bl	800a180 <__hexdig_fun>
 800a27c:	f100 3cff 	add.w	ip, r0, #4294967295
 800a280:	fa5f fc8c 	uxtb.w	ip, ip
 800a284:	f1bc 0f18 	cmp.w	ip, #24
 800a288:	f04f 030a 	mov.w	r3, #10
 800a28c:	d91e      	bls.n	800a2cc <__gethex+0x120>
 800a28e:	b104      	cbz	r4, 800a292 <__gethex+0xe6>
 800a290:	4252      	negs	r2, r2
 800a292:	4417      	add	r7, r2
 800a294:	f8ca 1000 	str.w	r1, [sl]
 800a298:	b1ed      	cbz	r5, 800a2d6 <__gethex+0x12a>
 800a29a:	f1bb 0f00 	cmp.w	fp, #0
 800a29e:	bf0c      	ite	eq
 800a2a0:	2506      	moveq	r5, #6
 800a2a2:	2500      	movne	r5, #0
 800a2a4:	4628      	mov	r0, r5
 800a2a6:	b005      	add	sp, #20
 800a2a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2ac:	2500      	movs	r5, #0
 800a2ae:	462c      	mov	r4, r5
 800a2b0:	e7b0      	b.n	800a214 <__gethex+0x68>
 800a2b2:	2c00      	cmp	r4, #0
 800a2b4:	d1c7      	bne.n	800a246 <__gethex+0x9a>
 800a2b6:	4627      	mov	r7, r4
 800a2b8:	e7c7      	b.n	800a24a <__gethex+0x9e>
 800a2ba:	464e      	mov	r6, r9
 800a2bc:	462f      	mov	r7, r5
 800a2be:	2501      	movs	r5, #1
 800a2c0:	e7c3      	b.n	800a24a <__gethex+0x9e>
 800a2c2:	2400      	movs	r4, #0
 800a2c4:	1cb1      	adds	r1, r6, #2
 800a2c6:	e7cc      	b.n	800a262 <__gethex+0xb6>
 800a2c8:	2401      	movs	r4, #1
 800a2ca:	e7fb      	b.n	800a2c4 <__gethex+0x118>
 800a2cc:	fb03 0002 	mla	r0, r3, r2, r0
 800a2d0:	e7ce      	b.n	800a270 <__gethex+0xc4>
 800a2d2:	4631      	mov	r1, r6
 800a2d4:	e7de      	b.n	800a294 <__gethex+0xe8>
 800a2d6:	eba6 0309 	sub.w	r3, r6, r9
 800a2da:	3b01      	subs	r3, #1
 800a2dc:	4629      	mov	r1, r5
 800a2de:	2b07      	cmp	r3, #7
 800a2e0:	dc0a      	bgt.n	800a2f8 <__gethex+0x14c>
 800a2e2:	9801      	ldr	r0, [sp, #4]
 800a2e4:	f7fd ff84 	bl	80081f0 <_Balloc>
 800a2e8:	4604      	mov	r4, r0
 800a2ea:	b940      	cbnz	r0, 800a2fe <__gethex+0x152>
 800a2ec:	4b5c      	ldr	r3, [pc, #368]	@ (800a460 <__gethex+0x2b4>)
 800a2ee:	4602      	mov	r2, r0
 800a2f0:	21e4      	movs	r1, #228	@ 0xe4
 800a2f2:	485c      	ldr	r0, [pc, #368]	@ (800a464 <__gethex+0x2b8>)
 800a2f4:	f7ff fec0 	bl	800a078 <__assert_func>
 800a2f8:	3101      	adds	r1, #1
 800a2fa:	105b      	asrs	r3, r3, #1
 800a2fc:	e7ef      	b.n	800a2de <__gethex+0x132>
 800a2fe:	f100 0a14 	add.w	sl, r0, #20
 800a302:	2300      	movs	r3, #0
 800a304:	4655      	mov	r5, sl
 800a306:	469b      	mov	fp, r3
 800a308:	45b1      	cmp	r9, r6
 800a30a:	d337      	bcc.n	800a37c <__gethex+0x1d0>
 800a30c:	f845 bb04 	str.w	fp, [r5], #4
 800a310:	eba5 050a 	sub.w	r5, r5, sl
 800a314:	10ad      	asrs	r5, r5, #2
 800a316:	6125      	str	r5, [r4, #16]
 800a318:	4658      	mov	r0, fp
 800a31a:	f7fe f85b 	bl	80083d4 <__hi0bits>
 800a31e:	016d      	lsls	r5, r5, #5
 800a320:	f8d8 6000 	ldr.w	r6, [r8]
 800a324:	1a2d      	subs	r5, r5, r0
 800a326:	42b5      	cmp	r5, r6
 800a328:	dd54      	ble.n	800a3d4 <__gethex+0x228>
 800a32a:	1bad      	subs	r5, r5, r6
 800a32c:	4629      	mov	r1, r5
 800a32e:	4620      	mov	r0, r4
 800a330:	f7fe fbef 	bl	8008b12 <__any_on>
 800a334:	4681      	mov	r9, r0
 800a336:	b178      	cbz	r0, 800a358 <__gethex+0x1ac>
 800a338:	1e6b      	subs	r3, r5, #1
 800a33a:	1159      	asrs	r1, r3, #5
 800a33c:	f003 021f 	and.w	r2, r3, #31
 800a340:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a344:	f04f 0901 	mov.w	r9, #1
 800a348:	fa09 f202 	lsl.w	r2, r9, r2
 800a34c:	420a      	tst	r2, r1
 800a34e:	d003      	beq.n	800a358 <__gethex+0x1ac>
 800a350:	454b      	cmp	r3, r9
 800a352:	dc36      	bgt.n	800a3c2 <__gethex+0x216>
 800a354:	f04f 0902 	mov.w	r9, #2
 800a358:	4629      	mov	r1, r5
 800a35a:	4620      	mov	r0, r4
 800a35c:	f7ff febe 	bl	800a0dc <rshift>
 800a360:	442f      	add	r7, r5
 800a362:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a366:	42bb      	cmp	r3, r7
 800a368:	da42      	bge.n	800a3f0 <__gethex+0x244>
 800a36a:	9801      	ldr	r0, [sp, #4]
 800a36c:	4621      	mov	r1, r4
 800a36e:	f7fd ff7f 	bl	8008270 <_Bfree>
 800a372:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a374:	2300      	movs	r3, #0
 800a376:	6013      	str	r3, [r2, #0]
 800a378:	25a3      	movs	r5, #163	@ 0xa3
 800a37a:	e793      	b.n	800a2a4 <__gethex+0xf8>
 800a37c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a380:	2a2e      	cmp	r2, #46	@ 0x2e
 800a382:	d012      	beq.n	800a3aa <__gethex+0x1fe>
 800a384:	2b20      	cmp	r3, #32
 800a386:	d104      	bne.n	800a392 <__gethex+0x1e6>
 800a388:	f845 bb04 	str.w	fp, [r5], #4
 800a38c:	f04f 0b00 	mov.w	fp, #0
 800a390:	465b      	mov	r3, fp
 800a392:	7830      	ldrb	r0, [r6, #0]
 800a394:	9303      	str	r3, [sp, #12]
 800a396:	f7ff fef3 	bl	800a180 <__hexdig_fun>
 800a39a:	9b03      	ldr	r3, [sp, #12]
 800a39c:	f000 000f 	and.w	r0, r0, #15
 800a3a0:	4098      	lsls	r0, r3
 800a3a2:	ea4b 0b00 	orr.w	fp, fp, r0
 800a3a6:	3304      	adds	r3, #4
 800a3a8:	e7ae      	b.n	800a308 <__gethex+0x15c>
 800a3aa:	45b1      	cmp	r9, r6
 800a3ac:	d8ea      	bhi.n	800a384 <__gethex+0x1d8>
 800a3ae:	492b      	ldr	r1, [pc, #172]	@ (800a45c <__gethex+0x2b0>)
 800a3b0:	9303      	str	r3, [sp, #12]
 800a3b2:	2201      	movs	r2, #1
 800a3b4:	4630      	mov	r0, r6
 800a3b6:	f7ff fe13 	bl	8009fe0 <strncmp>
 800a3ba:	9b03      	ldr	r3, [sp, #12]
 800a3bc:	2800      	cmp	r0, #0
 800a3be:	d1e1      	bne.n	800a384 <__gethex+0x1d8>
 800a3c0:	e7a2      	b.n	800a308 <__gethex+0x15c>
 800a3c2:	1ea9      	subs	r1, r5, #2
 800a3c4:	4620      	mov	r0, r4
 800a3c6:	f7fe fba4 	bl	8008b12 <__any_on>
 800a3ca:	2800      	cmp	r0, #0
 800a3cc:	d0c2      	beq.n	800a354 <__gethex+0x1a8>
 800a3ce:	f04f 0903 	mov.w	r9, #3
 800a3d2:	e7c1      	b.n	800a358 <__gethex+0x1ac>
 800a3d4:	da09      	bge.n	800a3ea <__gethex+0x23e>
 800a3d6:	1b75      	subs	r5, r6, r5
 800a3d8:	4621      	mov	r1, r4
 800a3da:	9801      	ldr	r0, [sp, #4]
 800a3dc:	462a      	mov	r2, r5
 800a3de:	f7fe f95f 	bl	80086a0 <__lshift>
 800a3e2:	1b7f      	subs	r7, r7, r5
 800a3e4:	4604      	mov	r4, r0
 800a3e6:	f100 0a14 	add.w	sl, r0, #20
 800a3ea:	f04f 0900 	mov.w	r9, #0
 800a3ee:	e7b8      	b.n	800a362 <__gethex+0x1b6>
 800a3f0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a3f4:	42bd      	cmp	r5, r7
 800a3f6:	dd6f      	ble.n	800a4d8 <__gethex+0x32c>
 800a3f8:	1bed      	subs	r5, r5, r7
 800a3fa:	42ae      	cmp	r6, r5
 800a3fc:	dc34      	bgt.n	800a468 <__gethex+0x2bc>
 800a3fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a402:	2b02      	cmp	r3, #2
 800a404:	d022      	beq.n	800a44c <__gethex+0x2a0>
 800a406:	2b03      	cmp	r3, #3
 800a408:	d024      	beq.n	800a454 <__gethex+0x2a8>
 800a40a:	2b01      	cmp	r3, #1
 800a40c:	d115      	bne.n	800a43a <__gethex+0x28e>
 800a40e:	42ae      	cmp	r6, r5
 800a410:	d113      	bne.n	800a43a <__gethex+0x28e>
 800a412:	2e01      	cmp	r6, #1
 800a414:	d10b      	bne.n	800a42e <__gethex+0x282>
 800a416:	9a02      	ldr	r2, [sp, #8]
 800a418:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a41c:	6013      	str	r3, [r2, #0]
 800a41e:	2301      	movs	r3, #1
 800a420:	6123      	str	r3, [r4, #16]
 800a422:	f8ca 3000 	str.w	r3, [sl]
 800a426:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a428:	2562      	movs	r5, #98	@ 0x62
 800a42a:	601c      	str	r4, [r3, #0]
 800a42c:	e73a      	b.n	800a2a4 <__gethex+0xf8>
 800a42e:	1e71      	subs	r1, r6, #1
 800a430:	4620      	mov	r0, r4
 800a432:	f7fe fb6e 	bl	8008b12 <__any_on>
 800a436:	2800      	cmp	r0, #0
 800a438:	d1ed      	bne.n	800a416 <__gethex+0x26a>
 800a43a:	9801      	ldr	r0, [sp, #4]
 800a43c:	4621      	mov	r1, r4
 800a43e:	f7fd ff17 	bl	8008270 <_Bfree>
 800a442:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a444:	2300      	movs	r3, #0
 800a446:	6013      	str	r3, [r2, #0]
 800a448:	2550      	movs	r5, #80	@ 0x50
 800a44a:	e72b      	b.n	800a2a4 <__gethex+0xf8>
 800a44c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d1f3      	bne.n	800a43a <__gethex+0x28e>
 800a452:	e7e0      	b.n	800a416 <__gethex+0x26a>
 800a454:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a456:	2b00      	cmp	r3, #0
 800a458:	d1dd      	bne.n	800a416 <__gethex+0x26a>
 800a45a:	e7ee      	b.n	800a43a <__gethex+0x28e>
 800a45c:	0800ac38 	.word	0x0800ac38
 800a460:	0800aad1 	.word	0x0800aad1
 800a464:	0800ade6 	.word	0x0800ade6
 800a468:	1e6f      	subs	r7, r5, #1
 800a46a:	f1b9 0f00 	cmp.w	r9, #0
 800a46e:	d130      	bne.n	800a4d2 <__gethex+0x326>
 800a470:	b127      	cbz	r7, 800a47c <__gethex+0x2d0>
 800a472:	4639      	mov	r1, r7
 800a474:	4620      	mov	r0, r4
 800a476:	f7fe fb4c 	bl	8008b12 <__any_on>
 800a47a:	4681      	mov	r9, r0
 800a47c:	117a      	asrs	r2, r7, #5
 800a47e:	2301      	movs	r3, #1
 800a480:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a484:	f007 071f 	and.w	r7, r7, #31
 800a488:	40bb      	lsls	r3, r7
 800a48a:	4213      	tst	r3, r2
 800a48c:	4629      	mov	r1, r5
 800a48e:	4620      	mov	r0, r4
 800a490:	bf18      	it	ne
 800a492:	f049 0902 	orrne.w	r9, r9, #2
 800a496:	f7ff fe21 	bl	800a0dc <rshift>
 800a49a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a49e:	1b76      	subs	r6, r6, r5
 800a4a0:	2502      	movs	r5, #2
 800a4a2:	f1b9 0f00 	cmp.w	r9, #0
 800a4a6:	d047      	beq.n	800a538 <__gethex+0x38c>
 800a4a8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a4ac:	2b02      	cmp	r3, #2
 800a4ae:	d015      	beq.n	800a4dc <__gethex+0x330>
 800a4b0:	2b03      	cmp	r3, #3
 800a4b2:	d017      	beq.n	800a4e4 <__gethex+0x338>
 800a4b4:	2b01      	cmp	r3, #1
 800a4b6:	d109      	bne.n	800a4cc <__gethex+0x320>
 800a4b8:	f019 0f02 	tst.w	r9, #2
 800a4bc:	d006      	beq.n	800a4cc <__gethex+0x320>
 800a4be:	f8da 3000 	ldr.w	r3, [sl]
 800a4c2:	ea49 0903 	orr.w	r9, r9, r3
 800a4c6:	f019 0f01 	tst.w	r9, #1
 800a4ca:	d10e      	bne.n	800a4ea <__gethex+0x33e>
 800a4cc:	f045 0510 	orr.w	r5, r5, #16
 800a4d0:	e032      	b.n	800a538 <__gethex+0x38c>
 800a4d2:	f04f 0901 	mov.w	r9, #1
 800a4d6:	e7d1      	b.n	800a47c <__gethex+0x2d0>
 800a4d8:	2501      	movs	r5, #1
 800a4da:	e7e2      	b.n	800a4a2 <__gethex+0x2f6>
 800a4dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a4de:	f1c3 0301 	rsb	r3, r3, #1
 800a4e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a4e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d0f0      	beq.n	800a4cc <__gethex+0x320>
 800a4ea:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a4ee:	f104 0314 	add.w	r3, r4, #20
 800a4f2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a4f6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a4fa:	f04f 0c00 	mov.w	ip, #0
 800a4fe:	4618      	mov	r0, r3
 800a500:	f853 2b04 	ldr.w	r2, [r3], #4
 800a504:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a508:	d01b      	beq.n	800a542 <__gethex+0x396>
 800a50a:	3201      	adds	r2, #1
 800a50c:	6002      	str	r2, [r0, #0]
 800a50e:	2d02      	cmp	r5, #2
 800a510:	f104 0314 	add.w	r3, r4, #20
 800a514:	d13c      	bne.n	800a590 <__gethex+0x3e4>
 800a516:	f8d8 2000 	ldr.w	r2, [r8]
 800a51a:	3a01      	subs	r2, #1
 800a51c:	42b2      	cmp	r2, r6
 800a51e:	d109      	bne.n	800a534 <__gethex+0x388>
 800a520:	1171      	asrs	r1, r6, #5
 800a522:	2201      	movs	r2, #1
 800a524:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a528:	f006 061f 	and.w	r6, r6, #31
 800a52c:	fa02 f606 	lsl.w	r6, r2, r6
 800a530:	421e      	tst	r6, r3
 800a532:	d13a      	bne.n	800a5aa <__gethex+0x3fe>
 800a534:	f045 0520 	orr.w	r5, r5, #32
 800a538:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a53a:	601c      	str	r4, [r3, #0]
 800a53c:	9b02      	ldr	r3, [sp, #8]
 800a53e:	601f      	str	r7, [r3, #0]
 800a540:	e6b0      	b.n	800a2a4 <__gethex+0xf8>
 800a542:	4299      	cmp	r1, r3
 800a544:	f843 cc04 	str.w	ip, [r3, #-4]
 800a548:	d8d9      	bhi.n	800a4fe <__gethex+0x352>
 800a54a:	68a3      	ldr	r3, [r4, #8]
 800a54c:	459b      	cmp	fp, r3
 800a54e:	db17      	blt.n	800a580 <__gethex+0x3d4>
 800a550:	6861      	ldr	r1, [r4, #4]
 800a552:	9801      	ldr	r0, [sp, #4]
 800a554:	3101      	adds	r1, #1
 800a556:	f7fd fe4b 	bl	80081f0 <_Balloc>
 800a55a:	4681      	mov	r9, r0
 800a55c:	b918      	cbnz	r0, 800a566 <__gethex+0x3ba>
 800a55e:	4b1a      	ldr	r3, [pc, #104]	@ (800a5c8 <__gethex+0x41c>)
 800a560:	4602      	mov	r2, r0
 800a562:	2184      	movs	r1, #132	@ 0x84
 800a564:	e6c5      	b.n	800a2f2 <__gethex+0x146>
 800a566:	6922      	ldr	r2, [r4, #16]
 800a568:	3202      	adds	r2, #2
 800a56a:	f104 010c 	add.w	r1, r4, #12
 800a56e:	0092      	lsls	r2, r2, #2
 800a570:	300c      	adds	r0, #12
 800a572:	f7fc feda 	bl	800732a <memcpy>
 800a576:	4621      	mov	r1, r4
 800a578:	9801      	ldr	r0, [sp, #4]
 800a57a:	f7fd fe79 	bl	8008270 <_Bfree>
 800a57e:	464c      	mov	r4, r9
 800a580:	6923      	ldr	r3, [r4, #16]
 800a582:	1c5a      	adds	r2, r3, #1
 800a584:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a588:	6122      	str	r2, [r4, #16]
 800a58a:	2201      	movs	r2, #1
 800a58c:	615a      	str	r2, [r3, #20]
 800a58e:	e7be      	b.n	800a50e <__gethex+0x362>
 800a590:	6922      	ldr	r2, [r4, #16]
 800a592:	455a      	cmp	r2, fp
 800a594:	dd0b      	ble.n	800a5ae <__gethex+0x402>
 800a596:	2101      	movs	r1, #1
 800a598:	4620      	mov	r0, r4
 800a59a:	f7ff fd9f 	bl	800a0dc <rshift>
 800a59e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a5a2:	3701      	adds	r7, #1
 800a5a4:	42bb      	cmp	r3, r7
 800a5a6:	f6ff aee0 	blt.w	800a36a <__gethex+0x1be>
 800a5aa:	2501      	movs	r5, #1
 800a5ac:	e7c2      	b.n	800a534 <__gethex+0x388>
 800a5ae:	f016 061f 	ands.w	r6, r6, #31
 800a5b2:	d0fa      	beq.n	800a5aa <__gethex+0x3fe>
 800a5b4:	4453      	add	r3, sl
 800a5b6:	f1c6 0620 	rsb	r6, r6, #32
 800a5ba:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a5be:	f7fd ff09 	bl	80083d4 <__hi0bits>
 800a5c2:	42b0      	cmp	r0, r6
 800a5c4:	dbe7      	blt.n	800a596 <__gethex+0x3ea>
 800a5c6:	e7f0      	b.n	800a5aa <__gethex+0x3fe>
 800a5c8:	0800aad1 	.word	0x0800aad1

0800a5cc <L_shift>:
 800a5cc:	f1c2 0208 	rsb	r2, r2, #8
 800a5d0:	0092      	lsls	r2, r2, #2
 800a5d2:	b570      	push	{r4, r5, r6, lr}
 800a5d4:	f1c2 0620 	rsb	r6, r2, #32
 800a5d8:	6843      	ldr	r3, [r0, #4]
 800a5da:	6804      	ldr	r4, [r0, #0]
 800a5dc:	fa03 f506 	lsl.w	r5, r3, r6
 800a5e0:	432c      	orrs	r4, r5
 800a5e2:	40d3      	lsrs	r3, r2
 800a5e4:	6004      	str	r4, [r0, #0]
 800a5e6:	f840 3f04 	str.w	r3, [r0, #4]!
 800a5ea:	4288      	cmp	r0, r1
 800a5ec:	d3f4      	bcc.n	800a5d8 <L_shift+0xc>
 800a5ee:	bd70      	pop	{r4, r5, r6, pc}

0800a5f0 <__match>:
 800a5f0:	b530      	push	{r4, r5, lr}
 800a5f2:	6803      	ldr	r3, [r0, #0]
 800a5f4:	3301      	adds	r3, #1
 800a5f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5fa:	b914      	cbnz	r4, 800a602 <__match+0x12>
 800a5fc:	6003      	str	r3, [r0, #0]
 800a5fe:	2001      	movs	r0, #1
 800a600:	bd30      	pop	{r4, r5, pc}
 800a602:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a606:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a60a:	2d19      	cmp	r5, #25
 800a60c:	bf98      	it	ls
 800a60e:	3220      	addls	r2, #32
 800a610:	42a2      	cmp	r2, r4
 800a612:	d0f0      	beq.n	800a5f6 <__match+0x6>
 800a614:	2000      	movs	r0, #0
 800a616:	e7f3      	b.n	800a600 <__match+0x10>

0800a618 <__hexnan>:
 800a618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a61c:	680b      	ldr	r3, [r1, #0]
 800a61e:	6801      	ldr	r1, [r0, #0]
 800a620:	115e      	asrs	r6, r3, #5
 800a622:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a626:	f013 031f 	ands.w	r3, r3, #31
 800a62a:	b087      	sub	sp, #28
 800a62c:	bf18      	it	ne
 800a62e:	3604      	addne	r6, #4
 800a630:	2500      	movs	r5, #0
 800a632:	1f37      	subs	r7, r6, #4
 800a634:	4682      	mov	sl, r0
 800a636:	4690      	mov	r8, r2
 800a638:	9301      	str	r3, [sp, #4]
 800a63a:	f846 5c04 	str.w	r5, [r6, #-4]
 800a63e:	46b9      	mov	r9, r7
 800a640:	463c      	mov	r4, r7
 800a642:	9502      	str	r5, [sp, #8]
 800a644:	46ab      	mov	fp, r5
 800a646:	784a      	ldrb	r2, [r1, #1]
 800a648:	1c4b      	adds	r3, r1, #1
 800a64a:	9303      	str	r3, [sp, #12]
 800a64c:	b342      	cbz	r2, 800a6a0 <__hexnan+0x88>
 800a64e:	4610      	mov	r0, r2
 800a650:	9105      	str	r1, [sp, #20]
 800a652:	9204      	str	r2, [sp, #16]
 800a654:	f7ff fd94 	bl	800a180 <__hexdig_fun>
 800a658:	2800      	cmp	r0, #0
 800a65a:	d151      	bne.n	800a700 <__hexnan+0xe8>
 800a65c:	9a04      	ldr	r2, [sp, #16]
 800a65e:	9905      	ldr	r1, [sp, #20]
 800a660:	2a20      	cmp	r2, #32
 800a662:	d818      	bhi.n	800a696 <__hexnan+0x7e>
 800a664:	9b02      	ldr	r3, [sp, #8]
 800a666:	459b      	cmp	fp, r3
 800a668:	dd13      	ble.n	800a692 <__hexnan+0x7a>
 800a66a:	454c      	cmp	r4, r9
 800a66c:	d206      	bcs.n	800a67c <__hexnan+0x64>
 800a66e:	2d07      	cmp	r5, #7
 800a670:	dc04      	bgt.n	800a67c <__hexnan+0x64>
 800a672:	462a      	mov	r2, r5
 800a674:	4649      	mov	r1, r9
 800a676:	4620      	mov	r0, r4
 800a678:	f7ff ffa8 	bl	800a5cc <L_shift>
 800a67c:	4544      	cmp	r4, r8
 800a67e:	d952      	bls.n	800a726 <__hexnan+0x10e>
 800a680:	2300      	movs	r3, #0
 800a682:	f1a4 0904 	sub.w	r9, r4, #4
 800a686:	f844 3c04 	str.w	r3, [r4, #-4]
 800a68a:	f8cd b008 	str.w	fp, [sp, #8]
 800a68e:	464c      	mov	r4, r9
 800a690:	461d      	mov	r5, r3
 800a692:	9903      	ldr	r1, [sp, #12]
 800a694:	e7d7      	b.n	800a646 <__hexnan+0x2e>
 800a696:	2a29      	cmp	r2, #41	@ 0x29
 800a698:	d157      	bne.n	800a74a <__hexnan+0x132>
 800a69a:	3102      	adds	r1, #2
 800a69c:	f8ca 1000 	str.w	r1, [sl]
 800a6a0:	f1bb 0f00 	cmp.w	fp, #0
 800a6a4:	d051      	beq.n	800a74a <__hexnan+0x132>
 800a6a6:	454c      	cmp	r4, r9
 800a6a8:	d206      	bcs.n	800a6b8 <__hexnan+0xa0>
 800a6aa:	2d07      	cmp	r5, #7
 800a6ac:	dc04      	bgt.n	800a6b8 <__hexnan+0xa0>
 800a6ae:	462a      	mov	r2, r5
 800a6b0:	4649      	mov	r1, r9
 800a6b2:	4620      	mov	r0, r4
 800a6b4:	f7ff ff8a 	bl	800a5cc <L_shift>
 800a6b8:	4544      	cmp	r4, r8
 800a6ba:	d936      	bls.n	800a72a <__hexnan+0x112>
 800a6bc:	f1a8 0204 	sub.w	r2, r8, #4
 800a6c0:	4623      	mov	r3, r4
 800a6c2:	f853 1b04 	ldr.w	r1, [r3], #4
 800a6c6:	f842 1f04 	str.w	r1, [r2, #4]!
 800a6ca:	429f      	cmp	r7, r3
 800a6cc:	d2f9      	bcs.n	800a6c2 <__hexnan+0xaa>
 800a6ce:	1b3b      	subs	r3, r7, r4
 800a6d0:	f023 0303 	bic.w	r3, r3, #3
 800a6d4:	3304      	adds	r3, #4
 800a6d6:	3401      	adds	r4, #1
 800a6d8:	3e03      	subs	r6, #3
 800a6da:	42b4      	cmp	r4, r6
 800a6dc:	bf88      	it	hi
 800a6de:	2304      	movhi	r3, #4
 800a6e0:	4443      	add	r3, r8
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	f843 2b04 	str.w	r2, [r3], #4
 800a6e8:	429f      	cmp	r7, r3
 800a6ea:	d2fb      	bcs.n	800a6e4 <__hexnan+0xcc>
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	b91b      	cbnz	r3, 800a6f8 <__hexnan+0xe0>
 800a6f0:	4547      	cmp	r7, r8
 800a6f2:	d128      	bne.n	800a746 <__hexnan+0x12e>
 800a6f4:	2301      	movs	r3, #1
 800a6f6:	603b      	str	r3, [r7, #0]
 800a6f8:	2005      	movs	r0, #5
 800a6fa:	b007      	add	sp, #28
 800a6fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a700:	3501      	adds	r5, #1
 800a702:	2d08      	cmp	r5, #8
 800a704:	f10b 0b01 	add.w	fp, fp, #1
 800a708:	dd06      	ble.n	800a718 <__hexnan+0x100>
 800a70a:	4544      	cmp	r4, r8
 800a70c:	d9c1      	bls.n	800a692 <__hexnan+0x7a>
 800a70e:	2300      	movs	r3, #0
 800a710:	f844 3c04 	str.w	r3, [r4, #-4]
 800a714:	2501      	movs	r5, #1
 800a716:	3c04      	subs	r4, #4
 800a718:	6822      	ldr	r2, [r4, #0]
 800a71a:	f000 000f 	and.w	r0, r0, #15
 800a71e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a722:	6020      	str	r0, [r4, #0]
 800a724:	e7b5      	b.n	800a692 <__hexnan+0x7a>
 800a726:	2508      	movs	r5, #8
 800a728:	e7b3      	b.n	800a692 <__hexnan+0x7a>
 800a72a:	9b01      	ldr	r3, [sp, #4]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d0dd      	beq.n	800a6ec <__hexnan+0xd4>
 800a730:	f1c3 0320 	rsb	r3, r3, #32
 800a734:	f04f 32ff 	mov.w	r2, #4294967295
 800a738:	40da      	lsrs	r2, r3
 800a73a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a73e:	4013      	ands	r3, r2
 800a740:	f846 3c04 	str.w	r3, [r6, #-4]
 800a744:	e7d2      	b.n	800a6ec <__hexnan+0xd4>
 800a746:	3f04      	subs	r7, #4
 800a748:	e7d0      	b.n	800a6ec <__hexnan+0xd4>
 800a74a:	2004      	movs	r0, #4
 800a74c:	e7d5      	b.n	800a6fa <__hexnan+0xe2>

0800a74e <__ascii_mbtowc>:
 800a74e:	b082      	sub	sp, #8
 800a750:	b901      	cbnz	r1, 800a754 <__ascii_mbtowc+0x6>
 800a752:	a901      	add	r1, sp, #4
 800a754:	b142      	cbz	r2, 800a768 <__ascii_mbtowc+0x1a>
 800a756:	b14b      	cbz	r3, 800a76c <__ascii_mbtowc+0x1e>
 800a758:	7813      	ldrb	r3, [r2, #0]
 800a75a:	600b      	str	r3, [r1, #0]
 800a75c:	7812      	ldrb	r2, [r2, #0]
 800a75e:	1e10      	subs	r0, r2, #0
 800a760:	bf18      	it	ne
 800a762:	2001      	movne	r0, #1
 800a764:	b002      	add	sp, #8
 800a766:	4770      	bx	lr
 800a768:	4610      	mov	r0, r2
 800a76a:	e7fb      	b.n	800a764 <__ascii_mbtowc+0x16>
 800a76c:	f06f 0001 	mvn.w	r0, #1
 800a770:	e7f8      	b.n	800a764 <__ascii_mbtowc+0x16>

0800a772 <_realloc_r>:
 800a772:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a776:	4680      	mov	r8, r0
 800a778:	4615      	mov	r5, r2
 800a77a:	460c      	mov	r4, r1
 800a77c:	b921      	cbnz	r1, 800a788 <_realloc_r+0x16>
 800a77e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a782:	4611      	mov	r1, r2
 800a784:	f7fd bca8 	b.w	80080d8 <_malloc_r>
 800a788:	b92a      	cbnz	r2, 800a796 <_realloc_r+0x24>
 800a78a:	f7fd fc31 	bl	8007ff0 <_free_r>
 800a78e:	2400      	movs	r4, #0
 800a790:	4620      	mov	r0, r4
 800a792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a796:	f000 f840 	bl	800a81a <_malloc_usable_size_r>
 800a79a:	4285      	cmp	r5, r0
 800a79c:	4606      	mov	r6, r0
 800a79e:	d802      	bhi.n	800a7a6 <_realloc_r+0x34>
 800a7a0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a7a4:	d8f4      	bhi.n	800a790 <_realloc_r+0x1e>
 800a7a6:	4629      	mov	r1, r5
 800a7a8:	4640      	mov	r0, r8
 800a7aa:	f7fd fc95 	bl	80080d8 <_malloc_r>
 800a7ae:	4607      	mov	r7, r0
 800a7b0:	2800      	cmp	r0, #0
 800a7b2:	d0ec      	beq.n	800a78e <_realloc_r+0x1c>
 800a7b4:	42b5      	cmp	r5, r6
 800a7b6:	462a      	mov	r2, r5
 800a7b8:	4621      	mov	r1, r4
 800a7ba:	bf28      	it	cs
 800a7bc:	4632      	movcs	r2, r6
 800a7be:	f7fc fdb4 	bl	800732a <memcpy>
 800a7c2:	4621      	mov	r1, r4
 800a7c4:	4640      	mov	r0, r8
 800a7c6:	f7fd fc13 	bl	8007ff0 <_free_r>
 800a7ca:	463c      	mov	r4, r7
 800a7cc:	e7e0      	b.n	800a790 <_realloc_r+0x1e>

0800a7ce <__ascii_wctomb>:
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	4608      	mov	r0, r1
 800a7d2:	b141      	cbz	r1, 800a7e6 <__ascii_wctomb+0x18>
 800a7d4:	2aff      	cmp	r2, #255	@ 0xff
 800a7d6:	d904      	bls.n	800a7e2 <__ascii_wctomb+0x14>
 800a7d8:	228a      	movs	r2, #138	@ 0x8a
 800a7da:	601a      	str	r2, [r3, #0]
 800a7dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a7e0:	4770      	bx	lr
 800a7e2:	700a      	strb	r2, [r1, #0]
 800a7e4:	2001      	movs	r0, #1
 800a7e6:	4770      	bx	lr

0800a7e8 <fiprintf>:
 800a7e8:	b40e      	push	{r1, r2, r3}
 800a7ea:	b503      	push	{r0, r1, lr}
 800a7ec:	4601      	mov	r1, r0
 800a7ee:	ab03      	add	r3, sp, #12
 800a7f0:	4805      	ldr	r0, [pc, #20]	@ (800a808 <fiprintf+0x20>)
 800a7f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7f6:	6800      	ldr	r0, [r0, #0]
 800a7f8:	9301      	str	r3, [sp, #4]
 800a7fa:	f7ff f9b1 	bl	8009b60 <_vfiprintf_r>
 800a7fe:	b002      	add	sp, #8
 800a800:	f85d eb04 	ldr.w	lr, [sp], #4
 800a804:	b003      	add	sp, #12
 800a806:	4770      	bx	lr
 800a808:	20000018 	.word	0x20000018

0800a80c <abort>:
 800a80c:	b508      	push	{r3, lr}
 800a80e:	2006      	movs	r0, #6
 800a810:	f000 f834 	bl	800a87c <raise>
 800a814:	2001      	movs	r0, #1
 800a816:	f7f7 fa81 	bl	8001d1c <_exit>

0800a81a <_malloc_usable_size_r>:
 800a81a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a81e:	1f18      	subs	r0, r3, #4
 800a820:	2b00      	cmp	r3, #0
 800a822:	bfbc      	itt	lt
 800a824:	580b      	ldrlt	r3, [r1, r0]
 800a826:	18c0      	addlt	r0, r0, r3
 800a828:	4770      	bx	lr

0800a82a <_raise_r>:
 800a82a:	291f      	cmp	r1, #31
 800a82c:	b538      	push	{r3, r4, r5, lr}
 800a82e:	4605      	mov	r5, r0
 800a830:	460c      	mov	r4, r1
 800a832:	d904      	bls.n	800a83e <_raise_r+0x14>
 800a834:	2316      	movs	r3, #22
 800a836:	6003      	str	r3, [r0, #0]
 800a838:	f04f 30ff 	mov.w	r0, #4294967295
 800a83c:	bd38      	pop	{r3, r4, r5, pc}
 800a83e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a840:	b112      	cbz	r2, 800a848 <_raise_r+0x1e>
 800a842:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a846:	b94b      	cbnz	r3, 800a85c <_raise_r+0x32>
 800a848:	4628      	mov	r0, r5
 800a84a:	f000 f831 	bl	800a8b0 <_getpid_r>
 800a84e:	4622      	mov	r2, r4
 800a850:	4601      	mov	r1, r0
 800a852:	4628      	mov	r0, r5
 800a854:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a858:	f000 b818 	b.w	800a88c <_kill_r>
 800a85c:	2b01      	cmp	r3, #1
 800a85e:	d00a      	beq.n	800a876 <_raise_r+0x4c>
 800a860:	1c59      	adds	r1, r3, #1
 800a862:	d103      	bne.n	800a86c <_raise_r+0x42>
 800a864:	2316      	movs	r3, #22
 800a866:	6003      	str	r3, [r0, #0]
 800a868:	2001      	movs	r0, #1
 800a86a:	e7e7      	b.n	800a83c <_raise_r+0x12>
 800a86c:	2100      	movs	r1, #0
 800a86e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a872:	4620      	mov	r0, r4
 800a874:	4798      	blx	r3
 800a876:	2000      	movs	r0, #0
 800a878:	e7e0      	b.n	800a83c <_raise_r+0x12>
	...

0800a87c <raise>:
 800a87c:	4b02      	ldr	r3, [pc, #8]	@ (800a888 <raise+0xc>)
 800a87e:	4601      	mov	r1, r0
 800a880:	6818      	ldr	r0, [r3, #0]
 800a882:	f7ff bfd2 	b.w	800a82a <_raise_r>
 800a886:	bf00      	nop
 800a888:	20000018 	.word	0x20000018

0800a88c <_kill_r>:
 800a88c:	b538      	push	{r3, r4, r5, lr}
 800a88e:	4d07      	ldr	r5, [pc, #28]	@ (800a8ac <_kill_r+0x20>)
 800a890:	2300      	movs	r3, #0
 800a892:	4604      	mov	r4, r0
 800a894:	4608      	mov	r0, r1
 800a896:	4611      	mov	r1, r2
 800a898:	602b      	str	r3, [r5, #0]
 800a89a:	f7f7 fa2f 	bl	8001cfc <_kill>
 800a89e:	1c43      	adds	r3, r0, #1
 800a8a0:	d102      	bne.n	800a8a8 <_kill_r+0x1c>
 800a8a2:	682b      	ldr	r3, [r5, #0]
 800a8a4:	b103      	cbz	r3, 800a8a8 <_kill_r+0x1c>
 800a8a6:	6023      	str	r3, [r4, #0]
 800a8a8:	bd38      	pop	{r3, r4, r5, pc}
 800a8aa:	bf00      	nop
 800a8ac:	200008fc 	.word	0x200008fc

0800a8b0 <_getpid_r>:
 800a8b0:	f7f7 ba1c 	b.w	8001cec <_getpid>

0800a8b4 <_init>:
 800a8b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8b6:	bf00      	nop
 800a8b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8ba:	bc08      	pop	{r3}
 800a8bc:	469e      	mov	lr, r3
 800a8be:	4770      	bx	lr

0800a8c0 <_fini>:
 800a8c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8c2:	bf00      	nop
 800a8c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8c6:	bc08      	pop	{r3}
 800a8c8:	469e      	mov	lr, r3
 800a8ca:	4770      	bx	lr
