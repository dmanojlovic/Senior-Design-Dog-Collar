
Smart Dog Collar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a96c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000f7b8  0800ab00  0800ab00  0000bb00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a2b8  0801a2b8  0001c1ec  2**0
                  CONTENTS
  4 .ARM          00000008  0801a2b8  0801a2b8  0001b2b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a2c0  0801a2c0  0001c1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a2c0  0801a2c0  0001b2c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801a2c4  0801a2c4  0001b2c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  0801a2c8  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000464  200001ec  0801a4b4  0001c1ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000650  0801a4b4  0001c650  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001c1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013638  00000000  00000000  0001c21c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d1e  00000000  00000000  0002f854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001220  00000000  00000000  00032578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00028924  00000000  00000000  00033798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00016401  00000000  00000000  0005c0bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000f7160  00000000  00000000  000724bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0016961d  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000dd7  00000000  00000000  00169660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006090  00000000  00000000  0016a438  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000094  00000000  00000000  001704c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800aae4 	.word	0x0800aae4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	0800aae4 	.word	0x0800aae4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000fec:	1d39      	adds	r1, r7, #4
 8000fee:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	4803      	ldr	r0, [pc, #12]	@ (8001004 <__io_putchar+0x20>)
 8000ff6:	f003 ffc9 	bl	8004f8c <HAL_UART_Transmit>
  return ch;
 8000ffa:	687b      	ldr	r3, [r7, #4]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20000348 	.word	0x20000348

08001008 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800100c:	f000 ffd9 	bl	8001fc2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001010:	f000 f84e 	bl	80010b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001014:	f000 f9bc 	bl	8001390 <MX_GPIO_Init>
  MX_DMA_Init();
 8001018:	f000 f99c 	bl	8001354 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800101c:	f000 f96a 	bl	80012f4 <MX_USART2_UART_Init>
  MX_DAC1_Init();
 8001020:	f000 f89a 	bl	8001158 <MX_DAC1_Init>
  MX_USART1_UART_Init();
 8001024:	f000 f936 	bl	8001294 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001028:	f000 f8e6 	bl	80011f8 <MX_TIM2_Init>
  MX_IWDG_Init();
 800102c:	f000 f8c6 	bl	80011bc <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */

  printf("Start of code\r\n");
 8001030:	481a      	ldr	r0, [pc, #104]	@ (800109c <main+0x94>)
 8001032:	f006 f8cb 	bl	80071cc <puts>

  bzero(serfifo, FIFOSIZE);
 8001036:	4b1a      	ldr	r3, [pc, #104]	@ (80010a0 <main+0x98>)
 8001038:	461a      	mov	r2, r3
 800103a:	2300      	movs	r3, #0
 800103c:	6013      	str	r3, [r2, #0]
 800103e:	6053      	str	r3, [r2, #4]
 8001040:	6093      	str	r3, [r2, #8]
 8001042:	60d3      	str	r3, [r2, #12]
  init_usart3();
 8001044:	f000 fa9a 	bl	800157c <init_usart3>
  enable_tty_interrupt();
 8001048:	f000 fb06 	bl	8001658 <enable_tty_interrupt>
  setup_lora();
 800104c:	f000 fa24 	bl	8001498 <setup_lora>

  init_tim7();
 8001050:	f000 fcde 	bl	8001a10 <init_tim7>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 8001054:	2200      	movs	r2, #0
 8001056:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800105a:	4812      	ldr	r0, [pc, #72]	@ (80010a4 <main+0x9c>)
 800105c:	f002 f83a 	bl	80030d4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 8001060:	2200      	movs	r2, #0
 8001062:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001066:	480f      	ldr	r0, [pc, #60]	@ (80010a4 <main+0x9c>)
 8001068:	f002 f834 	bl	80030d4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 800106c:	2200      	movs	r2, #0
 800106e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001072:	480c      	ldr	r0, [pc, #48]	@ (80010a4 <main+0x9c>)
 8001074:	f002 f82e 	bl	80030d4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 8001078:	2200      	movs	r2, #0
 800107a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800107e:	4809      	ldr	r0, [pc, #36]	@ (80010a4 <main+0x9c>)
 8001080:	f002 f828 	bl	80030d4 <HAL_GPIO_WritePin>

  HAL_TIM_Base_Start_IT(&htim2);
 8001084:	4808      	ldr	r0, [pc, #32]	@ (80010a8 <main+0xa0>)
 8001086:	f003 fc31 	bl	80048ec <HAL_TIM_Base_Start_IT>
    // while(!(USART3->ISR & USART_ISR_TXE)) { }
    // USART3->TDR = c;

    // HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint8_t*)stopCommand, 18200, DAC_ALIGN_8B_R);
    // HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
    HAL_Delay(1000);
 800108a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800108e:	f001 f80d 	bl	80020ac <HAL_Delay>
    HAL_IWDG_Refresh(&hiwdg);
 8001092:	4806      	ldr	r0, [pc, #24]	@ (80010ac <main+0xa4>)
 8001094:	f002 f8a1 	bl	80031da <HAL_IWDG_Refresh>
    HAL_Delay(1000);
 8001098:	bf00      	nop
 800109a:	e7f6      	b.n	800108a <main+0x82>
 800109c:	0800ab00 	.word	0x0800ab00
 80010a0:	200003d0 	.word	0x200003d0
 80010a4:	48000400 	.word	0x48000400
 80010a8:	20000274 	.word	0x20000274
 80010ac:	20000264 	.word	0x20000264

080010b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b096      	sub	sp, #88	@ 0x58
 80010b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010b6:	f107 0314 	add.w	r3, r7, #20
 80010ba:	2244      	movs	r2, #68	@ 0x44
 80010bc:	2100      	movs	r1, #0
 80010be:	4618      	mov	r0, r3
 80010c0:	f006 f984 	bl	80073cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c4:	463b      	mov	r3, r7
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]
 80010ce:	60da      	str	r2, [r3, #12]
 80010d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010d2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80010d6:	f002 f89f 	bl	8003218 <HAL_PWREx_ControlVoltageScaling>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80010e0:	f000 fccc 	bl	8001a7c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 80010e4:	2318      	movs	r3, #24
 80010e6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80010e8:	2301      	movs	r3, #1
 80010ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80010ec:	2301      	movs	r3, #1
 80010ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80010f4:	2360      	movs	r3, #96	@ 0x60
 80010f6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010f8:	2302      	movs	r3, #2
 80010fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80010fc:	2301      	movs	r3, #1
 80010fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001100:	2301      	movs	r3, #1
 8001102:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8001104:	2314      	movs	r3, #20
 8001106:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001108:	2307      	movs	r3, #7
 800110a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800110c:	2302      	movs	r3, #2
 800110e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001110:	2302      	movs	r3, #2
 8001112:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	4618      	mov	r0, r3
 800111a:	f002 f8d3 	bl	80032c4 <HAL_RCC_OscConfig>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001124:	f000 fcaa 	bl	8001a7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001128:	230f      	movs	r3, #15
 800112a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800112c:	2303      	movs	r3, #3
 800112e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001130:	2300      	movs	r3, #0
 8001132:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001134:	2300      	movs	r3, #0
 8001136:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001138:	2300      	movs	r3, #0
 800113a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800113c:	463b      	mov	r3, r7
 800113e:	2102      	movs	r1, #2
 8001140:	4618      	mov	r0, r3
 8001142:	f002 fc9b 	bl	8003a7c <HAL_RCC_ClockConfig>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800114c:	f000 fc96 	bl	8001a7c <Error_Handler>
  }
}
 8001150:	bf00      	nop
 8001152:	3758      	adds	r7, #88	@ 0x58
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b08a      	sub	sp, #40	@ 0x28
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800115e:	1d3b      	adds	r3, r7, #4
 8001160:	2224      	movs	r2, #36	@ 0x24
 8001162:	2100      	movs	r1, #0
 8001164:	4618      	mov	r0, r3
 8001166:	f006 f931 	bl	80073cc <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800116a:	4b12      	ldr	r3, [pc, #72]	@ (80011b4 <MX_DAC1_Init+0x5c>)
 800116c:	4a12      	ldr	r2, [pc, #72]	@ (80011b8 <MX_DAC1_Init+0x60>)
 800116e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001170:	4810      	ldr	r0, [pc, #64]	@ (80011b4 <MX_DAC1_Init+0x5c>)
 8001172:	f001 f8d0 	bl	8002316 <HAL_DAC_Init>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800117c:	f000 fc7e 	bl	8001a7c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001180:	2300      	movs	r3, #0
 8001182:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001184:	2324      	movs	r3, #36	@ 0x24
 8001186:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001188:	2300      	movs	r3, #0
 800118a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800118c:	2300      	movs	r3, #0
 800118e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001194:	1d3b      	adds	r3, r7, #4
 8001196:	2200      	movs	r2, #0
 8001198:	4619      	mov	r1, r3
 800119a:	4806      	ldr	r0, [pc, #24]	@ (80011b4 <MX_DAC1_Init+0x5c>)
 800119c:	f001 f9c8 	bl	8002530 <HAL_DAC_ConfigChannel>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80011a6:	f000 fc69 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80011aa:	bf00      	nop
 80011ac:	3728      	adds	r7, #40	@ 0x28
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20000208 	.word	0x20000208
 80011b8:	40007400 	.word	0x40007400

080011bc <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80011c0:	4b0b      	ldr	r3, [pc, #44]	@ (80011f0 <MX_IWDG_Init+0x34>)
 80011c2:	4a0c      	ldr	r2, [pc, #48]	@ (80011f4 <MX_IWDG_Init+0x38>)
 80011c4:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 80011c6:	4b0a      	ldr	r3, [pc, #40]	@ (80011f0 <MX_IWDG_Init+0x34>)
 80011c8:	2206      	movs	r2, #6
 80011ca:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80011cc:	4b08      	ldr	r3, [pc, #32]	@ (80011f0 <MX_IWDG_Init+0x34>)
 80011ce:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80011d2:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 1875;
 80011d4:	4b06      	ldr	r3, [pc, #24]	@ (80011f0 <MX_IWDG_Init+0x34>)
 80011d6:	f240 7253 	movw	r2, #1875	@ 0x753
 80011da:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80011dc:	4804      	ldr	r0, [pc, #16]	@ (80011f0 <MX_IWDG_Init+0x34>)
 80011de:	f001 ffab 	bl	8003138 <HAL_IWDG_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 80011e8:	f000 fc48 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80011ec:	bf00      	nop
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000264 	.word	0x20000264
 80011f4:	40003000 	.word	0x40003000

080011f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b088      	sub	sp, #32
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011fe:	f107 0310 	add.w	r3, r7, #16
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]
 800120a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800120c:	1d3b      	adds	r3, r7, #4
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001216:	4b1e      	ldr	r3, [pc, #120]	@ (8001290 <MX_TIM2_Init+0x98>)
 8001218:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800121c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800121e:	4b1c      	ldr	r3, [pc, #112]	@ (8001290 <MX_TIM2_Init+0x98>)
 8001220:	2200      	movs	r2, #0
 8001222:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001224:	4b1a      	ldr	r3, [pc, #104]	@ (8001290 <MX_TIM2_Init+0x98>)
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1250;
 800122a:	4b19      	ldr	r3, [pc, #100]	@ (8001290 <MX_TIM2_Init+0x98>)
 800122c:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 8001230:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001232:	4b17      	ldr	r3, [pc, #92]	@ (8001290 <MX_TIM2_Init+0x98>)
 8001234:	2200      	movs	r2, #0
 8001236:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001238:	4b15      	ldr	r3, [pc, #84]	@ (8001290 <MX_TIM2_Init+0x98>)
 800123a:	2200      	movs	r2, #0
 800123c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800123e:	4814      	ldr	r0, [pc, #80]	@ (8001290 <MX_TIM2_Init+0x98>)
 8001240:	f003 fafc 	bl	800483c <HAL_TIM_Base_Init>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800124a:	f000 fc17 	bl	8001a7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800124e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001252:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001254:	f107 0310 	add.w	r3, r7, #16
 8001258:	4619      	mov	r1, r3
 800125a:	480d      	ldr	r0, [pc, #52]	@ (8001290 <MX_TIM2_Init+0x98>)
 800125c:	f003 fbb6 	bl	80049cc <HAL_TIM_ConfigClockSource>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001266:	f000 fc09 	bl	8001a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800126a:	2320      	movs	r3, #32
 800126c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001272:	1d3b      	adds	r3, r7, #4
 8001274:	4619      	mov	r1, r3
 8001276:	4806      	ldr	r0, [pc, #24]	@ (8001290 <MX_TIM2_Init+0x98>)
 8001278:	f003 fdb2 	bl	8004de0 <HAL_TIMEx_MasterConfigSynchronization>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001282:	f000 fbfb 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001286:	bf00      	nop
 8001288:	3720      	adds	r7, #32
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000274 	.word	0x20000274

08001294 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001298:	4b14      	ldr	r3, [pc, #80]	@ (80012ec <MX_USART1_UART_Init+0x58>)
 800129a:	4a15      	ldr	r2, [pc, #84]	@ (80012f0 <MX_USART1_UART_Init+0x5c>)
 800129c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800129e:	4b13      	ldr	r3, [pc, #76]	@ (80012ec <MX_USART1_UART_Init+0x58>)
 80012a0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80012a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012a6:	4b11      	ldr	r3, [pc, #68]	@ (80012ec <MX_USART1_UART_Init+0x58>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012ac:	4b0f      	ldr	r3, [pc, #60]	@ (80012ec <MX_USART1_UART_Init+0x58>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012b2:	4b0e      	ldr	r3, [pc, #56]	@ (80012ec <MX_USART1_UART_Init+0x58>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 80012b8:	4b0c      	ldr	r3, [pc, #48]	@ (80012ec <MX_USART1_UART_Init+0x58>)
 80012ba:	2204      	movs	r2, #4
 80012bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012be:	4b0b      	ldr	r3, [pc, #44]	@ (80012ec <MX_USART1_UART_Init+0x58>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012c4:	4b09      	ldr	r3, [pc, #36]	@ (80012ec <MX_USART1_UART_Init+0x58>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012ca:	4b08      	ldr	r3, [pc, #32]	@ (80012ec <MX_USART1_UART_Init+0x58>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012d0:	4b06      	ldr	r3, [pc, #24]	@ (80012ec <MX_USART1_UART_Init+0x58>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012d6:	4805      	ldr	r0, [pc, #20]	@ (80012ec <MX_USART1_UART_Init+0x58>)
 80012d8:	f003 fe0a 	bl	8004ef0 <HAL_UART_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80012e2:	f000 fbcb 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	200002c0 	.word	0x200002c0
 80012f0:	40013800 	.word	0x40013800

080012f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012f8:	4b14      	ldr	r3, [pc, #80]	@ (800134c <MX_USART2_UART_Init+0x58>)
 80012fa:	4a15      	ldr	r2, [pc, #84]	@ (8001350 <MX_USART2_UART_Init+0x5c>)
 80012fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012fe:	4b13      	ldr	r3, [pc, #76]	@ (800134c <MX_USART2_UART_Init+0x58>)
 8001300:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001304:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001306:	4b11      	ldr	r3, [pc, #68]	@ (800134c <MX_USART2_UART_Init+0x58>)
 8001308:	2200      	movs	r2, #0
 800130a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800130c:	4b0f      	ldr	r3, [pc, #60]	@ (800134c <MX_USART2_UART_Init+0x58>)
 800130e:	2200      	movs	r2, #0
 8001310:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001312:	4b0e      	ldr	r3, [pc, #56]	@ (800134c <MX_USART2_UART_Init+0x58>)
 8001314:	2200      	movs	r2, #0
 8001316:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001318:	4b0c      	ldr	r3, [pc, #48]	@ (800134c <MX_USART2_UART_Init+0x58>)
 800131a:	220c      	movs	r2, #12
 800131c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800131e:	4b0b      	ldr	r3, [pc, #44]	@ (800134c <MX_USART2_UART_Init+0x58>)
 8001320:	2200      	movs	r2, #0
 8001322:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001324:	4b09      	ldr	r3, [pc, #36]	@ (800134c <MX_USART2_UART_Init+0x58>)
 8001326:	2200      	movs	r2, #0
 8001328:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800132a:	4b08      	ldr	r3, [pc, #32]	@ (800134c <MX_USART2_UART_Init+0x58>)
 800132c:	2200      	movs	r2, #0
 800132e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001330:	4b06      	ldr	r3, [pc, #24]	@ (800134c <MX_USART2_UART_Init+0x58>)
 8001332:	2200      	movs	r2, #0
 8001334:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001336:	4805      	ldr	r0, [pc, #20]	@ (800134c <MX_USART2_UART_Init+0x58>)
 8001338:	f003 fdda 	bl	8004ef0 <HAL_UART_Init>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001342:	f000 fb9b 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	20000348 	.word	0x20000348
 8001350:	40004400 	.word	0x40004400

08001354 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800135a:	4b0c      	ldr	r3, [pc, #48]	@ (800138c <MX_DMA_Init+0x38>)
 800135c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800135e:	4a0b      	ldr	r2, [pc, #44]	@ (800138c <MX_DMA_Init+0x38>)
 8001360:	f043 0302 	orr.w	r3, r3, #2
 8001364:	6493      	str	r3, [r2, #72]	@ 0x48
 8001366:	4b09      	ldr	r3, [pc, #36]	@ (800138c <MX_DMA_Init+0x38>)
 8001368:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	607b      	str	r3, [r7, #4]
 8001370:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 0, 0);
 8001372:	2200      	movs	r2, #0
 8001374:	2100      	movs	r1, #0
 8001376:	203b      	movs	r0, #59	@ 0x3b
 8001378:	f000 ff97 	bl	80022aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 800137c:	203b      	movs	r0, #59	@ 0x3b
 800137e:	f000 ffb0 	bl	80022e2 <HAL_NVIC_EnableIRQ>

}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40021000 	.word	0x40021000

08001390 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08a      	sub	sp, #40	@ 0x28
 8001394:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001396:	f107 0314 	add.w	r3, r7, #20
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	605a      	str	r2, [r3, #4]
 80013a0:	609a      	str	r2, [r3, #8]
 80013a2:	60da      	str	r2, [r3, #12]
 80013a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013a6:	4b39      	ldr	r3, [pc, #228]	@ (800148c <MX_GPIO_Init+0xfc>)
 80013a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013aa:	4a38      	ldr	r2, [pc, #224]	@ (800148c <MX_GPIO_Init+0xfc>)
 80013ac:	f043 0304 	orr.w	r3, r3, #4
 80013b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013b2:	4b36      	ldr	r3, [pc, #216]	@ (800148c <MX_GPIO_Init+0xfc>)
 80013b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013b6:	f003 0304 	and.w	r3, r3, #4
 80013ba:	613b      	str	r3, [r7, #16]
 80013bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013be:	4b33      	ldr	r3, [pc, #204]	@ (800148c <MX_GPIO_Init+0xfc>)
 80013c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c2:	4a32      	ldr	r2, [pc, #200]	@ (800148c <MX_GPIO_Init+0xfc>)
 80013c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013ca:	4b30      	ldr	r3, [pc, #192]	@ (800148c <MX_GPIO_Init+0xfc>)
 80013cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d6:	4b2d      	ldr	r3, [pc, #180]	@ (800148c <MX_GPIO_Init+0xfc>)
 80013d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013da:	4a2c      	ldr	r2, [pc, #176]	@ (800148c <MX_GPIO_Init+0xfc>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013e2:	4b2a      	ldr	r3, [pc, #168]	@ (800148c <MX_GPIO_Init+0xfc>)
 80013e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	60bb      	str	r3, [r7, #8]
 80013ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ee:	4b27      	ldr	r3, [pc, #156]	@ (800148c <MX_GPIO_Init+0xfc>)
 80013f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f2:	4a26      	ldr	r2, [pc, #152]	@ (800148c <MX_GPIO_Init+0xfc>)
 80013f4:	f043 0302 	orr.w	r3, r3, #2
 80013f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013fa:	4b24      	ldr	r3, [pc, #144]	@ (800148c <MX_GPIO_Init+0xfc>)
 80013fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	607b      	str	r3, [r7, #4]
 8001404:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001406:	2200      	movs	r2, #0
 8001408:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800140c:	4820      	ldr	r0, [pc, #128]	@ (8001490 <MX_GPIO_Init+0x100>)
 800140e:	f001 fe61 	bl	80030d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001412:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001416:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001418:	2300      	movs	r3, #0
 800141a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	4619      	mov	r1, r3
 8001426:	481b      	ldr	r0, [pc, #108]	@ (8001494 <MX_GPIO_Init+0x104>)
 8001428:	f001 fcaa 	bl	8002d80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800142c:	2308      	movs	r3, #8
 800142e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001430:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001434:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2300      	movs	r3, #0
 8001438:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800143a:	f107 0314 	add.w	r3, r7, #20
 800143e:	4619      	mov	r1, r3
 8001440:	4814      	ldr	r0, [pc, #80]	@ (8001494 <MX_GPIO_Init+0x104>)
 8001442:	f001 fc9d 	bl	8002d80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001446:	2330      	movs	r3, #48	@ 0x30
 8001448:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144a:	2302      	movs	r3, #2
 800144c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001452:	2303      	movs	r3, #3
 8001454:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001456:	2307      	movs	r3, #7
 8001458:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800145a:	f107 0314 	add.w	r3, r7, #20
 800145e:	4619      	mov	r1, r3
 8001460:	480c      	ldr	r0, [pc, #48]	@ (8001494 <MX_GPIO_Init+0x104>)
 8001462:	f001 fc8d 	bl	8002d80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001466:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800146a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800146c:	2301      	movs	r3, #1
 800146e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001474:	2300      	movs	r3, #0
 8001476:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	4619      	mov	r1, r3
 800147e:	4804      	ldr	r0, [pc, #16]	@ (8001490 <MX_GPIO_Init+0x100>)
 8001480:	f001 fc7e 	bl	8002d80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001484:	bf00      	nop
 8001486:	3728      	adds	r7, #40	@ 0x28
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40021000 	.word	0x40021000
 8001490:	48000400 	.word	0x48000400
 8001494:	48000800 	.word	0x48000800

08001498 <setup_lora>:

/* USER CODE BEGIN 4 */

void setup_lora(void){
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  
  HAL_Delay(200);
 800149c:	20c8      	movs	r0, #200	@ 0xc8
 800149e:	f000 fe05 	bl	80020ac <HAL_Delay>
  send_lora("AT\r\n", 4, 5); //basic stm to lora check (rcv: +OK)
 80014a2:	2205      	movs	r2, #5
 80014a4:	2104      	movs	r1, #4
 80014a6:	4813      	ldr	r0, [pc, #76]	@ (80014f4 <setup_lora+0x5c>)
 80014a8:	f000 f830 	bl	800150c <send_lora>
  // HAL_Delay(200);
  // send_lora("AT+FACTORY\r\n", 12, 8); //set to factory default (rcv: +FACTORY)
  HAL_Delay(200);
 80014ac:	20c8      	movs	r0, #200	@ 0xc8
 80014ae:	f000 fdfd 	bl	80020ac <HAL_Delay>
  send_lora("AT+ADDRESS=124\r\n", 16, 5); //set lora address (rcv: +OK)
 80014b2:	2205      	movs	r2, #5
 80014b4:	2110      	movs	r1, #16
 80014b6:	4810      	ldr	r0, [pc, #64]	@ (80014f8 <setup_lora+0x60>)
 80014b8:	f000 f828 	bl	800150c <send_lora>
  HAL_Delay(200);
 80014bc:	20c8      	movs	r0, #200	@ 0xc8
 80014be:	f000 fdf5 	bl	80020ac <HAL_Delay>
  send_lora("AT+NETWORKID=7\r\n", 16, 5); //set network id (rcv: +OK)
 80014c2:	2205      	movs	r2, #5
 80014c4:	2110      	movs	r1, #16
 80014c6:	480d      	ldr	r0, [pc, #52]	@ (80014fc <setup_lora+0x64>)
 80014c8:	f000 f820 	bl	800150c <send_lora>
  HAL_Delay(200);
 80014cc:	20c8      	movs	r0, #200	@ 0xc8
 80014ce:	f000 fded 	bl	80020ac <HAL_Delay>
  send_lora("AT+CPIN=102C064CA409E69030F73E7CABAA4B71\r\n", 42, 5); //set AES pin (rcv: +OK)
 80014d2:	2205      	movs	r2, #5
 80014d4:	212a      	movs	r1, #42	@ 0x2a
 80014d6:	480a      	ldr	r0, [pc, #40]	@ (8001500 <setup_lora+0x68>)
 80014d8:	f000 f818 	bl	800150c <send_lora>
  HAL_Delay(200);
 80014dc:	20c8      	movs	r0, #200	@ 0xc8
 80014de:	f000 fde5 	bl	80020ac <HAL_Delay>

  printf("Done setting up LoRa\r\n");
 80014e2:	4808      	ldr	r0, [pc, #32]	@ (8001504 <setup_lora+0x6c>)
 80014e4:	f005 fe72 	bl	80071cc <puts>
  HAL_IWDG_Refresh(&hiwdg);
 80014e8:	4807      	ldr	r0, [pc, #28]	@ (8001508 <setup_lora+0x70>)
 80014ea:	f001 fe76 	bl	80031da <HAL_IWDG_Refresh>
}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	0800ab10 	.word	0x0800ab10
 80014f8:	0800ab18 	.word	0x0800ab18
 80014fc:	0800ab2c 	.word	0x0800ab2c
 8001500:	0800ab40 	.word	0x0800ab40
 8001504:	0800ab6c 	.word	0x0800ab6c
 8001508:	20000264 	.word	0x20000264

0800150c <send_lora>:

void send_lora(char *msg, int size, int resp_size){
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
  bzero(tx_data_lora, LORA_BUF_SIZE);
 8001518:	4b15      	ldr	r3, [pc, #84]	@ (8001570 <send_lora+0x64>)
 800151a:	4618      	mov	r0, r3
 800151c:	23f0      	movs	r3, #240	@ 0xf0
 800151e:	461a      	mov	r2, r3
 8001520:	2100      	movs	r1, #0
 8001522:	f005 ff53 	bl	80073cc <memset>
  // bzero(rx_data_lora, LORA_BUF_SIZE);
  memcpy(tx_data_lora, msg, size);
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	461a      	mov	r2, r3
 800152a:	68f9      	ldr	r1, [r7, #12]
 800152c:	4810      	ldr	r0, [pc, #64]	@ (8001570 <send_lora+0x64>)
 800152e:	f005 ffe0 	bl	80074f2 <memcpy>

  for(int i = 0; i < size; i++){ //transmit each char, one at a time
 8001532:	2300      	movs	r3, #0
 8001534:	617b      	str	r3, [r7, #20]
 8001536:	e00f      	b.n	8001558 <send_lora+0x4c>
    while(!(USART3->ISR & USART_ISR_TXE)) { }
 8001538:	bf00      	nop
 800153a:	4b0e      	ldr	r3, [pc, #56]	@ (8001574 <send_lora+0x68>)
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001542:	2b00      	cmp	r3, #0
 8001544:	d0f9      	beq.n	800153a <send_lora+0x2e>
    USART3->TDR = tx_data_lora[i];
 8001546:	4a0a      	ldr	r2, [pc, #40]	@ (8001570 <send_lora+0x64>)
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	4413      	add	r3, r2
 800154c:	781a      	ldrb	r2, [r3, #0]
 800154e:	4b09      	ldr	r3, [pc, #36]	@ (8001574 <send_lora+0x68>)
 8001550:	851a      	strh	r2, [r3, #40]	@ 0x28
  for(int i = 0; i < size; i++){ //transmit each char, one at a time
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	3301      	adds	r3, #1
 8001556:	617b      	str	r3, [r7, #20]
 8001558:	697a      	ldr	r2, [r7, #20]
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	429a      	cmp	r2, r3
 800155e:	dbeb      	blt.n	8001538 <send_lora+0x2c>
  }
  HAL_IWDG_Refresh(&hiwdg);
 8001560:	4805      	ldr	r0, [pc, #20]	@ (8001578 <send_lora+0x6c>)
 8001562:	f001 fe3a 	bl	80031da <HAL_IWDG_Refresh>

  // while(HAL_UART_Receive(&huart3, rx_data_lora, resp_size, 1000)!=HAL_OK){}
  // HAL_UART_Transmit(&huart2, serfifo, resp_size, 10);
}
 8001566:	bf00      	nop
 8001568:	3718      	adds	r7, #24
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	200003e4 	.word	0x200003e4
 8001574:	40004800 	.word	0x40004800
 8001578:	20000264 	.word	0x20000264

0800157c <init_usart3>:


void init_usart3() { //LoRa
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN; //turn on GPIO C
 8001580:	4b31      	ldr	r3, [pc, #196]	@ (8001648 <init_usart3+0xcc>)
 8001582:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001584:	4a30      	ldr	r2, [pc, #192]	@ (8001648 <init_usart3+0xcc>)
 8001586:	f043 0304 	orr.w	r3, r3, #4
 800158a:	64d3      	str	r3, [r2, #76]	@ 0x4c
    GPIOC->MODER &= ~(GPIO_MODER_MODER4 | GPIO_MODER_MODER5); //clear pc12
 800158c:	4b2f      	ldr	r3, [pc, #188]	@ (800164c <init_usart3+0xd0>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a2e      	ldr	r2, [pc, #184]	@ (800164c <init_usart3+0xd0>)
 8001592:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001596:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |= GPIO_MODER_MODER4_1 | GPIO_MODER_MODER5_1; //PC12 as alternate function
 8001598:	4b2c      	ldr	r3, [pc, #176]	@ (800164c <init_usart3+0xd0>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a2b      	ldr	r2, [pc, #172]	@ (800164c <init_usart3+0xd0>)
 800159e:	f443 6320 	orr.w	r3, r3, #2560	@ 0xa00
 80015a2:	6013      	str	r3, [r2, #0]

    GPIOC->AFR[0] &= ~0x00ff0000; //AF7
 80015a4:	4b29      	ldr	r3, [pc, #164]	@ (800164c <init_usart3+0xd0>)
 80015a6:	6a1b      	ldr	r3, [r3, #32]
 80015a8:	4a28      	ldr	r2, [pc, #160]	@ (800164c <init_usart3+0xd0>)
 80015aa:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 80015ae:	6213      	str	r3, [r2, #32]
    GPIOC->AFR[0] |=  0x00770000; 
 80015b0:	4b26      	ldr	r3, [pc, #152]	@ (800164c <init_usart3+0xd0>)
 80015b2:	6a1b      	ldr	r3, [r3, #32]
 80015b4:	4a25      	ldr	r2, [pc, #148]	@ (800164c <init_usart3+0xd0>)
 80015b6:	f443 03ee 	orr.w	r3, r3, #7798784	@ 0x770000
 80015ba:	6213      	str	r3, [r2, #32]

    RCC->APB1ENR1 |= RCC_APB1ENR1_USART3EN; //enable usart5 clock
 80015bc:	4b22      	ldr	r3, [pc, #136]	@ (8001648 <init_usart3+0xcc>)
 80015be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015c0:	4a21      	ldr	r2, [pc, #132]	@ (8001648 <init_usart3+0xcc>)
 80015c2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015c6:	6593      	str	r3, [r2, #88]	@ 0x58
    USART3->CR1 &= ~USART_CR1_UE; //disable usart3
 80015c8:	4b21      	ldr	r3, [pc, #132]	@ (8001650 <init_usart3+0xd4>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a20      	ldr	r2, [pc, #128]	@ (8001650 <init_usart3+0xd4>)
 80015ce:	f023 0301 	bic.w	r3, r3, #1
 80015d2:	6013      	str	r3, [r2, #0]

    USART3->CR1 &= ~USART_CR1_M; //set word size to 8 by clearing M0 and M1
 80015d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001650 <init_usart3+0xd4>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a1d      	ldr	r2, [pc, #116]	@ (8001650 <init_usart3+0xd4>)
 80015da:	f023 2310 	bic.w	r3, r3, #268439552	@ 0x10001000
 80015de:	6013      	str	r3, [r2, #0]
    USART3->CR2 &= ~USART_CR2_STOP; //one stop bit
 80015e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001650 <init_usart3+0xd4>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	4a1a      	ldr	r2, [pc, #104]	@ (8001650 <init_usart3+0xd4>)
 80015e6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80015ea:	6053      	str	r3, [r2, #4]
    USART3->CR1 &= ~USART_CR1_PCE; //disable parity bit
 80015ec:	4b18      	ldr	r3, [pc, #96]	@ (8001650 <init_usart3+0xd4>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a17      	ldr	r2, [pc, #92]	@ (8001650 <init_usart3+0xd4>)
 80015f2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80015f6:	6013      	str	r3, [r2, #0]
    USART3->CR1 &= ~USART_CR1_OVER8; //16x oversampling
 80015f8:	4b15      	ldr	r3, [pc, #84]	@ (8001650 <init_usart3+0xd4>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a14      	ldr	r2, [pc, #80]	@ (8001650 <init_usart3+0xd4>)
 80015fe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001602:	6013      	str	r3, [r2, #0]
    USART3->BRR = 40000000/115200; //Baud rate of 115200 (table 249)
 8001604:	4b12      	ldr	r3, [pc, #72]	@ (8001650 <init_usart3+0xd4>)
 8001606:	f240 125b 	movw	r2, #347	@ 0x15b
 800160a:	60da      	str	r2, [r3, #12]
    USART3->CR1 |= USART_CR1_TE; //enable transmitter
 800160c:	4b10      	ldr	r3, [pc, #64]	@ (8001650 <init_usart3+0xd4>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a0f      	ldr	r2, [pc, #60]	@ (8001650 <init_usart3+0xd4>)
 8001612:	f043 0308 	orr.w	r3, r3, #8
 8001616:	6013      	str	r3, [r2, #0]
    USART3->CR1 |= USART_CR1_RE; //enable receiver
 8001618:	4b0d      	ldr	r3, [pc, #52]	@ (8001650 <init_usart3+0xd4>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a0c      	ldr	r2, [pc, #48]	@ (8001650 <init_usart3+0xd4>)
 800161e:	f043 0304 	orr.w	r3, r3, #4
 8001622:	6013      	str	r3, [r2, #0]

    USART3->CR1 |= USART_CR1_UE; //enable usart5
 8001624:	4b0a      	ldr	r3, [pc, #40]	@ (8001650 <init_usart3+0xd4>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a09      	ldr	r2, [pc, #36]	@ (8001650 <init_usart3+0xd4>)
 800162a:	f043 0301 	orr.w	r3, r3, #1
 800162e:	6013      	str	r3, [r2, #0]

    while(!(USART3->ISR & (USART_ISR_TEACK | USART_ISR_REACK))); //wait for TE and RE to be acknowledged
 8001630:	bf00      	nop
 8001632:	4b07      	ldr	r3, [pc, #28]	@ (8001650 <init_usart3+0xd4>)
 8001634:	69db      	ldr	r3, [r3, #28]
 8001636:	f403 03c0 	and.w	r3, r3, #6291456	@ 0x600000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d0f9      	beq.n	8001632 <init_usart3+0xb6>
    HAL_IWDG_Refresh(&hiwdg);
 800163e:	4805      	ldr	r0, [pc, #20]	@ (8001654 <init_usart3+0xd8>)
 8001640:	f001 fdcb 	bl	80031da <HAL_IWDG_Refresh>
}
 8001644:	bf00      	nop
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40021000 	.word	0x40021000
 800164c:	48000800 	.word	0x48000800
 8001650:	40004800 	.word	0x40004800
 8001654:	20000264 	.word	0x20000264

08001658 <enable_tty_interrupt>:

void enable_tty_interrupt(void) {
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
    // TODO
    USART3->CR1 |= USART_CR1_RXNEIE; //enable interupt when receive data register becomes not empty.
 800165c:	4b35      	ldr	r3, [pc, #212]	@ (8001734 <enable_tty_interrupt+0xdc>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a34      	ldr	r2, [pc, #208]	@ (8001734 <enable_tty_interrupt+0xdc>)
 8001662:	f043 0320 	orr.w	r3, r3, #32
 8001666:	6013      	str	r3, [r2, #0]
    NVIC->ISER[1] = 1 << (USART3_IRQn-32);
 8001668:	4b33      	ldr	r3, [pc, #204]	@ (8001738 <enable_tty_interrupt+0xe0>)
 800166a:	2280      	movs	r2, #128	@ 0x80
 800166c:	605a      	str	r2, [r3, #4]

    USART3->CR3 |= USART_CR3_DMAR; //enable DMA mode
 800166e:	4b31      	ldr	r3, [pc, #196]	@ (8001734 <enable_tty_interrupt+0xdc>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	4a30      	ldr	r2, [pc, #192]	@ (8001734 <enable_tty_interrupt+0xdc>)
 8001674:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001678:	6093      	str	r3, [r2, #8]
    RCC->AHB1ENR |= RCC_AHB1ENR_DMA1EN; //Enable DMA1 clock
 800167a:	4b30      	ldr	r3, [pc, #192]	@ (800173c <enable_tty_interrupt+0xe4>)
 800167c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800167e:	4a2f      	ldr	r2, [pc, #188]	@ (800173c <enable_tty_interrupt+0xe4>)
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	6493      	str	r3, [r2, #72]	@ 0x48

    DMA1_CSELR->CSELR &= ~0x00000f00; //clear channel 3
 8001686:	4b2e      	ldr	r3, [pc, #184]	@ (8001740 <enable_tty_interrupt+0xe8>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a2d      	ldr	r2, [pc, #180]	@ (8001740 <enable_tty_interrupt+0xe8>)
 800168c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001690:	6013      	str	r3, [r2, #0]
    DMA1_CSELR->CSELR |=  0x00000200; //select channel 3 to be usart3rx
 8001692:	4b2b      	ldr	r3, [pc, #172]	@ (8001740 <enable_tty_interrupt+0xe8>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a2a      	ldr	r2, [pc, #168]	@ (8001740 <enable_tty_interrupt+0xe8>)
 8001698:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800169c:	6013      	str	r3, [r2, #0]
    DMA1_Channel3->CCR &= ~DMA_CCR_EN; //disable dma1 channel 3
 800169e:	4b29      	ldr	r3, [pc, #164]	@ (8001744 <enable_tty_interrupt+0xec>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a28      	ldr	r2, [pc, #160]	@ (8001744 <enable_tty_interrupt+0xec>)
 80016a4:	f023 0301 	bic.w	r3, r3, #1
 80016a8:	6013      	str	r3, [r2, #0]

    DMA1_Channel3->CMAR = (uint32_t) serfifo; //set memory address
 80016aa:	4b26      	ldr	r3, [pc, #152]	@ (8001744 <enable_tty_interrupt+0xec>)
 80016ac:	4a26      	ldr	r2, [pc, #152]	@ (8001748 <enable_tty_interrupt+0xf0>)
 80016ae:	60da      	str	r2, [r3, #12]
    DMA1_Channel3->CPAR = (uint32_t) &(USART3->RDR); //set peripheral address
 80016b0:	4b24      	ldr	r3, [pc, #144]	@ (8001744 <enable_tty_interrupt+0xec>)
 80016b2:	4a26      	ldr	r2, [pc, #152]	@ (800174c <enable_tty_interrupt+0xf4>)
 80016b4:	609a      	str	r2, [r3, #8]
    DMA1_Channel3->CNDTR = FIFOSIZE; //number of elements you are trying to transfer
 80016b6:	4b23      	ldr	r3, [pc, #140]	@ (8001744 <enable_tty_interrupt+0xec>)
 80016b8:	2210      	movs	r2, #16
 80016ba:	605a      	str	r2, [r3, #4]
    DMA1_Channel3->CCR &= ~DMA_CCR_DIR; //dir set to from-p-to-m
 80016bc:	4b21      	ldr	r3, [pc, #132]	@ (8001744 <enable_tty_interrupt+0xec>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a20      	ldr	r2, [pc, #128]	@ (8001744 <enable_tty_interrupt+0xec>)
 80016c2:	f023 0310 	bic.w	r3, r3, #16
 80016c6:	6013      	str	r3, [r2, #0]
    DMA1_Channel3->CCR |= DMA_CCR_MINC; //minc set to increment memory
 80016c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001744 <enable_tty_interrupt+0xec>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a1d      	ldr	r2, [pc, #116]	@ (8001744 <enable_tty_interrupt+0xec>)
 80016ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016d2:	6013      	str	r3, [r2, #0]
    DMA1_Channel3->CCR &= ~DMA_CCR_PINC; //pinc disabled
 80016d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001744 <enable_tty_interrupt+0xec>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a1a      	ldr	r2, [pc, #104]	@ (8001744 <enable_tty_interrupt+0xec>)
 80016da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80016de:	6013      	str	r3, [r2, #0]
    DMA1_Channel3->CCR &= ~(DMA_CCR_PSIZE | DMA_CCR_MSIZE); //MSIZE and PSIZE set to 8 bits
 80016e0:	4b18      	ldr	r3, [pc, #96]	@ (8001744 <enable_tty_interrupt+0xec>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a17      	ldr	r2, [pc, #92]	@ (8001744 <enable_tty_interrupt+0xec>)
 80016e6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80016ea:	6013      	str	r3, [r2, #0]
    DMA1_Channel3->CCR |= DMA_CCR_CIRC; //circ enabled
 80016ec:	4b15      	ldr	r3, [pc, #84]	@ (8001744 <enable_tty_interrupt+0xec>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a14      	ldr	r2, [pc, #80]	@ (8001744 <enable_tty_interrupt+0xec>)
 80016f2:	f043 0320 	orr.w	r3, r3, #32
 80016f6:	6013      	str	r3, [r2, #0]
    DMA1_Channel3->CCR &= ~(DMA_CCR_TCIE | DMA_CCR_HTIE | DMA_CCR_TEIE); //disable total and half transfer interrupt
 80016f8:	4b12      	ldr	r3, [pc, #72]	@ (8001744 <enable_tty_interrupt+0xec>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a11      	ldr	r2, [pc, #68]	@ (8001744 <enable_tty_interrupt+0xec>)
 80016fe:	f023 030e 	bic.w	r3, r3, #14
 8001702:	6013      	str	r3, [r2, #0]
    DMA1_Channel3->CCR &= ~DMA_CCR_MEM2MEM; //disable mem2mem
 8001704:	4b0f      	ldr	r3, [pc, #60]	@ (8001744 <enable_tty_interrupt+0xec>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a0e      	ldr	r2, [pc, #56]	@ (8001744 <enable_tty_interrupt+0xec>)
 800170a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800170e:	6013      	str	r3, [r2, #0]
    DMA1_Channel3->CCR |= DMA_CCR_PL; //set priority level to highest
 8001710:	4b0c      	ldr	r3, [pc, #48]	@ (8001744 <enable_tty_interrupt+0xec>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a0b      	ldr	r2, [pc, #44]	@ (8001744 <enable_tty_interrupt+0xec>)
 8001716:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 800171a:	6013      	str	r3, [r2, #0]

    DMA1_Channel3->CCR |= DMA_CCR_EN; //enable dma1 channel 3
 800171c:	4b09      	ldr	r3, [pc, #36]	@ (8001744 <enable_tty_interrupt+0xec>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a08      	ldr	r2, [pc, #32]	@ (8001744 <enable_tty_interrupt+0xec>)
 8001722:	f043 0301 	orr.w	r3, r3, #1
 8001726:	6013      	str	r3, [r2, #0]
}
 8001728:	bf00      	nop
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	40004800 	.word	0x40004800
 8001738:	e000e100 	.word	0xe000e100
 800173c:	40021000 	.word	0x40021000
 8001740:	400200a8 	.word	0x400200a8
 8001744:	40020030 	.word	0x40020030
 8001748:	200003d0 	.word	0x200003d0
 800174c:	40004824 	.word	0x40004824

08001750 <USART3_IRQHandler>:

void USART3_IRQHandler(void){
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af02      	add	r7, sp, #8
  //   printf("%c%c", serfifo[FIFOSIZE-1], serfifo[seroffset]);
  // }else{
  //   printf("%c%c", serfifo[seroffset-1], serfifo[seroffset]);
  // }

  while(DMA1_Channel3->CNDTR != sizeof serfifo - seroffset){
 8001756:	e089      	b.n	800186c <USART3_IRQHandler+0x11c>
    printf("%c", serfifo[seroffset]);
 8001758:	4b4c      	ldr	r3, [pc, #304]	@ (800188c <USART3_IRQHandler+0x13c>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a4c      	ldr	r2, [pc, #304]	@ (8001890 <USART3_IRQHandler+0x140>)
 800175e:	5cd3      	ldrb	r3, [r2, r3]
 8001760:	4618      	mov	r0, r3
 8001762:	f005 fcd5 	bl	8007110 <putchar>
    // HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
    uint8_t audio_cue = serfifo[seroffset];
 8001766:	4b49      	ldr	r3, [pc, #292]	@ (800188c <USART3_IRQHandler+0x13c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a49      	ldr	r2, [pc, #292]	@ (8001890 <USART3_IRQHandler+0x140>)
 800176c:	5cd3      	ldrb	r3, [r2, r3]
 800176e:	70fb      	strb	r3, [r7, #3]
    // printf("%c", audio_cue);

    if(audio_cue == 'a'){
 8001770:	78fb      	ldrb	r3, [r7, #3]
 8001772:	2b61      	cmp	r3, #97	@ 0x61
 8001774:	d124      	bne.n	80017c0 <USART3_IRQHandler+0x70>
      // printf("Audio %c", audio_cue);
       HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 8001776:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800177a:	4846      	ldr	r0, [pc, #280]	@ (8001894 <USART3_IRQHandler+0x144>)
 800177c:	f001 fcc2 	bl	8003104 <HAL_GPIO_TogglePin>
       HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint8_t*)whistle, 24580, DAC_ALIGN_8B_R);
 8001780:	2308      	movs	r3, #8
 8001782:	9300      	str	r3, [sp, #0]
 8001784:	f246 0304 	movw	r3, #24580	@ 0x6004
 8001788:	4a43      	ldr	r2, [pc, #268]	@ (8001898 <USART3_IRQHandler+0x148>)
 800178a:	2100      	movs	r1, #0
 800178c:	4843      	ldr	r0, [pc, #268]	@ (800189c <USART3_IRQHandler+0x14c>)
 800178e:	f000 fde5 	bl	800235c <HAL_DAC_Start_DMA>
        for(int i = 0; i < 24; i++){ //send received signal
 8001792:	2300      	movs	r3, #0
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	e00f      	b.n	80017b8 <USART3_IRQHandler+0x68>
          while(!(USART3->ISR & USART_ISR_TXE)) { }
 8001798:	bf00      	nop
 800179a:	4b41      	ldr	r3, [pc, #260]	@ (80018a0 <USART3_IRQHandler+0x150>)
 800179c:	69db      	ldr	r3, [r3, #28]
 800179e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d0f9      	beq.n	800179a <USART3_IRQHandler+0x4a>
          USART3->TDR = tx_received[i];
 80017a6:	4a3f      	ldr	r2, [pc, #252]	@ (80018a4 <USART3_IRQHandler+0x154>)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	4413      	add	r3, r2
 80017ac:	781a      	ldrb	r2, [r3, #0]
 80017ae:	4b3c      	ldr	r3, [pc, #240]	@ (80018a0 <USART3_IRQHandler+0x150>)
 80017b0:	851a      	strh	r2, [r3, #40]	@ 0x28
        for(int i = 0; i < 24; i++){ //send received signal
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	3301      	adds	r3, #1
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2b17      	cmp	r3, #23
 80017bc:	ddec      	ble.n	8001798 <USART3_IRQHandler+0x48>
 80017be:	e04e      	b.n	800185e <USART3_IRQHandler+0x10e>
        }
     }
     else if(audio_cue == 'b'){
 80017c0:	78fb      	ldrb	r3, [r7, #3]
 80017c2:	2b62      	cmp	r3, #98	@ 0x62
 80017c4:	d124      	bne.n	8001810 <USART3_IRQHandler+0xc0>
      // printf("Audio %c", audio_cue);
       HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 80017c6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80017ca:	4832      	ldr	r0, [pc, #200]	@ (8001894 <USART3_IRQHandler+0x144>)
 80017cc:	f001 fc9a 	bl	8003104 <HAL_GPIO_TogglePin>
       HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint8_t*)stopCommand, 18200, DAC_ALIGN_8B_R);
 80017d0:	2308      	movs	r3, #8
 80017d2:	9300      	str	r3, [sp, #0]
 80017d4:	f244 7318 	movw	r3, #18200	@ 0x4718
 80017d8:	4a33      	ldr	r2, [pc, #204]	@ (80018a8 <USART3_IRQHandler+0x158>)
 80017da:	2100      	movs	r1, #0
 80017dc:	482f      	ldr	r0, [pc, #188]	@ (800189c <USART3_IRQHandler+0x14c>)
 80017de:	f000 fdbd 	bl	800235c <HAL_DAC_Start_DMA>
        for(int i = 0; i < 24; i++){ //send received signal
 80017e2:	2300      	movs	r3, #0
 80017e4:	60bb      	str	r3, [r7, #8]
 80017e6:	e00f      	b.n	8001808 <USART3_IRQHandler+0xb8>
          while(!(USART3->ISR & USART_ISR_TXE)) { }
 80017e8:	bf00      	nop
 80017ea:	4b2d      	ldr	r3, [pc, #180]	@ (80018a0 <USART3_IRQHandler+0x150>)
 80017ec:	69db      	ldr	r3, [r3, #28]
 80017ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d0f9      	beq.n	80017ea <USART3_IRQHandler+0x9a>
          USART3->TDR = tx_received[i];
 80017f6:	4a2b      	ldr	r2, [pc, #172]	@ (80018a4 <USART3_IRQHandler+0x154>)
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	4413      	add	r3, r2
 80017fc:	781a      	ldrb	r2, [r3, #0]
 80017fe:	4b28      	ldr	r3, [pc, #160]	@ (80018a0 <USART3_IRQHandler+0x150>)
 8001800:	851a      	strh	r2, [r3, #40]	@ 0x28
        for(int i = 0; i < 24; i++){ //send received signal
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	3301      	adds	r3, #1
 8001806:	60bb      	str	r3, [r7, #8]
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	2b17      	cmp	r3, #23
 800180c:	ddec      	ble.n	80017e8 <USART3_IRQHandler+0x98>
 800180e:	e026      	b.n	800185e <USART3_IRQHandler+0x10e>
        }
     }
     else if(audio_cue == 'd'){
 8001810:	78fb      	ldrb	r3, [r7, #3]
 8001812:	2b64      	cmp	r3, #100	@ 0x64
 8001814:	d123      	bne.n	800185e <USART3_IRQHandler+0x10e>
      // printf("Audio %c", audio_cue);
       HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 8001816:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800181a:	481e      	ldr	r0, [pc, #120]	@ (8001894 <USART3_IRQHandler+0x144>)
 800181c:	f001 fc72 	bl	8003104 <HAL_GPIO_TogglePin>
       // HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint8_t*)noCommand, 22332, DAC_ALIGN_8B_R);
       HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint8_t*)Se7enNo, 19316, DAC_ALIGN_8B_R);
 8001820:	2308      	movs	r3, #8
 8001822:	9300      	str	r3, [sp, #0]
 8001824:	f644 3374 	movw	r3, #19316	@ 0x4b74
 8001828:	4a20      	ldr	r2, [pc, #128]	@ (80018ac <USART3_IRQHandler+0x15c>)
 800182a:	2100      	movs	r1, #0
 800182c:	481b      	ldr	r0, [pc, #108]	@ (800189c <USART3_IRQHandler+0x14c>)
 800182e:	f000 fd95 	bl	800235c <HAL_DAC_Start_DMA>
        for(int i = 0; i < 24; i++){ //send received signal
 8001832:	2300      	movs	r3, #0
 8001834:	607b      	str	r3, [r7, #4]
 8001836:	e00f      	b.n	8001858 <USART3_IRQHandler+0x108>
          while(!(USART3->ISR & USART_ISR_TXE)) { }
 8001838:	bf00      	nop
 800183a:	4b19      	ldr	r3, [pc, #100]	@ (80018a0 <USART3_IRQHandler+0x150>)
 800183c:	69db      	ldr	r3, [r3, #28]
 800183e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001842:	2b00      	cmp	r3, #0
 8001844:	d0f9      	beq.n	800183a <USART3_IRQHandler+0xea>
          USART3->TDR = tx_received[i];
 8001846:	4a17      	ldr	r2, [pc, #92]	@ (80018a4 <USART3_IRQHandler+0x154>)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4413      	add	r3, r2
 800184c:	781a      	ldrb	r2, [r3, #0]
 800184e:	4b14      	ldr	r3, [pc, #80]	@ (80018a0 <USART3_IRQHandler+0x150>)
 8001850:	851a      	strh	r2, [r3, #40]	@ 0x28
        for(int i = 0; i < 24; i++){ //send received signal
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	3301      	adds	r3, #1
 8001856:	607b      	str	r3, [r7, #4]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2b17      	cmp	r3, #23
 800185c:	ddec      	ble.n	8001838 <USART3_IRQHandler+0xe8>
    //     USART3->TDR = tx_received[i];
    //   }
    // }
    
    
    seroffset = (seroffset + 1) % sizeof serfifo;
 800185e:	4b0b      	ldr	r3, [pc, #44]	@ (800188c <USART3_IRQHandler+0x13c>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	3301      	adds	r3, #1
 8001864:	f003 030f 	and.w	r3, r3, #15
 8001868:	4a08      	ldr	r2, [pc, #32]	@ (800188c <USART3_IRQHandler+0x13c>)
 800186a:	6013      	str	r3, [r2, #0]
  while(DMA1_Channel3->CNDTR != sizeof serfifo - seroffset){
 800186c:	4b10      	ldr	r3, [pc, #64]	@ (80018b0 <USART3_IRQHandler+0x160>)
 800186e:	685a      	ldr	r2, [r3, #4]
 8001870:	4b06      	ldr	r3, [pc, #24]	@ (800188c <USART3_IRQHandler+0x13c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f1c3 0310 	rsb	r3, r3, #16
 8001878:	429a      	cmp	r2, r3
 800187a:	f47f af6d 	bne.w	8001758 <USART3_IRQHandler+0x8>
  
  // seroffset = (seroffset + 1) % sizeof serfifo;
  

  // send_lora(tx_received, 24, 5);
  HAL_IWDG_Refresh(&hiwdg);
 800187e:	480d      	ldr	r0, [pc, #52]	@ (80018b4 <USART3_IRQHandler+0x164>)
 8001880:	f001 fcab 	bl	80031da <HAL_IWDG_Refresh>
}
 8001884:	bf00      	nop
 8001886:	3710      	adds	r7, #16
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	200003e0 	.word	0x200003e0
 8001890:	200003d0 	.word	0x200003d0
 8001894:	48000400 	.word	0x48000400
 8001898:	08013e88 	.word	0x08013e88
 800189c:	20000208 	.word	0x20000208
 80018a0:	40004800 	.word	0x40004800
 80018a4:	20000000 	.word	0x20000000
 80018a8:	0800f728 	.word	0x0800f728
 80018ac:	0800abb4 	.word	0x0800abb4
 80018b0:	40020030 	.word	0x40020030
 80018b4:	20000264 	.word	0x20000264

080018b8 <TIM7_IRQHandler>:



void TIM7_IRQHandler(void)
{
 80018b8:	b590      	push	{r4, r7, lr}
 80018ba:	b08d      	sub	sp, #52	@ 0x34
 80018bc:	af00      	add	r7, sp, #0
  TIM7->SR &= ~TIM_SR_UIF; //acknowledge the interrupt
 80018be:	4b49      	ldr	r3, [pc, #292]	@ (80019e4 <TIM7_IRQHandler+0x12c>)
 80018c0:	691b      	ldr	r3, [r3, #16]
 80018c2:	4a48      	ldr	r2, [pc, #288]	@ (80019e4 <TIM7_IRQHandler+0x12c>)
 80018c4:	f023 0301 	bic.w	r3, r3, #1
 80018c8:	6113      	str	r3, [r2, #16]

  // printf("Start of GPS interrupt\r\n");
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80018ca:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80018ce:	4846      	ldr	r0, [pc, #280]	@ (80019e8 <TIM7_IRQHandler+0x130>)
 80018d0:	f001 fc18 	bl	8003104 <HAL_GPIO_TogglePin>

  isG = 0;
 80018d4:	4b45      	ldr	r3, [pc, #276]	@ (80019ec <TIM7_IRQHandler+0x134>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	701a      	strb	r2, [r3, #0]
  while(1){
    HAL_UART_Receive(&huart1, &gpsbuf, 1, 10);
 80018da:	230a      	movs	r3, #10
 80018dc:	2201      	movs	r2, #1
 80018de:	4944      	ldr	r1, [pc, #272]	@ (80019f0 <TIM7_IRQHandler+0x138>)
 80018e0:	4844      	ldr	r0, [pc, #272]	@ (80019f4 <TIM7_IRQHandler+0x13c>)
 80018e2:	f003 fbdc 	bl	800509e <HAL_UART_Receive>
    if(gpsbuf == 'G'){ //G found
 80018e6:	4b42      	ldr	r3, [pc, #264]	@ (80019f0 <TIM7_IRQHandler+0x138>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	2b47      	cmp	r3, #71	@ 0x47
 80018ec:	d103      	bne.n	80018f6 <TIM7_IRQHandler+0x3e>
      isG = 1;
 80018ee:	4b3f      	ldr	r3, [pc, #252]	@ (80019ec <TIM7_IRQHandler+0x134>)
 80018f0:	2201      	movs	r2, #1
 80018f2:	701a      	strb	r2, [r3, #0]
 80018f4:	e7f1      	b.n	80018da <TIM7_IRQHandler+0x22>
    }
    else if(isG == 1){
 80018f6:	4b3d      	ldr	r3, [pc, #244]	@ (80019ec <TIM7_IRQHandler+0x134>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d1ed      	bne.n	80018da <TIM7_IRQHandler+0x22>
      if(gpsbuf == 'A'){ //GA found
 80018fe:	4b3c      	ldr	r3, [pc, #240]	@ (80019f0 <TIM7_IRQHandler+0x138>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	2b41      	cmp	r3, #65	@ 0x41
 8001904:	d10b      	bne.n	800191e <TIM7_IRQHandler+0x66>
        HAL_UART_Receive(&huart1, rx_data_gps, GNGGA_SIZE, 100);
 8001906:	2364      	movs	r3, #100	@ 0x64
 8001908:	2224      	movs	r2, #36	@ 0x24
 800190a:	493b      	ldr	r1, [pc, #236]	@ (80019f8 <TIM7_IRQHandler+0x140>)
 800190c:	4839      	ldr	r0, [pc, #228]	@ (80019f4 <TIM7_IRQHandler+0x13c>)
 800190e:	f003 fbc6 	bl	800509e <HAL_UART_Receive>
        break;
 8001912:	bf00      	nop
  //   USART3->TDR = txsend[i];
  // }

  

  if(rx_data_gps[12] == ','){ //No fix found
 8001914:	4b38      	ldr	r3, [pc, #224]	@ (80019f8 <TIM7_IRQHandler+0x140>)
 8001916:	7b1b      	ldrb	r3, [r3, #12]
 8001918:	2b2c      	cmp	r3, #44	@ 0x2c
 800191a:	d111      	bne.n	8001940 <TIM7_IRQHandler+0x88>
 800191c:	e003      	b.n	8001926 <TIM7_IRQHandler+0x6e>
        isG = 0;
 800191e:	4b33      	ldr	r3, [pc, #204]	@ (80019ec <TIM7_IRQHandler+0x134>)
 8001920:	2200      	movs	r2, #0
 8001922:	701a      	strb	r2, [r3, #0]
    HAL_UART_Receive(&huart1, &gpsbuf, 1, 10);
 8001924:	e7d9      	b.n	80018da <TIM7_IRQHandler+0x22>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 8001926:	2201      	movs	r2, #1
 8001928:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800192c:	482e      	ldr	r0, [pc, #184]	@ (80019e8 <TIM7_IRQHandler+0x130>)
 800192e:	f001 fbd1 	bl	80030d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 8001932:	2200      	movs	r2, #0
 8001934:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001938:	482b      	ldr	r0, [pc, #172]	@ (80019e8 <TIM7_IRQHandler+0x130>)
 800193a:	f001 fbcb 	bl	80030d4 <HAL_GPIO_WritePin>
 800193e:	e043      	b.n	80019c8 <TIM7_IRQHandler+0x110>
  }else{ //fix found
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 8001940:	2200      	movs	r2, #0
 8001942:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001946:	4828      	ldr	r0, [pc, #160]	@ (80019e8 <TIM7_IRQHandler+0x130>)
 8001948:	f001 fbc4 	bl	80030d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 800194c:	2201      	movs	r2, #1
 800194e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001952:	4825      	ldr	r0, [pc, #148]	@ (80019e8 <TIM7_IRQHandler+0x130>)
 8001954:	f001 fbbe 	bl	80030d4 <HAL_GPIO_WritePin>

    // uint8_t temp[25] = "4025.7373,N,08654.7737,W";
    uint8_t txsend[41] = "AT+SEND=123,24,";
 8001958:	4b28      	ldr	r3, [pc, #160]	@ (80019fc <TIM7_IRQHandler+0x144>)
 800195a:	463c      	mov	r4, r7
 800195c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800195e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001962:	f107 0310 	add.w	r3, r7, #16
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	605a      	str	r2, [r3, #4]
 800196c:	609a      	str	r2, [r3, #8]
 800196e:	60da      	str	r2, [r3, #12]
 8001970:	611a      	str	r2, [r3, #16]
 8001972:	615a      	str	r2, [r3, #20]
 8001974:	761a      	strb	r2, [r3, #24]
    strncat(txsend, rx_data_gps+12,24);
 8001976:	4922      	ldr	r1, [pc, #136]	@ (8001a00 <TIM7_IRQHandler+0x148>)
 8001978:	463b      	mov	r3, r7
 800197a:	2218      	movs	r2, #24
 800197c:	4618      	mov	r0, r3
 800197e:	f005 fd2d 	bl	80073dc <strncat>
    // strncat(txsend, temp,24);
    strncat(txsend, "\r\n",2);
 8001982:	463b      	mov	r3, r7
 8001984:	4618      	mov	r0, r3
 8001986:	f7fe fc73 	bl	8000270 <strlen>
 800198a:	4603      	mov	r3, r0
 800198c:	461a      	mov	r2, r3
 800198e:	463b      	mov	r3, r7
 8001990:	4413      	add	r3, r2
 8001992:	4a1c      	ldr	r2, [pc, #112]	@ (8001a04 <TIM7_IRQHandler+0x14c>)
 8001994:	8811      	ldrh	r1, [r2, #0]
 8001996:	7892      	ldrb	r2, [r2, #2]
 8001998:	8019      	strh	r1, [r3, #0]
 800199a:	709a      	strb	r2, [r3, #2]
    // printf("RX gps: %s", txsend);

    // uint8_t temp2[41] = "AT+SEND=123,24,4025.7373,N,08654.7737,W\r\n"; 
    for(int i = 0; i < 41; i++){ //send received signal
 800199c:	2300      	movs	r3, #0
 800199e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80019a0:	e00f      	b.n	80019c2 <TIM7_IRQHandler+0x10a>
      while(!(USART3->ISR & USART_ISR_TXE)) { }
 80019a2:	bf00      	nop
 80019a4:	4b18      	ldr	r3, [pc, #96]	@ (8001a08 <TIM7_IRQHandler+0x150>)
 80019a6:	69db      	ldr	r3, [r3, #28]
 80019a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d0f9      	beq.n	80019a4 <TIM7_IRQHandler+0xec>
      USART3->TDR = txsend[i];
 80019b0:	463a      	mov	r2, r7
 80019b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019b4:	4413      	add	r3, r2
 80019b6:	781a      	ldrb	r2, [r3, #0]
 80019b8:	4b13      	ldr	r3, [pc, #76]	@ (8001a08 <TIM7_IRQHandler+0x150>)
 80019ba:	851a      	strh	r2, [r3, #40]	@ 0x28
    for(int i = 0; i < 41; i++){ //send received signal
 80019bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019be:	3301      	adds	r3, #1
 80019c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80019c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019c4:	2b28      	cmp	r3, #40	@ 0x28
 80019c6:	ddec      	ble.n	80019a2 <TIM7_IRQHandler+0xea>
    //     while(!(USART3->ISR & USART_ISR_TXE)) { }
    //     USART3->TDR = tx_received[i];
    //   }
  }

  bzero(rx_data_gps, GNGGA_SIZE);
 80019c8:	4b0b      	ldr	r3, [pc, #44]	@ (80019f8 <TIM7_IRQHandler+0x140>)
 80019ca:	4618      	mov	r0, r3
 80019cc:	2324      	movs	r3, #36	@ 0x24
 80019ce:	461a      	mov	r2, r3
 80019d0:	2100      	movs	r1, #0
 80019d2:	f005 fcfb 	bl	80073cc <memset>
  HAL_IWDG_Refresh(&hiwdg);
 80019d6:	480d      	ldr	r0, [pc, #52]	@ (8001a0c <TIM7_IRQHandler+0x154>)
 80019d8:	f001 fbff 	bl	80031da <HAL_IWDG_Refresh>

  /* USER CODE END TIM7_IRQn 1 */
}
 80019dc:	bf00      	nop
 80019de:	3734      	adds	r7, #52	@ 0x34
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd90      	pop	{r4, r7, pc}
 80019e4:	40001400 	.word	0x40001400
 80019e8:	48000400 	.word	0x48000400
 80019ec:	200004f8 	.word	0x200004f8
 80019f0:	200004f9 	.word	0x200004f9
 80019f4:	200002c0 	.word	0x200002c0
 80019f8:	200004d4 	.word	0x200004d4
 80019fc:	0800ab88 	.word	0x0800ab88
 8001a00:	200004e0 	.word	0x200004e0
 8001a04:	0800ab84 	.word	0x0800ab84
 8001a08:	40004800 	.word	0x40004800
 8001a0c:	20000264 	.word	0x20000264

08001a10 <init_tim7>:

void init_tim7() {
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
    RCC->APB1ENR1 |= RCC_APB1ENR1_TIM7EN; //enable TIM7 clock
 8001a16:	4b16      	ldr	r3, [pc, #88]	@ (8001a70 <init_tim7+0x60>)
 8001a18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a1a:	4a15      	ldr	r2, [pc, #84]	@ (8001a70 <init_tim7+0x60>)
 8001a1c:	f043 0320 	orr.w	r3, r3, #32
 8001a20:	6593      	str	r3, [r2, #88]	@ 0x58

    //period(sec) = (ARR * PSC) / CLK
    int period = 10;
 8001a22:	230a      	movs	r3, #10
 8001a24:	607b      	str	r3, [r7, #4]
    TIM7->PSC = 20000 - 1; //prescaler
 8001a26:	4b13      	ldr	r3, [pc, #76]	@ (8001a74 <init_tim7+0x64>)
 8001a28:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001a2c:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM7->ARR = (2000*period)- 1; //auto reload register
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001a34:	fb02 f303 	mul.w	r3, r2, r3
 8001a38:	1e5a      	subs	r2, r3, #1
 8001a3a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a74 <init_tim7+0x64>)
 8001a3c:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM7->DIER |= TIM_DIER_UIE; //update interrupt enable
 8001a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8001a74 <init_tim7+0x64>)
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	4a0c      	ldr	r2, [pc, #48]	@ (8001a74 <init_tim7+0x64>)
 8001a44:	f043 0301 	orr.w	r3, r3, #1
 8001a48:	60d3      	str	r3, [r2, #12]
    NVIC->ISER[1] |= 1 << (TIM7_IRQn-32); //enable interrupt in nvic
 8001a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a78 <init_tim7+0x68>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a78 <init_tim7+0x68>)
 8001a50:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001a54:	6053      	str	r3, [r2, #4]
    TIM7->CR1 |= TIM_CR1_CEN; //start timer
 8001a56:	4b07      	ldr	r3, [pc, #28]	@ (8001a74 <init_tim7+0x64>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a06      	ldr	r2, [pc, #24]	@ (8001a74 <init_tim7+0x64>)
 8001a5c:	f043 0301 	orr.w	r3, r3, #1
 8001a60:	6013      	str	r3, [r2, #0]
}
 8001a62:	bf00      	nop
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	40021000 	.word	0x40021000
 8001a74:	40001400 	.word	0x40001400
 8001a78:	e000e100 	.word	0xe000e100

08001a7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a80:	b672      	cpsid	i
}
 8001a82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a84:	bf00      	nop
 8001a86:	e7fd      	b.n	8001a84 <Error_Handler+0x8>

08001a88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a8e:	4b0f      	ldr	r3, [pc, #60]	@ (8001acc <HAL_MspInit+0x44>)
 8001a90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a92:	4a0e      	ldr	r2, [pc, #56]	@ (8001acc <HAL_MspInit+0x44>)
 8001a94:	f043 0301 	orr.w	r3, r3, #1
 8001a98:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a9a:	4b0c      	ldr	r3, [pc, #48]	@ (8001acc <HAL_MspInit+0x44>)
 8001a9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	607b      	str	r3, [r7, #4]
 8001aa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aa6:	4b09      	ldr	r3, [pc, #36]	@ (8001acc <HAL_MspInit+0x44>)
 8001aa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aaa:	4a08      	ldr	r2, [pc, #32]	@ (8001acc <HAL_MspInit+0x44>)
 8001aac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ab0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ab2:	4b06      	ldr	r3, [pc, #24]	@ (8001acc <HAL_MspInit+0x44>)
 8001ab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ab6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aba:	603b      	str	r3, [r7, #0]
 8001abc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	40021000 	.word	0x40021000

08001ad0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b08a      	sub	sp, #40	@ 0x28
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad8:	f107 0314 	add.w	r3, r7, #20
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
 8001ae6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a2a      	ldr	r2, [pc, #168]	@ (8001b98 <HAL_DAC_MspInit+0xc8>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d14d      	bne.n	8001b8e <HAL_DAC_MspInit+0xbe>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001af2:	4b2a      	ldr	r3, [pc, #168]	@ (8001b9c <HAL_DAC_MspInit+0xcc>)
 8001af4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001af6:	4a29      	ldr	r2, [pc, #164]	@ (8001b9c <HAL_DAC_MspInit+0xcc>)
 8001af8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001afc:	6593      	str	r3, [r2, #88]	@ 0x58
 8001afe:	4b27      	ldr	r3, [pc, #156]	@ (8001b9c <HAL_DAC_MspInit+0xcc>)
 8001b00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b02:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b06:	613b      	str	r3, [r7, #16]
 8001b08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0a:	4b24      	ldr	r3, [pc, #144]	@ (8001b9c <HAL_DAC_MspInit+0xcc>)
 8001b0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b0e:	4a23      	ldr	r2, [pc, #140]	@ (8001b9c <HAL_DAC_MspInit+0xcc>)
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b16:	4b21      	ldr	r3, [pc, #132]	@ (8001b9c <HAL_DAC_MspInit+0xcc>)
 8001b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b22:	2310      	movs	r3, #16
 8001b24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b26:	2303      	movs	r3, #3
 8001b28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b2e:	f107 0314 	add.w	r3, r7, #20
 8001b32:	4619      	mov	r1, r3
 8001b34:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b38:	f001 f922 	bl	8002d80 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA2_Channel4;
 8001b3c:	4b18      	ldr	r3, [pc, #96]	@ (8001ba0 <HAL_DAC_MspInit+0xd0>)
 8001b3e:	4a19      	ldr	r2, [pc, #100]	@ (8001ba4 <HAL_DAC_MspInit+0xd4>)
 8001b40:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_3;
 8001b42:	4b17      	ldr	r3, [pc, #92]	@ (8001ba0 <HAL_DAC_MspInit+0xd0>)
 8001b44:	2203      	movs	r2, #3
 8001b46:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b48:	4b15      	ldr	r3, [pc, #84]	@ (8001ba0 <HAL_DAC_MspInit+0xd0>)
 8001b4a:	2210      	movs	r2, #16
 8001b4c:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b4e:	4b14      	ldr	r3, [pc, #80]	@ (8001ba0 <HAL_DAC_MspInit+0xd0>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001b54:	4b12      	ldr	r3, [pc, #72]	@ (8001ba0 <HAL_DAC_MspInit+0xd0>)
 8001b56:	2280      	movs	r2, #128	@ 0x80
 8001b58:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b5a:	4b11      	ldr	r3, [pc, #68]	@ (8001ba0 <HAL_DAC_MspInit+0xd0>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b60:	4b0f      	ldr	r3, [pc, #60]	@ (8001ba0 <HAL_DAC_MspInit+0xd0>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_NORMAL;
 8001b66:	4b0e      	ldr	r3, [pc, #56]	@ (8001ba0 <HAL_DAC_MspInit+0xd0>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ba0 <HAL_DAC_MspInit+0xd0>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8001b72:	480b      	ldr	r0, [pc, #44]	@ (8001ba0 <HAL_DAC_MspInit+0xd0>)
 8001b74:	f000 fe8e 	bl	8002894 <HAL_DMA_Init>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <HAL_DAC_MspInit+0xb2>
    {
      Error_Handler();
 8001b7e:	f7ff ff7d 	bl	8001a7c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a06      	ldr	r2, [pc, #24]	@ (8001ba0 <HAL_DAC_MspInit+0xd0>)
 8001b86:	609a      	str	r2, [r3, #8]
 8001b88:	4a05      	ldr	r2, [pc, #20]	@ (8001ba0 <HAL_DAC_MspInit+0xd0>)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8001b8e:	bf00      	nop
 8001b90:	3728      	adds	r7, #40	@ 0x28
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40007400 	.word	0x40007400
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	2000021c 	.word	0x2000021c
 8001ba4:	40020444 	.word	0x40020444

08001ba8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bb8:	d10b      	bne.n	8001bd2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bba:	4b09      	ldr	r3, [pc, #36]	@ (8001be0 <HAL_TIM_Base_MspInit+0x38>)
 8001bbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bbe:	4a08      	ldr	r2, [pc, #32]	@ (8001be0 <HAL_TIM_Base_MspInit+0x38>)
 8001bc0:	f043 0301 	orr.w	r3, r3, #1
 8001bc4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bc6:	4b06      	ldr	r3, [pc, #24]	@ (8001be0 <HAL_TIM_Base_MspInit+0x38>)
 8001bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001bd2:	bf00      	nop
 8001bd4:	3714      	adds	r7, #20
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	40021000 	.word	0x40021000

08001be4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b0ae      	sub	sp, #184	@ 0xb8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bec:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	605a      	str	r2, [r3, #4]
 8001bf6:	609a      	str	r2, [r3, #8]
 8001bf8:	60da      	str	r2, [r3, #12]
 8001bfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bfc:	f107 031c 	add.w	r3, r7, #28
 8001c00:	2288      	movs	r2, #136	@ 0x88
 8001c02:	2100      	movs	r1, #0
 8001c04:	4618      	mov	r0, r3
 8001c06:	f005 fbe1 	bl	80073cc <memset>
  if(huart->Instance==USART1)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a47      	ldr	r2, [pc, #284]	@ (8001d2c <HAL_UART_MspInit+0x148>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d13d      	bne.n	8001c90 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c14:	2301      	movs	r3, #1
 8001c16:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c1c:	f107 031c 	add.w	r3, r7, #28
 8001c20:	4618      	mov	r0, r3
 8001c22:	f002 f94f 	bl	8003ec4 <HAL_RCCEx_PeriphCLKConfig>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c2c:	f7ff ff26 	bl	8001a7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c30:	4b3f      	ldr	r3, [pc, #252]	@ (8001d30 <HAL_UART_MspInit+0x14c>)
 8001c32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c34:	4a3e      	ldr	r2, [pc, #248]	@ (8001d30 <HAL_UART_MspInit+0x14c>)
 8001c36:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c3a:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c3c:	4b3c      	ldr	r3, [pc, #240]	@ (8001d30 <HAL_UART_MspInit+0x14c>)
 8001c3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c44:	61bb      	str	r3, [r7, #24]
 8001c46:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c48:	4b39      	ldr	r3, [pc, #228]	@ (8001d30 <HAL_UART_MspInit+0x14c>)
 8001c4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c4c:	4a38      	ldr	r2, [pc, #224]	@ (8001d30 <HAL_UART_MspInit+0x14c>)
 8001c4e:	f043 0301 	orr.w	r3, r3, #1
 8001c52:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c54:	4b36      	ldr	r3, [pc, #216]	@ (8001d30 <HAL_UART_MspInit+0x14c>)
 8001c56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c58:	f003 0301 	and.w	r3, r3, #1
 8001c5c:	617b      	str	r3, [r7, #20]
 8001c5e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001c60:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001c64:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c68:	2302      	movs	r3, #2
 8001c6a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c74:	2303      	movs	r3, #3
 8001c76:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c7a:	2307      	movs	r3, #7
 8001c7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c80:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001c84:	4619      	mov	r1, r3
 8001c86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c8a:	f001 f879 	bl	8002d80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c8e:	e048      	b.n	8001d22 <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART2)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a27      	ldr	r2, [pc, #156]	@ (8001d34 <HAL_UART_MspInit+0x150>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d143      	bne.n	8001d22 <HAL_UART_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ca2:	f107 031c 	add.w	r3, r7, #28
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f002 f90c 	bl	8003ec4 <HAL_RCCEx_PeriphCLKConfig>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8001cb2:	f7ff fee3 	bl	8001a7c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cb6:	4b1e      	ldr	r3, [pc, #120]	@ (8001d30 <HAL_UART_MspInit+0x14c>)
 8001cb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cba:	4a1d      	ldr	r2, [pc, #116]	@ (8001d30 <HAL_UART_MspInit+0x14c>)
 8001cbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cc2:	4b1b      	ldr	r3, [pc, #108]	@ (8001d30 <HAL_UART_MspInit+0x14c>)
 8001cc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cca:	613b      	str	r3, [r7, #16]
 8001ccc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cce:	4b18      	ldr	r3, [pc, #96]	@ (8001d30 <HAL_UART_MspInit+0x14c>)
 8001cd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cd2:	4a17      	ldr	r2, [pc, #92]	@ (8001d30 <HAL_UART_MspInit+0x14c>)
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cda:	4b15      	ldr	r3, [pc, #84]	@ (8001d30 <HAL_UART_MspInit+0x14c>)
 8001cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ce6:	230c      	movs	r3, #12
 8001ce8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cec:	2302      	movs	r3, #2
 8001cee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cfe:	2307      	movs	r3, #7
 8001d00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d04:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001d08:	4619      	mov	r1, r3
 8001d0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d0e:	f001 f837 	bl	8002d80 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d12:	2200      	movs	r2, #0
 8001d14:	2100      	movs	r1, #0
 8001d16:	2026      	movs	r0, #38	@ 0x26
 8001d18:	f000 fac7 	bl	80022aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d1c:	2026      	movs	r0, #38	@ 0x26
 8001d1e:	f000 fae0 	bl	80022e2 <HAL_NVIC_EnableIRQ>
}
 8001d22:	bf00      	nop
 8001d24:	37b8      	adds	r7, #184	@ 0xb8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40013800 	.word	0x40013800
 8001d30:	40021000 	.word	0x40021000
 8001d34:	40004400 	.word	0x40004400

08001d38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d3c:	bf00      	nop
 8001d3e:	e7fd      	b.n	8001d3c <NMI_Handler+0x4>

08001d40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d44:	bf00      	nop
 8001d46:	e7fd      	b.n	8001d44 <HardFault_Handler+0x4>

08001d48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d4c:	bf00      	nop
 8001d4e:	e7fd      	b.n	8001d4c <MemManage_Handler+0x4>

08001d50 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d54:	bf00      	nop
 8001d56:	e7fd      	b.n	8001d54 <BusFault_Handler+0x4>

08001d58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d5c:	bf00      	nop
 8001d5e:	e7fd      	b.n	8001d5c <UsageFault_Handler+0x4>

08001d60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d64:	bf00      	nop
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d72:	bf00      	nop
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d80:	bf00      	nop
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d8e:	f000 f96d 	bl	800206c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
	...

08001d98 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d9c:	4802      	ldr	r0, [pc, #8]	@ (8001da8 <USART2_IRQHandler+0x10>)
 8001d9e:	f003 fa47 	bl	8005230 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001da2:	bf00      	nop
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	20000348 	.word	0x20000348

08001dac <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8001db0:	4802      	ldr	r0, [pc, #8]	@ (8001dbc <DMA2_Channel4_IRQHandler+0x10>)
 8001db2:	f000 ff06 	bl	8002bc2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8001db6:	bf00      	nop
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	2000021c 	.word	0x2000021c

08001dc0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  return 1;
 8001dc4:	2301      	movs	r3, #1
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <_kill>:

int _kill(int pid, int sig)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001dda:	f005 fb5d 	bl	8007498 <__errno>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2216      	movs	r2, #22
 8001de2:	601a      	str	r2, [r3, #0]
  return -1;
 8001de4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3708      	adds	r7, #8
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <_exit>:

void _exit (int status)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001df8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f7ff ffe7 	bl	8001dd0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e02:	bf00      	nop
 8001e04:	e7fd      	b.n	8001e02 <_exit+0x12>

08001e06 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b086      	sub	sp, #24
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	60f8      	str	r0, [r7, #12]
 8001e0e:	60b9      	str	r1, [r7, #8]
 8001e10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e12:	2300      	movs	r3, #0
 8001e14:	617b      	str	r3, [r7, #20]
 8001e16:	e00a      	b.n	8001e2e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e18:	f3af 8000 	nop.w
 8001e1c:	4601      	mov	r1, r0
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	1c5a      	adds	r2, r3, #1
 8001e22:	60ba      	str	r2, [r7, #8]
 8001e24:	b2ca      	uxtb	r2, r1
 8001e26:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	617b      	str	r3, [r7, #20]
 8001e2e:	697a      	ldr	r2, [r7, #20]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	dbf0      	blt.n	8001e18 <_read+0x12>
  }

  return len;
 8001e36:	687b      	ldr	r3, [r7, #4]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3718      	adds	r7, #24
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	617b      	str	r3, [r7, #20]
 8001e50:	e009      	b.n	8001e66 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	1c5a      	adds	r2, r3, #1
 8001e56:	60ba      	str	r2, [r7, #8]
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff f8c2 	bl	8000fe4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	3301      	adds	r3, #1
 8001e64:	617b      	str	r3, [r7, #20]
 8001e66:	697a      	ldr	r2, [r7, #20]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	dbf1      	blt.n	8001e52 <_write+0x12>
  }
  return len;
 8001e6e:	687b      	ldr	r3, [r7, #4]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3718      	adds	r7, #24
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <_close>:

int _close(int file)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ea0:	605a      	str	r2, [r3, #4]
  return 0;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <_isatty>:

int _isatty(int file)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001eb8:	2301      	movs	r3, #1
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	b085      	sub	sp, #20
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	60f8      	str	r0, [r7, #12]
 8001ece:	60b9      	str	r1, [r7, #8]
 8001ed0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ed2:	2300      	movs	r3, #0
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3714      	adds	r7, #20
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ee8:	4a14      	ldr	r2, [pc, #80]	@ (8001f3c <_sbrk+0x5c>)
 8001eea:	4b15      	ldr	r3, [pc, #84]	@ (8001f40 <_sbrk+0x60>)
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ef4:	4b13      	ldr	r3, [pc, #76]	@ (8001f44 <_sbrk+0x64>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d102      	bne.n	8001f02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001efc:	4b11      	ldr	r3, [pc, #68]	@ (8001f44 <_sbrk+0x64>)
 8001efe:	4a12      	ldr	r2, [pc, #72]	@ (8001f48 <_sbrk+0x68>)
 8001f00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f02:	4b10      	ldr	r3, [pc, #64]	@ (8001f44 <_sbrk+0x64>)
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4413      	add	r3, r2
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d207      	bcs.n	8001f20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f10:	f005 fac2 	bl	8007498 <__errno>
 8001f14:	4603      	mov	r3, r0
 8001f16:	220c      	movs	r2, #12
 8001f18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f1e:	e009      	b.n	8001f34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f20:	4b08      	ldr	r3, [pc, #32]	@ (8001f44 <_sbrk+0x64>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f26:	4b07      	ldr	r3, [pc, #28]	@ (8001f44 <_sbrk+0x64>)
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	4a05      	ldr	r2, [pc, #20]	@ (8001f44 <_sbrk+0x64>)
 8001f30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f32:	68fb      	ldr	r3, [r7, #12]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3718      	adds	r7, #24
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	20018000 	.word	0x20018000
 8001f40:	00000400 	.word	0x00000400
 8001f44:	200004fc 	.word	0x200004fc
 8001f48:	20000650 	.word	0x20000650

08001f4c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001f50:	4b06      	ldr	r3, [pc, #24]	@ (8001f6c <SystemInit+0x20>)
 8001f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f56:	4a05      	ldr	r2, [pc, #20]	@ (8001f6c <SystemInit+0x20>)
 8001f58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001f60:	bf00      	nop
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	e000ed00 	.word	0xe000ed00

08001f70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001f70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001fa8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f74:	f7ff ffea 	bl	8001f4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f78:	480c      	ldr	r0, [pc, #48]	@ (8001fac <LoopForever+0x6>)
  ldr r1, =_edata
 8001f7a:	490d      	ldr	r1, [pc, #52]	@ (8001fb0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f7c:	4a0d      	ldr	r2, [pc, #52]	@ (8001fb4 <LoopForever+0xe>)
  movs r3, #0
 8001f7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f80:	e002      	b.n	8001f88 <LoopCopyDataInit>

08001f82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f86:	3304      	adds	r3, #4

08001f88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f8c:	d3f9      	bcc.n	8001f82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f8e:	4a0a      	ldr	r2, [pc, #40]	@ (8001fb8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f90:	4c0a      	ldr	r4, [pc, #40]	@ (8001fbc <LoopForever+0x16>)
  movs r3, #0
 8001f92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f94:	e001      	b.n	8001f9a <LoopFillZerobss>

08001f96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f98:	3204      	adds	r2, #4

08001f9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f9c:	d3fb      	bcc.n	8001f96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f9e:	f005 fa81 	bl	80074a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fa2:	f7ff f831 	bl	8001008 <main>

08001fa6 <LoopForever>:

LoopForever:
    b LoopForever
 8001fa6:	e7fe      	b.n	8001fa6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001fa8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001fac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fb0:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001fb4:	0801a2c8 	.word	0x0801a2c8
  ldr r2, =_sbss
 8001fb8:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001fbc:	20000650 	.word	0x20000650

08001fc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fc0:	e7fe      	b.n	8001fc0 <ADC1_2_IRQHandler>

08001fc2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b082      	sub	sp, #8
 8001fc6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fcc:	2003      	movs	r0, #3
 8001fce:	f000 f961 	bl	8002294 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fd2:	200f      	movs	r0, #15
 8001fd4:	f000 f80e 	bl	8001ff4 <HAL_InitTick>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d002      	beq.n	8001fe4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	71fb      	strb	r3, [r7, #7]
 8001fe2:	e001      	b.n	8001fe8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001fe4:	f7ff fd50 	bl	8001a88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001fe8:	79fb      	ldrb	r3, [r7, #7]
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
	...

08001ff4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002000:	4b17      	ldr	r3, [pc, #92]	@ (8002060 <HAL_InitTick+0x6c>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d023      	beq.n	8002050 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002008:	4b16      	ldr	r3, [pc, #88]	@ (8002064 <HAL_InitTick+0x70>)
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	4b14      	ldr	r3, [pc, #80]	@ (8002060 <HAL_InitTick+0x6c>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	4619      	mov	r1, r3
 8002012:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002016:	fbb3 f3f1 	udiv	r3, r3, r1
 800201a:	fbb2 f3f3 	udiv	r3, r2, r3
 800201e:	4618      	mov	r0, r3
 8002020:	f000 f96d 	bl	80022fe <HAL_SYSTICK_Config>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d10f      	bne.n	800204a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2b0f      	cmp	r3, #15
 800202e:	d809      	bhi.n	8002044 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002030:	2200      	movs	r2, #0
 8002032:	6879      	ldr	r1, [r7, #4]
 8002034:	f04f 30ff 	mov.w	r0, #4294967295
 8002038:	f000 f937 	bl	80022aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800203c:	4a0a      	ldr	r2, [pc, #40]	@ (8002068 <HAL_InitTick+0x74>)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6013      	str	r3, [r2, #0]
 8002042:	e007      	b.n	8002054 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	73fb      	strb	r3, [r7, #15]
 8002048:	e004      	b.n	8002054 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	73fb      	strb	r3, [r7, #15]
 800204e:	e001      	b.n	8002054 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002054:	7bfb      	ldrb	r3, [r7, #15]
}
 8002056:	4618      	mov	r0, r3
 8002058:	3710      	adds	r7, #16
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	20000020 	.word	0x20000020
 8002064:	20000018 	.word	0x20000018
 8002068:	2000001c 	.word	0x2000001c

0800206c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002070:	4b06      	ldr	r3, [pc, #24]	@ (800208c <HAL_IncTick+0x20>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	461a      	mov	r2, r3
 8002076:	4b06      	ldr	r3, [pc, #24]	@ (8002090 <HAL_IncTick+0x24>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4413      	add	r3, r2
 800207c:	4a04      	ldr	r2, [pc, #16]	@ (8002090 <HAL_IncTick+0x24>)
 800207e:	6013      	str	r3, [r2, #0]
}
 8002080:	bf00      	nop
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	20000020 	.word	0x20000020
 8002090:	20000500 	.word	0x20000500

08002094 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  return uwTick;
 8002098:	4b03      	ldr	r3, [pc, #12]	@ (80020a8 <HAL_GetTick+0x14>)
 800209a:	681b      	ldr	r3, [r3, #0]
}
 800209c:	4618      	mov	r0, r3
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	20000500 	.word	0x20000500

080020ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020b4:	f7ff ffee 	bl	8002094 <HAL_GetTick>
 80020b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c4:	d005      	beq.n	80020d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80020c6:	4b0a      	ldr	r3, [pc, #40]	@ (80020f0 <HAL_Delay+0x44>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	461a      	mov	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	4413      	add	r3, r2
 80020d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020d2:	bf00      	nop
 80020d4:	f7ff ffde 	bl	8002094 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d8f7      	bhi.n	80020d4 <HAL_Delay+0x28>
  {
  }
}
 80020e4:	bf00      	nop
 80020e6:	bf00      	nop
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20000020 	.word	0x20000020

080020f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f003 0307 	and.w	r3, r3, #7
 8002102:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002104:	4b0c      	ldr	r3, [pc, #48]	@ (8002138 <__NVIC_SetPriorityGrouping+0x44>)
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800210a:	68ba      	ldr	r2, [r7, #8]
 800210c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002110:	4013      	ands	r3, r2
 8002112:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800211c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002120:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002124:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002126:	4a04      	ldr	r2, [pc, #16]	@ (8002138 <__NVIC_SetPriorityGrouping+0x44>)
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	60d3      	str	r3, [r2, #12]
}
 800212c:	bf00      	nop
 800212e:	3714      	adds	r7, #20
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	e000ed00 	.word	0xe000ed00

0800213c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002140:	4b04      	ldr	r3, [pc, #16]	@ (8002154 <__NVIC_GetPriorityGrouping+0x18>)
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	0a1b      	lsrs	r3, r3, #8
 8002146:	f003 0307 	and.w	r3, r3, #7
}
 800214a:	4618      	mov	r0, r3
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	e000ed00 	.word	0xe000ed00

08002158 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	4603      	mov	r3, r0
 8002160:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002166:	2b00      	cmp	r3, #0
 8002168:	db0b      	blt.n	8002182 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800216a:	79fb      	ldrb	r3, [r7, #7]
 800216c:	f003 021f 	and.w	r2, r3, #31
 8002170:	4907      	ldr	r1, [pc, #28]	@ (8002190 <__NVIC_EnableIRQ+0x38>)
 8002172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002176:	095b      	lsrs	r3, r3, #5
 8002178:	2001      	movs	r0, #1
 800217a:	fa00 f202 	lsl.w	r2, r0, r2
 800217e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	e000e100 	.word	0xe000e100

08002194 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	4603      	mov	r3, r0
 800219c:	6039      	str	r1, [r7, #0]
 800219e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	db0a      	blt.n	80021be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	b2da      	uxtb	r2, r3
 80021ac:	490c      	ldr	r1, [pc, #48]	@ (80021e0 <__NVIC_SetPriority+0x4c>)
 80021ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b2:	0112      	lsls	r2, r2, #4
 80021b4:	b2d2      	uxtb	r2, r2
 80021b6:	440b      	add	r3, r1
 80021b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021bc:	e00a      	b.n	80021d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	b2da      	uxtb	r2, r3
 80021c2:	4908      	ldr	r1, [pc, #32]	@ (80021e4 <__NVIC_SetPriority+0x50>)
 80021c4:	79fb      	ldrb	r3, [r7, #7]
 80021c6:	f003 030f 	and.w	r3, r3, #15
 80021ca:	3b04      	subs	r3, #4
 80021cc:	0112      	lsls	r2, r2, #4
 80021ce:	b2d2      	uxtb	r2, r2
 80021d0:	440b      	add	r3, r1
 80021d2:	761a      	strb	r2, [r3, #24]
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	e000e100 	.word	0xe000e100
 80021e4:	e000ed00 	.word	0xe000ed00

080021e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b089      	sub	sp, #36	@ 0x24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f003 0307 	and.w	r3, r3, #7
 80021fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	f1c3 0307 	rsb	r3, r3, #7
 8002202:	2b04      	cmp	r3, #4
 8002204:	bf28      	it	cs
 8002206:	2304      	movcs	r3, #4
 8002208:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	3304      	adds	r3, #4
 800220e:	2b06      	cmp	r3, #6
 8002210:	d902      	bls.n	8002218 <NVIC_EncodePriority+0x30>
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	3b03      	subs	r3, #3
 8002216:	e000      	b.n	800221a <NVIC_EncodePriority+0x32>
 8002218:	2300      	movs	r3, #0
 800221a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800221c:	f04f 32ff 	mov.w	r2, #4294967295
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	43da      	mvns	r2, r3
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	401a      	ands	r2, r3
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002230:	f04f 31ff 	mov.w	r1, #4294967295
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	fa01 f303 	lsl.w	r3, r1, r3
 800223a:	43d9      	mvns	r1, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002240:	4313      	orrs	r3, r2
         );
}
 8002242:	4618      	mov	r0, r3
 8002244:	3724      	adds	r7, #36	@ 0x24
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
	...

08002250 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	3b01      	subs	r3, #1
 800225c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002260:	d301      	bcc.n	8002266 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002262:	2301      	movs	r3, #1
 8002264:	e00f      	b.n	8002286 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002266:	4a0a      	ldr	r2, [pc, #40]	@ (8002290 <SysTick_Config+0x40>)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	3b01      	subs	r3, #1
 800226c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800226e:	210f      	movs	r1, #15
 8002270:	f04f 30ff 	mov.w	r0, #4294967295
 8002274:	f7ff ff8e 	bl	8002194 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002278:	4b05      	ldr	r3, [pc, #20]	@ (8002290 <SysTick_Config+0x40>)
 800227a:	2200      	movs	r2, #0
 800227c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800227e:	4b04      	ldr	r3, [pc, #16]	@ (8002290 <SysTick_Config+0x40>)
 8002280:	2207      	movs	r2, #7
 8002282:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	e000e010 	.word	0xe000e010

08002294 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f7ff ff29 	bl	80020f4 <__NVIC_SetPriorityGrouping>
}
 80022a2:	bf00      	nop
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b086      	sub	sp, #24
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	4603      	mov	r3, r0
 80022b2:	60b9      	str	r1, [r7, #8]
 80022b4:	607a      	str	r2, [r7, #4]
 80022b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80022b8:	2300      	movs	r3, #0
 80022ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022bc:	f7ff ff3e 	bl	800213c <__NVIC_GetPriorityGrouping>
 80022c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	68b9      	ldr	r1, [r7, #8]
 80022c6:	6978      	ldr	r0, [r7, #20]
 80022c8:	f7ff ff8e 	bl	80021e8 <NVIC_EncodePriority>
 80022cc:	4602      	mov	r2, r0
 80022ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022d2:	4611      	mov	r1, r2
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff ff5d 	bl	8002194 <__NVIC_SetPriority>
}
 80022da:	bf00      	nop
 80022dc:	3718      	adds	r7, #24
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b082      	sub	sp, #8
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	4603      	mov	r3, r0
 80022ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff ff31 	bl	8002158 <__NVIC_EnableIRQ>
}
 80022f6:	bf00      	nop
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b082      	sub	sp, #8
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f7ff ffa2 	bl	8002250 <SysTick_Config>
 800230c:	4603      	mov	r3, r0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b082      	sub	sp, #8
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d101      	bne.n	8002328 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e014      	b.n	8002352 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	791b      	ldrb	r3, [r3, #4]
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b00      	cmp	r3, #0
 8002330:	d105      	bne.n	800233e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f7ff fbc9 	bl	8001ad0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2202      	movs	r2, #2
 8002342:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2201      	movs	r2, #1
 800234e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
	...

0800235c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
 8002368:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800236a:	2300      	movs	r3, #0
 800236c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	795b      	ldrb	r3, [r3, #5]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d101      	bne.n	800237a <HAL_DAC_Start_DMA+0x1e>
 8002376:	2302      	movs	r3, #2
 8002378:	e0ab      	b.n	80024d2 <HAL_DAC_Start_DMA+0x176>
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2201      	movs	r2, #1
 800237e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2202      	movs	r2, #2
 8002384:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d12f      	bne.n	80023ec <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	4a52      	ldr	r2, [pc, #328]	@ (80024dc <HAL_DAC_Start_DMA+0x180>)
 8002392:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	4a51      	ldr	r2, [pc, #324]	@ (80024e0 <HAL_DAC_Start_DMA+0x184>)
 800239a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	4a50      	ldr	r2, [pc, #320]	@ (80024e4 <HAL_DAC_Start_DMA+0x188>)
 80023a2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80023b2:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80023b4:	6a3b      	ldr	r3, [r7, #32]
 80023b6:	2b08      	cmp	r3, #8
 80023b8:	d013      	beq.n	80023e2 <HAL_DAC_Start_DMA+0x86>
 80023ba:	6a3b      	ldr	r3, [r7, #32]
 80023bc:	2b08      	cmp	r3, #8
 80023be:	d845      	bhi.n	800244c <HAL_DAC_Start_DMA+0xf0>
 80023c0:	6a3b      	ldr	r3, [r7, #32]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <HAL_DAC_Start_DMA+0x72>
 80023c6:	6a3b      	ldr	r3, [r7, #32]
 80023c8:	2b04      	cmp	r3, #4
 80023ca:	d005      	beq.n	80023d8 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80023cc:	e03e      	b.n	800244c <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	3308      	adds	r3, #8
 80023d4:	613b      	str	r3, [r7, #16]
        break;
 80023d6:	e03c      	b.n	8002452 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	330c      	adds	r3, #12
 80023de:	613b      	str	r3, [r7, #16]
        break;
 80023e0:	e037      	b.n	8002452 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	3310      	adds	r3, #16
 80023e8:	613b      	str	r3, [r7, #16]
        break;
 80023ea:	e032      	b.n	8002452 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	4a3d      	ldr	r2, [pc, #244]	@ (80024e8 <HAL_DAC_Start_DMA+0x18c>)
 80023f2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	4a3c      	ldr	r2, [pc, #240]	@ (80024ec <HAL_DAC_Start_DMA+0x190>)
 80023fa:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	4a3b      	ldr	r2, [pc, #236]	@ (80024f0 <HAL_DAC_Start_DMA+0x194>)
 8002402:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002412:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002414:	6a3b      	ldr	r3, [r7, #32]
 8002416:	2b08      	cmp	r3, #8
 8002418:	d013      	beq.n	8002442 <HAL_DAC_Start_DMA+0xe6>
 800241a:	6a3b      	ldr	r3, [r7, #32]
 800241c:	2b08      	cmp	r3, #8
 800241e:	d817      	bhi.n	8002450 <HAL_DAC_Start_DMA+0xf4>
 8002420:	6a3b      	ldr	r3, [r7, #32]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d003      	beq.n	800242e <HAL_DAC_Start_DMA+0xd2>
 8002426:	6a3b      	ldr	r3, [r7, #32]
 8002428:	2b04      	cmp	r3, #4
 800242a:	d005      	beq.n	8002438 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800242c:	e010      	b.n	8002450 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	3314      	adds	r3, #20
 8002434:	613b      	str	r3, [r7, #16]
        break;
 8002436:	e00c      	b.n	8002452 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	3318      	adds	r3, #24
 800243e:	613b      	str	r3, [r7, #16]
        break;
 8002440:	e007      	b.n	8002452 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	331c      	adds	r3, #28
 8002448:	613b      	str	r3, [r7, #16]
        break;
 800244a:	e002      	b.n	8002452 <HAL_DAC_Start_DMA+0xf6>
        break;
 800244c:	bf00      	nop
 800244e:	e000      	b.n	8002452 <HAL_DAC_Start_DMA+0xf6>
        break;
 8002450:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d111      	bne.n	800247c <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002466:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6898      	ldr	r0, [r3, #8]
 800246c:	6879      	ldr	r1, [r7, #4]
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	f000 fac7 	bl	8002a04 <HAL_DMA_Start_IT>
 8002476:	4603      	mov	r3, r0
 8002478:	75fb      	strb	r3, [r7, #23]
 800247a:	e010      	b.n	800249e <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 800248a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	68d8      	ldr	r0, [r3, #12]
 8002490:	6879      	ldr	r1, [r7, #4]
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	693a      	ldr	r2, [r7, #16]
 8002496:	f000 fab5 	bl	8002a04 <HAL_DMA_Start_IT>
 800249a:	4603      	mov	r3, r0
 800249c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2200      	movs	r2, #0
 80024a2:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80024a4:	7dfb      	ldrb	r3, [r7, #23]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d10c      	bne.n	80024c4 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6819      	ldr	r1, [r3, #0]
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	f003 0310 	and.w	r3, r3, #16
 80024b6:	2201      	movs	r2, #1
 80024b8:	409a      	lsls	r2, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	430a      	orrs	r2, r1
 80024c0:	601a      	str	r2, [r3, #0]
 80024c2:	e005      	b.n	80024d0 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	f043 0204 	orr.w	r2, r3, #4
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80024d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3718      	adds	r7, #24
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	0800277f 	.word	0x0800277f
 80024e0:	080027a1 	.word	0x080027a1
 80024e4:	080027bd 	.word	0x080027bd
 80024e8:	08002827 	.word	0x08002827
 80024ec:	08002849 	.word	0x08002849
 80024f0:	08002865 	.word	0x08002865

080024f4 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80024fc:	bf00      	nop
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002510:	bf00      	nop
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b088      	sub	sp, #32
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800253c:	2300      	movs	r3, #0
 800253e:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	795b      	ldrb	r3, [r3, #5]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d101      	bne.n	800254c <HAL_DAC_ConfigChannel+0x1c>
 8002548:	2302      	movs	r3, #2
 800254a:	e114      	b.n	8002776 <HAL_DAC_ConfigChannel+0x246>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2201      	movs	r2, #1
 8002550:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2202      	movs	r2, #2
 8002556:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2b04      	cmp	r3, #4
 800255e:	f040 8081 	bne.w	8002664 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002562:	f7ff fd97 	bl	8002094 <HAL_GetTick>
 8002566:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d140      	bne.n	80025f0 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800256e:	e018      	b.n	80025a2 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002570:	f7ff fd90 	bl	8002094 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b01      	cmp	r3, #1
 800257c:	d911      	bls.n	80025a2 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002584:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d00a      	beq.n	80025a2 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	f043 0208 	orr.w	r2, r3, #8
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2203      	movs	r2, #3
 800259c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e0e9      	b.n	8002776 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d1df      	bne.n	8002570 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 80025b0:	2001      	movs	r0, #1
 80025b2:	f7ff fd7b 	bl	80020ac <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68ba      	ldr	r2, [r7, #8]
 80025bc:	6992      	ldr	r2, [r2, #24]
 80025be:	641a      	str	r2, [r3, #64]	@ 0x40
 80025c0:	e023      	b.n	800260a <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80025c2:	f7ff fd67 	bl	8002094 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d90f      	bls.n	80025f0 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	da0a      	bge.n	80025f0 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	f043 0208 	orr.w	r2, r3, #8
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2203      	movs	r2, #3
 80025ea:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e0c2      	b.n	8002776 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	dbe3      	blt.n	80025c2 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 80025fa:	2001      	movs	r0, #1
 80025fc:	f7ff fd56 	bl	80020ac <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	68ba      	ldr	r2, [r7, #8]
 8002606:	6992      	ldr	r2, [r2, #24]
 8002608:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f003 0310 	and.w	r3, r3, #16
 8002616:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800261a:	fa01 f303 	lsl.w	r3, r1, r3
 800261e:	43db      	mvns	r3, r3
 8002620:	ea02 0103 	and.w	r1, r2, r3
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	69da      	ldr	r2, [r3, #28]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f003 0310 	and.w	r3, r3, #16
 800262e:	409a      	lsls	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	430a      	orrs	r2, r1
 8002636:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f003 0310 	and.w	r3, r3, #16
 8002644:	21ff      	movs	r1, #255	@ 0xff
 8002646:	fa01 f303 	lsl.w	r3, r1, r3
 800264a:	43db      	mvns	r3, r3
 800264c:	ea02 0103 	and.w	r1, r2, r3
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	6a1a      	ldr	r2, [r3, #32]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f003 0310 	and.w	r3, r3, #16
 800265a:	409a      	lsls	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	430a      	orrs	r2, r1
 8002662:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d11d      	bne.n	80026a8 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002672:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f003 0310 	and.w	r3, r3, #16
 800267a:	221f      	movs	r2, #31
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	43db      	mvns	r3, r3
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	4013      	ands	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	695b      	ldr	r3, [r3, #20]
 800268c:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f003 0310 	and.w	r3, r3, #16
 8002694:	697a      	ldr	r2, [r7, #20]
 8002696:	fa02 f303 	lsl.w	r3, r2, r3
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	4313      	orrs	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026ae:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f003 0310 	and.w	r3, r3, #16
 80026b6:	2207      	movs	r2, #7
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	43db      	mvns	r3, r3
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	4013      	ands	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	431a      	orrs	r2, r3
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f003 0310 	and.w	r3, r3, #16
 80026dc:	697a      	ldr	r2, [r7, #20]
 80026de:	fa02 f303 	lsl.w	r3, r2, r3
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6819      	ldr	r1, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f003 0310 	and.w	r3, r3, #16
 80026fc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	43da      	mvns	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	400a      	ands	r2, r1
 800270c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f003 0310 	and.w	r3, r3, #16
 800271c:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	43db      	mvns	r3, r3
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	4013      	ands	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f003 0310 	and.w	r3, r3, #16
 8002738:	697a      	ldr	r2, [r7, #20]
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	4313      	orrs	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6819      	ldr	r1, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f003 0310 	and.w	r3, r3, #16
 8002758:	22c0      	movs	r2, #192	@ 0xc0
 800275a:	fa02 f303 	lsl.w	r3, r2, r3
 800275e:	43da      	mvns	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	400a      	ands	r2, r1
 8002766:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2201      	movs	r2, #1
 800276c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2200      	movs	r2, #0
 8002772:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3720      	adds	r7, #32
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b084      	sub	sp, #16
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800278a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f7ff feb1 	bl	80024f4 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2201      	movs	r2, #1
 8002796:	711a      	strb	r2, [r3, #4]
}
 8002798:	bf00      	nop
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ac:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80027ae:	68f8      	ldr	r0, [r7, #12]
 80027b0:	f7ff feaa 	bl	8002508 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80027b4:	bf00      	nop
 80027b6:	3710      	adds	r7, #16
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027c8:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	f043 0204 	orr.w	r2, r3, #4
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80027d6:	68f8      	ldr	r0, [r7, #12]
 80027d8:	f7ff fea0 	bl	800251c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2201      	movs	r2, #1
 80027e0:	711a      	strb	r2, [r3, #4]
}
 80027e2:	bf00      	nop
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80027ea:	b480      	push	{r7}
 80027ec:	b083      	sub	sp, #12
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80027f2:	bf00      	nop
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr

080027fe <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80027fe:	b480      	push	{r7}
 8002800:	b083      	sub	sp, #12
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002806:	bf00      	nop
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr

08002812 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002812:	b480      	push	{r7}
 8002814:	b083      	sub	sp, #12
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800281a:	bf00      	nop
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr

08002826 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b084      	sub	sp, #16
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002832:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002834:	68f8      	ldr	r0, [r7, #12]
 8002836:	f7ff ffd8 	bl	80027ea <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2201      	movs	r2, #1
 800283e:	711a      	strb	r2, [r3, #4]
}
 8002840:	bf00      	nop
 8002842:	3710      	adds	r7, #16
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002854:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002856:	68f8      	ldr	r0, [r7, #12]
 8002858:	f7ff ffd1 	bl	80027fe <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800285c:	bf00      	nop
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002870:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	f043 0204 	orr.w	r2, r3, #4
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800287e:	68f8      	ldr	r0, [r7, #12]
 8002880:	f7ff ffc7 	bl	8002812 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2201      	movs	r2, #1
 8002888:	711a      	strb	r2, [r3, #4]
}
 800288a:	bf00      	nop
 800288c:	3710      	adds	r7, #16
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
	...

08002894 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e098      	b.n	80029d8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	461a      	mov	r2, r3
 80028ac:	4b4d      	ldr	r3, [pc, #308]	@ (80029e4 <HAL_DMA_Init+0x150>)
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d80f      	bhi.n	80028d2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	461a      	mov	r2, r3
 80028b8:	4b4b      	ldr	r3, [pc, #300]	@ (80029e8 <HAL_DMA_Init+0x154>)
 80028ba:	4413      	add	r3, r2
 80028bc:	4a4b      	ldr	r2, [pc, #300]	@ (80029ec <HAL_DMA_Init+0x158>)
 80028be:	fba2 2303 	umull	r2, r3, r2, r3
 80028c2:	091b      	lsrs	r3, r3, #4
 80028c4:	009a      	lsls	r2, r3, #2
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a48      	ldr	r2, [pc, #288]	@ (80029f0 <HAL_DMA_Init+0x15c>)
 80028ce:	641a      	str	r2, [r3, #64]	@ 0x40
 80028d0:	e00e      	b.n	80028f0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	461a      	mov	r2, r3
 80028d8:	4b46      	ldr	r3, [pc, #280]	@ (80029f4 <HAL_DMA_Init+0x160>)
 80028da:	4413      	add	r3, r2
 80028dc:	4a43      	ldr	r2, [pc, #268]	@ (80029ec <HAL_DMA_Init+0x158>)
 80028de:	fba2 2303 	umull	r2, r3, r2, r3
 80028e2:	091b      	lsrs	r3, r3, #4
 80028e4:	009a      	lsls	r2, r3, #2
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a42      	ldr	r2, [pc, #264]	@ (80029f8 <HAL_DMA_Init+0x164>)
 80028ee:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2202      	movs	r2, #2
 80028f4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002906:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800290a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002914:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002920:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800292c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a1b      	ldr	r3, [r3, #32]
 8002932:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	4313      	orrs	r3, r2
 8002938:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800294a:	d039      	beq.n	80029c0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002950:	4a27      	ldr	r2, [pc, #156]	@ (80029f0 <HAL_DMA_Init+0x15c>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d11a      	bne.n	800298c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002956:	4b29      	ldr	r3, [pc, #164]	@ (80029fc <HAL_DMA_Init+0x168>)
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800295e:	f003 031c 	and.w	r3, r3, #28
 8002962:	210f      	movs	r1, #15
 8002964:	fa01 f303 	lsl.w	r3, r1, r3
 8002968:	43db      	mvns	r3, r3
 800296a:	4924      	ldr	r1, [pc, #144]	@ (80029fc <HAL_DMA_Init+0x168>)
 800296c:	4013      	ands	r3, r2
 800296e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002970:	4b22      	ldr	r3, [pc, #136]	@ (80029fc <HAL_DMA_Init+0x168>)
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6859      	ldr	r1, [r3, #4]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800297c:	f003 031c 	and.w	r3, r3, #28
 8002980:	fa01 f303 	lsl.w	r3, r1, r3
 8002984:	491d      	ldr	r1, [pc, #116]	@ (80029fc <HAL_DMA_Init+0x168>)
 8002986:	4313      	orrs	r3, r2
 8002988:	600b      	str	r3, [r1, #0]
 800298a:	e019      	b.n	80029c0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800298c:	4b1c      	ldr	r3, [pc, #112]	@ (8002a00 <HAL_DMA_Init+0x16c>)
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002994:	f003 031c 	and.w	r3, r3, #28
 8002998:	210f      	movs	r1, #15
 800299a:	fa01 f303 	lsl.w	r3, r1, r3
 800299e:	43db      	mvns	r3, r3
 80029a0:	4917      	ldr	r1, [pc, #92]	@ (8002a00 <HAL_DMA_Init+0x16c>)
 80029a2:	4013      	ands	r3, r2
 80029a4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80029a6:	4b16      	ldr	r3, [pc, #88]	@ (8002a00 <HAL_DMA_Init+0x16c>)
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6859      	ldr	r1, [r3, #4]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029b2:	f003 031c 	and.w	r3, r3, #28
 80029b6:	fa01 f303 	lsl.w	r3, r1, r3
 80029ba:	4911      	ldr	r1, [pc, #68]	@ (8002a00 <HAL_DMA_Init+0x16c>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2201      	movs	r2, #1
 80029ca:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3714      	adds	r7, #20
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr
 80029e4:	40020407 	.word	0x40020407
 80029e8:	bffdfff8 	.word	0xbffdfff8
 80029ec:	cccccccd 	.word	0xcccccccd
 80029f0:	40020000 	.word	0x40020000
 80029f4:	bffdfbf8 	.word	0xbffdfbf8
 80029f8:	40020400 	.word	0x40020400
 80029fc:	400200a8 	.word	0x400200a8
 8002a00:	400204a8 	.word	0x400204a8

08002a04 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
 8002a10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a12:	2300      	movs	r3, #0
 8002a14:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d101      	bne.n	8002a24 <HAL_DMA_Start_IT+0x20>
 8002a20:	2302      	movs	r3, #2
 8002a22:	e04b      	b.n	8002abc <HAL_DMA_Start_IT+0xb8>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d13a      	bne.n	8002aae <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2200      	movs	r2, #0
 8002a44:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 0201 	bic.w	r2, r2, #1
 8002a54:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	68b9      	ldr	r1, [r7, #8]
 8002a5c:	68f8      	ldr	r0, [r7, #12]
 8002a5e:	f000 f95f 	bl	8002d20 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d008      	beq.n	8002a7c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f042 020e 	orr.w	r2, r2, #14
 8002a78:	601a      	str	r2, [r3, #0]
 8002a7a:	e00f      	b.n	8002a9c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f022 0204 	bic.w	r2, r2, #4
 8002a8a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f042 020a 	orr.w	r2, r2, #10
 8002a9a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f042 0201 	orr.w	r2, r2, #1
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	e005      	b.n	8002aba <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002aba:	7dfb      	ldrb	r3, [r7, #23]
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3718      	adds	r7, #24
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002acc:	2300      	movs	r3, #0
 8002ace:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d008      	beq.n	8002aee <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2204      	movs	r2, #4
 8002ae0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e022      	b.n	8002b34 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f022 020e 	bic.w	r2, r2, #14
 8002afc:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 0201 	bic.w	r2, r2, #1
 8002b0c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b12:	f003 021c 	and.w	r2, r3, #28
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b20:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2201      	movs	r2, #1
 8002b26:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002b32:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3714      	adds	r7, #20
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d005      	beq.n	8002b64 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2204      	movs	r2, #4
 8002b5c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	73fb      	strb	r3, [r7, #15]
 8002b62:	e029      	b.n	8002bb8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f022 020e 	bic.w	r2, r2, #14
 8002b72:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f022 0201 	bic.w	r2, r2, #1
 8002b82:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b88:	f003 021c 	and.w	r2, r3, #28
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b90:	2101      	movs	r1, #1
 8002b92:	fa01 f202 	lsl.w	r2, r1, r2
 8002b96:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d003      	beq.n	8002bb8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	4798      	blx	r3
    }
  }
  return status;
 8002bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b084      	sub	sp, #16
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bde:	f003 031c 	and.w	r3, r3, #28
 8002be2:	2204      	movs	r2, #4
 8002be4:	409a      	lsls	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	4013      	ands	r3, r2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d026      	beq.n	8002c3c <HAL_DMA_IRQHandler+0x7a>
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	f003 0304 	and.w	r3, r3, #4
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d021      	beq.n	8002c3c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0320 	and.w	r3, r3, #32
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d107      	bne.n	8002c16 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f022 0204 	bic.w	r2, r2, #4
 8002c14:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c1a:	f003 021c 	and.w	r2, r3, #28
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c22:	2104      	movs	r1, #4
 8002c24:	fa01 f202 	lsl.w	r2, r1, r2
 8002c28:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d071      	beq.n	8002d16 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002c3a:	e06c      	b.n	8002d16 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c40:	f003 031c 	and.w	r3, r3, #28
 8002c44:	2202      	movs	r2, #2
 8002c46:	409a      	lsls	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d02e      	beq.n	8002cae <HAL_DMA_IRQHandler+0xec>
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d029      	beq.n	8002cae <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0320 	and.w	r3, r3, #32
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d10b      	bne.n	8002c80 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f022 020a 	bic.w	r2, r2, #10
 8002c76:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c84:	f003 021c 	and.w	r2, r3, #28
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8c:	2102      	movs	r1, #2
 8002c8e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c92:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d038      	beq.n	8002d16 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002cac:	e033      	b.n	8002d16 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cb2:	f003 031c 	and.w	r3, r3, #28
 8002cb6:	2208      	movs	r2, #8
 8002cb8:	409a      	lsls	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d02a      	beq.n	8002d18 <HAL_DMA_IRQHandler+0x156>
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	f003 0308 	and.w	r3, r3, #8
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d025      	beq.n	8002d18 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f022 020e 	bic.w	r2, r2, #14
 8002cda:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ce0:	f003 021c 	and.w	r2, r3, #28
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce8:	2101      	movs	r1, #1
 8002cea:	fa01 f202 	lsl.w	r2, r1, r2
 8002cee:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d004      	beq.n	8002d18 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002d16:	bf00      	nop
 8002d18:	bf00      	nop
}
 8002d1a:	3710      	adds	r7, #16
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b085      	sub	sp, #20
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
 8002d2c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d32:	f003 021c 	and.w	r2, r3, #28
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d3a:	2101      	movs	r1, #1
 8002d3c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d40:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	683a      	ldr	r2, [r7, #0]
 8002d48:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	2b10      	cmp	r3, #16
 8002d50:	d108      	bne.n	8002d64 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68ba      	ldr	r2, [r7, #8]
 8002d60:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002d62:	e007      	b.n	8002d74 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68ba      	ldr	r2, [r7, #8]
 8002d6a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	60da      	str	r2, [r3, #12]
}
 8002d74:	bf00      	nop
 8002d76:	3714      	adds	r7, #20
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b087      	sub	sp, #28
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d8e:	e17f      	b.n	8003090 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	2101      	movs	r1, #1
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	fa01 f303 	lsl.w	r3, r1, r3
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	f000 8171 	beq.w	800308a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f003 0303 	and.w	r3, r3, #3
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d005      	beq.n	8002dc0 <HAL_GPIO_Init+0x40>
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f003 0303 	and.w	r3, r3, #3
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d130      	bne.n	8002e22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	2203      	movs	r2, #3
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	43db      	mvns	r3, r3
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	68da      	ldr	r2, [r3, #12]
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	fa02 f303 	lsl.w	r3, r2, r3
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	693a      	ldr	r2, [r7, #16]
 8002dee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002df6:	2201      	movs	r2, #1
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfe:	43db      	mvns	r3, r3
 8002e00:	693a      	ldr	r2, [r7, #16]
 8002e02:	4013      	ands	r3, r2
 8002e04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	091b      	lsrs	r3, r3, #4
 8002e0c:	f003 0201 	and.w	r2, r3, #1
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	fa02 f303 	lsl.w	r3, r2, r3
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f003 0303 	and.w	r3, r3, #3
 8002e2a:	2b03      	cmp	r3, #3
 8002e2c:	d118      	bne.n	8002e60 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002e34:	2201      	movs	r2, #1
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3c:	43db      	mvns	r3, r3
 8002e3e:	693a      	ldr	r2, [r7, #16]
 8002e40:	4013      	ands	r3, r2
 8002e42:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	08db      	lsrs	r3, r3, #3
 8002e4a:	f003 0201 	and.w	r2, r3, #1
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	693a      	ldr	r2, [r7, #16]
 8002e5e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f003 0303 	and.w	r3, r3, #3
 8002e68:	2b03      	cmp	r3, #3
 8002e6a:	d017      	beq.n	8002e9c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	2203      	movs	r2, #3
 8002e78:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7c:	43db      	mvns	r3, r3
 8002e7e:	693a      	ldr	r2, [r7, #16]
 8002e80:	4013      	ands	r3, r2
 8002e82:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	689a      	ldr	r2, [r3, #8]
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	693a      	ldr	r2, [r7, #16]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	693a      	ldr	r2, [r7, #16]
 8002e9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f003 0303 	and.w	r3, r3, #3
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d123      	bne.n	8002ef0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	08da      	lsrs	r2, r3, #3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	3208      	adds	r2, #8
 8002eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	f003 0307 	and.w	r3, r3, #7
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	220f      	movs	r2, #15
 8002ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec4:	43db      	mvns	r3, r3
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	691a      	ldr	r2, [r3, #16]
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	f003 0307 	and.w	r3, r3, #7
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8002edc:	693a      	ldr	r2, [r7, #16]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	08da      	lsrs	r2, r3, #3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	3208      	adds	r2, #8
 8002eea:	6939      	ldr	r1, [r7, #16]
 8002eec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	2203      	movs	r2, #3
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	43db      	mvns	r3, r3
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	4013      	ands	r3, r2
 8002f06:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f003 0203 	and.w	r2, r3, #3
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	fa02 f303 	lsl.w	r3, r2, r3
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f000 80ac 	beq.w	800308a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f32:	4b5f      	ldr	r3, [pc, #380]	@ (80030b0 <HAL_GPIO_Init+0x330>)
 8002f34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f36:	4a5e      	ldr	r2, [pc, #376]	@ (80030b0 <HAL_GPIO_Init+0x330>)
 8002f38:	f043 0301 	orr.w	r3, r3, #1
 8002f3c:	6613      	str	r3, [r2, #96]	@ 0x60
 8002f3e:	4b5c      	ldr	r3, [pc, #368]	@ (80030b0 <HAL_GPIO_Init+0x330>)
 8002f40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	60bb      	str	r3, [r7, #8]
 8002f48:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002f4a:	4a5a      	ldr	r2, [pc, #360]	@ (80030b4 <HAL_GPIO_Init+0x334>)
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	089b      	lsrs	r3, r3, #2
 8002f50:	3302      	adds	r3, #2
 8002f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f56:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	f003 0303 	and.w	r3, r3, #3
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	220f      	movs	r2, #15
 8002f62:	fa02 f303 	lsl.w	r3, r2, r3
 8002f66:	43db      	mvns	r3, r3
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002f74:	d025      	beq.n	8002fc2 <HAL_GPIO_Init+0x242>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a4f      	ldr	r2, [pc, #316]	@ (80030b8 <HAL_GPIO_Init+0x338>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d01f      	beq.n	8002fbe <HAL_GPIO_Init+0x23e>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a4e      	ldr	r2, [pc, #312]	@ (80030bc <HAL_GPIO_Init+0x33c>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d019      	beq.n	8002fba <HAL_GPIO_Init+0x23a>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a4d      	ldr	r2, [pc, #308]	@ (80030c0 <HAL_GPIO_Init+0x340>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d013      	beq.n	8002fb6 <HAL_GPIO_Init+0x236>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a4c      	ldr	r2, [pc, #304]	@ (80030c4 <HAL_GPIO_Init+0x344>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d00d      	beq.n	8002fb2 <HAL_GPIO_Init+0x232>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a4b      	ldr	r2, [pc, #300]	@ (80030c8 <HAL_GPIO_Init+0x348>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d007      	beq.n	8002fae <HAL_GPIO_Init+0x22e>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a4a      	ldr	r2, [pc, #296]	@ (80030cc <HAL_GPIO_Init+0x34c>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d101      	bne.n	8002faa <HAL_GPIO_Init+0x22a>
 8002fa6:	2306      	movs	r3, #6
 8002fa8:	e00c      	b.n	8002fc4 <HAL_GPIO_Init+0x244>
 8002faa:	2307      	movs	r3, #7
 8002fac:	e00a      	b.n	8002fc4 <HAL_GPIO_Init+0x244>
 8002fae:	2305      	movs	r3, #5
 8002fb0:	e008      	b.n	8002fc4 <HAL_GPIO_Init+0x244>
 8002fb2:	2304      	movs	r3, #4
 8002fb4:	e006      	b.n	8002fc4 <HAL_GPIO_Init+0x244>
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e004      	b.n	8002fc4 <HAL_GPIO_Init+0x244>
 8002fba:	2302      	movs	r3, #2
 8002fbc:	e002      	b.n	8002fc4 <HAL_GPIO_Init+0x244>
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e000      	b.n	8002fc4 <HAL_GPIO_Init+0x244>
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	697a      	ldr	r2, [r7, #20]
 8002fc6:	f002 0203 	and.w	r2, r2, #3
 8002fca:	0092      	lsls	r2, r2, #2
 8002fcc:	4093      	lsls	r3, r2
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002fd4:	4937      	ldr	r1, [pc, #220]	@ (80030b4 <HAL_GPIO_Init+0x334>)
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	089b      	lsrs	r3, r3, #2
 8002fda:	3302      	adds	r3, #2
 8002fdc:	693a      	ldr	r2, [r7, #16]
 8002fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002fe2:	4b3b      	ldr	r3, [pc, #236]	@ (80030d0 <HAL_GPIO_Init+0x350>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	43db      	mvns	r3, r3
 8002fec:	693a      	ldr	r2, [r7, #16]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d003      	beq.n	8003006 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	4313      	orrs	r3, r2
 8003004:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003006:	4a32      	ldr	r2, [pc, #200]	@ (80030d0 <HAL_GPIO_Init+0x350>)
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800300c:	4b30      	ldr	r3, [pc, #192]	@ (80030d0 <HAL_GPIO_Init+0x350>)
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	43db      	mvns	r3, r3
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	4013      	ands	r3, r2
 800301a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d003      	beq.n	8003030 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003028:	693a      	ldr	r2, [r7, #16]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	4313      	orrs	r3, r2
 800302e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003030:	4a27      	ldr	r2, [pc, #156]	@ (80030d0 <HAL_GPIO_Init+0x350>)
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003036:	4b26      	ldr	r3, [pc, #152]	@ (80030d0 <HAL_GPIO_Init+0x350>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	43db      	mvns	r3, r3
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	4013      	ands	r3, r2
 8003044:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d003      	beq.n	800305a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003052:	693a      	ldr	r2, [r7, #16]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	4313      	orrs	r3, r2
 8003058:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800305a:	4a1d      	ldr	r2, [pc, #116]	@ (80030d0 <HAL_GPIO_Init+0x350>)
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003060:	4b1b      	ldr	r3, [pc, #108]	@ (80030d0 <HAL_GPIO_Init+0x350>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	43db      	mvns	r3, r3
 800306a:	693a      	ldr	r2, [r7, #16]
 800306c:	4013      	ands	r3, r2
 800306e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d003      	beq.n	8003084 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	4313      	orrs	r3, r2
 8003082:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003084:	4a12      	ldr	r2, [pc, #72]	@ (80030d0 <HAL_GPIO_Init+0x350>)
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	3301      	adds	r3, #1
 800308e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	fa22 f303 	lsr.w	r3, r2, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	f47f ae78 	bne.w	8002d90 <HAL_GPIO_Init+0x10>
  }
}
 80030a0:	bf00      	nop
 80030a2:	bf00      	nop
 80030a4:	371c      	adds	r7, #28
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	40021000 	.word	0x40021000
 80030b4:	40010000 	.word	0x40010000
 80030b8:	48000400 	.word	0x48000400
 80030bc:	48000800 	.word	0x48000800
 80030c0:	48000c00 	.word	0x48000c00
 80030c4:	48001000 	.word	0x48001000
 80030c8:	48001400 	.word	0x48001400
 80030cc:	48001800 	.word	0x48001800
 80030d0:	40010400 	.word	0x40010400

080030d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	460b      	mov	r3, r1
 80030de:	807b      	strh	r3, [r7, #2]
 80030e0:	4613      	mov	r3, r2
 80030e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030e4:	787b      	ldrb	r3, [r7, #1]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d003      	beq.n	80030f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80030ea:	887a      	ldrh	r2, [r7, #2]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80030f0:	e002      	b.n	80030f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80030f2:	887a      	ldrh	r2, [r7, #2]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003104:	b480      	push	{r7}
 8003106:	b085      	sub	sp, #20
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	460b      	mov	r3, r1
 800310e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	695b      	ldr	r3, [r3, #20]
 8003114:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003116:	887a      	ldrh	r2, [r7, #2]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	4013      	ands	r3, r2
 800311c:	041a      	lsls	r2, r3, #16
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	43d9      	mvns	r1, r3
 8003122:	887b      	ldrh	r3, [r7, #2]
 8003124:	400b      	ands	r3, r1
 8003126:	431a      	orrs	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	619a      	str	r2, [r3, #24]
}
 800312c:	bf00      	nop
 800312e:	3714      	adds	r7, #20
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d101      	bne.n	800314a <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e043      	b.n	80031d2 <HAL_IWDG_Init+0x9a>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8003152:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f245 5255 	movw	r2, #21845	@ 0x5555
 800315c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	6852      	ldr	r2, [r2, #4]
 8003166:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	6892      	ldr	r2, [r2, #8]
 8003170:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8003172:	f7fe ff8f 	bl	8002094 <HAL_GetTick>
 8003176:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003178:	e011      	b.n	800319e <HAL_IWDG_Init+0x66>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800317a:	f7fe ff8b 	bl	8002094 <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	f641 0201 	movw	r2, #6145	@ 0x1801
 8003188:	4293      	cmp	r3, r2
 800318a:	d908      	bls.n	800319e <HAL_IWDG_Init+0x66>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	f003 0307 	and.w	r3, r3, #7
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <HAL_IWDG_Init+0x66>
      {
        return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e019      	b.n	80031d2 <HAL_IWDG_Init+0x9a>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	f003 0307 	and.w	r3, r3, #7
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d1e6      	bne.n	800317a <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	691a      	ldr	r2, [r3, #16]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d005      	beq.n	80031c6 <HAL_IWDG_Init+0x8e>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	68d2      	ldr	r2, [r2, #12]
 80031c2:	611a      	str	r2, [r3, #16]
 80031c4:	e004      	b.n	80031d0 <HAL_IWDG_Init+0x98>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80031ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3710      	adds	r7, #16
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80031da:	b480      	push	{r7}
 80031dc:	b083      	sub	sp, #12
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80031ea:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	370c      	adds	r7, #12
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
	...

080031fc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003200:	4b04      	ldr	r3, [pc, #16]	@ (8003214 <HAL_PWREx_GetVoltageRange+0x18>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003208:	4618      	mov	r0, r3
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	40007000 	.word	0x40007000

08003218 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003226:	d130      	bne.n	800328a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003228:	4b23      	ldr	r3, [pc, #140]	@ (80032b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003230:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003234:	d038      	beq.n	80032a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003236:	4b20      	ldr	r3, [pc, #128]	@ (80032b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800323e:	4a1e      	ldr	r2, [pc, #120]	@ (80032b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003240:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003244:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003246:	4b1d      	ldr	r3, [pc, #116]	@ (80032bc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2232      	movs	r2, #50	@ 0x32
 800324c:	fb02 f303 	mul.w	r3, r2, r3
 8003250:	4a1b      	ldr	r2, [pc, #108]	@ (80032c0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003252:	fba2 2303 	umull	r2, r3, r2, r3
 8003256:	0c9b      	lsrs	r3, r3, #18
 8003258:	3301      	adds	r3, #1
 800325a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800325c:	e002      	b.n	8003264 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	3b01      	subs	r3, #1
 8003262:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003264:	4b14      	ldr	r3, [pc, #80]	@ (80032b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003266:	695b      	ldr	r3, [r3, #20]
 8003268:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800326c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003270:	d102      	bne.n	8003278 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1f2      	bne.n	800325e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003278:	4b0f      	ldr	r3, [pc, #60]	@ (80032b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800327a:	695b      	ldr	r3, [r3, #20]
 800327c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003280:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003284:	d110      	bne.n	80032a8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e00f      	b.n	80032aa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800328a:	4b0b      	ldr	r3, [pc, #44]	@ (80032b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003292:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003296:	d007      	beq.n	80032a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003298:	4b07      	ldr	r3, [pc, #28]	@ (80032b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80032a0:	4a05      	ldr	r2, [pc, #20]	@ (80032b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80032a6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3714      	adds	r7, #20
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	40007000 	.word	0x40007000
 80032bc:	20000018 	.word	0x20000018
 80032c0:	431bde83 	.word	0x431bde83

080032c4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b088      	sub	sp, #32
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d101      	bne.n	80032d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e3ca      	b.n	8003a6c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032d6:	4b97      	ldr	r3, [pc, #604]	@ (8003534 <HAL_RCC_OscConfig+0x270>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f003 030c 	and.w	r3, r3, #12
 80032de:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032e0:	4b94      	ldr	r3, [pc, #592]	@ (8003534 <HAL_RCC_OscConfig+0x270>)
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	f003 0303 	and.w	r3, r3, #3
 80032e8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0310 	and.w	r3, r3, #16
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f000 80e4 	beq.w	80034c0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d007      	beq.n	800330e <HAL_RCC_OscConfig+0x4a>
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	2b0c      	cmp	r3, #12
 8003302:	f040 808b 	bne.w	800341c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	2b01      	cmp	r3, #1
 800330a:	f040 8087 	bne.w	800341c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800330e:	4b89      	ldr	r3, [pc, #548]	@ (8003534 <HAL_RCC_OscConfig+0x270>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d005      	beq.n	8003326 <HAL_RCC_OscConfig+0x62>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d101      	bne.n	8003326 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e3a2      	b.n	8003a6c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a1a      	ldr	r2, [r3, #32]
 800332a:	4b82      	ldr	r3, [pc, #520]	@ (8003534 <HAL_RCC_OscConfig+0x270>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0308 	and.w	r3, r3, #8
 8003332:	2b00      	cmp	r3, #0
 8003334:	d004      	beq.n	8003340 <HAL_RCC_OscConfig+0x7c>
 8003336:	4b7f      	ldr	r3, [pc, #508]	@ (8003534 <HAL_RCC_OscConfig+0x270>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800333e:	e005      	b.n	800334c <HAL_RCC_OscConfig+0x88>
 8003340:	4b7c      	ldr	r3, [pc, #496]	@ (8003534 <HAL_RCC_OscConfig+0x270>)
 8003342:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003346:	091b      	lsrs	r3, r3, #4
 8003348:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800334c:	4293      	cmp	r3, r2
 800334e:	d223      	bcs.n	8003398 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a1b      	ldr	r3, [r3, #32]
 8003354:	4618      	mov	r0, r3
 8003356:	f000 fd55 	bl	8003e04 <RCC_SetFlashLatencyFromMSIRange>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d001      	beq.n	8003364 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e383      	b.n	8003a6c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003364:	4b73      	ldr	r3, [pc, #460]	@ (8003534 <HAL_RCC_OscConfig+0x270>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a72      	ldr	r2, [pc, #456]	@ (8003534 <HAL_RCC_OscConfig+0x270>)
 800336a:	f043 0308 	orr.w	r3, r3, #8
 800336e:	6013      	str	r3, [r2, #0]
 8003370:	4b70      	ldr	r3, [pc, #448]	@ (8003534 <HAL_RCC_OscConfig+0x270>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a1b      	ldr	r3, [r3, #32]
 800337c:	496d      	ldr	r1, [pc, #436]	@ (8003534 <HAL_RCC_OscConfig+0x270>)
 800337e:	4313      	orrs	r3, r2
 8003380:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003382:	4b6c      	ldr	r3, [pc, #432]	@ (8003534 <HAL_RCC_OscConfig+0x270>)
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	69db      	ldr	r3, [r3, #28]
 800338e:	021b      	lsls	r3, r3, #8
 8003390:	4968      	ldr	r1, [pc, #416]	@ (8003534 <HAL_RCC_OscConfig+0x270>)
 8003392:	4313      	orrs	r3, r2
 8003394:	604b      	str	r3, [r1, #4]
 8003396:	e025      	b.n	80033e4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003398:	4b66      	ldr	r3, [pc, #408]	@ (8003534 <HAL_RCC_OscConfig+0x270>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a65      	ldr	r2, [pc, #404]	@ (8003534 <HAL_RCC_OscConfig+0x270>)
 800339e:	f043 0308 	orr.w	r3, r3, #8
 80033a2:	6013      	str	r3, [r2, #0]
 80033a4:	4b63      	ldr	r3, [pc, #396]	@ (8003534 <HAL_RCC_OscConfig+0x270>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a1b      	ldr	r3, [r3, #32]
 80033b0:	4960      	ldr	r1, [pc, #384]	@ (8003534 <HAL_RCC_OscConfig+0x270>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033b6:	4b5f      	ldr	r3, [pc, #380]	@ (8003534 <HAL_RCC_OscConfig+0x270>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	69db      	ldr	r3, [r3, #28]
 80033c2:	021b      	lsls	r3, r3, #8
 80033c4:	495b      	ldr	r1, [pc, #364]	@ (8003534 <HAL_RCC_OscConfig+0x270>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d109      	bne.n	80033e4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a1b      	ldr	r3, [r3, #32]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f000 fd15 	bl	8003e04 <RCC_SetFlashLatencyFromMSIRange>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d001      	beq.n	80033e4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e343      	b.n	8003a6c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033e4:	f000 fc4a 	bl	8003c7c <HAL_RCC_GetSysClockFreq>
 80033e8:	4602      	mov	r2, r0
 80033ea:	4b52      	ldr	r3, [pc, #328]	@ (8003534 <HAL_RCC_OscConfig+0x270>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	091b      	lsrs	r3, r3, #4
 80033f0:	f003 030f 	and.w	r3, r3, #15
 80033f4:	4950      	ldr	r1, [pc, #320]	@ (8003538 <HAL_RCC_OscConfig+0x274>)
 80033f6:	5ccb      	ldrb	r3, [r1, r3]
 80033f8:	f003 031f 	and.w	r3, r3, #31
 80033fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003400:	4a4e      	ldr	r2, [pc, #312]	@ (800353c <HAL_RCC_OscConfig+0x278>)
 8003402:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003404:	4b4e      	ldr	r3, [pc, #312]	@ (8003540 <HAL_RCC_OscConfig+0x27c>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4618      	mov	r0, r3
 800340a:	f7fe fdf3 	bl	8001ff4 <HAL_InitTick>
 800340e:	4603      	mov	r3, r0
 8003410:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003412:	7bfb      	ldrb	r3, [r7, #15]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d052      	beq.n	80034be <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003418:	7bfb      	ldrb	r3, [r7, #15]
 800341a:	e327      	b.n	8003a6c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d032      	beq.n	800348a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003424:	4b43      	ldr	r3, [pc, #268]	@ (8003534 <HAL_RCC_OscConfig+0x270>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a42      	ldr	r2, [pc, #264]	@ (8003534 <HAL_RCC_OscConfig+0x270>)
 800342a:	f043 0301 	orr.w	r3, r3, #1
 800342e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003430:	f7fe fe30 	bl	8002094 <HAL_GetTick>
 8003434:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003436:	e008      	b.n	800344a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003438:	f7fe fe2c 	bl	8002094 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b02      	cmp	r3, #2
 8003444:	d901      	bls.n	800344a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e310      	b.n	8003a6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800344a:	4b3a      	ldr	r3, [pc, #232]	@ (8003534 <HAL_RCC_OscConfig+0x270>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d0f0      	beq.n	8003438 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003456:	4b37      	ldr	r3, [pc, #220]	@ (8003534 <HAL_RCC_OscConfig+0x270>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a36      	ldr	r2, [pc, #216]	@ (8003534 <HAL_RCC_OscConfig+0x270>)
 800345c:	f043 0308 	orr.w	r3, r3, #8
 8003460:	6013      	str	r3, [r2, #0]
 8003462:	4b34      	ldr	r3, [pc, #208]	@ (8003534 <HAL_RCC_OscConfig+0x270>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	4931      	ldr	r1, [pc, #196]	@ (8003534 <HAL_RCC_OscConfig+0x270>)
 8003470:	4313      	orrs	r3, r2
 8003472:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003474:	4b2f      	ldr	r3, [pc, #188]	@ (8003534 <HAL_RCC_OscConfig+0x270>)
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	69db      	ldr	r3, [r3, #28]
 8003480:	021b      	lsls	r3, r3, #8
 8003482:	492c      	ldr	r1, [pc, #176]	@ (8003534 <HAL_RCC_OscConfig+0x270>)
 8003484:	4313      	orrs	r3, r2
 8003486:	604b      	str	r3, [r1, #4]
 8003488:	e01a      	b.n	80034c0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800348a:	4b2a      	ldr	r3, [pc, #168]	@ (8003534 <HAL_RCC_OscConfig+0x270>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a29      	ldr	r2, [pc, #164]	@ (8003534 <HAL_RCC_OscConfig+0x270>)
 8003490:	f023 0301 	bic.w	r3, r3, #1
 8003494:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003496:	f7fe fdfd 	bl	8002094 <HAL_GetTick>
 800349a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800349c:	e008      	b.n	80034b0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800349e:	f7fe fdf9 	bl	8002094 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d901      	bls.n	80034b0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e2dd      	b.n	8003a6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80034b0:	4b20      	ldr	r3, [pc, #128]	@ (8003534 <HAL_RCC_OscConfig+0x270>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d1f0      	bne.n	800349e <HAL_RCC_OscConfig+0x1da>
 80034bc:	e000      	b.n	80034c0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80034be:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0301 	and.w	r3, r3, #1
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d074      	beq.n	80035b6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	2b08      	cmp	r3, #8
 80034d0:	d005      	beq.n	80034de <HAL_RCC_OscConfig+0x21a>
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	2b0c      	cmp	r3, #12
 80034d6:	d10e      	bne.n	80034f6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	2b03      	cmp	r3, #3
 80034dc:	d10b      	bne.n	80034f6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034de:	4b15      	ldr	r3, [pc, #84]	@ (8003534 <HAL_RCC_OscConfig+0x270>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d064      	beq.n	80035b4 <HAL_RCC_OscConfig+0x2f0>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d160      	bne.n	80035b4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e2ba      	b.n	8003a6c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034fe:	d106      	bne.n	800350e <HAL_RCC_OscConfig+0x24a>
 8003500:	4b0c      	ldr	r3, [pc, #48]	@ (8003534 <HAL_RCC_OscConfig+0x270>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a0b      	ldr	r2, [pc, #44]	@ (8003534 <HAL_RCC_OscConfig+0x270>)
 8003506:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800350a:	6013      	str	r3, [r2, #0]
 800350c:	e026      	b.n	800355c <HAL_RCC_OscConfig+0x298>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003516:	d115      	bne.n	8003544 <HAL_RCC_OscConfig+0x280>
 8003518:	4b06      	ldr	r3, [pc, #24]	@ (8003534 <HAL_RCC_OscConfig+0x270>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a05      	ldr	r2, [pc, #20]	@ (8003534 <HAL_RCC_OscConfig+0x270>)
 800351e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003522:	6013      	str	r3, [r2, #0]
 8003524:	4b03      	ldr	r3, [pc, #12]	@ (8003534 <HAL_RCC_OscConfig+0x270>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a02      	ldr	r2, [pc, #8]	@ (8003534 <HAL_RCC_OscConfig+0x270>)
 800352a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800352e:	6013      	str	r3, [r2, #0]
 8003530:	e014      	b.n	800355c <HAL_RCC_OscConfig+0x298>
 8003532:	bf00      	nop
 8003534:	40021000 	.word	0x40021000
 8003538:	08013e40 	.word	0x08013e40
 800353c:	20000018 	.word	0x20000018
 8003540:	2000001c 	.word	0x2000001c
 8003544:	4ba0      	ldr	r3, [pc, #640]	@ (80037c8 <HAL_RCC_OscConfig+0x504>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a9f      	ldr	r2, [pc, #636]	@ (80037c8 <HAL_RCC_OscConfig+0x504>)
 800354a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800354e:	6013      	str	r3, [r2, #0]
 8003550:	4b9d      	ldr	r3, [pc, #628]	@ (80037c8 <HAL_RCC_OscConfig+0x504>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a9c      	ldr	r2, [pc, #624]	@ (80037c8 <HAL_RCC_OscConfig+0x504>)
 8003556:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800355a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d013      	beq.n	800358c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003564:	f7fe fd96 	bl	8002094 <HAL_GetTick>
 8003568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800356a:	e008      	b.n	800357e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800356c:	f7fe fd92 	bl	8002094 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	2b64      	cmp	r3, #100	@ 0x64
 8003578:	d901      	bls.n	800357e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e276      	b.n	8003a6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800357e:	4b92      	ldr	r3, [pc, #584]	@ (80037c8 <HAL_RCC_OscConfig+0x504>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d0f0      	beq.n	800356c <HAL_RCC_OscConfig+0x2a8>
 800358a:	e014      	b.n	80035b6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800358c:	f7fe fd82 	bl	8002094 <HAL_GetTick>
 8003590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003592:	e008      	b.n	80035a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003594:	f7fe fd7e 	bl	8002094 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b64      	cmp	r3, #100	@ 0x64
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e262      	b.n	8003a6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035a6:	4b88      	ldr	r3, [pc, #544]	@ (80037c8 <HAL_RCC_OscConfig+0x504>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1f0      	bne.n	8003594 <HAL_RCC_OscConfig+0x2d0>
 80035b2:	e000      	b.n	80035b6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d060      	beq.n	8003684 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	2b04      	cmp	r3, #4
 80035c6:	d005      	beq.n	80035d4 <HAL_RCC_OscConfig+0x310>
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	2b0c      	cmp	r3, #12
 80035cc:	d119      	bne.n	8003602 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d116      	bne.n	8003602 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035d4:	4b7c      	ldr	r3, [pc, #496]	@ (80037c8 <HAL_RCC_OscConfig+0x504>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d005      	beq.n	80035ec <HAL_RCC_OscConfig+0x328>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d101      	bne.n	80035ec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e23f      	b.n	8003a6c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035ec:	4b76      	ldr	r3, [pc, #472]	@ (80037c8 <HAL_RCC_OscConfig+0x504>)
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	061b      	lsls	r3, r3, #24
 80035fa:	4973      	ldr	r1, [pc, #460]	@ (80037c8 <HAL_RCC_OscConfig+0x504>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003600:	e040      	b.n	8003684 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d023      	beq.n	8003652 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800360a:	4b6f      	ldr	r3, [pc, #444]	@ (80037c8 <HAL_RCC_OscConfig+0x504>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a6e      	ldr	r2, [pc, #440]	@ (80037c8 <HAL_RCC_OscConfig+0x504>)
 8003610:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003614:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003616:	f7fe fd3d 	bl	8002094 <HAL_GetTick>
 800361a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800361c:	e008      	b.n	8003630 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800361e:	f7fe fd39 	bl	8002094 <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	2b02      	cmp	r3, #2
 800362a:	d901      	bls.n	8003630 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e21d      	b.n	8003a6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003630:	4b65      	ldr	r3, [pc, #404]	@ (80037c8 <HAL_RCC_OscConfig+0x504>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003638:	2b00      	cmp	r3, #0
 800363a:	d0f0      	beq.n	800361e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800363c:	4b62      	ldr	r3, [pc, #392]	@ (80037c8 <HAL_RCC_OscConfig+0x504>)
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	061b      	lsls	r3, r3, #24
 800364a:	495f      	ldr	r1, [pc, #380]	@ (80037c8 <HAL_RCC_OscConfig+0x504>)
 800364c:	4313      	orrs	r3, r2
 800364e:	604b      	str	r3, [r1, #4]
 8003650:	e018      	b.n	8003684 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003652:	4b5d      	ldr	r3, [pc, #372]	@ (80037c8 <HAL_RCC_OscConfig+0x504>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a5c      	ldr	r2, [pc, #368]	@ (80037c8 <HAL_RCC_OscConfig+0x504>)
 8003658:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800365c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800365e:	f7fe fd19 	bl	8002094 <HAL_GetTick>
 8003662:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003664:	e008      	b.n	8003678 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003666:	f7fe fd15 	bl	8002094 <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	2b02      	cmp	r3, #2
 8003672:	d901      	bls.n	8003678 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e1f9      	b.n	8003a6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003678:	4b53      	ldr	r3, [pc, #332]	@ (80037c8 <HAL_RCC_OscConfig+0x504>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1f0      	bne.n	8003666 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0308 	and.w	r3, r3, #8
 800368c:	2b00      	cmp	r3, #0
 800368e:	d03c      	beq.n	800370a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	695b      	ldr	r3, [r3, #20]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d01c      	beq.n	80036d2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003698:	4b4b      	ldr	r3, [pc, #300]	@ (80037c8 <HAL_RCC_OscConfig+0x504>)
 800369a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800369e:	4a4a      	ldr	r2, [pc, #296]	@ (80037c8 <HAL_RCC_OscConfig+0x504>)
 80036a0:	f043 0301 	orr.w	r3, r3, #1
 80036a4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036a8:	f7fe fcf4 	bl	8002094 <HAL_GetTick>
 80036ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036ae:	e008      	b.n	80036c2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036b0:	f7fe fcf0 	bl	8002094 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e1d4      	b.n	8003a6c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036c2:	4b41      	ldr	r3, [pc, #260]	@ (80037c8 <HAL_RCC_OscConfig+0x504>)
 80036c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d0ef      	beq.n	80036b0 <HAL_RCC_OscConfig+0x3ec>
 80036d0:	e01b      	b.n	800370a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036d2:	4b3d      	ldr	r3, [pc, #244]	@ (80037c8 <HAL_RCC_OscConfig+0x504>)
 80036d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036d8:	4a3b      	ldr	r2, [pc, #236]	@ (80037c8 <HAL_RCC_OscConfig+0x504>)
 80036da:	f023 0301 	bic.w	r3, r3, #1
 80036de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e2:	f7fe fcd7 	bl	8002094 <HAL_GetTick>
 80036e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036e8:	e008      	b.n	80036fc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036ea:	f7fe fcd3 	bl	8002094 <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d901      	bls.n	80036fc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	e1b7      	b.n	8003a6c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036fc:	4b32      	ldr	r3, [pc, #200]	@ (80037c8 <HAL_RCC_OscConfig+0x504>)
 80036fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1ef      	bne.n	80036ea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0304 	and.w	r3, r3, #4
 8003712:	2b00      	cmp	r3, #0
 8003714:	f000 80a6 	beq.w	8003864 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003718:	2300      	movs	r3, #0
 800371a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800371c:	4b2a      	ldr	r3, [pc, #168]	@ (80037c8 <HAL_RCC_OscConfig+0x504>)
 800371e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003720:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10d      	bne.n	8003744 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003728:	4b27      	ldr	r3, [pc, #156]	@ (80037c8 <HAL_RCC_OscConfig+0x504>)
 800372a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800372c:	4a26      	ldr	r2, [pc, #152]	@ (80037c8 <HAL_RCC_OscConfig+0x504>)
 800372e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003732:	6593      	str	r3, [r2, #88]	@ 0x58
 8003734:	4b24      	ldr	r3, [pc, #144]	@ (80037c8 <HAL_RCC_OscConfig+0x504>)
 8003736:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003738:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800373c:	60bb      	str	r3, [r7, #8]
 800373e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003740:	2301      	movs	r3, #1
 8003742:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003744:	4b21      	ldr	r3, [pc, #132]	@ (80037cc <HAL_RCC_OscConfig+0x508>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800374c:	2b00      	cmp	r3, #0
 800374e:	d118      	bne.n	8003782 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003750:	4b1e      	ldr	r3, [pc, #120]	@ (80037cc <HAL_RCC_OscConfig+0x508>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a1d      	ldr	r2, [pc, #116]	@ (80037cc <HAL_RCC_OscConfig+0x508>)
 8003756:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800375a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800375c:	f7fe fc9a 	bl	8002094 <HAL_GetTick>
 8003760:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003762:	e008      	b.n	8003776 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003764:	f7fe fc96 	bl	8002094 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b02      	cmp	r3, #2
 8003770:	d901      	bls.n	8003776 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e17a      	b.n	8003a6c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003776:	4b15      	ldr	r3, [pc, #84]	@ (80037cc <HAL_RCC_OscConfig+0x508>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800377e:	2b00      	cmp	r3, #0
 8003780:	d0f0      	beq.n	8003764 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	2b01      	cmp	r3, #1
 8003788:	d108      	bne.n	800379c <HAL_RCC_OscConfig+0x4d8>
 800378a:	4b0f      	ldr	r3, [pc, #60]	@ (80037c8 <HAL_RCC_OscConfig+0x504>)
 800378c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003790:	4a0d      	ldr	r2, [pc, #52]	@ (80037c8 <HAL_RCC_OscConfig+0x504>)
 8003792:	f043 0301 	orr.w	r3, r3, #1
 8003796:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800379a:	e029      	b.n	80037f0 <HAL_RCC_OscConfig+0x52c>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	2b05      	cmp	r3, #5
 80037a2:	d115      	bne.n	80037d0 <HAL_RCC_OscConfig+0x50c>
 80037a4:	4b08      	ldr	r3, [pc, #32]	@ (80037c8 <HAL_RCC_OscConfig+0x504>)
 80037a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037aa:	4a07      	ldr	r2, [pc, #28]	@ (80037c8 <HAL_RCC_OscConfig+0x504>)
 80037ac:	f043 0304 	orr.w	r3, r3, #4
 80037b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037b4:	4b04      	ldr	r3, [pc, #16]	@ (80037c8 <HAL_RCC_OscConfig+0x504>)
 80037b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037ba:	4a03      	ldr	r2, [pc, #12]	@ (80037c8 <HAL_RCC_OscConfig+0x504>)
 80037bc:	f043 0301 	orr.w	r3, r3, #1
 80037c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037c4:	e014      	b.n	80037f0 <HAL_RCC_OscConfig+0x52c>
 80037c6:	bf00      	nop
 80037c8:	40021000 	.word	0x40021000
 80037cc:	40007000 	.word	0x40007000
 80037d0:	4b9c      	ldr	r3, [pc, #624]	@ (8003a44 <HAL_RCC_OscConfig+0x780>)
 80037d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037d6:	4a9b      	ldr	r2, [pc, #620]	@ (8003a44 <HAL_RCC_OscConfig+0x780>)
 80037d8:	f023 0301 	bic.w	r3, r3, #1
 80037dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037e0:	4b98      	ldr	r3, [pc, #608]	@ (8003a44 <HAL_RCC_OscConfig+0x780>)
 80037e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037e6:	4a97      	ldr	r2, [pc, #604]	@ (8003a44 <HAL_RCC_OscConfig+0x780>)
 80037e8:	f023 0304 	bic.w	r3, r3, #4
 80037ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d016      	beq.n	8003826 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f8:	f7fe fc4c 	bl	8002094 <HAL_GetTick>
 80037fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037fe:	e00a      	b.n	8003816 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003800:	f7fe fc48 	bl	8002094 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800380e:	4293      	cmp	r3, r2
 8003810:	d901      	bls.n	8003816 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e12a      	b.n	8003a6c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003816:	4b8b      	ldr	r3, [pc, #556]	@ (8003a44 <HAL_RCC_OscConfig+0x780>)
 8003818:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d0ed      	beq.n	8003800 <HAL_RCC_OscConfig+0x53c>
 8003824:	e015      	b.n	8003852 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003826:	f7fe fc35 	bl	8002094 <HAL_GetTick>
 800382a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800382c:	e00a      	b.n	8003844 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800382e:	f7fe fc31 	bl	8002094 <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	f241 3288 	movw	r2, #5000	@ 0x1388
 800383c:	4293      	cmp	r3, r2
 800383e:	d901      	bls.n	8003844 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e113      	b.n	8003a6c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003844:	4b7f      	ldr	r3, [pc, #508]	@ (8003a44 <HAL_RCC_OscConfig+0x780>)
 8003846:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	2b00      	cmp	r3, #0
 8003850:	d1ed      	bne.n	800382e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003852:	7ffb      	ldrb	r3, [r7, #31]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d105      	bne.n	8003864 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003858:	4b7a      	ldr	r3, [pc, #488]	@ (8003a44 <HAL_RCC_OscConfig+0x780>)
 800385a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800385c:	4a79      	ldr	r2, [pc, #484]	@ (8003a44 <HAL_RCC_OscConfig+0x780>)
 800385e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003862:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003868:	2b00      	cmp	r3, #0
 800386a:	f000 80fe 	beq.w	8003a6a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003872:	2b02      	cmp	r3, #2
 8003874:	f040 80d0 	bne.w	8003a18 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003878:	4b72      	ldr	r3, [pc, #456]	@ (8003a44 <HAL_RCC_OscConfig+0x780>)
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	f003 0203 	and.w	r2, r3, #3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003888:	429a      	cmp	r2, r3
 800388a:	d130      	bne.n	80038ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003896:	3b01      	subs	r3, #1
 8003898:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800389a:	429a      	cmp	r2, r3
 800389c:	d127      	bne.n	80038ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038a8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d11f      	bne.n	80038ee <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80038b8:	2a07      	cmp	r2, #7
 80038ba:	bf14      	ite	ne
 80038bc:	2201      	movne	r2, #1
 80038be:	2200      	moveq	r2, #0
 80038c0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d113      	bne.n	80038ee <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038d0:	085b      	lsrs	r3, r3, #1
 80038d2:	3b01      	subs	r3, #1
 80038d4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d109      	bne.n	80038ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e4:	085b      	lsrs	r3, r3, #1
 80038e6:	3b01      	subs	r3, #1
 80038e8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d06e      	beq.n	80039cc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	2b0c      	cmp	r3, #12
 80038f2:	d069      	beq.n	80039c8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80038f4:	4b53      	ldr	r3, [pc, #332]	@ (8003a44 <HAL_RCC_OscConfig+0x780>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d105      	bne.n	800390c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003900:	4b50      	ldr	r3, [pc, #320]	@ (8003a44 <HAL_RCC_OscConfig+0x780>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d001      	beq.n	8003910 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e0ad      	b.n	8003a6c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003910:	4b4c      	ldr	r3, [pc, #304]	@ (8003a44 <HAL_RCC_OscConfig+0x780>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a4b      	ldr	r2, [pc, #300]	@ (8003a44 <HAL_RCC_OscConfig+0x780>)
 8003916:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800391a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800391c:	f7fe fbba 	bl	8002094 <HAL_GetTick>
 8003920:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003922:	e008      	b.n	8003936 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003924:	f7fe fbb6 	bl	8002094 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b02      	cmp	r3, #2
 8003930:	d901      	bls.n	8003936 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e09a      	b.n	8003a6c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003936:	4b43      	ldr	r3, [pc, #268]	@ (8003a44 <HAL_RCC_OscConfig+0x780>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1f0      	bne.n	8003924 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003942:	4b40      	ldr	r3, [pc, #256]	@ (8003a44 <HAL_RCC_OscConfig+0x780>)
 8003944:	68da      	ldr	r2, [r3, #12]
 8003946:	4b40      	ldr	r3, [pc, #256]	@ (8003a48 <HAL_RCC_OscConfig+0x784>)
 8003948:	4013      	ands	r3, r2
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003952:	3a01      	subs	r2, #1
 8003954:	0112      	lsls	r2, r2, #4
 8003956:	4311      	orrs	r1, r2
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800395c:	0212      	lsls	r2, r2, #8
 800395e:	4311      	orrs	r1, r2
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003964:	0852      	lsrs	r2, r2, #1
 8003966:	3a01      	subs	r2, #1
 8003968:	0552      	lsls	r2, r2, #21
 800396a:	4311      	orrs	r1, r2
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003970:	0852      	lsrs	r2, r2, #1
 8003972:	3a01      	subs	r2, #1
 8003974:	0652      	lsls	r2, r2, #25
 8003976:	4311      	orrs	r1, r2
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800397c:	0912      	lsrs	r2, r2, #4
 800397e:	0452      	lsls	r2, r2, #17
 8003980:	430a      	orrs	r2, r1
 8003982:	4930      	ldr	r1, [pc, #192]	@ (8003a44 <HAL_RCC_OscConfig+0x780>)
 8003984:	4313      	orrs	r3, r2
 8003986:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003988:	4b2e      	ldr	r3, [pc, #184]	@ (8003a44 <HAL_RCC_OscConfig+0x780>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a2d      	ldr	r2, [pc, #180]	@ (8003a44 <HAL_RCC_OscConfig+0x780>)
 800398e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003992:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003994:	4b2b      	ldr	r3, [pc, #172]	@ (8003a44 <HAL_RCC_OscConfig+0x780>)
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	4a2a      	ldr	r2, [pc, #168]	@ (8003a44 <HAL_RCC_OscConfig+0x780>)
 800399a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800399e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80039a0:	f7fe fb78 	bl	8002094 <HAL_GetTick>
 80039a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039a6:	e008      	b.n	80039ba <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039a8:	f7fe fb74 	bl	8002094 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e058      	b.n	8003a6c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039ba:	4b22      	ldr	r3, [pc, #136]	@ (8003a44 <HAL_RCC_OscConfig+0x780>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d0f0      	beq.n	80039a8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039c6:	e050      	b.n	8003a6a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e04f      	b.n	8003a6c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039cc:	4b1d      	ldr	r3, [pc, #116]	@ (8003a44 <HAL_RCC_OscConfig+0x780>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d148      	bne.n	8003a6a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80039d8:	4b1a      	ldr	r3, [pc, #104]	@ (8003a44 <HAL_RCC_OscConfig+0x780>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a19      	ldr	r2, [pc, #100]	@ (8003a44 <HAL_RCC_OscConfig+0x780>)
 80039de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039e2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039e4:	4b17      	ldr	r3, [pc, #92]	@ (8003a44 <HAL_RCC_OscConfig+0x780>)
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	4a16      	ldr	r2, [pc, #88]	@ (8003a44 <HAL_RCC_OscConfig+0x780>)
 80039ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039ee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80039f0:	f7fe fb50 	bl	8002094 <HAL_GetTick>
 80039f4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039f6:	e008      	b.n	8003a0a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039f8:	f7fe fb4c 	bl	8002094 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e030      	b.n	8003a6c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a0a:	4b0e      	ldr	r3, [pc, #56]	@ (8003a44 <HAL_RCC_OscConfig+0x780>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d0f0      	beq.n	80039f8 <HAL_RCC_OscConfig+0x734>
 8003a16:	e028      	b.n	8003a6a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	2b0c      	cmp	r3, #12
 8003a1c:	d023      	beq.n	8003a66 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a1e:	4b09      	ldr	r3, [pc, #36]	@ (8003a44 <HAL_RCC_OscConfig+0x780>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a08      	ldr	r2, [pc, #32]	@ (8003a44 <HAL_RCC_OscConfig+0x780>)
 8003a24:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a2a:	f7fe fb33 	bl	8002094 <HAL_GetTick>
 8003a2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a30:	e00c      	b.n	8003a4c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a32:	f7fe fb2f 	bl	8002094 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d905      	bls.n	8003a4c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e013      	b.n	8003a6c <HAL_RCC_OscConfig+0x7a8>
 8003a44:	40021000 	.word	0x40021000
 8003a48:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a4c:	4b09      	ldr	r3, [pc, #36]	@ (8003a74 <HAL_RCC_OscConfig+0x7b0>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1ec      	bne.n	8003a32 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003a58:	4b06      	ldr	r3, [pc, #24]	@ (8003a74 <HAL_RCC_OscConfig+0x7b0>)
 8003a5a:	68da      	ldr	r2, [r3, #12]
 8003a5c:	4905      	ldr	r1, [pc, #20]	@ (8003a74 <HAL_RCC_OscConfig+0x7b0>)
 8003a5e:	4b06      	ldr	r3, [pc, #24]	@ (8003a78 <HAL_RCC_OscConfig+0x7b4>)
 8003a60:	4013      	ands	r3, r2
 8003a62:	60cb      	str	r3, [r1, #12]
 8003a64:	e001      	b.n	8003a6a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e000      	b.n	8003a6c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003a6a:	2300      	movs	r3, #0
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3720      	adds	r7, #32
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	40021000 	.word	0x40021000
 8003a78:	feeefffc 	.word	0xfeeefffc

08003a7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d101      	bne.n	8003a90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e0e7      	b.n	8003c60 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a90:	4b75      	ldr	r3, [pc, #468]	@ (8003c68 <HAL_RCC_ClockConfig+0x1ec>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0307 	and.w	r3, r3, #7
 8003a98:	683a      	ldr	r2, [r7, #0]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d910      	bls.n	8003ac0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a9e:	4b72      	ldr	r3, [pc, #456]	@ (8003c68 <HAL_RCC_ClockConfig+0x1ec>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f023 0207 	bic.w	r2, r3, #7
 8003aa6:	4970      	ldr	r1, [pc, #448]	@ (8003c68 <HAL_RCC_ClockConfig+0x1ec>)
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aae:	4b6e      	ldr	r3, [pc, #440]	@ (8003c68 <HAL_RCC_ClockConfig+0x1ec>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0307 	and.w	r3, r3, #7
 8003ab6:	683a      	ldr	r2, [r7, #0]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d001      	beq.n	8003ac0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e0cf      	b.n	8003c60 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0302 	and.w	r3, r3, #2
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d010      	beq.n	8003aee <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689a      	ldr	r2, [r3, #8]
 8003ad0:	4b66      	ldr	r3, [pc, #408]	@ (8003c6c <HAL_RCC_ClockConfig+0x1f0>)
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d908      	bls.n	8003aee <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003adc:	4b63      	ldr	r3, [pc, #396]	@ (8003c6c <HAL_RCC_ClockConfig+0x1f0>)
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	4960      	ldr	r1, [pc, #384]	@ (8003c6c <HAL_RCC_ClockConfig+0x1f0>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d04c      	beq.n	8003b94 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	2b03      	cmp	r3, #3
 8003b00:	d107      	bne.n	8003b12 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b02:	4b5a      	ldr	r3, [pc, #360]	@ (8003c6c <HAL_RCC_ClockConfig+0x1f0>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d121      	bne.n	8003b52 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e0a6      	b.n	8003c60 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d107      	bne.n	8003b2a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b1a:	4b54      	ldr	r3, [pc, #336]	@ (8003c6c <HAL_RCC_ClockConfig+0x1f0>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d115      	bne.n	8003b52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e09a      	b.n	8003c60 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d107      	bne.n	8003b42 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b32:	4b4e      	ldr	r3, [pc, #312]	@ (8003c6c <HAL_RCC_ClockConfig+0x1f0>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d109      	bne.n	8003b52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e08e      	b.n	8003c60 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b42:	4b4a      	ldr	r3, [pc, #296]	@ (8003c6c <HAL_RCC_ClockConfig+0x1f0>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d101      	bne.n	8003b52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e086      	b.n	8003c60 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b52:	4b46      	ldr	r3, [pc, #280]	@ (8003c6c <HAL_RCC_ClockConfig+0x1f0>)
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f023 0203 	bic.w	r2, r3, #3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	4943      	ldr	r1, [pc, #268]	@ (8003c6c <HAL_RCC_ClockConfig+0x1f0>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b64:	f7fe fa96 	bl	8002094 <HAL_GetTick>
 8003b68:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b6a:	e00a      	b.n	8003b82 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b6c:	f7fe fa92 	bl	8002094 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e06e      	b.n	8003c60 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b82:	4b3a      	ldr	r3, [pc, #232]	@ (8003c6c <HAL_RCC_ClockConfig+0x1f0>)
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f003 020c 	and.w	r2, r3, #12
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d1eb      	bne.n	8003b6c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0302 	and.w	r3, r3, #2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d010      	beq.n	8003bc2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689a      	ldr	r2, [r3, #8]
 8003ba4:	4b31      	ldr	r3, [pc, #196]	@ (8003c6c <HAL_RCC_ClockConfig+0x1f0>)
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d208      	bcs.n	8003bc2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bb0:	4b2e      	ldr	r3, [pc, #184]	@ (8003c6c <HAL_RCC_ClockConfig+0x1f0>)
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	492b      	ldr	r1, [pc, #172]	@ (8003c6c <HAL_RCC_ClockConfig+0x1f0>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bc2:	4b29      	ldr	r3, [pc, #164]	@ (8003c68 <HAL_RCC_ClockConfig+0x1ec>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0307 	and.w	r3, r3, #7
 8003bca:	683a      	ldr	r2, [r7, #0]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d210      	bcs.n	8003bf2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bd0:	4b25      	ldr	r3, [pc, #148]	@ (8003c68 <HAL_RCC_ClockConfig+0x1ec>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f023 0207 	bic.w	r2, r3, #7
 8003bd8:	4923      	ldr	r1, [pc, #140]	@ (8003c68 <HAL_RCC_ClockConfig+0x1ec>)
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003be0:	4b21      	ldr	r3, [pc, #132]	@ (8003c68 <HAL_RCC_ClockConfig+0x1ec>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0307 	and.w	r3, r3, #7
 8003be8:	683a      	ldr	r2, [r7, #0]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d001      	beq.n	8003bf2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e036      	b.n	8003c60 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0304 	and.w	r3, r3, #4
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d008      	beq.n	8003c10 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bfe:	4b1b      	ldr	r3, [pc, #108]	@ (8003c6c <HAL_RCC_ClockConfig+0x1f0>)
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	4918      	ldr	r1, [pc, #96]	@ (8003c6c <HAL_RCC_ClockConfig+0x1f0>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0308 	and.w	r3, r3, #8
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d009      	beq.n	8003c30 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c1c:	4b13      	ldr	r3, [pc, #76]	@ (8003c6c <HAL_RCC_ClockConfig+0x1f0>)
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	00db      	lsls	r3, r3, #3
 8003c2a:	4910      	ldr	r1, [pc, #64]	@ (8003c6c <HAL_RCC_ClockConfig+0x1f0>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c30:	f000 f824 	bl	8003c7c <HAL_RCC_GetSysClockFreq>
 8003c34:	4602      	mov	r2, r0
 8003c36:	4b0d      	ldr	r3, [pc, #52]	@ (8003c6c <HAL_RCC_ClockConfig+0x1f0>)
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	091b      	lsrs	r3, r3, #4
 8003c3c:	f003 030f 	and.w	r3, r3, #15
 8003c40:	490b      	ldr	r1, [pc, #44]	@ (8003c70 <HAL_RCC_ClockConfig+0x1f4>)
 8003c42:	5ccb      	ldrb	r3, [r1, r3]
 8003c44:	f003 031f 	and.w	r3, r3, #31
 8003c48:	fa22 f303 	lsr.w	r3, r2, r3
 8003c4c:	4a09      	ldr	r2, [pc, #36]	@ (8003c74 <HAL_RCC_ClockConfig+0x1f8>)
 8003c4e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003c50:	4b09      	ldr	r3, [pc, #36]	@ (8003c78 <HAL_RCC_ClockConfig+0x1fc>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7fe f9cd 	bl	8001ff4 <HAL_InitTick>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	72fb      	strb	r3, [r7, #11]

  return status;
 8003c5e:	7afb      	ldrb	r3, [r7, #11]
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3710      	adds	r7, #16
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	40022000 	.word	0x40022000
 8003c6c:	40021000 	.word	0x40021000
 8003c70:	08013e40 	.word	0x08013e40
 8003c74:	20000018 	.word	0x20000018
 8003c78:	2000001c 	.word	0x2000001c

08003c7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b089      	sub	sp, #36	@ 0x24
 8003c80:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003c82:	2300      	movs	r3, #0
 8003c84:	61fb      	str	r3, [r7, #28]
 8003c86:	2300      	movs	r3, #0
 8003c88:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c8a:	4b3e      	ldr	r3, [pc, #248]	@ (8003d84 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f003 030c 	and.w	r3, r3, #12
 8003c92:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c94:	4b3b      	ldr	r3, [pc, #236]	@ (8003d84 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	f003 0303 	and.w	r3, r3, #3
 8003c9c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d005      	beq.n	8003cb0 <HAL_RCC_GetSysClockFreq+0x34>
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	2b0c      	cmp	r3, #12
 8003ca8:	d121      	bne.n	8003cee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d11e      	bne.n	8003cee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003cb0:	4b34      	ldr	r3, [pc, #208]	@ (8003d84 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0308 	and.w	r3, r3, #8
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d107      	bne.n	8003ccc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003cbc:	4b31      	ldr	r3, [pc, #196]	@ (8003d84 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cc2:	0a1b      	lsrs	r3, r3, #8
 8003cc4:	f003 030f 	and.w	r3, r3, #15
 8003cc8:	61fb      	str	r3, [r7, #28]
 8003cca:	e005      	b.n	8003cd8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003ccc:	4b2d      	ldr	r3, [pc, #180]	@ (8003d84 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	091b      	lsrs	r3, r3, #4
 8003cd2:	f003 030f 	and.w	r3, r3, #15
 8003cd6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003cd8:	4a2b      	ldr	r2, [pc, #172]	@ (8003d88 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ce0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d10d      	bne.n	8003d04 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003cec:	e00a      	b.n	8003d04 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	2b04      	cmp	r3, #4
 8003cf2:	d102      	bne.n	8003cfa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003cf4:	4b25      	ldr	r3, [pc, #148]	@ (8003d8c <HAL_RCC_GetSysClockFreq+0x110>)
 8003cf6:	61bb      	str	r3, [r7, #24]
 8003cf8:	e004      	b.n	8003d04 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	2b08      	cmp	r3, #8
 8003cfe:	d101      	bne.n	8003d04 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d00:	4b23      	ldr	r3, [pc, #140]	@ (8003d90 <HAL_RCC_GetSysClockFreq+0x114>)
 8003d02:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	2b0c      	cmp	r3, #12
 8003d08:	d134      	bne.n	8003d74 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d0a:	4b1e      	ldr	r3, [pc, #120]	@ (8003d84 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	f003 0303 	and.w	r3, r3, #3
 8003d12:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d003      	beq.n	8003d22 <HAL_RCC_GetSysClockFreq+0xa6>
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	2b03      	cmp	r3, #3
 8003d1e:	d003      	beq.n	8003d28 <HAL_RCC_GetSysClockFreq+0xac>
 8003d20:	e005      	b.n	8003d2e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003d22:	4b1a      	ldr	r3, [pc, #104]	@ (8003d8c <HAL_RCC_GetSysClockFreq+0x110>)
 8003d24:	617b      	str	r3, [r7, #20]
      break;
 8003d26:	e005      	b.n	8003d34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003d28:	4b19      	ldr	r3, [pc, #100]	@ (8003d90 <HAL_RCC_GetSysClockFreq+0x114>)
 8003d2a:	617b      	str	r3, [r7, #20]
      break;
 8003d2c:	e002      	b.n	8003d34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	617b      	str	r3, [r7, #20]
      break;
 8003d32:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d34:	4b13      	ldr	r3, [pc, #76]	@ (8003d84 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	091b      	lsrs	r3, r3, #4
 8003d3a:	f003 0307 	and.w	r3, r3, #7
 8003d3e:	3301      	adds	r3, #1
 8003d40:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003d42:	4b10      	ldr	r3, [pc, #64]	@ (8003d84 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	0a1b      	lsrs	r3, r3, #8
 8003d48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d4c:	697a      	ldr	r2, [r7, #20]
 8003d4e:	fb03 f202 	mul.w	r2, r3, r2
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d58:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d5a:	4b0a      	ldr	r3, [pc, #40]	@ (8003d84 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	0e5b      	lsrs	r3, r3, #25
 8003d60:	f003 0303 	and.w	r3, r3, #3
 8003d64:	3301      	adds	r3, #1
 8003d66:	005b      	lsls	r3, r3, #1
 8003d68:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003d6a:	697a      	ldr	r2, [r7, #20]
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d72:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003d74:	69bb      	ldr	r3, [r7, #24]
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3724      	adds	r7, #36	@ 0x24
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	40021000 	.word	0x40021000
 8003d88:	08013e58 	.word	0x08013e58
 8003d8c:	00f42400 	.word	0x00f42400
 8003d90:	007a1200 	.word	0x007a1200

08003d94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d94:	b480      	push	{r7}
 8003d96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d98:	4b03      	ldr	r3, [pc, #12]	@ (8003da8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	20000018 	.word	0x20000018

08003dac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003db0:	f7ff fff0 	bl	8003d94 <HAL_RCC_GetHCLKFreq>
 8003db4:	4602      	mov	r2, r0
 8003db6:	4b06      	ldr	r3, [pc, #24]	@ (8003dd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	0a1b      	lsrs	r3, r3, #8
 8003dbc:	f003 0307 	and.w	r3, r3, #7
 8003dc0:	4904      	ldr	r1, [pc, #16]	@ (8003dd4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003dc2:	5ccb      	ldrb	r3, [r1, r3]
 8003dc4:	f003 031f 	and.w	r3, r3, #31
 8003dc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	40021000 	.word	0x40021000
 8003dd4:	08013e50 	.word	0x08013e50

08003dd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003ddc:	f7ff ffda 	bl	8003d94 <HAL_RCC_GetHCLKFreq>
 8003de0:	4602      	mov	r2, r0
 8003de2:	4b06      	ldr	r3, [pc, #24]	@ (8003dfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	0adb      	lsrs	r3, r3, #11
 8003de8:	f003 0307 	and.w	r3, r3, #7
 8003dec:	4904      	ldr	r1, [pc, #16]	@ (8003e00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003dee:	5ccb      	ldrb	r3, [r1, r3]
 8003df0:	f003 031f 	and.w	r3, r3, #31
 8003df4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	40021000 	.word	0x40021000
 8003e00:	08013e50 	.word	0x08013e50

08003e04 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b086      	sub	sp, #24
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003e10:	4b2a      	ldr	r3, [pc, #168]	@ (8003ebc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d003      	beq.n	8003e24 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003e1c:	f7ff f9ee 	bl	80031fc <HAL_PWREx_GetVoltageRange>
 8003e20:	6178      	str	r0, [r7, #20]
 8003e22:	e014      	b.n	8003e4e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e24:	4b25      	ldr	r3, [pc, #148]	@ (8003ebc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e28:	4a24      	ldr	r2, [pc, #144]	@ (8003ebc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e30:	4b22      	ldr	r3, [pc, #136]	@ (8003ebc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e38:	60fb      	str	r3, [r7, #12]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003e3c:	f7ff f9de 	bl	80031fc <HAL_PWREx_GetVoltageRange>
 8003e40:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003e42:	4b1e      	ldr	r3, [pc, #120]	@ (8003ebc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e46:	4a1d      	ldr	r2, [pc, #116]	@ (8003ebc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e4c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e54:	d10b      	bne.n	8003e6e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2b80      	cmp	r3, #128	@ 0x80
 8003e5a:	d919      	bls.n	8003e90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003e60:	d902      	bls.n	8003e68 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e62:	2302      	movs	r3, #2
 8003e64:	613b      	str	r3, [r7, #16]
 8003e66:	e013      	b.n	8003e90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e68:	2301      	movs	r3, #1
 8003e6a:	613b      	str	r3, [r7, #16]
 8003e6c:	e010      	b.n	8003e90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2b80      	cmp	r3, #128	@ 0x80
 8003e72:	d902      	bls.n	8003e7a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003e74:	2303      	movs	r3, #3
 8003e76:	613b      	str	r3, [r7, #16]
 8003e78:	e00a      	b.n	8003e90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2b80      	cmp	r3, #128	@ 0x80
 8003e7e:	d102      	bne.n	8003e86 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e80:	2302      	movs	r3, #2
 8003e82:	613b      	str	r3, [r7, #16]
 8003e84:	e004      	b.n	8003e90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2b70      	cmp	r3, #112	@ 0x70
 8003e8a:	d101      	bne.n	8003e90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003e90:	4b0b      	ldr	r3, [pc, #44]	@ (8003ec0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f023 0207 	bic.w	r2, r3, #7
 8003e98:	4909      	ldr	r1, [pc, #36]	@ (8003ec0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003ea0:	4b07      	ldr	r3, [pc, #28]	@ (8003ec0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0307 	and.w	r3, r3, #7
 8003ea8:	693a      	ldr	r2, [r7, #16]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d001      	beq.n	8003eb2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e000      	b.n	8003eb4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3718      	adds	r7, #24
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	40021000 	.word	0x40021000
 8003ec0:	40022000 	.word	0x40022000

08003ec4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b086      	sub	sp, #24
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ecc:	2300      	movs	r3, #0
 8003ece:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d041      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ee4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003ee8:	d02a      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003eea:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003eee:	d824      	bhi.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ef0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003ef4:	d008      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003ef6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003efa:	d81e      	bhi.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d00a      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003f00:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f04:	d010      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003f06:	e018      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f08:	4b86      	ldr	r3, [pc, #536]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	4a85      	ldr	r2, [pc, #532]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f12:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f14:	e015      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	3304      	adds	r3, #4
 8003f1a:	2100      	movs	r1, #0
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f000 fabb 	bl	8004498 <RCCEx_PLLSAI1_Config>
 8003f22:	4603      	mov	r3, r0
 8003f24:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f26:	e00c      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	3320      	adds	r3, #32
 8003f2c:	2100      	movs	r1, #0
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f000 fba6 	bl	8004680 <RCCEx_PLLSAI2_Config>
 8003f34:	4603      	mov	r3, r0
 8003f36:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f38:	e003      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	74fb      	strb	r3, [r7, #19]
      break;
 8003f3e:	e000      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003f40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f42:	7cfb      	ldrb	r3, [r7, #19]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d10b      	bne.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f48:	4b76      	ldr	r3, [pc, #472]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f4e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f56:	4973      	ldr	r1, [pc, #460]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003f5e:	e001      	b.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f60:	7cfb      	ldrb	r3, [r7, #19]
 8003f62:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d041      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f74:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003f78:	d02a      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003f7a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003f7e:	d824      	bhi.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003f80:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f84:	d008      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003f86:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f8a:	d81e      	bhi.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00a      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003f90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f94:	d010      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003f96:	e018      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f98:	4b62      	ldr	r3, [pc, #392]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	4a61      	ldr	r2, [pc, #388]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fa2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003fa4:	e015      	b.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	3304      	adds	r3, #4
 8003faa:	2100      	movs	r1, #0
 8003fac:	4618      	mov	r0, r3
 8003fae:	f000 fa73 	bl	8004498 <RCCEx_PLLSAI1_Config>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003fb6:	e00c      	b.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	3320      	adds	r3, #32
 8003fbc:	2100      	movs	r1, #0
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f000 fb5e 	bl	8004680 <RCCEx_PLLSAI2_Config>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003fc8:	e003      	b.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	74fb      	strb	r3, [r7, #19]
      break;
 8003fce:	e000      	b.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003fd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fd2:	7cfb      	ldrb	r3, [r7, #19]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d10b      	bne.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003fd8:	4b52      	ldr	r3, [pc, #328]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fde:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003fe6:	494f      	ldr	r1, [pc, #316]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003fee:	e001      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ff0:	7cfb      	ldrb	r3, [r7, #19]
 8003ff2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	f000 80a0 	beq.w	8004142 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004002:	2300      	movs	r3, #0
 8004004:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004006:	4b47      	ldr	r3, [pc, #284]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004008:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800400a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d101      	bne.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004012:	2301      	movs	r3, #1
 8004014:	e000      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004016:	2300      	movs	r3, #0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00d      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800401c:	4b41      	ldr	r3, [pc, #260]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800401e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004020:	4a40      	ldr	r2, [pc, #256]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004022:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004026:	6593      	str	r3, [r2, #88]	@ 0x58
 8004028:	4b3e      	ldr	r3, [pc, #248]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800402a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800402c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004030:	60bb      	str	r3, [r7, #8]
 8004032:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004034:	2301      	movs	r3, #1
 8004036:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004038:	4b3b      	ldr	r3, [pc, #236]	@ (8004128 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a3a      	ldr	r2, [pc, #232]	@ (8004128 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800403e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004042:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004044:	f7fe f826 	bl	8002094 <HAL_GetTick>
 8004048:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800404a:	e009      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800404c:	f7fe f822 	bl	8002094 <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	2b02      	cmp	r3, #2
 8004058:	d902      	bls.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	74fb      	strb	r3, [r7, #19]
        break;
 800405e:	e005      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004060:	4b31      	ldr	r3, [pc, #196]	@ (8004128 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004068:	2b00      	cmp	r3, #0
 800406a:	d0ef      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800406c:	7cfb      	ldrb	r3, [r7, #19]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d15c      	bne.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004072:	4b2c      	ldr	r3, [pc, #176]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004074:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004078:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800407c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d01f      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800408a:	697a      	ldr	r2, [r7, #20]
 800408c:	429a      	cmp	r2, r3
 800408e:	d019      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004090:	4b24      	ldr	r3, [pc, #144]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004092:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004096:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800409a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800409c:	4b21      	ldr	r3, [pc, #132]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800409e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040a2:	4a20      	ldr	r2, [pc, #128]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040ac:	4b1d      	ldr	r3, [pc, #116]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040b2:	4a1c      	ldr	r2, [pc, #112]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80040bc:	4a19      	ldr	r2, [pc, #100]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d016      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ce:	f7fd ffe1 	bl	8002094 <HAL_GetTick>
 80040d2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040d4:	e00b      	b.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040d6:	f7fd ffdd 	bl	8002094 <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d902      	bls.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	74fb      	strb	r3, [r7, #19]
            break;
 80040ec:	e006      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040f4:	f003 0302 	and.w	r3, r3, #2
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d0ec      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80040fc:	7cfb      	ldrb	r3, [r7, #19]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d10c      	bne.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004102:	4b08      	ldr	r3, [pc, #32]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004104:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004108:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004112:	4904      	ldr	r1, [pc, #16]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004114:	4313      	orrs	r3, r2
 8004116:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800411a:	e009      	b.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800411c:	7cfb      	ldrb	r3, [r7, #19]
 800411e:	74bb      	strb	r3, [r7, #18]
 8004120:	e006      	b.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004122:	bf00      	nop
 8004124:	40021000 	.word	0x40021000
 8004128:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800412c:	7cfb      	ldrb	r3, [r7, #19]
 800412e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004130:	7c7b      	ldrb	r3, [r7, #17]
 8004132:	2b01      	cmp	r3, #1
 8004134:	d105      	bne.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004136:	4b9e      	ldr	r3, [pc, #632]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800413a:	4a9d      	ldr	r2, [pc, #628]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800413c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004140:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0301 	and.w	r3, r3, #1
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00a      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800414e:	4b98      	ldr	r3, [pc, #608]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004150:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004154:	f023 0203 	bic.w	r2, r3, #3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800415c:	4994      	ldr	r1, [pc, #592]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800415e:	4313      	orrs	r3, r2
 8004160:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0302 	and.w	r3, r3, #2
 800416c:	2b00      	cmp	r3, #0
 800416e:	d00a      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004170:	4b8f      	ldr	r3, [pc, #572]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004172:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004176:	f023 020c 	bic.w	r2, r3, #12
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800417e:	498c      	ldr	r1, [pc, #560]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004180:	4313      	orrs	r3, r2
 8004182:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0304 	and.w	r3, r3, #4
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00a      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004192:	4b87      	ldr	r3, [pc, #540]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004194:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004198:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a0:	4983      	ldr	r1, [pc, #524]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0308 	and.w	r3, r3, #8
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00a      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80041b4:	4b7e      	ldr	r3, [pc, #504]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041ba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041c2:	497b      	ldr	r1, [pc, #492]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0310 	and.w	r3, r3, #16
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00a      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80041d6:	4b76      	ldr	r3, [pc, #472]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041e4:	4972      	ldr	r1, [pc, #456]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0320 	and.w	r3, r3, #32
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00a      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041f8:	4b6d      	ldr	r3, [pc, #436]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041fe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004206:	496a      	ldr	r1, [pc, #424]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004208:	4313      	orrs	r3, r2
 800420a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00a      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800421a:	4b65      	ldr	r3, [pc, #404]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800421c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004220:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004228:	4961      	ldr	r1, [pc, #388]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800422a:	4313      	orrs	r3, r2
 800422c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004238:	2b00      	cmp	r3, #0
 800423a:	d00a      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800423c:	4b5c      	ldr	r3, [pc, #368]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800423e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004242:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800424a:	4959      	ldr	r1, [pc, #356]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800424c:	4313      	orrs	r3, r2
 800424e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00a      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800425e:	4b54      	ldr	r3, [pc, #336]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004260:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004264:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800426c:	4950      	ldr	r1, [pc, #320]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800426e:	4313      	orrs	r3, r2
 8004270:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00a      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004280:	4b4b      	ldr	r3, [pc, #300]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004282:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004286:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800428e:	4948      	ldr	r1, [pc, #288]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004290:	4313      	orrs	r3, r2
 8004292:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00a      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80042a2:	4b43      	ldr	r3, [pc, #268]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042a8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042b0:	493f      	ldr	r1, [pc, #252]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d028      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042c4:	4b3a      	ldr	r3, [pc, #232]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042ca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042d2:	4937      	ldr	r1, [pc, #220]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80042e2:	d106      	bne.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042e4:	4b32      	ldr	r3, [pc, #200]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	4a31      	ldr	r2, [pc, #196]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042ee:	60d3      	str	r3, [r2, #12]
 80042f0:	e011      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042f6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80042fa:	d10c      	bne.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	3304      	adds	r3, #4
 8004300:	2101      	movs	r1, #1
 8004302:	4618      	mov	r0, r3
 8004304:	f000 f8c8 	bl	8004498 <RCCEx_PLLSAI1_Config>
 8004308:	4603      	mov	r3, r0
 800430a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800430c:	7cfb      	ldrb	r3, [r7, #19]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d001      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004312:	7cfb      	ldrb	r3, [r7, #19]
 8004314:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d028      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004322:	4b23      	ldr	r3, [pc, #140]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004324:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004328:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004330:	491f      	ldr	r1, [pc, #124]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004332:	4313      	orrs	r3, r2
 8004334:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800433c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004340:	d106      	bne.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004342:	4b1b      	ldr	r3, [pc, #108]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	4a1a      	ldr	r2, [pc, #104]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004348:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800434c:	60d3      	str	r3, [r2, #12]
 800434e:	e011      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004354:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004358:	d10c      	bne.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	3304      	adds	r3, #4
 800435e:	2101      	movs	r1, #1
 8004360:	4618      	mov	r0, r3
 8004362:	f000 f899 	bl	8004498 <RCCEx_PLLSAI1_Config>
 8004366:	4603      	mov	r3, r0
 8004368:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800436a:	7cfb      	ldrb	r3, [r7, #19]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d001      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004370:	7cfb      	ldrb	r3, [r7, #19]
 8004372:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d02b      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004380:	4b0b      	ldr	r3, [pc, #44]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004382:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004386:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800438e:	4908      	ldr	r1, [pc, #32]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004390:	4313      	orrs	r3, r2
 8004392:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800439a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800439e:	d109      	bne.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043a0:	4b03      	ldr	r3, [pc, #12]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	4a02      	ldr	r2, [pc, #8]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80043aa:	60d3      	str	r3, [r2, #12]
 80043ac:	e014      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80043ae:	bf00      	nop
 80043b0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80043bc:	d10c      	bne.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	3304      	adds	r3, #4
 80043c2:	2101      	movs	r1, #1
 80043c4:	4618      	mov	r0, r3
 80043c6:	f000 f867 	bl	8004498 <RCCEx_PLLSAI1_Config>
 80043ca:	4603      	mov	r3, r0
 80043cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043ce:	7cfb      	ldrb	r3, [r7, #19]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d001      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80043d4:	7cfb      	ldrb	r3, [r7, #19]
 80043d6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d02f      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043e4:	4b2b      	ldr	r3, [pc, #172]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043ea:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80043f2:	4928      	ldr	r1, [pc, #160]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80043fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004402:	d10d      	bne.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	3304      	adds	r3, #4
 8004408:	2102      	movs	r1, #2
 800440a:	4618      	mov	r0, r3
 800440c:	f000 f844 	bl	8004498 <RCCEx_PLLSAI1_Config>
 8004410:	4603      	mov	r3, r0
 8004412:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004414:	7cfb      	ldrb	r3, [r7, #19]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d014      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800441a:	7cfb      	ldrb	r3, [r7, #19]
 800441c:	74bb      	strb	r3, [r7, #18]
 800441e:	e011      	b.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004424:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004428:	d10c      	bne.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	3320      	adds	r3, #32
 800442e:	2102      	movs	r1, #2
 8004430:	4618      	mov	r0, r3
 8004432:	f000 f925 	bl	8004680 <RCCEx_PLLSAI2_Config>
 8004436:	4603      	mov	r3, r0
 8004438:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800443a:	7cfb      	ldrb	r3, [r7, #19]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d001      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004440:	7cfb      	ldrb	r3, [r7, #19]
 8004442:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d00a      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004450:	4b10      	ldr	r3, [pc, #64]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004452:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004456:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800445e:	490d      	ldr	r1, [pc, #52]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004460:	4313      	orrs	r3, r2
 8004462:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00b      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004472:	4b08      	ldr	r3, [pc, #32]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004474:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004478:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004482:	4904      	ldr	r1, [pc, #16]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004484:	4313      	orrs	r3, r2
 8004486:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800448a:	7cbb      	ldrb	r3, [r7, #18]
}
 800448c:	4618      	mov	r0, r3
 800448e:	3718      	adds	r7, #24
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}
 8004494:	40021000 	.word	0x40021000

08004498 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044a2:	2300      	movs	r3, #0
 80044a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80044a6:	4b75      	ldr	r3, [pc, #468]	@ (800467c <RCCEx_PLLSAI1_Config+0x1e4>)
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	f003 0303 	and.w	r3, r3, #3
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d018      	beq.n	80044e4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80044b2:	4b72      	ldr	r3, [pc, #456]	@ (800467c <RCCEx_PLLSAI1_Config+0x1e4>)
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	f003 0203 	and.w	r2, r3, #3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d10d      	bne.n	80044de <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
       ||
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d009      	beq.n	80044de <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80044ca:	4b6c      	ldr	r3, [pc, #432]	@ (800467c <RCCEx_PLLSAI1_Config+0x1e4>)
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	091b      	lsrs	r3, r3, #4
 80044d0:	f003 0307 	and.w	r3, r3, #7
 80044d4:	1c5a      	adds	r2, r3, #1
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
       ||
 80044da:	429a      	cmp	r2, r3
 80044dc:	d047      	beq.n	800456e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	73fb      	strb	r3, [r7, #15]
 80044e2:	e044      	b.n	800456e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2b03      	cmp	r3, #3
 80044ea:	d018      	beq.n	800451e <RCCEx_PLLSAI1_Config+0x86>
 80044ec:	2b03      	cmp	r3, #3
 80044ee:	d825      	bhi.n	800453c <RCCEx_PLLSAI1_Config+0xa4>
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d002      	beq.n	80044fa <RCCEx_PLLSAI1_Config+0x62>
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d009      	beq.n	800450c <RCCEx_PLLSAI1_Config+0x74>
 80044f8:	e020      	b.n	800453c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80044fa:	4b60      	ldr	r3, [pc, #384]	@ (800467c <RCCEx_PLLSAI1_Config+0x1e4>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	2b00      	cmp	r3, #0
 8004504:	d11d      	bne.n	8004542 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800450a:	e01a      	b.n	8004542 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800450c:	4b5b      	ldr	r3, [pc, #364]	@ (800467c <RCCEx_PLLSAI1_Config+0x1e4>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004514:	2b00      	cmp	r3, #0
 8004516:	d116      	bne.n	8004546 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800451c:	e013      	b.n	8004546 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800451e:	4b57      	ldr	r3, [pc, #348]	@ (800467c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d10f      	bne.n	800454a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800452a:	4b54      	ldr	r3, [pc, #336]	@ (800467c <RCCEx_PLLSAI1_Config+0x1e4>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d109      	bne.n	800454a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800453a:	e006      	b.n	800454a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	73fb      	strb	r3, [r7, #15]
      break;
 8004540:	e004      	b.n	800454c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004542:	bf00      	nop
 8004544:	e002      	b.n	800454c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004546:	bf00      	nop
 8004548:	e000      	b.n	800454c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800454a:	bf00      	nop
    }

    if(status == HAL_OK)
 800454c:	7bfb      	ldrb	r3, [r7, #15]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d10d      	bne.n	800456e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004552:	4b4a      	ldr	r3, [pc, #296]	@ (800467c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6819      	ldr	r1, [r3, #0]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	3b01      	subs	r3, #1
 8004564:	011b      	lsls	r3, r3, #4
 8004566:	430b      	orrs	r3, r1
 8004568:	4944      	ldr	r1, [pc, #272]	@ (800467c <RCCEx_PLLSAI1_Config+0x1e4>)
 800456a:	4313      	orrs	r3, r2
 800456c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800456e:	7bfb      	ldrb	r3, [r7, #15]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d17d      	bne.n	8004670 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004574:	4b41      	ldr	r3, [pc, #260]	@ (800467c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a40      	ldr	r2, [pc, #256]	@ (800467c <RCCEx_PLLSAI1_Config+0x1e4>)
 800457a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800457e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004580:	f7fd fd88 	bl	8002094 <HAL_GetTick>
 8004584:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004586:	e009      	b.n	800459c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004588:	f7fd fd84 	bl	8002094 <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	2b02      	cmp	r3, #2
 8004594:	d902      	bls.n	800459c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	73fb      	strb	r3, [r7, #15]
        break;
 800459a:	e005      	b.n	80045a8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800459c:	4b37      	ldr	r3, [pc, #220]	@ (800467c <RCCEx_PLLSAI1_Config+0x1e4>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1ef      	bne.n	8004588 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80045a8:	7bfb      	ldrb	r3, [r7, #15]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d160      	bne.n	8004670 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d111      	bne.n	80045d8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045b4:	4b31      	ldr	r3, [pc, #196]	@ (800467c <RCCEx_PLLSAI1_Config+0x1e4>)
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80045bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	6892      	ldr	r2, [r2, #8]
 80045c4:	0211      	lsls	r1, r2, #8
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	68d2      	ldr	r2, [r2, #12]
 80045ca:	0912      	lsrs	r2, r2, #4
 80045cc:	0452      	lsls	r2, r2, #17
 80045ce:	430a      	orrs	r2, r1
 80045d0:	492a      	ldr	r1, [pc, #168]	@ (800467c <RCCEx_PLLSAI1_Config+0x1e4>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	610b      	str	r3, [r1, #16]
 80045d6:	e027      	b.n	8004628 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d112      	bne.n	8004604 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045de:	4b27      	ldr	r3, [pc, #156]	@ (800467c <RCCEx_PLLSAI1_Config+0x1e4>)
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80045e6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	6892      	ldr	r2, [r2, #8]
 80045ee:	0211      	lsls	r1, r2, #8
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	6912      	ldr	r2, [r2, #16]
 80045f4:	0852      	lsrs	r2, r2, #1
 80045f6:	3a01      	subs	r2, #1
 80045f8:	0552      	lsls	r2, r2, #21
 80045fa:	430a      	orrs	r2, r1
 80045fc:	491f      	ldr	r1, [pc, #124]	@ (800467c <RCCEx_PLLSAI1_Config+0x1e4>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	610b      	str	r3, [r1, #16]
 8004602:	e011      	b.n	8004628 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004604:	4b1d      	ldr	r3, [pc, #116]	@ (800467c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800460c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	6892      	ldr	r2, [r2, #8]
 8004614:	0211      	lsls	r1, r2, #8
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	6952      	ldr	r2, [r2, #20]
 800461a:	0852      	lsrs	r2, r2, #1
 800461c:	3a01      	subs	r2, #1
 800461e:	0652      	lsls	r2, r2, #25
 8004620:	430a      	orrs	r2, r1
 8004622:	4916      	ldr	r1, [pc, #88]	@ (800467c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004624:	4313      	orrs	r3, r2
 8004626:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004628:	4b14      	ldr	r3, [pc, #80]	@ (800467c <RCCEx_PLLSAI1_Config+0x1e4>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a13      	ldr	r2, [pc, #76]	@ (800467c <RCCEx_PLLSAI1_Config+0x1e4>)
 800462e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004632:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004634:	f7fd fd2e 	bl	8002094 <HAL_GetTick>
 8004638:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800463a:	e009      	b.n	8004650 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800463c:	f7fd fd2a 	bl	8002094 <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	2b02      	cmp	r3, #2
 8004648:	d902      	bls.n	8004650 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	73fb      	strb	r3, [r7, #15]
          break;
 800464e:	e005      	b.n	800465c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004650:	4b0a      	ldr	r3, [pc, #40]	@ (800467c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d0ef      	beq.n	800463c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800465c:	7bfb      	ldrb	r3, [r7, #15]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d106      	bne.n	8004670 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004662:	4b06      	ldr	r3, [pc, #24]	@ (800467c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004664:	691a      	ldr	r2, [r3, #16]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	4904      	ldr	r1, [pc, #16]	@ (800467c <RCCEx_PLLSAI1_Config+0x1e4>)
 800466c:	4313      	orrs	r3, r2
 800466e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004670:	7bfb      	ldrb	r3, [r7, #15]
}
 8004672:	4618      	mov	r0, r3
 8004674:	3710      	adds	r7, #16
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	40021000 	.word	0x40021000

08004680 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800468a:	2300      	movs	r3, #0
 800468c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800468e:	4b6a      	ldr	r3, [pc, #424]	@ (8004838 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	f003 0303 	and.w	r3, r3, #3
 8004696:	2b00      	cmp	r3, #0
 8004698:	d018      	beq.n	80046cc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800469a:	4b67      	ldr	r3, [pc, #412]	@ (8004838 <RCCEx_PLLSAI2_Config+0x1b8>)
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	f003 0203 	and.w	r2, r3, #3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d10d      	bne.n	80046c6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
       ||
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d009      	beq.n	80046c6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80046b2:	4b61      	ldr	r3, [pc, #388]	@ (8004838 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	091b      	lsrs	r3, r3, #4
 80046b8:	f003 0307 	and.w	r3, r3, #7
 80046bc:	1c5a      	adds	r2, r3, #1
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
       ||
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d047      	beq.n	8004756 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	73fb      	strb	r3, [r7, #15]
 80046ca:	e044      	b.n	8004756 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2b03      	cmp	r3, #3
 80046d2:	d018      	beq.n	8004706 <RCCEx_PLLSAI2_Config+0x86>
 80046d4:	2b03      	cmp	r3, #3
 80046d6:	d825      	bhi.n	8004724 <RCCEx_PLLSAI2_Config+0xa4>
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d002      	beq.n	80046e2 <RCCEx_PLLSAI2_Config+0x62>
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d009      	beq.n	80046f4 <RCCEx_PLLSAI2_Config+0x74>
 80046e0:	e020      	b.n	8004724 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80046e2:	4b55      	ldr	r3, [pc, #340]	@ (8004838 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0302 	and.w	r3, r3, #2
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d11d      	bne.n	800472a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046f2:	e01a      	b.n	800472a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80046f4:	4b50      	ldr	r3, [pc, #320]	@ (8004838 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d116      	bne.n	800472e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004704:	e013      	b.n	800472e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004706:	4b4c      	ldr	r3, [pc, #304]	@ (8004838 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d10f      	bne.n	8004732 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004712:	4b49      	ldr	r3, [pc, #292]	@ (8004838 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d109      	bne.n	8004732 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004722:	e006      	b.n	8004732 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	73fb      	strb	r3, [r7, #15]
      break;
 8004728:	e004      	b.n	8004734 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800472a:	bf00      	nop
 800472c:	e002      	b.n	8004734 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800472e:	bf00      	nop
 8004730:	e000      	b.n	8004734 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004732:	bf00      	nop
    }

    if(status == HAL_OK)
 8004734:	7bfb      	ldrb	r3, [r7, #15]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d10d      	bne.n	8004756 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800473a:	4b3f      	ldr	r3, [pc, #252]	@ (8004838 <RCCEx_PLLSAI2_Config+0x1b8>)
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6819      	ldr	r1, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	3b01      	subs	r3, #1
 800474c:	011b      	lsls	r3, r3, #4
 800474e:	430b      	orrs	r3, r1
 8004750:	4939      	ldr	r1, [pc, #228]	@ (8004838 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004752:	4313      	orrs	r3, r2
 8004754:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004756:	7bfb      	ldrb	r3, [r7, #15]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d167      	bne.n	800482c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800475c:	4b36      	ldr	r3, [pc, #216]	@ (8004838 <RCCEx_PLLSAI2_Config+0x1b8>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a35      	ldr	r2, [pc, #212]	@ (8004838 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004762:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004766:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004768:	f7fd fc94 	bl	8002094 <HAL_GetTick>
 800476c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800476e:	e009      	b.n	8004784 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004770:	f7fd fc90 	bl	8002094 <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	2b02      	cmp	r3, #2
 800477c:	d902      	bls.n	8004784 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	73fb      	strb	r3, [r7, #15]
        break;
 8004782:	e005      	b.n	8004790 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004784:	4b2c      	ldr	r3, [pc, #176]	@ (8004838 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d1ef      	bne.n	8004770 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004790:	7bfb      	ldrb	r3, [r7, #15]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d14a      	bne.n	800482c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d111      	bne.n	80047c0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800479c:	4b26      	ldr	r3, [pc, #152]	@ (8004838 <RCCEx_PLLSAI2_Config+0x1b8>)
 800479e:	695b      	ldr	r3, [r3, #20]
 80047a0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80047a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	6892      	ldr	r2, [r2, #8]
 80047ac:	0211      	lsls	r1, r2, #8
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	68d2      	ldr	r2, [r2, #12]
 80047b2:	0912      	lsrs	r2, r2, #4
 80047b4:	0452      	lsls	r2, r2, #17
 80047b6:	430a      	orrs	r2, r1
 80047b8:	491f      	ldr	r1, [pc, #124]	@ (8004838 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	614b      	str	r3, [r1, #20]
 80047be:	e011      	b.n	80047e4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80047c0:	4b1d      	ldr	r3, [pc, #116]	@ (8004838 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047c2:	695b      	ldr	r3, [r3, #20]
 80047c4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80047c8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	6892      	ldr	r2, [r2, #8]
 80047d0:	0211      	lsls	r1, r2, #8
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	6912      	ldr	r2, [r2, #16]
 80047d6:	0852      	lsrs	r2, r2, #1
 80047d8:	3a01      	subs	r2, #1
 80047da:	0652      	lsls	r2, r2, #25
 80047dc:	430a      	orrs	r2, r1
 80047de:	4916      	ldr	r1, [pc, #88]	@ (8004838 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80047e4:	4b14      	ldr	r3, [pc, #80]	@ (8004838 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a13      	ldr	r2, [pc, #76]	@ (8004838 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047f0:	f7fd fc50 	bl	8002094 <HAL_GetTick>
 80047f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80047f6:	e009      	b.n	800480c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80047f8:	f7fd fc4c 	bl	8002094 <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	2b02      	cmp	r3, #2
 8004804:	d902      	bls.n	800480c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	73fb      	strb	r3, [r7, #15]
          break;
 800480a:	e005      	b.n	8004818 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800480c:	4b0a      	ldr	r3, [pc, #40]	@ (8004838 <RCCEx_PLLSAI2_Config+0x1b8>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004814:	2b00      	cmp	r3, #0
 8004816:	d0ef      	beq.n	80047f8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004818:	7bfb      	ldrb	r3, [r7, #15]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d106      	bne.n	800482c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800481e:	4b06      	ldr	r3, [pc, #24]	@ (8004838 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004820:	695a      	ldr	r2, [r3, #20]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	695b      	ldr	r3, [r3, #20]
 8004826:	4904      	ldr	r1, [pc, #16]	@ (8004838 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004828:	4313      	orrs	r3, r2
 800482a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800482c:	7bfb      	ldrb	r3, [r7, #15]
}
 800482e:	4618      	mov	r0, r3
 8004830:	3710      	adds	r7, #16
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	40021000 	.word	0x40021000

0800483c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b082      	sub	sp, #8
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d101      	bne.n	800484e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e049      	b.n	80048e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004854:	b2db      	uxtb	r3, r3
 8004856:	2b00      	cmp	r3, #0
 8004858:	d106      	bne.n	8004868 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f7fd f9a0 	bl	8001ba8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2202      	movs	r2, #2
 800486c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	3304      	adds	r3, #4
 8004878:	4619      	mov	r1, r3
 800487a:	4610      	mov	r0, r2
 800487c:	f000 f970 	bl	8004b60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80048e0:	2300      	movs	r3, #0
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3708      	adds	r7, #8
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
	...

080048ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d001      	beq.n	8004904 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e04f      	b.n	80049a4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2202      	movs	r2, #2
 8004908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68da      	ldr	r2, [r3, #12]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f042 0201 	orr.w	r2, r2, #1
 800491a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a23      	ldr	r2, [pc, #140]	@ (80049b0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d01d      	beq.n	8004962 <HAL_TIM_Base_Start_IT+0x76>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800492e:	d018      	beq.n	8004962 <HAL_TIM_Base_Start_IT+0x76>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a1f      	ldr	r2, [pc, #124]	@ (80049b4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d013      	beq.n	8004962 <HAL_TIM_Base_Start_IT+0x76>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a1e      	ldr	r2, [pc, #120]	@ (80049b8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d00e      	beq.n	8004962 <HAL_TIM_Base_Start_IT+0x76>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a1c      	ldr	r2, [pc, #112]	@ (80049bc <HAL_TIM_Base_Start_IT+0xd0>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d009      	beq.n	8004962 <HAL_TIM_Base_Start_IT+0x76>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a1b      	ldr	r2, [pc, #108]	@ (80049c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d004      	beq.n	8004962 <HAL_TIM_Base_Start_IT+0x76>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a19      	ldr	r2, [pc, #100]	@ (80049c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d115      	bne.n	800498e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	689a      	ldr	r2, [r3, #8]
 8004968:	4b17      	ldr	r3, [pc, #92]	@ (80049c8 <HAL_TIM_Base_Start_IT+0xdc>)
 800496a:	4013      	ands	r3, r2
 800496c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2b06      	cmp	r3, #6
 8004972:	d015      	beq.n	80049a0 <HAL_TIM_Base_Start_IT+0xb4>
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800497a:	d011      	beq.n	80049a0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f042 0201 	orr.w	r2, r2, #1
 800498a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800498c:	e008      	b.n	80049a0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f042 0201 	orr.w	r2, r2, #1
 800499c:	601a      	str	r2, [r3, #0]
 800499e:	e000      	b.n	80049a2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049a0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80049a2:	2300      	movs	r3, #0
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3714      	adds	r7, #20
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr
 80049b0:	40012c00 	.word	0x40012c00
 80049b4:	40000400 	.word	0x40000400
 80049b8:	40000800 	.word	0x40000800
 80049bc:	40000c00 	.word	0x40000c00
 80049c0:	40013400 	.word	0x40013400
 80049c4:	40014000 	.word	0x40014000
 80049c8:	00010007 	.word	0x00010007

080049cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049d6:	2300      	movs	r3, #0
 80049d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d101      	bne.n	80049e8 <HAL_TIM_ConfigClockSource+0x1c>
 80049e4:	2302      	movs	r3, #2
 80049e6:	e0b6      	b.n	8004b56 <HAL_TIM_ConfigClockSource+0x18a>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2202      	movs	r2, #2
 80049f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a06:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004a0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68ba      	ldr	r2, [r7, #8]
 8004a1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a24:	d03e      	beq.n	8004aa4 <HAL_TIM_ConfigClockSource+0xd8>
 8004a26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a2a:	f200 8087 	bhi.w	8004b3c <HAL_TIM_ConfigClockSource+0x170>
 8004a2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a32:	f000 8086 	beq.w	8004b42 <HAL_TIM_ConfigClockSource+0x176>
 8004a36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a3a:	d87f      	bhi.n	8004b3c <HAL_TIM_ConfigClockSource+0x170>
 8004a3c:	2b70      	cmp	r3, #112	@ 0x70
 8004a3e:	d01a      	beq.n	8004a76 <HAL_TIM_ConfigClockSource+0xaa>
 8004a40:	2b70      	cmp	r3, #112	@ 0x70
 8004a42:	d87b      	bhi.n	8004b3c <HAL_TIM_ConfigClockSource+0x170>
 8004a44:	2b60      	cmp	r3, #96	@ 0x60
 8004a46:	d050      	beq.n	8004aea <HAL_TIM_ConfigClockSource+0x11e>
 8004a48:	2b60      	cmp	r3, #96	@ 0x60
 8004a4a:	d877      	bhi.n	8004b3c <HAL_TIM_ConfigClockSource+0x170>
 8004a4c:	2b50      	cmp	r3, #80	@ 0x50
 8004a4e:	d03c      	beq.n	8004aca <HAL_TIM_ConfigClockSource+0xfe>
 8004a50:	2b50      	cmp	r3, #80	@ 0x50
 8004a52:	d873      	bhi.n	8004b3c <HAL_TIM_ConfigClockSource+0x170>
 8004a54:	2b40      	cmp	r3, #64	@ 0x40
 8004a56:	d058      	beq.n	8004b0a <HAL_TIM_ConfigClockSource+0x13e>
 8004a58:	2b40      	cmp	r3, #64	@ 0x40
 8004a5a:	d86f      	bhi.n	8004b3c <HAL_TIM_ConfigClockSource+0x170>
 8004a5c:	2b30      	cmp	r3, #48	@ 0x30
 8004a5e:	d064      	beq.n	8004b2a <HAL_TIM_ConfigClockSource+0x15e>
 8004a60:	2b30      	cmp	r3, #48	@ 0x30
 8004a62:	d86b      	bhi.n	8004b3c <HAL_TIM_ConfigClockSource+0x170>
 8004a64:	2b20      	cmp	r3, #32
 8004a66:	d060      	beq.n	8004b2a <HAL_TIM_ConfigClockSource+0x15e>
 8004a68:	2b20      	cmp	r3, #32
 8004a6a:	d867      	bhi.n	8004b3c <HAL_TIM_ConfigClockSource+0x170>
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d05c      	beq.n	8004b2a <HAL_TIM_ConfigClockSource+0x15e>
 8004a70:	2b10      	cmp	r3, #16
 8004a72:	d05a      	beq.n	8004b2a <HAL_TIM_ConfigClockSource+0x15e>
 8004a74:	e062      	b.n	8004b3c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a86:	f000 f98b 	bl	8004da0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004a98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68ba      	ldr	r2, [r7, #8]
 8004aa0:	609a      	str	r2, [r3, #8]
      break;
 8004aa2:	e04f      	b.n	8004b44 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ab4:	f000 f974 	bl	8004da0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	689a      	ldr	r2, [r3, #8]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004ac6:	609a      	str	r2, [r3, #8]
      break;
 8004ac8:	e03c      	b.n	8004b44 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	f000 f8e8 	bl	8004cac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2150      	movs	r1, #80	@ 0x50
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f000 f941 	bl	8004d6a <TIM_ITRx_SetConfig>
      break;
 8004ae8:	e02c      	b.n	8004b44 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004af6:	461a      	mov	r2, r3
 8004af8:	f000 f907 	bl	8004d0a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2160      	movs	r1, #96	@ 0x60
 8004b02:	4618      	mov	r0, r3
 8004b04:	f000 f931 	bl	8004d6a <TIM_ITRx_SetConfig>
      break;
 8004b08:	e01c      	b.n	8004b44 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b16:	461a      	mov	r2, r3
 8004b18:	f000 f8c8 	bl	8004cac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2140      	movs	r1, #64	@ 0x40
 8004b22:	4618      	mov	r0, r3
 8004b24:	f000 f921 	bl	8004d6a <TIM_ITRx_SetConfig>
      break;
 8004b28:	e00c      	b.n	8004b44 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4619      	mov	r1, r3
 8004b34:	4610      	mov	r0, r2
 8004b36:	f000 f918 	bl	8004d6a <TIM_ITRx_SetConfig>
      break;
 8004b3a:	e003      	b.n	8004b44 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	73fb      	strb	r3, [r7, #15]
      break;
 8004b40:	e000      	b.n	8004b44 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004b42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3710      	adds	r7, #16
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
	...

08004b60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b085      	sub	sp, #20
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a46      	ldr	r2, [pc, #280]	@ (8004c8c <TIM_Base_SetConfig+0x12c>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d013      	beq.n	8004ba0 <TIM_Base_SetConfig+0x40>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b7e:	d00f      	beq.n	8004ba0 <TIM_Base_SetConfig+0x40>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a43      	ldr	r2, [pc, #268]	@ (8004c90 <TIM_Base_SetConfig+0x130>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d00b      	beq.n	8004ba0 <TIM_Base_SetConfig+0x40>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a42      	ldr	r2, [pc, #264]	@ (8004c94 <TIM_Base_SetConfig+0x134>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d007      	beq.n	8004ba0 <TIM_Base_SetConfig+0x40>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a41      	ldr	r2, [pc, #260]	@ (8004c98 <TIM_Base_SetConfig+0x138>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d003      	beq.n	8004ba0 <TIM_Base_SetConfig+0x40>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a40      	ldr	r2, [pc, #256]	@ (8004c9c <TIM_Base_SetConfig+0x13c>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d108      	bne.n	8004bb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ba6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a35      	ldr	r2, [pc, #212]	@ (8004c8c <TIM_Base_SetConfig+0x12c>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d01f      	beq.n	8004bfa <TIM_Base_SetConfig+0x9a>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bc0:	d01b      	beq.n	8004bfa <TIM_Base_SetConfig+0x9a>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a32      	ldr	r2, [pc, #200]	@ (8004c90 <TIM_Base_SetConfig+0x130>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d017      	beq.n	8004bfa <TIM_Base_SetConfig+0x9a>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a31      	ldr	r2, [pc, #196]	@ (8004c94 <TIM_Base_SetConfig+0x134>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d013      	beq.n	8004bfa <TIM_Base_SetConfig+0x9a>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a30      	ldr	r2, [pc, #192]	@ (8004c98 <TIM_Base_SetConfig+0x138>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d00f      	beq.n	8004bfa <TIM_Base_SetConfig+0x9a>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a2f      	ldr	r2, [pc, #188]	@ (8004c9c <TIM_Base_SetConfig+0x13c>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d00b      	beq.n	8004bfa <TIM_Base_SetConfig+0x9a>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a2e      	ldr	r2, [pc, #184]	@ (8004ca0 <TIM_Base_SetConfig+0x140>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d007      	beq.n	8004bfa <TIM_Base_SetConfig+0x9a>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a2d      	ldr	r2, [pc, #180]	@ (8004ca4 <TIM_Base_SetConfig+0x144>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d003      	beq.n	8004bfa <TIM_Base_SetConfig+0x9a>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a2c      	ldr	r2, [pc, #176]	@ (8004ca8 <TIM_Base_SetConfig+0x148>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d108      	bne.n	8004c0c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	695b      	ldr	r3, [r3, #20]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	689a      	ldr	r2, [r3, #8]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a16      	ldr	r2, [pc, #88]	@ (8004c8c <TIM_Base_SetConfig+0x12c>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d00f      	beq.n	8004c58 <TIM_Base_SetConfig+0xf8>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a18      	ldr	r2, [pc, #96]	@ (8004c9c <TIM_Base_SetConfig+0x13c>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d00b      	beq.n	8004c58 <TIM_Base_SetConfig+0xf8>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a17      	ldr	r2, [pc, #92]	@ (8004ca0 <TIM_Base_SetConfig+0x140>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d007      	beq.n	8004c58 <TIM_Base_SetConfig+0xf8>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a16      	ldr	r2, [pc, #88]	@ (8004ca4 <TIM_Base_SetConfig+0x144>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d003      	beq.n	8004c58 <TIM_Base_SetConfig+0xf8>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4a15      	ldr	r2, [pc, #84]	@ (8004ca8 <TIM_Base_SetConfig+0x148>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d103      	bne.n	8004c60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	691a      	ldr	r2, [r3, #16]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	f003 0301 	and.w	r3, r3, #1
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d105      	bne.n	8004c7e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	f023 0201 	bic.w	r2, r3, #1
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	611a      	str	r2, [r3, #16]
  }
}
 8004c7e:	bf00      	nop
 8004c80:	3714      	adds	r7, #20
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	40012c00 	.word	0x40012c00
 8004c90:	40000400 	.word	0x40000400
 8004c94:	40000800 	.word	0x40000800
 8004c98:	40000c00 	.word	0x40000c00
 8004c9c:	40013400 	.word	0x40013400
 8004ca0:	40014000 	.word	0x40014000
 8004ca4:	40014400 	.word	0x40014400
 8004ca8:	40014800 	.word	0x40014800

08004cac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b087      	sub	sp, #28
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6a1b      	ldr	r3, [r3, #32]
 8004cbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6a1b      	ldr	r3, [r3, #32]
 8004cc2:	f023 0201 	bic.w	r2, r3, #1
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004cd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	011b      	lsls	r3, r3, #4
 8004cdc:	693a      	ldr	r2, [r7, #16]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	f023 030a 	bic.w	r3, r3, #10
 8004ce8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004cea:	697a      	ldr	r2, [r7, #20]
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	693a      	ldr	r2, [r7, #16]
 8004cf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	697a      	ldr	r2, [r7, #20]
 8004cfc:	621a      	str	r2, [r3, #32]
}
 8004cfe:	bf00      	nop
 8004d00:	371c      	adds	r7, #28
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr

08004d0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d0a:	b480      	push	{r7}
 8004d0c:	b087      	sub	sp, #28
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	60f8      	str	r0, [r7, #12]
 8004d12:	60b9      	str	r1, [r7, #8]
 8004d14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6a1b      	ldr	r3, [r3, #32]
 8004d20:	f023 0210 	bic.w	r2, r3, #16
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	699b      	ldr	r3, [r3, #24]
 8004d2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004d34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	031b      	lsls	r3, r3, #12
 8004d3a:	693a      	ldr	r2, [r7, #16]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004d46:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	011b      	lsls	r3, r3, #4
 8004d4c:	697a      	ldr	r2, [r7, #20]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	693a      	ldr	r2, [r7, #16]
 8004d56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	697a      	ldr	r2, [r7, #20]
 8004d5c:	621a      	str	r2, [r3, #32]
}
 8004d5e:	bf00      	nop
 8004d60:	371c      	adds	r7, #28
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr

08004d6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d6a:	b480      	push	{r7}
 8004d6c:	b085      	sub	sp, #20
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
 8004d72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d82:	683a      	ldr	r2, [r7, #0]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	f043 0307 	orr.w	r3, r3, #7
 8004d8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	609a      	str	r2, [r3, #8]
}
 8004d94:	bf00      	nop
 8004d96:	3714      	adds	r7, #20
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b087      	sub	sp, #28
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	607a      	str	r2, [r7, #4]
 8004dac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004dba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	021a      	lsls	r2, r3, #8
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	431a      	orrs	r2, r3
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	697a      	ldr	r2, [r7, #20]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	697a      	ldr	r2, [r7, #20]
 8004dd2:	609a      	str	r2, [r3, #8]
}
 8004dd4:	bf00      	nop
 8004dd6:	371c      	adds	r7, #28
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b085      	sub	sp, #20
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d101      	bne.n	8004df8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004df4:	2302      	movs	r3, #2
 8004df6:	e068      	b.n	8004eca <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2202      	movs	r2, #2
 8004e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a2e      	ldr	r2, [pc, #184]	@ (8004ed8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d004      	beq.n	8004e2c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a2d      	ldr	r2, [pc, #180]	@ (8004edc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d108      	bne.n	8004e3e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004e32:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	68fa      	ldr	r2, [r7, #12]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e44:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	68fa      	ldr	r2, [r7, #12]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68fa      	ldr	r2, [r7, #12]
 8004e56:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a1e      	ldr	r2, [pc, #120]	@ (8004ed8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d01d      	beq.n	8004e9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e6a:	d018      	beq.n	8004e9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a1b      	ldr	r2, [pc, #108]	@ (8004ee0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d013      	beq.n	8004e9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a1a      	ldr	r2, [pc, #104]	@ (8004ee4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d00e      	beq.n	8004e9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a18      	ldr	r2, [pc, #96]	@ (8004ee8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d009      	beq.n	8004e9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a13      	ldr	r2, [pc, #76]	@ (8004edc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d004      	beq.n	8004e9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a14      	ldr	r2, [pc, #80]	@ (8004eec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d10c      	bne.n	8004eb8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ea4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	68ba      	ldr	r2, [r7, #8]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68ba      	ldr	r2, [r7, #8]
 8004eb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3714      	adds	r7, #20
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	40012c00 	.word	0x40012c00
 8004edc:	40013400 	.word	0x40013400
 8004ee0:	40000400 	.word	0x40000400
 8004ee4:	40000800 	.word	0x40000800
 8004ee8:	40000c00 	.word	0x40000c00
 8004eec:	40014000 	.word	0x40014000

08004ef0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b082      	sub	sp, #8
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d101      	bne.n	8004f02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e040      	b.n	8004f84 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d106      	bne.n	8004f18 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f7fc fe66 	bl	8001be4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2224      	movs	r2, #36	@ 0x24
 8004f1c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f022 0201 	bic.w	r2, r2, #1
 8004f2c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d002      	beq.n	8004f3c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 ff58 	bl	8005dec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f000 fc9d 	bl	800587c <UART_SetConfig>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d101      	bne.n	8004f4c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e01b      	b.n	8004f84 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	685a      	ldr	r2, [r3, #4]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004f5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	689a      	ldr	r2, [r3, #8]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004f6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f042 0201 	orr.w	r2, r2, #1
 8004f7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f000 ffd7 	bl	8005f30 <UART_CheckIdleState>
 8004f82:	4603      	mov	r3, r0
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3708      	adds	r7, #8
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b08a      	sub	sp, #40	@ 0x28
 8004f90:	af02      	add	r7, sp, #8
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	60b9      	str	r1, [r7, #8]
 8004f96:	603b      	str	r3, [r7, #0]
 8004f98:	4613      	mov	r3, r2
 8004f9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004fa0:	2b20      	cmp	r3, #32
 8004fa2:	d177      	bne.n	8005094 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d002      	beq.n	8004fb0 <HAL_UART_Transmit+0x24>
 8004faa:	88fb      	ldrh	r3, [r7, #6]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d101      	bne.n	8004fb4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e070      	b.n	8005096 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2221      	movs	r2, #33	@ 0x21
 8004fc0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004fc2:	f7fd f867 	bl	8002094 <HAL_GetTick>
 8004fc6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	88fa      	ldrh	r2, [r7, #6]
 8004fcc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	88fa      	ldrh	r2, [r7, #6]
 8004fd4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fe0:	d108      	bne.n	8004ff4 <HAL_UART_Transmit+0x68>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d104      	bne.n	8004ff4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004fea:	2300      	movs	r3, #0
 8004fec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	61bb      	str	r3, [r7, #24]
 8004ff2:	e003      	b.n	8004ffc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004ffc:	e02f      	b.n	800505e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	9300      	str	r3, [sp, #0]
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	2200      	movs	r2, #0
 8005006:	2180      	movs	r1, #128	@ 0x80
 8005008:	68f8      	ldr	r0, [r7, #12]
 800500a:	f001 f839 	bl	8006080 <UART_WaitOnFlagUntilTimeout>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d004      	beq.n	800501e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2220      	movs	r2, #32
 8005018:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	e03b      	b.n	8005096 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d10b      	bne.n	800503c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	881a      	ldrh	r2, [r3, #0]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005030:	b292      	uxth	r2, r2
 8005032:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	3302      	adds	r3, #2
 8005038:	61bb      	str	r3, [r7, #24]
 800503a:	e007      	b.n	800504c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	781a      	ldrb	r2, [r3, #0]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	3301      	adds	r3, #1
 800504a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005052:	b29b      	uxth	r3, r3
 8005054:	3b01      	subs	r3, #1
 8005056:	b29a      	uxth	r2, r3
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005064:	b29b      	uxth	r3, r3
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1c9      	bne.n	8004ffe <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	9300      	str	r3, [sp, #0]
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	2200      	movs	r2, #0
 8005072:	2140      	movs	r1, #64	@ 0x40
 8005074:	68f8      	ldr	r0, [r7, #12]
 8005076:	f001 f803 	bl	8006080 <UART_WaitOnFlagUntilTimeout>
 800507a:	4603      	mov	r3, r0
 800507c:	2b00      	cmp	r3, #0
 800507e:	d004      	beq.n	800508a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2220      	movs	r2, #32
 8005084:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e005      	b.n	8005096 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2220      	movs	r2, #32
 800508e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005090:	2300      	movs	r3, #0
 8005092:	e000      	b.n	8005096 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005094:	2302      	movs	r3, #2
  }
}
 8005096:	4618      	mov	r0, r3
 8005098:	3720      	adds	r7, #32
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}

0800509e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800509e:	b580      	push	{r7, lr}
 80050a0:	b08a      	sub	sp, #40	@ 0x28
 80050a2:	af02      	add	r7, sp, #8
 80050a4:	60f8      	str	r0, [r7, #12]
 80050a6:	60b9      	str	r1, [r7, #8]
 80050a8:	603b      	str	r3, [r7, #0]
 80050aa:	4613      	mov	r3, r2
 80050ac:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050b4:	2b20      	cmp	r3, #32
 80050b6:	f040 80b6 	bne.w	8005226 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d002      	beq.n	80050c6 <HAL_UART_Receive+0x28>
 80050c0:	88fb      	ldrh	r3, [r7, #6]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d101      	bne.n	80050ca <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e0ae      	b.n	8005228 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2222      	movs	r2, #34	@ 0x22
 80050d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2200      	movs	r2, #0
 80050de:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050e0:	f7fc ffd8 	bl	8002094 <HAL_GetTick>
 80050e4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	88fa      	ldrh	r2, [r7, #6]
 80050ea:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	88fa      	ldrh	r2, [r7, #6]
 80050f2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050fe:	d10e      	bne.n	800511e <HAL_UART_Receive+0x80>
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d105      	bne.n	8005114 <HAL_UART_Receive+0x76>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800510e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005112:	e02d      	b.n	8005170 <HAL_UART_Receive+0xd2>
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	22ff      	movs	r2, #255	@ 0xff
 8005118:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800511c:	e028      	b.n	8005170 <HAL_UART_Receive+0xd2>
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d10d      	bne.n	8005142 <HAL_UART_Receive+0xa4>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d104      	bne.n	8005138 <HAL_UART_Receive+0x9a>
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	22ff      	movs	r2, #255	@ 0xff
 8005132:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005136:	e01b      	b.n	8005170 <HAL_UART_Receive+0xd2>
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	227f      	movs	r2, #127	@ 0x7f
 800513c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005140:	e016      	b.n	8005170 <HAL_UART_Receive+0xd2>
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800514a:	d10d      	bne.n	8005168 <HAL_UART_Receive+0xca>
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d104      	bne.n	800515e <HAL_UART_Receive+0xc0>
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	227f      	movs	r2, #127	@ 0x7f
 8005158:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800515c:	e008      	b.n	8005170 <HAL_UART_Receive+0xd2>
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	223f      	movs	r2, #63	@ 0x3f
 8005162:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005166:	e003      	b.n	8005170 <HAL_UART_Receive+0xd2>
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2200      	movs	r2, #0
 800516c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005176:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005180:	d108      	bne.n	8005194 <HAL_UART_Receive+0xf6>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d104      	bne.n	8005194 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800518a:	2300      	movs	r3, #0
 800518c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	61bb      	str	r3, [r7, #24]
 8005192:	e003      	b.n	800519c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005198:	2300      	movs	r3, #0
 800519a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800519c:	e037      	b.n	800520e <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	9300      	str	r3, [sp, #0]
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	2200      	movs	r2, #0
 80051a6:	2120      	movs	r1, #32
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	f000 ff69 	bl	8006080 <UART_WaitOnFlagUntilTimeout>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d005      	beq.n	80051c0 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2220      	movs	r2, #32
 80051b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 80051bc:	2303      	movs	r3, #3
 80051be:	e033      	b.n	8005228 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d10c      	bne.n	80051e0 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80051cc:	b29a      	uxth	r2, r3
 80051ce:	8a7b      	ldrh	r3, [r7, #18]
 80051d0:	4013      	ands	r3, r2
 80051d2:	b29a      	uxth	r2, r3
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	3302      	adds	r3, #2
 80051dc:	61bb      	str	r3, [r7, #24]
 80051de:	e00d      	b.n	80051fc <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	b2da      	uxtb	r2, r3
 80051ea:	8a7b      	ldrh	r3, [r7, #18]
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	4013      	ands	r3, r2
 80051f0:	b2da      	uxtb	r2, r3
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	3301      	adds	r3, #1
 80051fa:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005202:	b29b      	uxth	r3, r3
 8005204:	3b01      	subs	r3, #1
 8005206:	b29a      	uxth	r2, r3
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005214:	b29b      	uxth	r3, r3
 8005216:	2b00      	cmp	r3, #0
 8005218:	d1c1      	bne.n	800519e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2220      	movs	r2, #32
 800521e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8005222:	2300      	movs	r3, #0
 8005224:	e000      	b.n	8005228 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8005226:	2302      	movs	r3, #2
  }
}
 8005228:	4618      	mov	r0, r3
 800522a:	3720      	adds	r7, #32
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b0ba      	sub	sp, #232	@ 0xe8
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	69db      	ldr	r3, [r3, #28]
 800523e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005256:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800525a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800525e:	4013      	ands	r3, r2
 8005260:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005264:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005268:	2b00      	cmp	r3, #0
 800526a:	d115      	bne.n	8005298 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800526c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005270:	f003 0320 	and.w	r3, r3, #32
 8005274:	2b00      	cmp	r3, #0
 8005276:	d00f      	beq.n	8005298 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800527c:	f003 0320 	and.w	r3, r3, #32
 8005280:	2b00      	cmp	r3, #0
 8005282:	d009      	beq.n	8005298 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005288:	2b00      	cmp	r3, #0
 800528a:	f000 82ca 	beq.w	8005822 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	4798      	blx	r3
      }
      return;
 8005296:	e2c4      	b.n	8005822 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005298:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800529c:	2b00      	cmp	r3, #0
 800529e:	f000 8117 	beq.w	80054d0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80052a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052a6:	f003 0301 	and.w	r3, r3, #1
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d106      	bne.n	80052bc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80052ae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80052b2:	4b85      	ldr	r3, [pc, #532]	@ (80054c8 <HAL_UART_IRQHandler+0x298>)
 80052b4:	4013      	ands	r3, r2
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	f000 810a 	beq.w	80054d0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80052bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052c0:	f003 0301 	and.w	r3, r3, #1
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d011      	beq.n	80052ec <HAL_UART_IRQHandler+0xbc>
 80052c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d00b      	beq.n	80052ec <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2201      	movs	r2, #1
 80052da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052e2:	f043 0201 	orr.w	r2, r3, #1
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80052ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052f0:	f003 0302 	and.w	r3, r3, #2
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d011      	beq.n	800531c <HAL_UART_IRQHandler+0xec>
 80052f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052fc:	f003 0301 	and.w	r3, r3, #1
 8005300:	2b00      	cmp	r3, #0
 8005302:	d00b      	beq.n	800531c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2202      	movs	r2, #2
 800530a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005312:	f043 0204 	orr.w	r2, r3, #4
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800531c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005320:	f003 0304 	and.w	r3, r3, #4
 8005324:	2b00      	cmp	r3, #0
 8005326:	d011      	beq.n	800534c <HAL_UART_IRQHandler+0x11c>
 8005328:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800532c:	f003 0301 	and.w	r3, r3, #1
 8005330:	2b00      	cmp	r3, #0
 8005332:	d00b      	beq.n	800534c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2204      	movs	r2, #4
 800533a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005342:	f043 0202 	orr.w	r2, r3, #2
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800534c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005350:	f003 0308 	and.w	r3, r3, #8
 8005354:	2b00      	cmp	r3, #0
 8005356:	d017      	beq.n	8005388 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800535c:	f003 0320 	and.w	r3, r3, #32
 8005360:	2b00      	cmp	r3, #0
 8005362:	d105      	bne.n	8005370 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005364:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005368:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800536c:	2b00      	cmp	r3, #0
 800536e:	d00b      	beq.n	8005388 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2208      	movs	r2, #8
 8005376:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800537e:	f043 0208 	orr.w	r2, r3, #8
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005388:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800538c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005390:	2b00      	cmp	r3, #0
 8005392:	d012      	beq.n	80053ba <HAL_UART_IRQHandler+0x18a>
 8005394:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005398:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800539c:	2b00      	cmp	r3, #0
 800539e:	d00c      	beq.n	80053ba <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80053a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053b0:	f043 0220 	orr.w	r2, r3, #32
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	f000 8230 	beq.w	8005826 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80053c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053ca:	f003 0320 	and.w	r3, r3, #32
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d00d      	beq.n	80053ee <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80053d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053d6:	f003 0320 	and.w	r3, r3, #32
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d007      	beq.n	80053ee <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d003      	beq.n	80053ee <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053f4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005402:	2b40      	cmp	r3, #64	@ 0x40
 8005404:	d005      	beq.n	8005412 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005406:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800540a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800540e:	2b00      	cmp	r3, #0
 8005410:	d04f      	beq.n	80054b2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 fea1 	bl	800615a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005422:	2b40      	cmp	r3, #64	@ 0x40
 8005424:	d141      	bne.n	80054aa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	3308      	adds	r3, #8
 800542c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005430:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005434:	e853 3f00 	ldrex	r3, [r3]
 8005438:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800543c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005440:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005444:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	3308      	adds	r3, #8
 800544e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005452:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005456:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800545a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800545e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005462:	e841 2300 	strex	r3, r2, [r1]
 8005466:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800546a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d1d9      	bne.n	8005426 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005476:	2b00      	cmp	r3, #0
 8005478:	d013      	beq.n	80054a2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800547e:	4a13      	ldr	r2, [pc, #76]	@ (80054cc <HAL_UART_IRQHandler+0x29c>)
 8005480:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005486:	4618      	mov	r0, r3
 8005488:	f7fd fb5a 	bl	8002b40 <HAL_DMA_Abort_IT>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d017      	beq.n	80054c2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800549c:	4610      	mov	r0, r2
 800549e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054a0:	e00f      	b.n	80054c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 f9d4 	bl	8005850 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054a8:	e00b      	b.n	80054c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 f9d0 	bl	8005850 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054b0:	e007      	b.n	80054c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 f9cc 	bl	8005850 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80054c0:	e1b1      	b.n	8005826 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054c2:	bf00      	nop
    return;
 80054c4:	e1af      	b.n	8005826 <HAL_UART_IRQHandler+0x5f6>
 80054c6:	bf00      	nop
 80054c8:	04000120 	.word	0x04000120
 80054cc:	08006223 	.word	0x08006223

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	f040 816a 	bne.w	80057ae <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80054da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054de:	f003 0310 	and.w	r3, r3, #16
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	f000 8163 	beq.w	80057ae <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80054e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054ec:	f003 0310 	and.w	r3, r3, #16
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	f000 815c 	beq.w	80057ae <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2210      	movs	r2, #16
 80054fc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005508:	2b40      	cmp	r3, #64	@ 0x40
 800550a:	f040 80d4 	bne.w	80056b6 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800551a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800551e:	2b00      	cmp	r3, #0
 8005520:	f000 80ad 	beq.w	800567e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800552a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800552e:	429a      	cmp	r2, r3
 8005530:	f080 80a5 	bcs.w	800567e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800553a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0320 	and.w	r3, r3, #32
 800554a:	2b00      	cmp	r3, #0
 800554c:	f040 8086 	bne.w	800565c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005558:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800555c:	e853 3f00 	ldrex	r3, [r3]
 8005560:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005564:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005568:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800556c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	461a      	mov	r2, r3
 8005576:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800557a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800557e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005582:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005586:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800558a:	e841 2300 	strex	r3, r2, [r1]
 800558e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005592:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005596:	2b00      	cmp	r3, #0
 8005598:	d1da      	bne.n	8005550 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	3308      	adds	r3, #8
 80055a0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80055a4:	e853 3f00 	ldrex	r3, [r3]
 80055a8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80055aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80055ac:	f023 0301 	bic.w	r3, r3, #1
 80055b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	3308      	adds	r3, #8
 80055ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80055be:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80055c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80055c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80055ca:	e841 2300 	strex	r3, r2, [r1]
 80055ce:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80055d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d1e1      	bne.n	800559a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	3308      	adds	r3, #8
 80055dc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80055e0:	e853 3f00 	ldrex	r3, [r3]
 80055e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80055e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80055e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	3308      	adds	r3, #8
 80055f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80055fa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80055fc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005600:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005602:	e841 2300 	strex	r3, r2, [r1]
 8005606:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005608:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800560a:	2b00      	cmp	r3, #0
 800560c:	d1e3      	bne.n	80055d6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2220      	movs	r2, #32
 8005612:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005622:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005624:	e853 3f00 	ldrex	r3, [r3]
 8005628:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800562a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800562c:	f023 0310 	bic.w	r3, r3, #16
 8005630:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	461a      	mov	r2, r3
 800563a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800563e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005640:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005642:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005644:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005646:	e841 2300 	strex	r3, r2, [r1]
 800564a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800564c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800564e:	2b00      	cmp	r3, #0
 8005650:	d1e4      	bne.n	800561c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005656:	4618      	mov	r0, r3
 8005658:	f7fd fa34 	bl	8002ac4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2202      	movs	r2, #2
 8005660:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800566e:	b29b      	uxth	r3, r3
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	b29b      	uxth	r3, r3
 8005674:	4619      	mov	r1, r3
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 f8f4 	bl	8005864 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800567c:	e0d5      	b.n	800582a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005684:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005688:	429a      	cmp	r2, r3
 800568a:	f040 80ce 	bne.w	800582a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0320 	and.w	r3, r3, #32
 800569a:	2b20      	cmp	r3, #32
 800569c:	f040 80c5 	bne.w	800582a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2202      	movs	r2, #2
 80056a4:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80056ac:	4619      	mov	r1, r3
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 f8d8 	bl	8005864 <HAL_UARTEx_RxEventCallback>
      return;
 80056b4:	e0b9      	b.n	800582a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	f000 80ab 	beq.w	800582e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80056d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80056dc:	2b00      	cmp	r3, #0
 80056de:	f000 80a6 	beq.w	800582e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ea:	e853 3f00 	ldrex	r3, [r3]
 80056ee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80056f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056f6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	461a      	mov	r2, r3
 8005700:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005704:	647b      	str	r3, [r7, #68]	@ 0x44
 8005706:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005708:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800570a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800570c:	e841 2300 	strex	r3, r2, [r1]
 8005710:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005712:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005714:	2b00      	cmp	r3, #0
 8005716:	d1e4      	bne.n	80056e2 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	3308      	adds	r3, #8
 800571e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005722:	e853 3f00 	ldrex	r3, [r3]
 8005726:	623b      	str	r3, [r7, #32]
   return(result);
 8005728:	6a3b      	ldr	r3, [r7, #32]
 800572a:	f023 0301 	bic.w	r3, r3, #1
 800572e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	3308      	adds	r3, #8
 8005738:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800573c:	633a      	str	r2, [r7, #48]	@ 0x30
 800573e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005740:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005742:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005744:	e841 2300 	strex	r3, r2, [r1]
 8005748:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800574a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800574c:	2b00      	cmp	r3, #0
 800574e:	d1e3      	bne.n	8005718 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2220      	movs	r2, #32
 8005754:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	e853 3f00 	ldrex	r3, [r3]
 8005770:	60fb      	str	r3, [r7, #12]
   return(result);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f023 0310 	bic.w	r3, r3, #16
 8005778:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	461a      	mov	r2, r3
 8005782:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005786:	61fb      	str	r3, [r7, #28]
 8005788:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800578a:	69b9      	ldr	r1, [r7, #24]
 800578c:	69fa      	ldr	r2, [r7, #28]
 800578e:	e841 2300 	strex	r3, r2, [r1]
 8005792:	617b      	str	r3, [r7, #20]
   return(result);
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d1e4      	bne.n	8005764 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2202      	movs	r2, #2
 800579e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80057a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80057a4:	4619      	mov	r1, r3
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 f85c 	bl	8005864 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80057ac:	e03f      	b.n	800582e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80057ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00e      	beq.n	80057d8 <HAL_UART_IRQHandler+0x5a8>
 80057ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d008      	beq.n	80057d8 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80057ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f000 fd66 	bl	80062a2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80057d6:	e02d      	b.n	8005834 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80057d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d00e      	beq.n	8005802 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80057e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d008      	beq.n	8005802 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d01c      	beq.n	8005832 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	4798      	blx	r3
    }
    return;
 8005800:	e017      	b.n	8005832 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005806:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800580a:	2b00      	cmp	r3, #0
 800580c:	d012      	beq.n	8005834 <HAL_UART_IRQHandler+0x604>
 800580e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005812:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005816:	2b00      	cmp	r3, #0
 8005818:	d00c      	beq.n	8005834 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 fd17 	bl	800624e <UART_EndTransmit_IT>
    return;
 8005820:	e008      	b.n	8005834 <HAL_UART_IRQHandler+0x604>
      return;
 8005822:	bf00      	nop
 8005824:	e006      	b.n	8005834 <HAL_UART_IRQHandler+0x604>
    return;
 8005826:	bf00      	nop
 8005828:	e004      	b.n	8005834 <HAL_UART_IRQHandler+0x604>
      return;
 800582a:	bf00      	nop
 800582c:	e002      	b.n	8005834 <HAL_UART_IRQHandler+0x604>
      return;
 800582e:	bf00      	nop
 8005830:	e000      	b.n	8005834 <HAL_UART_IRQHandler+0x604>
    return;
 8005832:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005834:	37e8      	adds	r7, #232	@ 0xe8
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop

0800583c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005844:	bf00      	nop
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005858:	bf00      	nop
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	460b      	mov	r3, r1
 800586e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005870:	bf00      	nop
 8005872:	370c      	adds	r7, #12
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800587c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005880:	b08a      	sub	sp, #40	@ 0x28
 8005882:	af00      	add	r7, sp, #0
 8005884:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005886:	2300      	movs	r3, #0
 8005888:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	689a      	ldr	r2, [r3, #8]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	431a      	orrs	r2, r3
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	695b      	ldr	r3, [r3, #20]
 800589a:	431a      	orrs	r2, r3
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	69db      	ldr	r3, [r3, #28]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	4ba4      	ldr	r3, [pc, #656]	@ (8005b3c <UART_SetConfig+0x2c0>)
 80058ac:	4013      	ands	r3, r2
 80058ae:	68fa      	ldr	r2, [r7, #12]
 80058b0:	6812      	ldr	r2, [r2, #0]
 80058b2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80058b4:	430b      	orrs	r3, r1
 80058b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	68da      	ldr	r2, [r3, #12]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	430a      	orrs	r2, r1
 80058cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a99      	ldr	r2, [pc, #612]	@ (8005b40 <UART_SetConfig+0x2c4>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d004      	beq.n	80058e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6a1b      	ldr	r3, [r3, #32]
 80058e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058e4:	4313      	orrs	r3, r2
 80058e6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058f8:	430a      	orrs	r2, r1
 80058fa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a90      	ldr	r2, [pc, #576]	@ (8005b44 <UART_SetConfig+0x2c8>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d126      	bne.n	8005954 <UART_SetConfig+0xd8>
 8005906:	4b90      	ldr	r3, [pc, #576]	@ (8005b48 <UART_SetConfig+0x2cc>)
 8005908:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800590c:	f003 0303 	and.w	r3, r3, #3
 8005910:	2b03      	cmp	r3, #3
 8005912:	d81b      	bhi.n	800594c <UART_SetConfig+0xd0>
 8005914:	a201      	add	r2, pc, #4	@ (adr r2, 800591c <UART_SetConfig+0xa0>)
 8005916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800591a:	bf00      	nop
 800591c:	0800592d 	.word	0x0800592d
 8005920:	0800593d 	.word	0x0800593d
 8005924:	08005935 	.word	0x08005935
 8005928:	08005945 	.word	0x08005945
 800592c:	2301      	movs	r3, #1
 800592e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005932:	e116      	b.n	8005b62 <UART_SetConfig+0x2e6>
 8005934:	2302      	movs	r3, #2
 8005936:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800593a:	e112      	b.n	8005b62 <UART_SetConfig+0x2e6>
 800593c:	2304      	movs	r3, #4
 800593e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005942:	e10e      	b.n	8005b62 <UART_SetConfig+0x2e6>
 8005944:	2308      	movs	r3, #8
 8005946:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800594a:	e10a      	b.n	8005b62 <UART_SetConfig+0x2e6>
 800594c:	2310      	movs	r3, #16
 800594e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005952:	e106      	b.n	8005b62 <UART_SetConfig+0x2e6>
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a7c      	ldr	r2, [pc, #496]	@ (8005b4c <UART_SetConfig+0x2d0>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d138      	bne.n	80059d0 <UART_SetConfig+0x154>
 800595e:	4b7a      	ldr	r3, [pc, #488]	@ (8005b48 <UART_SetConfig+0x2cc>)
 8005960:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005964:	f003 030c 	and.w	r3, r3, #12
 8005968:	2b0c      	cmp	r3, #12
 800596a:	d82d      	bhi.n	80059c8 <UART_SetConfig+0x14c>
 800596c:	a201      	add	r2, pc, #4	@ (adr r2, 8005974 <UART_SetConfig+0xf8>)
 800596e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005972:	bf00      	nop
 8005974:	080059a9 	.word	0x080059a9
 8005978:	080059c9 	.word	0x080059c9
 800597c:	080059c9 	.word	0x080059c9
 8005980:	080059c9 	.word	0x080059c9
 8005984:	080059b9 	.word	0x080059b9
 8005988:	080059c9 	.word	0x080059c9
 800598c:	080059c9 	.word	0x080059c9
 8005990:	080059c9 	.word	0x080059c9
 8005994:	080059b1 	.word	0x080059b1
 8005998:	080059c9 	.word	0x080059c9
 800599c:	080059c9 	.word	0x080059c9
 80059a0:	080059c9 	.word	0x080059c9
 80059a4:	080059c1 	.word	0x080059c1
 80059a8:	2300      	movs	r3, #0
 80059aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059ae:	e0d8      	b.n	8005b62 <UART_SetConfig+0x2e6>
 80059b0:	2302      	movs	r3, #2
 80059b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059b6:	e0d4      	b.n	8005b62 <UART_SetConfig+0x2e6>
 80059b8:	2304      	movs	r3, #4
 80059ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059be:	e0d0      	b.n	8005b62 <UART_SetConfig+0x2e6>
 80059c0:	2308      	movs	r3, #8
 80059c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059c6:	e0cc      	b.n	8005b62 <UART_SetConfig+0x2e6>
 80059c8:	2310      	movs	r3, #16
 80059ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059ce:	e0c8      	b.n	8005b62 <UART_SetConfig+0x2e6>
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a5e      	ldr	r2, [pc, #376]	@ (8005b50 <UART_SetConfig+0x2d4>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d125      	bne.n	8005a26 <UART_SetConfig+0x1aa>
 80059da:	4b5b      	ldr	r3, [pc, #364]	@ (8005b48 <UART_SetConfig+0x2cc>)
 80059dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059e0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80059e4:	2b30      	cmp	r3, #48	@ 0x30
 80059e6:	d016      	beq.n	8005a16 <UART_SetConfig+0x19a>
 80059e8:	2b30      	cmp	r3, #48	@ 0x30
 80059ea:	d818      	bhi.n	8005a1e <UART_SetConfig+0x1a2>
 80059ec:	2b20      	cmp	r3, #32
 80059ee:	d00a      	beq.n	8005a06 <UART_SetConfig+0x18a>
 80059f0:	2b20      	cmp	r3, #32
 80059f2:	d814      	bhi.n	8005a1e <UART_SetConfig+0x1a2>
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d002      	beq.n	80059fe <UART_SetConfig+0x182>
 80059f8:	2b10      	cmp	r3, #16
 80059fa:	d008      	beq.n	8005a0e <UART_SetConfig+0x192>
 80059fc:	e00f      	b.n	8005a1e <UART_SetConfig+0x1a2>
 80059fe:	2300      	movs	r3, #0
 8005a00:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a04:	e0ad      	b.n	8005b62 <UART_SetConfig+0x2e6>
 8005a06:	2302      	movs	r3, #2
 8005a08:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a0c:	e0a9      	b.n	8005b62 <UART_SetConfig+0x2e6>
 8005a0e:	2304      	movs	r3, #4
 8005a10:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a14:	e0a5      	b.n	8005b62 <UART_SetConfig+0x2e6>
 8005a16:	2308      	movs	r3, #8
 8005a18:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a1c:	e0a1      	b.n	8005b62 <UART_SetConfig+0x2e6>
 8005a1e:	2310      	movs	r3, #16
 8005a20:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a24:	e09d      	b.n	8005b62 <UART_SetConfig+0x2e6>
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a4a      	ldr	r2, [pc, #296]	@ (8005b54 <UART_SetConfig+0x2d8>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d125      	bne.n	8005a7c <UART_SetConfig+0x200>
 8005a30:	4b45      	ldr	r3, [pc, #276]	@ (8005b48 <UART_SetConfig+0x2cc>)
 8005a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a36:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005a3a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005a3c:	d016      	beq.n	8005a6c <UART_SetConfig+0x1f0>
 8005a3e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005a40:	d818      	bhi.n	8005a74 <UART_SetConfig+0x1f8>
 8005a42:	2b80      	cmp	r3, #128	@ 0x80
 8005a44:	d00a      	beq.n	8005a5c <UART_SetConfig+0x1e0>
 8005a46:	2b80      	cmp	r3, #128	@ 0x80
 8005a48:	d814      	bhi.n	8005a74 <UART_SetConfig+0x1f8>
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d002      	beq.n	8005a54 <UART_SetConfig+0x1d8>
 8005a4e:	2b40      	cmp	r3, #64	@ 0x40
 8005a50:	d008      	beq.n	8005a64 <UART_SetConfig+0x1e8>
 8005a52:	e00f      	b.n	8005a74 <UART_SetConfig+0x1f8>
 8005a54:	2300      	movs	r3, #0
 8005a56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a5a:	e082      	b.n	8005b62 <UART_SetConfig+0x2e6>
 8005a5c:	2302      	movs	r3, #2
 8005a5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a62:	e07e      	b.n	8005b62 <UART_SetConfig+0x2e6>
 8005a64:	2304      	movs	r3, #4
 8005a66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a6a:	e07a      	b.n	8005b62 <UART_SetConfig+0x2e6>
 8005a6c:	2308      	movs	r3, #8
 8005a6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a72:	e076      	b.n	8005b62 <UART_SetConfig+0x2e6>
 8005a74:	2310      	movs	r3, #16
 8005a76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a7a:	e072      	b.n	8005b62 <UART_SetConfig+0x2e6>
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a35      	ldr	r2, [pc, #212]	@ (8005b58 <UART_SetConfig+0x2dc>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d12a      	bne.n	8005adc <UART_SetConfig+0x260>
 8005a86:	4b30      	ldr	r3, [pc, #192]	@ (8005b48 <UART_SetConfig+0x2cc>)
 8005a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a8c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a90:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a94:	d01a      	beq.n	8005acc <UART_SetConfig+0x250>
 8005a96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a9a:	d81b      	bhi.n	8005ad4 <UART_SetConfig+0x258>
 8005a9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005aa0:	d00c      	beq.n	8005abc <UART_SetConfig+0x240>
 8005aa2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005aa6:	d815      	bhi.n	8005ad4 <UART_SetConfig+0x258>
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d003      	beq.n	8005ab4 <UART_SetConfig+0x238>
 8005aac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ab0:	d008      	beq.n	8005ac4 <UART_SetConfig+0x248>
 8005ab2:	e00f      	b.n	8005ad4 <UART_SetConfig+0x258>
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005aba:	e052      	b.n	8005b62 <UART_SetConfig+0x2e6>
 8005abc:	2302      	movs	r3, #2
 8005abe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ac2:	e04e      	b.n	8005b62 <UART_SetConfig+0x2e6>
 8005ac4:	2304      	movs	r3, #4
 8005ac6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005aca:	e04a      	b.n	8005b62 <UART_SetConfig+0x2e6>
 8005acc:	2308      	movs	r3, #8
 8005ace:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ad2:	e046      	b.n	8005b62 <UART_SetConfig+0x2e6>
 8005ad4:	2310      	movs	r3, #16
 8005ad6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ada:	e042      	b.n	8005b62 <UART_SetConfig+0x2e6>
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a17      	ldr	r2, [pc, #92]	@ (8005b40 <UART_SetConfig+0x2c4>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d13a      	bne.n	8005b5c <UART_SetConfig+0x2e0>
 8005ae6:	4b18      	ldr	r3, [pc, #96]	@ (8005b48 <UART_SetConfig+0x2cc>)
 8005ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005aec:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005af0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005af4:	d01a      	beq.n	8005b2c <UART_SetConfig+0x2b0>
 8005af6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005afa:	d81b      	bhi.n	8005b34 <UART_SetConfig+0x2b8>
 8005afc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b00:	d00c      	beq.n	8005b1c <UART_SetConfig+0x2a0>
 8005b02:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b06:	d815      	bhi.n	8005b34 <UART_SetConfig+0x2b8>
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d003      	beq.n	8005b14 <UART_SetConfig+0x298>
 8005b0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b10:	d008      	beq.n	8005b24 <UART_SetConfig+0x2a8>
 8005b12:	e00f      	b.n	8005b34 <UART_SetConfig+0x2b8>
 8005b14:	2300      	movs	r3, #0
 8005b16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b1a:	e022      	b.n	8005b62 <UART_SetConfig+0x2e6>
 8005b1c:	2302      	movs	r3, #2
 8005b1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b22:	e01e      	b.n	8005b62 <UART_SetConfig+0x2e6>
 8005b24:	2304      	movs	r3, #4
 8005b26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b2a:	e01a      	b.n	8005b62 <UART_SetConfig+0x2e6>
 8005b2c:	2308      	movs	r3, #8
 8005b2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b32:	e016      	b.n	8005b62 <UART_SetConfig+0x2e6>
 8005b34:	2310      	movs	r3, #16
 8005b36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b3a:	e012      	b.n	8005b62 <UART_SetConfig+0x2e6>
 8005b3c:	efff69f3 	.word	0xefff69f3
 8005b40:	40008000 	.word	0x40008000
 8005b44:	40013800 	.word	0x40013800
 8005b48:	40021000 	.word	0x40021000
 8005b4c:	40004400 	.word	0x40004400
 8005b50:	40004800 	.word	0x40004800
 8005b54:	40004c00 	.word	0x40004c00
 8005b58:	40005000 	.word	0x40005000
 8005b5c:	2310      	movs	r3, #16
 8005b5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a9f      	ldr	r2, [pc, #636]	@ (8005de4 <UART_SetConfig+0x568>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d17a      	bne.n	8005c62 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005b6c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005b70:	2b08      	cmp	r3, #8
 8005b72:	d824      	bhi.n	8005bbe <UART_SetConfig+0x342>
 8005b74:	a201      	add	r2, pc, #4	@ (adr r2, 8005b7c <UART_SetConfig+0x300>)
 8005b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b7a:	bf00      	nop
 8005b7c:	08005ba1 	.word	0x08005ba1
 8005b80:	08005bbf 	.word	0x08005bbf
 8005b84:	08005ba9 	.word	0x08005ba9
 8005b88:	08005bbf 	.word	0x08005bbf
 8005b8c:	08005baf 	.word	0x08005baf
 8005b90:	08005bbf 	.word	0x08005bbf
 8005b94:	08005bbf 	.word	0x08005bbf
 8005b98:	08005bbf 	.word	0x08005bbf
 8005b9c:	08005bb7 	.word	0x08005bb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ba0:	f7fe f904 	bl	8003dac <HAL_RCC_GetPCLK1Freq>
 8005ba4:	61f8      	str	r0, [r7, #28]
        break;
 8005ba6:	e010      	b.n	8005bca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ba8:	4b8f      	ldr	r3, [pc, #572]	@ (8005de8 <UART_SetConfig+0x56c>)
 8005baa:	61fb      	str	r3, [r7, #28]
        break;
 8005bac:	e00d      	b.n	8005bca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bae:	f7fe f865 	bl	8003c7c <HAL_RCC_GetSysClockFreq>
 8005bb2:	61f8      	str	r0, [r7, #28]
        break;
 8005bb4:	e009      	b.n	8005bca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005bba:	61fb      	str	r3, [r7, #28]
        break;
 8005bbc:	e005      	b.n	8005bca <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005bc8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	f000 80fb 	beq.w	8005dc8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	685a      	ldr	r2, [r3, #4]
 8005bd6:	4613      	mov	r3, r2
 8005bd8:	005b      	lsls	r3, r3, #1
 8005bda:	4413      	add	r3, r2
 8005bdc:	69fa      	ldr	r2, [r7, #28]
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d305      	bcc.n	8005bee <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005be8:	69fa      	ldr	r2, [r7, #28]
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d903      	bls.n	8005bf6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005bf4:	e0e8      	b.n	8005dc8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005bf6:	69fb      	ldr	r3, [r7, #28]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	461c      	mov	r4, r3
 8005bfc:	4615      	mov	r5, r2
 8005bfe:	f04f 0200 	mov.w	r2, #0
 8005c02:	f04f 0300 	mov.w	r3, #0
 8005c06:	022b      	lsls	r3, r5, #8
 8005c08:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005c0c:	0222      	lsls	r2, r4, #8
 8005c0e:	68f9      	ldr	r1, [r7, #12]
 8005c10:	6849      	ldr	r1, [r1, #4]
 8005c12:	0849      	lsrs	r1, r1, #1
 8005c14:	2000      	movs	r0, #0
 8005c16:	4688      	mov	r8, r1
 8005c18:	4681      	mov	r9, r0
 8005c1a:	eb12 0a08 	adds.w	sl, r2, r8
 8005c1e:	eb43 0b09 	adc.w	fp, r3, r9
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	603b      	str	r3, [r7, #0]
 8005c2a:	607a      	str	r2, [r7, #4]
 8005c2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c30:	4650      	mov	r0, sl
 8005c32:	4659      	mov	r1, fp
 8005c34:	f7fb f828 	bl	8000c88 <__aeabi_uldivmod>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	460b      	mov	r3, r1
 8005c3c:	4613      	mov	r3, r2
 8005c3e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c40:	69bb      	ldr	r3, [r7, #24]
 8005c42:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c46:	d308      	bcc.n	8005c5a <UART_SetConfig+0x3de>
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c4e:	d204      	bcs.n	8005c5a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	69ba      	ldr	r2, [r7, #24]
 8005c56:	60da      	str	r2, [r3, #12]
 8005c58:	e0b6      	b.n	8005dc8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005c60:	e0b2      	b.n	8005dc8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	69db      	ldr	r3, [r3, #28]
 8005c66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c6a:	d15e      	bne.n	8005d2a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005c6c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005c70:	2b08      	cmp	r3, #8
 8005c72:	d828      	bhi.n	8005cc6 <UART_SetConfig+0x44a>
 8005c74:	a201      	add	r2, pc, #4	@ (adr r2, 8005c7c <UART_SetConfig+0x400>)
 8005c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c7a:	bf00      	nop
 8005c7c:	08005ca1 	.word	0x08005ca1
 8005c80:	08005ca9 	.word	0x08005ca9
 8005c84:	08005cb1 	.word	0x08005cb1
 8005c88:	08005cc7 	.word	0x08005cc7
 8005c8c:	08005cb7 	.word	0x08005cb7
 8005c90:	08005cc7 	.word	0x08005cc7
 8005c94:	08005cc7 	.word	0x08005cc7
 8005c98:	08005cc7 	.word	0x08005cc7
 8005c9c:	08005cbf 	.word	0x08005cbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ca0:	f7fe f884 	bl	8003dac <HAL_RCC_GetPCLK1Freq>
 8005ca4:	61f8      	str	r0, [r7, #28]
        break;
 8005ca6:	e014      	b.n	8005cd2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ca8:	f7fe f896 	bl	8003dd8 <HAL_RCC_GetPCLK2Freq>
 8005cac:	61f8      	str	r0, [r7, #28]
        break;
 8005cae:	e010      	b.n	8005cd2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cb0:	4b4d      	ldr	r3, [pc, #308]	@ (8005de8 <UART_SetConfig+0x56c>)
 8005cb2:	61fb      	str	r3, [r7, #28]
        break;
 8005cb4:	e00d      	b.n	8005cd2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cb6:	f7fd ffe1 	bl	8003c7c <HAL_RCC_GetSysClockFreq>
 8005cba:	61f8      	str	r0, [r7, #28]
        break;
 8005cbc:	e009      	b.n	8005cd2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005cc2:	61fb      	str	r3, [r7, #28]
        break;
 8005cc4:	e005      	b.n	8005cd2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005cd0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005cd2:	69fb      	ldr	r3, [r7, #28]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d077      	beq.n	8005dc8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005cd8:	69fb      	ldr	r3, [r7, #28]
 8005cda:	005a      	lsls	r2, r3, #1
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	085b      	lsrs	r3, r3, #1
 8005ce2:	441a      	add	r2, r3
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cec:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	2b0f      	cmp	r3, #15
 8005cf2:	d916      	bls.n	8005d22 <UART_SetConfig+0x4a6>
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cfa:	d212      	bcs.n	8005d22 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	f023 030f 	bic.w	r3, r3, #15
 8005d04:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d06:	69bb      	ldr	r3, [r7, #24]
 8005d08:	085b      	lsrs	r3, r3, #1
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	f003 0307 	and.w	r3, r3, #7
 8005d10:	b29a      	uxth	r2, r3
 8005d12:	8afb      	ldrh	r3, [r7, #22]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	8afa      	ldrh	r2, [r7, #22]
 8005d1e:	60da      	str	r2, [r3, #12]
 8005d20:	e052      	b.n	8005dc8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005d28:	e04e      	b.n	8005dc8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d2a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005d2e:	2b08      	cmp	r3, #8
 8005d30:	d827      	bhi.n	8005d82 <UART_SetConfig+0x506>
 8005d32:	a201      	add	r2, pc, #4	@ (adr r2, 8005d38 <UART_SetConfig+0x4bc>)
 8005d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d38:	08005d5d 	.word	0x08005d5d
 8005d3c:	08005d65 	.word	0x08005d65
 8005d40:	08005d6d 	.word	0x08005d6d
 8005d44:	08005d83 	.word	0x08005d83
 8005d48:	08005d73 	.word	0x08005d73
 8005d4c:	08005d83 	.word	0x08005d83
 8005d50:	08005d83 	.word	0x08005d83
 8005d54:	08005d83 	.word	0x08005d83
 8005d58:	08005d7b 	.word	0x08005d7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d5c:	f7fe f826 	bl	8003dac <HAL_RCC_GetPCLK1Freq>
 8005d60:	61f8      	str	r0, [r7, #28]
        break;
 8005d62:	e014      	b.n	8005d8e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d64:	f7fe f838 	bl	8003dd8 <HAL_RCC_GetPCLK2Freq>
 8005d68:	61f8      	str	r0, [r7, #28]
        break;
 8005d6a:	e010      	b.n	8005d8e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d6c:	4b1e      	ldr	r3, [pc, #120]	@ (8005de8 <UART_SetConfig+0x56c>)
 8005d6e:	61fb      	str	r3, [r7, #28]
        break;
 8005d70:	e00d      	b.n	8005d8e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d72:	f7fd ff83 	bl	8003c7c <HAL_RCC_GetSysClockFreq>
 8005d76:	61f8      	str	r0, [r7, #28]
        break;
 8005d78:	e009      	b.n	8005d8e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d7e:	61fb      	str	r3, [r7, #28]
        break;
 8005d80:	e005      	b.n	8005d8e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005d82:	2300      	movs	r3, #0
 8005d84:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005d8c:	bf00      	nop
    }

    if (pclk != 0U)
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d019      	beq.n	8005dc8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	085a      	lsrs	r2, r3, #1
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	441a      	add	r2, r3
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005da6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	2b0f      	cmp	r3, #15
 8005dac:	d909      	bls.n	8005dc2 <UART_SetConfig+0x546>
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005db4:	d205      	bcs.n	8005dc2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	b29a      	uxth	r2, r3
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	60da      	str	r2, [r3, #12]
 8005dc0:	e002      	b.n	8005dc8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005dd4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3728      	adds	r7, #40	@ 0x28
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005de2:	bf00      	nop
 8005de4:	40008000 	.word	0x40008000
 8005de8:	00f42400 	.word	0x00f42400

08005dec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005df8:	f003 0308 	and.w	r3, r3, #8
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d00a      	beq.n	8005e16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	430a      	orrs	r2, r1
 8005e14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e1a:	f003 0301 	and.w	r3, r3, #1
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00a      	beq.n	8005e38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	430a      	orrs	r2, r1
 8005e36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e3c:	f003 0302 	and.w	r3, r3, #2
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00a      	beq.n	8005e5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	430a      	orrs	r2, r1
 8005e58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e5e:	f003 0304 	and.w	r3, r3, #4
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d00a      	beq.n	8005e7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	430a      	orrs	r2, r1
 8005e7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e80:	f003 0310 	and.w	r3, r3, #16
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d00a      	beq.n	8005e9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	430a      	orrs	r2, r1
 8005e9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ea2:	f003 0320 	and.w	r3, r3, #32
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d00a      	beq.n	8005ec0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	430a      	orrs	r2, r1
 8005ebe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ec4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d01a      	beq.n	8005f02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	430a      	orrs	r2, r1
 8005ee0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ee6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005eea:	d10a      	bne.n	8005f02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	430a      	orrs	r2, r1
 8005f00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d00a      	beq.n	8005f24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	430a      	orrs	r2, r1
 8005f22:	605a      	str	r2, [r3, #4]
  }
}
 8005f24:	bf00      	nop
 8005f26:	370c      	adds	r7, #12
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b098      	sub	sp, #96	@ 0x60
 8005f34:	af02      	add	r7, sp, #8
 8005f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f40:	f7fc f8a8 	bl	8002094 <HAL_GetTick>
 8005f44:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 0308 	and.w	r3, r3, #8
 8005f50:	2b08      	cmp	r3, #8
 8005f52:	d12e      	bne.n	8005fb2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f54:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005f58:	9300      	str	r3, [sp, #0]
 8005f5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 f88c 	bl	8006080 <UART_WaitOnFlagUntilTimeout>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d021      	beq.n	8005fb2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f76:	e853 3f00 	ldrex	r3, [r3]
 8005f7a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005f7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f82:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	461a      	mov	r2, r3
 8005f8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f8e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f90:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005f92:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f94:	e841 2300 	strex	r3, r2, [r1]
 8005f98:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005f9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d1e6      	bne.n	8005f6e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2220      	movs	r2, #32
 8005fa4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	e062      	b.n	8006078 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 0304 	and.w	r3, r3, #4
 8005fbc:	2b04      	cmp	r3, #4
 8005fbe:	d149      	bne.n	8006054 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fc0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005fc4:	9300      	str	r3, [sp, #0]
 8005fc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 f856 	bl	8006080 <UART_WaitOnFlagUntilTimeout>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d03c      	beq.n	8006054 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe2:	e853 3f00 	ldrex	r3, [r3]
 8005fe6:	623b      	str	r3, [r7, #32]
   return(result);
 8005fe8:	6a3b      	ldr	r3, [r7, #32]
 8005fea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005fee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ff8:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ffa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ffc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ffe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006000:	e841 2300 	strex	r3, r2, [r1]
 8006004:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006008:	2b00      	cmp	r3, #0
 800600a:	d1e6      	bne.n	8005fda <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	3308      	adds	r3, #8
 8006012:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	e853 3f00 	ldrex	r3, [r3]
 800601a:	60fb      	str	r3, [r7, #12]
   return(result);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f023 0301 	bic.w	r3, r3, #1
 8006022:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	3308      	adds	r3, #8
 800602a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800602c:	61fa      	str	r2, [r7, #28]
 800602e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006030:	69b9      	ldr	r1, [r7, #24]
 8006032:	69fa      	ldr	r2, [r7, #28]
 8006034:	e841 2300 	strex	r3, r2, [r1]
 8006038:	617b      	str	r3, [r7, #20]
   return(result);
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d1e5      	bne.n	800600c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2220      	movs	r2, #32
 8006044:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006050:	2303      	movs	r3, #3
 8006052:	e011      	b.n	8006078 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2220      	movs	r2, #32
 8006058:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2220      	movs	r2, #32
 800605e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006076:	2300      	movs	r3, #0
}
 8006078:	4618      	mov	r0, r3
 800607a:	3758      	adds	r7, #88	@ 0x58
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	603b      	str	r3, [r7, #0]
 800608c:	4613      	mov	r3, r2
 800608e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006090:	e04f      	b.n	8006132 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006098:	d04b      	beq.n	8006132 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800609a:	f7fb fffb 	bl	8002094 <HAL_GetTick>
 800609e:	4602      	mov	r2, r0
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	1ad3      	subs	r3, r2, r3
 80060a4:	69ba      	ldr	r2, [r7, #24]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d302      	bcc.n	80060b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80060aa:	69bb      	ldr	r3, [r7, #24]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d101      	bne.n	80060b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80060b0:	2303      	movs	r3, #3
 80060b2:	e04e      	b.n	8006152 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f003 0304 	and.w	r3, r3, #4
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d037      	beq.n	8006132 <UART_WaitOnFlagUntilTimeout+0xb2>
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	2b80      	cmp	r3, #128	@ 0x80
 80060c6:	d034      	beq.n	8006132 <UART_WaitOnFlagUntilTimeout+0xb2>
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	2b40      	cmp	r3, #64	@ 0x40
 80060cc:	d031      	beq.n	8006132 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	69db      	ldr	r3, [r3, #28]
 80060d4:	f003 0308 	and.w	r3, r3, #8
 80060d8:	2b08      	cmp	r3, #8
 80060da:	d110      	bne.n	80060fe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2208      	movs	r2, #8
 80060e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80060e4:	68f8      	ldr	r0, [r7, #12]
 80060e6:	f000 f838 	bl	800615a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2208      	movs	r2, #8
 80060ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2200      	movs	r2, #0
 80060f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	e029      	b.n	8006152 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	69db      	ldr	r3, [r3, #28]
 8006104:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006108:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800610c:	d111      	bne.n	8006132 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006116:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006118:	68f8      	ldr	r0, [r7, #12]
 800611a:	f000 f81e 	bl	800615a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2220      	movs	r2, #32
 8006122:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2200      	movs	r2, #0
 800612a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800612e:	2303      	movs	r3, #3
 8006130:	e00f      	b.n	8006152 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	69da      	ldr	r2, [r3, #28]
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	4013      	ands	r3, r2
 800613c:	68ba      	ldr	r2, [r7, #8]
 800613e:	429a      	cmp	r2, r3
 8006140:	bf0c      	ite	eq
 8006142:	2301      	moveq	r3, #1
 8006144:	2300      	movne	r3, #0
 8006146:	b2db      	uxtb	r3, r3
 8006148:	461a      	mov	r2, r3
 800614a:	79fb      	ldrb	r3, [r7, #7]
 800614c:	429a      	cmp	r2, r3
 800614e:	d0a0      	beq.n	8006092 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006150:	2300      	movs	r3, #0
}
 8006152:	4618      	mov	r0, r3
 8006154:	3710      	adds	r7, #16
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}

0800615a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800615a:	b480      	push	{r7}
 800615c:	b095      	sub	sp, #84	@ 0x54
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006168:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800616a:	e853 3f00 	ldrex	r3, [r3]
 800616e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006172:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006176:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	461a      	mov	r2, r3
 800617e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006180:	643b      	str	r3, [r7, #64]	@ 0x40
 8006182:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006184:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006186:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006188:	e841 2300 	strex	r3, r2, [r1]
 800618c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800618e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006190:	2b00      	cmp	r3, #0
 8006192:	d1e6      	bne.n	8006162 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	3308      	adds	r3, #8
 800619a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619c:	6a3b      	ldr	r3, [r7, #32]
 800619e:	e853 3f00 	ldrex	r3, [r3]
 80061a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	f023 0301 	bic.w	r3, r3, #1
 80061aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	3308      	adds	r3, #8
 80061b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80061b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80061b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80061ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061bc:	e841 2300 	strex	r3, r2, [r1]
 80061c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80061c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d1e5      	bne.n	8006194 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d118      	bne.n	8006202 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	e853 3f00 	ldrex	r3, [r3]
 80061dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	f023 0310 	bic.w	r3, r3, #16
 80061e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	461a      	mov	r2, r3
 80061ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061ee:	61bb      	str	r3, [r7, #24]
 80061f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f2:	6979      	ldr	r1, [r7, #20]
 80061f4:	69ba      	ldr	r2, [r7, #24]
 80061f6:	e841 2300 	strex	r3, r2, [r1]
 80061fa:	613b      	str	r3, [r7, #16]
   return(result);
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d1e6      	bne.n	80061d0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2220      	movs	r2, #32
 8006206:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006216:	bf00      	nop
 8006218:	3754      	adds	r7, #84	@ 0x54
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr

08006222 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006222:	b580      	push	{r7, lr}
 8006224:	b084      	sub	sp, #16
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800622e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2200      	movs	r2, #0
 8006234:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2200      	movs	r2, #0
 800623c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006240:	68f8      	ldr	r0, [r7, #12]
 8006242:	f7ff fb05 	bl	8005850 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006246:	bf00      	nop
 8006248:	3710      	adds	r7, #16
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}

0800624e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800624e:	b580      	push	{r7, lr}
 8006250:	b088      	sub	sp, #32
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	e853 3f00 	ldrex	r3, [r3]
 8006262:	60bb      	str	r3, [r7, #8]
   return(result);
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800626a:	61fb      	str	r3, [r7, #28]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	461a      	mov	r2, r3
 8006272:	69fb      	ldr	r3, [r7, #28]
 8006274:	61bb      	str	r3, [r7, #24]
 8006276:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006278:	6979      	ldr	r1, [r7, #20]
 800627a:	69ba      	ldr	r2, [r7, #24]
 800627c:	e841 2300 	strex	r3, r2, [r1]
 8006280:	613b      	str	r3, [r7, #16]
   return(result);
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d1e6      	bne.n	8006256 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2220      	movs	r2, #32
 800628c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f7ff fad1 	bl	800583c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800629a:	bf00      	nop
 800629c:	3720      	adds	r7, #32
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}

080062a2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80062a2:	b480      	push	{r7}
 80062a4:	b083      	sub	sp, #12
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80062aa:	bf00      	nop
 80062ac:	370c      	adds	r7, #12
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr

080062b6 <__cvt>:
 80062b6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062ba:	ec57 6b10 	vmov	r6, r7, d0
 80062be:	2f00      	cmp	r7, #0
 80062c0:	460c      	mov	r4, r1
 80062c2:	4619      	mov	r1, r3
 80062c4:	463b      	mov	r3, r7
 80062c6:	bfbb      	ittet	lt
 80062c8:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80062cc:	461f      	movlt	r7, r3
 80062ce:	2300      	movge	r3, #0
 80062d0:	232d      	movlt	r3, #45	@ 0x2d
 80062d2:	700b      	strb	r3, [r1, #0]
 80062d4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80062d6:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80062da:	4691      	mov	r9, r2
 80062dc:	f023 0820 	bic.w	r8, r3, #32
 80062e0:	bfbc      	itt	lt
 80062e2:	4632      	movlt	r2, r6
 80062e4:	4616      	movlt	r6, r2
 80062e6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80062ea:	d005      	beq.n	80062f8 <__cvt+0x42>
 80062ec:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80062f0:	d100      	bne.n	80062f4 <__cvt+0x3e>
 80062f2:	3401      	adds	r4, #1
 80062f4:	2102      	movs	r1, #2
 80062f6:	e000      	b.n	80062fa <__cvt+0x44>
 80062f8:	2103      	movs	r1, #3
 80062fa:	ab03      	add	r3, sp, #12
 80062fc:	9301      	str	r3, [sp, #4]
 80062fe:	ab02      	add	r3, sp, #8
 8006300:	9300      	str	r3, [sp, #0]
 8006302:	ec47 6b10 	vmov	d0, r6, r7
 8006306:	4653      	mov	r3, sl
 8006308:	4622      	mov	r2, r4
 800630a:	f001 f991 	bl	8007630 <_dtoa_r>
 800630e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006312:	4605      	mov	r5, r0
 8006314:	d119      	bne.n	800634a <__cvt+0x94>
 8006316:	f019 0f01 	tst.w	r9, #1
 800631a:	d00e      	beq.n	800633a <__cvt+0x84>
 800631c:	eb00 0904 	add.w	r9, r0, r4
 8006320:	2200      	movs	r2, #0
 8006322:	2300      	movs	r3, #0
 8006324:	4630      	mov	r0, r6
 8006326:	4639      	mov	r1, r7
 8006328:	f7fa fbce 	bl	8000ac8 <__aeabi_dcmpeq>
 800632c:	b108      	cbz	r0, 8006332 <__cvt+0x7c>
 800632e:	f8cd 900c 	str.w	r9, [sp, #12]
 8006332:	2230      	movs	r2, #48	@ 0x30
 8006334:	9b03      	ldr	r3, [sp, #12]
 8006336:	454b      	cmp	r3, r9
 8006338:	d31e      	bcc.n	8006378 <__cvt+0xc2>
 800633a:	9b03      	ldr	r3, [sp, #12]
 800633c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800633e:	1b5b      	subs	r3, r3, r5
 8006340:	4628      	mov	r0, r5
 8006342:	6013      	str	r3, [r2, #0]
 8006344:	b004      	add	sp, #16
 8006346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800634a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800634e:	eb00 0904 	add.w	r9, r0, r4
 8006352:	d1e5      	bne.n	8006320 <__cvt+0x6a>
 8006354:	7803      	ldrb	r3, [r0, #0]
 8006356:	2b30      	cmp	r3, #48	@ 0x30
 8006358:	d10a      	bne.n	8006370 <__cvt+0xba>
 800635a:	2200      	movs	r2, #0
 800635c:	2300      	movs	r3, #0
 800635e:	4630      	mov	r0, r6
 8006360:	4639      	mov	r1, r7
 8006362:	f7fa fbb1 	bl	8000ac8 <__aeabi_dcmpeq>
 8006366:	b918      	cbnz	r0, 8006370 <__cvt+0xba>
 8006368:	f1c4 0401 	rsb	r4, r4, #1
 800636c:	f8ca 4000 	str.w	r4, [sl]
 8006370:	f8da 3000 	ldr.w	r3, [sl]
 8006374:	4499      	add	r9, r3
 8006376:	e7d3      	b.n	8006320 <__cvt+0x6a>
 8006378:	1c59      	adds	r1, r3, #1
 800637a:	9103      	str	r1, [sp, #12]
 800637c:	701a      	strb	r2, [r3, #0]
 800637e:	e7d9      	b.n	8006334 <__cvt+0x7e>

08006380 <__exponent>:
 8006380:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006382:	2900      	cmp	r1, #0
 8006384:	bfba      	itte	lt
 8006386:	4249      	neglt	r1, r1
 8006388:	232d      	movlt	r3, #45	@ 0x2d
 800638a:	232b      	movge	r3, #43	@ 0x2b
 800638c:	2909      	cmp	r1, #9
 800638e:	7002      	strb	r2, [r0, #0]
 8006390:	7043      	strb	r3, [r0, #1]
 8006392:	dd29      	ble.n	80063e8 <__exponent+0x68>
 8006394:	f10d 0307 	add.w	r3, sp, #7
 8006398:	461d      	mov	r5, r3
 800639a:	270a      	movs	r7, #10
 800639c:	461a      	mov	r2, r3
 800639e:	fbb1 f6f7 	udiv	r6, r1, r7
 80063a2:	fb07 1416 	mls	r4, r7, r6, r1
 80063a6:	3430      	adds	r4, #48	@ 0x30
 80063a8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80063ac:	460c      	mov	r4, r1
 80063ae:	2c63      	cmp	r4, #99	@ 0x63
 80063b0:	f103 33ff 	add.w	r3, r3, #4294967295
 80063b4:	4631      	mov	r1, r6
 80063b6:	dcf1      	bgt.n	800639c <__exponent+0x1c>
 80063b8:	3130      	adds	r1, #48	@ 0x30
 80063ba:	1e94      	subs	r4, r2, #2
 80063bc:	f803 1c01 	strb.w	r1, [r3, #-1]
 80063c0:	1c41      	adds	r1, r0, #1
 80063c2:	4623      	mov	r3, r4
 80063c4:	42ab      	cmp	r3, r5
 80063c6:	d30a      	bcc.n	80063de <__exponent+0x5e>
 80063c8:	f10d 0309 	add.w	r3, sp, #9
 80063cc:	1a9b      	subs	r3, r3, r2
 80063ce:	42ac      	cmp	r4, r5
 80063d0:	bf88      	it	hi
 80063d2:	2300      	movhi	r3, #0
 80063d4:	3302      	adds	r3, #2
 80063d6:	4403      	add	r3, r0
 80063d8:	1a18      	subs	r0, r3, r0
 80063da:	b003      	add	sp, #12
 80063dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063de:	f813 6b01 	ldrb.w	r6, [r3], #1
 80063e2:	f801 6f01 	strb.w	r6, [r1, #1]!
 80063e6:	e7ed      	b.n	80063c4 <__exponent+0x44>
 80063e8:	2330      	movs	r3, #48	@ 0x30
 80063ea:	3130      	adds	r1, #48	@ 0x30
 80063ec:	7083      	strb	r3, [r0, #2]
 80063ee:	70c1      	strb	r1, [r0, #3]
 80063f0:	1d03      	adds	r3, r0, #4
 80063f2:	e7f1      	b.n	80063d8 <__exponent+0x58>

080063f4 <_printf_float>:
 80063f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063f8:	b08d      	sub	sp, #52	@ 0x34
 80063fa:	460c      	mov	r4, r1
 80063fc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006400:	4616      	mov	r6, r2
 8006402:	461f      	mov	r7, r3
 8006404:	4605      	mov	r5, r0
 8006406:	f000 fffd 	bl	8007404 <_localeconv_r>
 800640a:	6803      	ldr	r3, [r0, #0]
 800640c:	9304      	str	r3, [sp, #16]
 800640e:	4618      	mov	r0, r3
 8006410:	f7f9 ff2e 	bl	8000270 <strlen>
 8006414:	2300      	movs	r3, #0
 8006416:	930a      	str	r3, [sp, #40]	@ 0x28
 8006418:	f8d8 3000 	ldr.w	r3, [r8]
 800641c:	9005      	str	r0, [sp, #20]
 800641e:	3307      	adds	r3, #7
 8006420:	f023 0307 	bic.w	r3, r3, #7
 8006424:	f103 0208 	add.w	r2, r3, #8
 8006428:	f894 a018 	ldrb.w	sl, [r4, #24]
 800642c:	f8d4 b000 	ldr.w	fp, [r4]
 8006430:	f8c8 2000 	str.w	r2, [r8]
 8006434:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006438:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800643c:	9307      	str	r3, [sp, #28]
 800643e:	f8cd 8018 	str.w	r8, [sp, #24]
 8006442:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006446:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800644a:	4b9c      	ldr	r3, [pc, #624]	@ (80066bc <_printf_float+0x2c8>)
 800644c:	f04f 32ff 	mov.w	r2, #4294967295
 8006450:	f7fa fb6c 	bl	8000b2c <__aeabi_dcmpun>
 8006454:	bb70      	cbnz	r0, 80064b4 <_printf_float+0xc0>
 8006456:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800645a:	4b98      	ldr	r3, [pc, #608]	@ (80066bc <_printf_float+0x2c8>)
 800645c:	f04f 32ff 	mov.w	r2, #4294967295
 8006460:	f7fa fb46 	bl	8000af0 <__aeabi_dcmple>
 8006464:	bb30      	cbnz	r0, 80064b4 <_printf_float+0xc0>
 8006466:	2200      	movs	r2, #0
 8006468:	2300      	movs	r3, #0
 800646a:	4640      	mov	r0, r8
 800646c:	4649      	mov	r1, r9
 800646e:	f7fa fb35 	bl	8000adc <__aeabi_dcmplt>
 8006472:	b110      	cbz	r0, 800647a <_printf_float+0x86>
 8006474:	232d      	movs	r3, #45	@ 0x2d
 8006476:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800647a:	4a91      	ldr	r2, [pc, #580]	@ (80066c0 <_printf_float+0x2cc>)
 800647c:	4b91      	ldr	r3, [pc, #580]	@ (80066c4 <_printf_float+0x2d0>)
 800647e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006482:	bf94      	ite	ls
 8006484:	4690      	movls	r8, r2
 8006486:	4698      	movhi	r8, r3
 8006488:	2303      	movs	r3, #3
 800648a:	6123      	str	r3, [r4, #16]
 800648c:	f02b 0304 	bic.w	r3, fp, #4
 8006490:	6023      	str	r3, [r4, #0]
 8006492:	f04f 0900 	mov.w	r9, #0
 8006496:	9700      	str	r7, [sp, #0]
 8006498:	4633      	mov	r3, r6
 800649a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800649c:	4621      	mov	r1, r4
 800649e:	4628      	mov	r0, r5
 80064a0:	f000 f9d2 	bl	8006848 <_printf_common>
 80064a4:	3001      	adds	r0, #1
 80064a6:	f040 808d 	bne.w	80065c4 <_printf_float+0x1d0>
 80064aa:	f04f 30ff 	mov.w	r0, #4294967295
 80064ae:	b00d      	add	sp, #52	@ 0x34
 80064b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064b4:	4642      	mov	r2, r8
 80064b6:	464b      	mov	r3, r9
 80064b8:	4640      	mov	r0, r8
 80064ba:	4649      	mov	r1, r9
 80064bc:	f7fa fb36 	bl	8000b2c <__aeabi_dcmpun>
 80064c0:	b140      	cbz	r0, 80064d4 <_printf_float+0xe0>
 80064c2:	464b      	mov	r3, r9
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	bfbc      	itt	lt
 80064c8:	232d      	movlt	r3, #45	@ 0x2d
 80064ca:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80064ce:	4a7e      	ldr	r2, [pc, #504]	@ (80066c8 <_printf_float+0x2d4>)
 80064d0:	4b7e      	ldr	r3, [pc, #504]	@ (80066cc <_printf_float+0x2d8>)
 80064d2:	e7d4      	b.n	800647e <_printf_float+0x8a>
 80064d4:	6863      	ldr	r3, [r4, #4]
 80064d6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80064da:	9206      	str	r2, [sp, #24]
 80064dc:	1c5a      	adds	r2, r3, #1
 80064de:	d13b      	bne.n	8006558 <_printf_float+0x164>
 80064e0:	2306      	movs	r3, #6
 80064e2:	6063      	str	r3, [r4, #4]
 80064e4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80064e8:	2300      	movs	r3, #0
 80064ea:	6022      	str	r2, [r4, #0]
 80064ec:	9303      	str	r3, [sp, #12]
 80064ee:	ab0a      	add	r3, sp, #40	@ 0x28
 80064f0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80064f4:	ab09      	add	r3, sp, #36	@ 0x24
 80064f6:	9300      	str	r3, [sp, #0]
 80064f8:	6861      	ldr	r1, [r4, #4]
 80064fa:	ec49 8b10 	vmov	d0, r8, r9
 80064fe:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006502:	4628      	mov	r0, r5
 8006504:	f7ff fed7 	bl	80062b6 <__cvt>
 8006508:	9b06      	ldr	r3, [sp, #24]
 800650a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800650c:	2b47      	cmp	r3, #71	@ 0x47
 800650e:	4680      	mov	r8, r0
 8006510:	d129      	bne.n	8006566 <_printf_float+0x172>
 8006512:	1cc8      	adds	r0, r1, #3
 8006514:	db02      	blt.n	800651c <_printf_float+0x128>
 8006516:	6863      	ldr	r3, [r4, #4]
 8006518:	4299      	cmp	r1, r3
 800651a:	dd41      	ble.n	80065a0 <_printf_float+0x1ac>
 800651c:	f1aa 0a02 	sub.w	sl, sl, #2
 8006520:	fa5f fa8a 	uxtb.w	sl, sl
 8006524:	3901      	subs	r1, #1
 8006526:	4652      	mov	r2, sl
 8006528:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800652c:	9109      	str	r1, [sp, #36]	@ 0x24
 800652e:	f7ff ff27 	bl	8006380 <__exponent>
 8006532:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006534:	1813      	adds	r3, r2, r0
 8006536:	2a01      	cmp	r2, #1
 8006538:	4681      	mov	r9, r0
 800653a:	6123      	str	r3, [r4, #16]
 800653c:	dc02      	bgt.n	8006544 <_printf_float+0x150>
 800653e:	6822      	ldr	r2, [r4, #0]
 8006540:	07d2      	lsls	r2, r2, #31
 8006542:	d501      	bpl.n	8006548 <_printf_float+0x154>
 8006544:	3301      	adds	r3, #1
 8006546:	6123      	str	r3, [r4, #16]
 8006548:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800654c:	2b00      	cmp	r3, #0
 800654e:	d0a2      	beq.n	8006496 <_printf_float+0xa2>
 8006550:	232d      	movs	r3, #45	@ 0x2d
 8006552:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006556:	e79e      	b.n	8006496 <_printf_float+0xa2>
 8006558:	9a06      	ldr	r2, [sp, #24]
 800655a:	2a47      	cmp	r2, #71	@ 0x47
 800655c:	d1c2      	bne.n	80064e4 <_printf_float+0xf0>
 800655e:	2b00      	cmp	r3, #0
 8006560:	d1c0      	bne.n	80064e4 <_printf_float+0xf0>
 8006562:	2301      	movs	r3, #1
 8006564:	e7bd      	b.n	80064e2 <_printf_float+0xee>
 8006566:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800656a:	d9db      	bls.n	8006524 <_printf_float+0x130>
 800656c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006570:	d118      	bne.n	80065a4 <_printf_float+0x1b0>
 8006572:	2900      	cmp	r1, #0
 8006574:	6863      	ldr	r3, [r4, #4]
 8006576:	dd0b      	ble.n	8006590 <_printf_float+0x19c>
 8006578:	6121      	str	r1, [r4, #16]
 800657a:	b913      	cbnz	r3, 8006582 <_printf_float+0x18e>
 800657c:	6822      	ldr	r2, [r4, #0]
 800657e:	07d0      	lsls	r0, r2, #31
 8006580:	d502      	bpl.n	8006588 <_printf_float+0x194>
 8006582:	3301      	adds	r3, #1
 8006584:	440b      	add	r3, r1
 8006586:	6123      	str	r3, [r4, #16]
 8006588:	65a1      	str	r1, [r4, #88]	@ 0x58
 800658a:	f04f 0900 	mov.w	r9, #0
 800658e:	e7db      	b.n	8006548 <_printf_float+0x154>
 8006590:	b913      	cbnz	r3, 8006598 <_printf_float+0x1a4>
 8006592:	6822      	ldr	r2, [r4, #0]
 8006594:	07d2      	lsls	r2, r2, #31
 8006596:	d501      	bpl.n	800659c <_printf_float+0x1a8>
 8006598:	3302      	adds	r3, #2
 800659a:	e7f4      	b.n	8006586 <_printf_float+0x192>
 800659c:	2301      	movs	r3, #1
 800659e:	e7f2      	b.n	8006586 <_printf_float+0x192>
 80065a0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80065a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80065a6:	4299      	cmp	r1, r3
 80065a8:	db05      	blt.n	80065b6 <_printf_float+0x1c2>
 80065aa:	6823      	ldr	r3, [r4, #0]
 80065ac:	6121      	str	r1, [r4, #16]
 80065ae:	07d8      	lsls	r0, r3, #31
 80065b0:	d5ea      	bpl.n	8006588 <_printf_float+0x194>
 80065b2:	1c4b      	adds	r3, r1, #1
 80065b4:	e7e7      	b.n	8006586 <_printf_float+0x192>
 80065b6:	2900      	cmp	r1, #0
 80065b8:	bfd4      	ite	le
 80065ba:	f1c1 0202 	rsble	r2, r1, #2
 80065be:	2201      	movgt	r2, #1
 80065c0:	4413      	add	r3, r2
 80065c2:	e7e0      	b.n	8006586 <_printf_float+0x192>
 80065c4:	6823      	ldr	r3, [r4, #0]
 80065c6:	055a      	lsls	r2, r3, #21
 80065c8:	d407      	bmi.n	80065da <_printf_float+0x1e6>
 80065ca:	6923      	ldr	r3, [r4, #16]
 80065cc:	4642      	mov	r2, r8
 80065ce:	4631      	mov	r1, r6
 80065d0:	4628      	mov	r0, r5
 80065d2:	47b8      	blx	r7
 80065d4:	3001      	adds	r0, #1
 80065d6:	d12b      	bne.n	8006630 <_printf_float+0x23c>
 80065d8:	e767      	b.n	80064aa <_printf_float+0xb6>
 80065da:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80065de:	f240 80dd 	bls.w	800679c <_printf_float+0x3a8>
 80065e2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80065e6:	2200      	movs	r2, #0
 80065e8:	2300      	movs	r3, #0
 80065ea:	f7fa fa6d 	bl	8000ac8 <__aeabi_dcmpeq>
 80065ee:	2800      	cmp	r0, #0
 80065f0:	d033      	beq.n	800665a <_printf_float+0x266>
 80065f2:	4a37      	ldr	r2, [pc, #220]	@ (80066d0 <_printf_float+0x2dc>)
 80065f4:	2301      	movs	r3, #1
 80065f6:	4631      	mov	r1, r6
 80065f8:	4628      	mov	r0, r5
 80065fa:	47b8      	blx	r7
 80065fc:	3001      	adds	r0, #1
 80065fe:	f43f af54 	beq.w	80064aa <_printf_float+0xb6>
 8006602:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006606:	4543      	cmp	r3, r8
 8006608:	db02      	blt.n	8006610 <_printf_float+0x21c>
 800660a:	6823      	ldr	r3, [r4, #0]
 800660c:	07d8      	lsls	r0, r3, #31
 800660e:	d50f      	bpl.n	8006630 <_printf_float+0x23c>
 8006610:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006614:	4631      	mov	r1, r6
 8006616:	4628      	mov	r0, r5
 8006618:	47b8      	blx	r7
 800661a:	3001      	adds	r0, #1
 800661c:	f43f af45 	beq.w	80064aa <_printf_float+0xb6>
 8006620:	f04f 0900 	mov.w	r9, #0
 8006624:	f108 38ff 	add.w	r8, r8, #4294967295
 8006628:	f104 0a1a 	add.w	sl, r4, #26
 800662c:	45c8      	cmp	r8, r9
 800662e:	dc09      	bgt.n	8006644 <_printf_float+0x250>
 8006630:	6823      	ldr	r3, [r4, #0]
 8006632:	079b      	lsls	r3, r3, #30
 8006634:	f100 8103 	bmi.w	800683e <_printf_float+0x44a>
 8006638:	68e0      	ldr	r0, [r4, #12]
 800663a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800663c:	4298      	cmp	r0, r3
 800663e:	bfb8      	it	lt
 8006640:	4618      	movlt	r0, r3
 8006642:	e734      	b.n	80064ae <_printf_float+0xba>
 8006644:	2301      	movs	r3, #1
 8006646:	4652      	mov	r2, sl
 8006648:	4631      	mov	r1, r6
 800664a:	4628      	mov	r0, r5
 800664c:	47b8      	blx	r7
 800664e:	3001      	adds	r0, #1
 8006650:	f43f af2b 	beq.w	80064aa <_printf_float+0xb6>
 8006654:	f109 0901 	add.w	r9, r9, #1
 8006658:	e7e8      	b.n	800662c <_printf_float+0x238>
 800665a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800665c:	2b00      	cmp	r3, #0
 800665e:	dc39      	bgt.n	80066d4 <_printf_float+0x2e0>
 8006660:	4a1b      	ldr	r2, [pc, #108]	@ (80066d0 <_printf_float+0x2dc>)
 8006662:	2301      	movs	r3, #1
 8006664:	4631      	mov	r1, r6
 8006666:	4628      	mov	r0, r5
 8006668:	47b8      	blx	r7
 800666a:	3001      	adds	r0, #1
 800666c:	f43f af1d 	beq.w	80064aa <_printf_float+0xb6>
 8006670:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006674:	ea59 0303 	orrs.w	r3, r9, r3
 8006678:	d102      	bne.n	8006680 <_printf_float+0x28c>
 800667a:	6823      	ldr	r3, [r4, #0]
 800667c:	07d9      	lsls	r1, r3, #31
 800667e:	d5d7      	bpl.n	8006630 <_printf_float+0x23c>
 8006680:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006684:	4631      	mov	r1, r6
 8006686:	4628      	mov	r0, r5
 8006688:	47b8      	blx	r7
 800668a:	3001      	adds	r0, #1
 800668c:	f43f af0d 	beq.w	80064aa <_printf_float+0xb6>
 8006690:	f04f 0a00 	mov.w	sl, #0
 8006694:	f104 0b1a 	add.w	fp, r4, #26
 8006698:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800669a:	425b      	negs	r3, r3
 800669c:	4553      	cmp	r3, sl
 800669e:	dc01      	bgt.n	80066a4 <_printf_float+0x2b0>
 80066a0:	464b      	mov	r3, r9
 80066a2:	e793      	b.n	80065cc <_printf_float+0x1d8>
 80066a4:	2301      	movs	r3, #1
 80066a6:	465a      	mov	r2, fp
 80066a8:	4631      	mov	r1, r6
 80066aa:	4628      	mov	r0, r5
 80066ac:	47b8      	blx	r7
 80066ae:	3001      	adds	r0, #1
 80066b0:	f43f aefb 	beq.w	80064aa <_printf_float+0xb6>
 80066b4:	f10a 0a01 	add.w	sl, sl, #1
 80066b8:	e7ee      	b.n	8006698 <_printf_float+0x2a4>
 80066ba:	bf00      	nop
 80066bc:	7fefffff 	.word	0x7fefffff
 80066c0:	08019e8c 	.word	0x08019e8c
 80066c4:	08019e90 	.word	0x08019e90
 80066c8:	08019e94 	.word	0x08019e94
 80066cc:	08019e98 	.word	0x08019e98
 80066d0:	08019e9c 	.word	0x08019e9c
 80066d4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80066d6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80066da:	4553      	cmp	r3, sl
 80066dc:	bfa8      	it	ge
 80066de:	4653      	movge	r3, sl
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	4699      	mov	r9, r3
 80066e4:	dc36      	bgt.n	8006754 <_printf_float+0x360>
 80066e6:	f04f 0b00 	mov.w	fp, #0
 80066ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80066ee:	f104 021a 	add.w	r2, r4, #26
 80066f2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80066f4:	9306      	str	r3, [sp, #24]
 80066f6:	eba3 0309 	sub.w	r3, r3, r9
 80066fa:	455b      	cmp	r3, fp
 80066fc:	dc31      	bgt.n	8006762 <_printf_float+0x36e>
 80066fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006700:	459a      	cmp	sl, r3
 8006702:	dc3a      	bgt.n	800677a <_printf_float+0x386>
 8006704:	6823      	ldr	r3, [r4, #0]
 8006706:	07da      	lsls	r2, r3, #31
 8006708:	d437      	bmi.n	800677a <_printf_float+0x386>
 800670a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800670c:	ebaa 0903 	sub.w	r9, sl, r3
 8006710:	9b06      	ldr	r3, [sp, #24]
 8006712:	ebaa 0303 	sub.w	r3, sl, r3
 8006716:	4599      	cmp	r9, r3
 8006718:	bfa8      	it	ge
 800671a:	4699      	movge	r9, r3
 800671c:	f1b9 0f00 	cmp.w	r9, #0
 8006720:	dc33      	bgt.n	800678a <_printf_float+0x396>
 8006722:	f04f 0800 	mov.w	r8, #0
 8006726:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800672a:	f104 0b1a 	add.w	fp, r4, #26
 800672e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006730:	ebaa 0303 	sub.w	r3, sl, r3
 8006734:	eba3 0309 	sub.w	r3, r3, r9
 8006738:	4543      	cmp	r3, r8
 800673a:	f77f af79 	ble.w	8006630 <_printf_float+0x23c>
 800673e:	2301      	movs	r3, #1
 8006740:	465a      	mov	r2, fp
 8006742:	4631      	mov	r1, r6
 8006744:	4628      	mov	r0, r5
 8006746:	47b8      	blx	r7
 8006748:	3001      	adds	r0, #1
 800674a:	f43f aeae 	beq.w	80064aa <_printf_float+0xb6>
 800674e:	f108 0801 	add.w	r8, r8, #1
 8006752:	e7ec      	b.n	800672e <_printf_float+0x33a>
 8006754:	4642      	mov	r2, r8
 8006756:	4631      	mov	r1, r6
 8006758:	4628      	mov	r0, r5
 800675a:	47b8      	blx	r7
 800675c:	3001      	adds	r0, #1
 800675e:	d1c2      	bne.n	80066e6 <_printf_float+0x2f2>
 8006760:	e6a3      	b.n	80064aa <_printf_float+0xb6>
 8006762:	2301      	movs	r3, #1
 8006764:	4631      	mov	r1, r6
 8006766:	4628      	mov	r0, r5
 8006768:	9206      	str	r2, [sp, #24]
 800676a:	47b8      	blx	r7
 800676c:	3001      	adds	r0, #1
 800676e:	f43f ae9c 	beq.w	80064aa <_printf_float+0xb6>
 8006772:	9a06      	ldr	r2, [sp, #24]
 8006774:	f10b 0b01 	add.w	fp, fp, #1
 8006778:	e7bb      	b.n	80066f2 <_printf_float+0x2fe>
 800677a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800677e:	4631      	mov	r1, r6
 8006780:	4628      	mov	r0, r5
 8006782:	47b8      	blx	r7
 8006784:	3001      	adds	r0, #1
 8006786:	d1c0      	bne.n	800670a <_printf_float+0x316>
 8006788:	e68f      	b.n	80064aa <_printf_float+0xb6>
 800678a:	9a06      	ldr	r2, [sp, #24]
 800678c:	464b      	mov	r3, r9
 800678e:	4442      	add	r2, r8
 8006790:	4631      	mov	r1, r6
 8006792:	4628      	mov	r0, r5
 8006794:	47b8      	blx	r7
 8006796:	3001      	adds	r0, #1
 8006798:	d1c3      	bne.n	8006722 <_printf_float+0x32e>
 800679a:	e686      	b.n	80064aa <_printf_float+0xb6>
 800679c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80067a0:	f1ba 0f01 	cmp.w	sl, #1
 80067a4:	dc01      	bgt.n	80067aa <_printf_float+0x3b6>
 80067a6:	07db      	lsls	r3, r3, #31
 80067a8:	d536      	bpl.n	8006818 <_printf_float+0x424>
 80067aa:	2301      	movs	r3, #1
 80067ac:	4642      	mov	r2, r8
 80067ae:	4631      	mov	r1, r6
 80067b0:	4628      	mov	r0, r5
 80067b2:	47b8      	blx	r7
 80067b4:	3001      	adds	r0, #1
 80067b6:	f43f ae78 	beq.w	80064aa <_printf_float+0xb6>
 80067ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067be:	4631      	mov	r1, r6
 80067c0:	4628      	mov	r0, r5
 80067c2:	47b8      	blx	r7
 80067c4:	3001      	adds	r0, #1
 80067c6:	f43f ae70 	beq.w	80064aa <_printf_float+0xb6>
 80067ca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80067ce:	2200      	movs	r2, #0
 80067d0:	2300      	movs	r3, #0
 80067d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80067d6:	f7fa f977 	bl	8000ac8 <__aeabi_dcmpeq>
 80067da:	b9c0      	cbnz	r0, 800680e <_printf_float+0x41a>
 80067dc:	4653      	mov	r3, sl
 80067de:	f108 0201 	add.w	r2, r8, #1
 80067e2:	4631      	mov	r1, r6
 80067e4:	4628      	mov	r0, r5
 80067e6:	47b8      	blx	r7
 80067e8:	3001      	adds	r0, #1
 80067ea:	d10c      	bne.n	8006806 <_printf_float+0x412>
 80067ec:	e65d      	b.n	80064aa <_printf_float+0xb6>
 80067ee:	2301      	movs	r3, #1
 80067f0:	465a      	mov	r2, fp
 80067f2:	4631      	mov	r1, r6
 80067f4:	4628      	mov	r0, r5
 80067f6:	47b8      	blx	r7
 80067f8:	3001      	adds	r0, #1
 80067fa:	f43f ae56 	beq.w	80064aa <_printf_float+0xb6>
 80067fe:	f108 0801 	add.w	r8, r8, #1
 8006802:	45d0      	cmp	r8, sl
 8006804:	dbf3      	blt.n	80067ee <_printf_float+0x3fa>
 8006806:	464b      	mov	r3, r9
 8006808:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800680c:	e6df      	b.n	80065ce <_printf_float+0x1da>
 800680e:	f04f 0800 	mov.w	r8, #0
 8006812:	f104 0b1a 	add.w	fp, r4, #26
 8006816:	e7f4      	b.n	8006802 <_printf_float+0x40e>
 8006818:	2301      	movs	r3, #1
 800681a:	4642      	mov	r2, r8
 800681c:	e7e1      	b.n	80067e2 <_printf_float+0x3ee>
 800681e:	2301      	movs	r3, #1
 8006820:	464a      	mov	r2, r9
 8006822:	4631      	mov	r1, r6
 8006824:	4628      	mov	r0, r5
 8006826:	47b8      	blx	r7
 8006828:	3001      	adds	r0, #1
 800682a:	f43f ae3e 	beq.w	80064aa <_printf_float+0xb6>
 800682e:	f108 0801 	add.w	r8, r8, #1
 8006832:	68e3      	ldr	r3, [r4, #12]
 8006834:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006836:	1a5b      	subs	r3, r3, r1
 8006838:	4543      	cmp	r3, r8
 800683a:	dcf0      	bgt.n	800681e <_printf_float+0x42a>
 800683c:	e6fc      	b.n	8006638 <_printf_float+0x244>
 800683e:	f04f 0800 	mov.w	r8, #0
 8006842:	f104 0919 	add.w	r9, r4, #25
 8006846:	e7f4      	b.n	8006832 <_printf_float+0x43e>

08006848 <_printf_common>:
 8006848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800684c:	4616      	mov	r6, r2
 800684e:	4698      	mov	r8, r3
 8006850:	688a      	ldr	r2, [r1, #8]
 8006852:	690b      	ldr	r3, [r1, #16]
 8006854:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006858:	4293      	cmp	r3, r2
 800685a:	bfb8      	it	lt
 800685c:	4613      	movlt	r3, r2
 800685e:	6033      	str	r3, [r6, #0]
 8006860:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006864:	4607      	mov	r7, r0
 8006866:	460c      	mov	r4, r1
 8006868:	b10a      	cbz	r2, 800686e <_printf_common+0x26>
 800686a:	3301      	adds	r3, #1
 800686c:	6033      	str	r3, [r6, #0]
 800686e:	6823      	ldr	r3, [r4, #0]
 8006870:	0699      	lsls	r1, r3, #26
 8006872:	bf42      	ittt	mi
 8006874:	6833      	ldrmi	r3, [r6, #0]
 8006876:	3302      	addmi	r3, #2
 8006878:	6033      	strmi	r3, [r6, #0]
 800687a:	6825      	ldr	r5, [r4, #0]
 800687c:	f015 0506 	ands.w	r5, r5, #6
 8006880:	d106      	bne.n	8006890 <_printf_common+0x48>
 8006882:	f104 0a19 	add.w	sl, r4, #25
 8006886:	68e3      	ldr	r3, [r4, #12]
 8006888:	6832      	ldr	r2, [r6, #0]
 800688a:	1a9b      	subs	r3, r3, r2
 800688c:	42ab      	cmp	r3, r5
 800688e:	dc26      	bgt.n	80068de <_printf_common+0x96>
 8006890:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006894:	6822      	ldr	r2, [r4, #0]
 8006896:	3b00      	subs	r3, #0
 8006898:	bf18      	it	ne
 800689a:	2301      	movne	r3, #1
 800689c:	0692      	lsls	r2, r2, #26
 800689e:	d42b      	bmi.n	80068f8 <_printf_common+0xb0>
 80068a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80068a4:	4641      	mov	r1, r8
 80068a6:	4638      	mov	r0, r7
 80068a8:	47c8      	blx	r9
 80068aa:	3001      	adds	r0, #1
 80068ac:	d01e      	beq.n	80068ec <_printf_common+0xa4>
 80068ae:	6823      	ldr	r3, [r4, #0]
 80068b0:	6922      	ldr	r2, [r4, #16]
 80068b2:	f003 0306 	and.w	r3, r3, #6
 80068b6:	2b04      	cmp	r3, #4
 80068b8:	bf02      	ittt	eq
 80068ba:	68e5      	ldreq	r5, [r4, #12]
 80068bc:	6833      	ldreq	r3, [r6, #0]
 80068be:	1aed      	subeq	r5, r5, r3
 80068c0:	68a3      	ldr	r3, [r4, #8]
 80068c2:	bf0c      	ite	eq
 80068c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068c8:	2500      	movne	r5, #0
 80068ca:	4293      	cmp	r3, r2
 80068cc:	bfc4      	itt	gt
 80068ce:	1a9b      	subgt	r3, r3, r2
 80068d0:	18ed      	addgt	r5, r5, r3
 80068d2:	2600      	movs	r6, #0
 80068d4:	341a      	adds	r4, #26
 80068d6:	42b5      	cmp	r5, r6
 80068d8:	d11a      	bne.n	8006910 <_printf_common+0xc8>
 80068da:	2000      	movs	r0, #0
 80068dc:	e008      	b.n	80068f0 <_printf_common+0xa8>
 80068de:	2301      	movs	r3, #1
 80068e0:	4652      	mov	r2, sl
 80068e2:	4641      	mov	r1, r8
 80068e4:	4638      	mov	r0, r7
 80068e6:	47c8      	blx	r9
 80068e8:	3001      	adds	r0, #1
 80068ea:	d103      	bne.n	80068f4 <_printf_common+0xac>
 80068ec:	f04f 30ff 	mov.w	r0, #4294967295
 80068f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068f4:	3501      	adds	r5, #1
 80068f6:	e7c6      	b.n	8006886 <_printf_common+0x3e>
 80068f8:	18e1      	adds	r1, r4, r3
 80068fa:	1c5a      	adds	r2, r3, #1
 80068fc:	2030      	movs	r0, #48	@ 0x30
 80068fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006902:	4422      	add	r2, r4
 8006904:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006908:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800690c:	3302      	adds	r3, #2
 800690e:	e7c7      	b.n	80068a0 <_printf_common+0x58>
 8006910:	2301      	movs	r3, #1
 8006912:	4622      	mov	r2, r4
 8006914:	4641      	mov	r1, r8
 8006916:	4638      	mov	r0, r7
 8006918:	47c8      	blx	r9
 800691a:	3001      	adds	r0, #1
 800691c:	d0e6      	beq.n	80068ec <_printf_common+0xa4>
 800691e:	3601      	adds	r6, #1
 8006920:	e7d9      	b.n	80068d6 <_printf_common+0x8e>
	...

08006924 <_printf_i>:
 8006924:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006928:	7e0f      	ldrb	r7, [r1, #24]
 800692a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800692c:	2f78      	cmp	r7, #120	@ 0x78
 800692e:	4691      	mov	r9, r2
 8006930:	4680      	mov	r8, r0
 8006932:	460c      	mov	r4, r1
 8006934:	469a      	mov	sl, r3
 8006936:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800693a:	d807      	bhi.n	800694c <_printf_i+0x28>
 800693c:	2f62      	cmp	r7, #98	@ 0x62
 800693e:	d80a      	bhi.n	8006956 <_printf_i+0x32>
 8006940:	2f00      	cmp	r7, #0
 8006942:	f000 80d2 	beq.w	8006aea <_printf_i+0x1c6>
 8006946:	2f58      	cmp	r7, #88	@ 0x58
 8006948:	f000 80b9 	beq.w	8006abe <_printf_i+0x19a>
 800694c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006950:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006954:	e03a      	b.n	80069cc <_printf_i+0xa8>
 8006956:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800695a:	2b15      	cmp	r3, #21
 800695c:	d8f6      	bhi.n	800694c <_printf_i+0x28>
 800695e:	a101      	add	r1, pc, #4	@ (adr r1, 8006964 <_printf_i+0x40>)
 8006960:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006964:	080069bd 	.word	0x080069bd
 8006968:	080069d1 	.word	0x080069d1
 800696c:	0800694d 	.word	0x0800694d
 8006970:	0800694d 	.word	0x0800694d
 8006974:	0800694d 	.word	0x0800694d
 8006978:	0800694d 	.word	0x0800694d
 800697c:	080069d1 	.word	0x080069d1
 8006980:	0800694d 	.word	0x0800694d
 8006984:	0800694d 	.word	0x0800694d
 8006988:	0800694d 	.word	0x0800694d
 800698c:	0800694d 	.word	0x0800694d
 8006990:	08006ad1 	.word	0x08006ad1
 8006994:	080069fb 	.word	0x080069fb
 8006998:	08006a8b 	.word	0x08006a8b
 800699c:	0800694d 	.word	0x0800694d
 80069a0:	0800694d 	.word	0x0800694d
 80069a4:	08006af3 	.word	0x08006af3
 80069a8:	0800694d 	.word	0x0800694d
 80069ac:	080069fb 	.word	0x080069fb
 80069b0:	0800694d 	.word	0x0800694d
 80069b4:	0800694d 	.word	0x0800694d
 80069b8:	08006a93 	.word	0x08006a93
 80069bc:	6833      	ldr	r3, [r6, #0]
 80069be:	1d1a      	adds	r2, r3, #4
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	6032      	str	r2, [r6, #0]
 80069c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80069c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80069cc:	2301      	movs	r3, #1
 80069ce:	e09d      	b.n	8006b0c <_printf_i+0x1e8>
 80069d0:	6833      	ldr	r3, [r6, #0]
 80069d2:	6820      	ldr	r0, [r4, #0]
 80069d4:	1d19      	adds	r1, r3, #4
 80069d6:	6031      	str	r1, [r6, #0]
 80069d8:	0606      	lsls	r6, r0, #24
 80069da:	d501      	bpl.n	80069e0 <_printf_i+0xbc>
 80069dc:	681d      	ldr	r5, [r3, #0]
 80069de:	e003      	b.n	80069e8 <_printf_i+0xc4>
 80069e0:	0645      	lsls	r5, r0, #25
 80069e2:	d5fb      	bpl.n	80069dc <_printf_i+0xb8>
 80069e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80069e8:	2d00      	cmp	r5, #0
 80069ea:	da03      	bge.n	80069f4 <_printf_i+0xd0>
 80069ec:	232d      	movs	r3, #45	@ 0x2d
 80069ee:	426d      	negs	r5, r5
 80069f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80069f4:	4859      	ldr	r0, [pc, #356]	@ (8006b5c <_printf_i+0x238>)
 80069f6:	230a      	movs	r3, #10
 80069f8:	e011      	b.n	8006a1e <_printf_i+0xfa>
 80069fa:	6821      	ldr	r1, [r4, #0]
 80069fc:	6833      	ldr	r3, [r6, #0]
 80069fe:	0608      	lsls	r0, r1, #24
 8006a00:	f853 5b04 	ldr.w	r5, [r3], #4
 8006a04:	d402      	bmi.n	8006a0c <_printf_i+0xe8>
 8006a06:	0649      	lsls	r1, r1, #25
 8006a08:	bf48      	it	mi
 8006a0a:	b2ad      	uxthmi	r5, r5
 8006a0c:	2f6f      	cmp	r7, #111	@ 0x6f
 8006a0e:	4853      	ldr	r0, [pc, #332]	@ (8006b5c <_printf_i+0x238>)
 8006a10:	6033      	str	r3, [r6, #0]
 8006a12:	bf14      	ite	ne
 8006a14:	230a      	movne	r3, #10
 8006a16:	2308      	moveq	r3, #8
 8006a18:	2100      	movs	r1, #0
 8006a1a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006a1e:	6866      	ldr	r6, [r4, #4]
 8006a20:	60a6      	str	r6, [r4, #8]
 8006a22:	2e00      	cmp	r6, #0
 8006a24:	bfa2      	ittt	ge
 8006a26:	6821      	ldrge	r1, [r4, #0]
 8006a28:	f021 0104 	bicge.w	r1, r1, #4
 8006a2c:	6021      	strge	r1, [r4, #0]
 8006a2e:	b90d      	cbnz	r5, 8006a34 <_printf_i+0x110>
 8006a30:	2e00      	cmp	r6, #0
 8006a32:	d04b      	beq.n	8006acc <_printf_i+0x1a8>
 8006a34:	4616      	mov	r6, r2
 8006a36:	fbb5 f1f3 	udiv	r1, r5, r3
 8006a3a:	fb03 5711 	mls	r7, r3, r1, r5
 8006a3e:	5dc7      	ldrb	r7, [r0, r7]
 8006a40:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006a44:	462f      	mov	r7, r5
 8006a46:	42bb      	cmp	r3, r7
 8006a48:	460d      	mov	r5, r1
 8006a4a:	d9f4      	bls.n	8006a36 <_printf_i+0x112>
 8006a4c:	2b08      	cmp	r3, #8
 8006a4e:	d10b      	bne.n	8006a68 <_printf_i+0x144>
 8006a50:	6823      	ldr	r3, [r4, #0]
 8006a52:	07df      	lsls	r7, r3, #31
 8006a54:	d508      	bpl.n	8006a68 <_printf_i+0x144>
 8006a56:	6923      	ldr	r3, [r4, #16]
 8006a58:	6861      	ldr	r1, [r4, #4]
 8006a5a:	4299      	cmp	r1, r3
 8006a5c:	bfde      	ittt	le
 8006a5e:	2330      	movle	r3, #48	@ 0x30
 8006a60:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006a64:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006a68:	1b92      	subs	r2, r2, r6
 8006a6a:	6122      	str	r2, [r4, #16]
 8006a6c:	f8cd a000 	str.w	sl, [sp]
 8006a70:	464b      	mov	r3, r9
 8006a72:	aa03      	add	r2, sp, #12
 8006a74:	4621      	mov	r1, r4
 8006a76:	4640      	mov	r0, r8
 8006a78:	f7ff fee6 	bl	8006848 <_printf_common>
 8006a7c:	3001      	adds	r0, #1
 8006a7e:	d14a      	bne.n	8006b16 <_printf_i+0x1f2>
 8006a80:	f04f 30ff 	mov.w	r0, #4294967295
 8006a84:	b004      	add	sp, #16
 8006a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a8a:	6823      	ldr	r3, [r4, #0]
 8006a8c:	f043 0320 	orr.w	r3, r3, #32
 8006a90:	6023      	str	r3, [r4, #0]
 8006a92:	4833      	ldr	r0, [pc, #204]	@ (8006b60 <_printf_i+0x23c>)
 8006a94:	2778      	movs	r7, #120	@ 0x78
 8006a96:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006a9a:	6823      	ldr	r3, [r4, #0]
 8006a9c:	6831      	ldr	r1, [r6, #0]
 8006a9e:	061f      	lsls	r7, r3, #24
 8006aa0:	f851 5b04 	ldr.w	r5, [r1], #4
 8006aa4:	d402      	bmi.n	8006aac <_printf_i+0x188>
 8006aa6:	065f      	lsls	r7, r3, #25
 8006aa8:	bf48      	it	mi
 8006aaa:	b2ad      	uxthmi	r5, r5
 8006aac:	6031      	str	r1, [r6, #0]
 8006aae:	07d9      	lsls	r1, r3, #31
 8006ab0:	bf44      	itt	mi
 8006ab2:	f043 0320 	orrmi.w	r3, r3, #32
 8006ab6:	6023      	strmi	r3, [r4, #0]
 8006ab8:	b11d      	cbz	r5, 8006ac2 <_printf_i+0x19e>
 8006aba:	2310      	movs	r3, #16
 8006abc:	e7ac      	b.n	8006a18 <_printf_i+0xf4>
 8006abe:	4827      	ldr	r0, [pc, #156]	@ (8006b5c <_printf_i+0x238>)
 8006ac0:	e7e9      	b.n	8006a96 <_printf_i+0x172>
 8006ac2:	6823      	ldr	r3, [r4, #0]
 8006ac4:	f023 0320 	bic.w	r3, r3, #32
 8006ac8:	6023      	str	r3, [r4, #0]
 8006aca:	e7f6      	b.n	8006aba <_printf_i+0x196>
 8006acc:	4616      	mov	r6, r2
 8006ace:	e7bd      	b.n	8006a4c <_printf_i+0x128>
 8006ad0:	6833      	ldr	r3, [r6, #0]
 8006ad2:	6825      	ldr	r5, [r4, #0]
 8006ad4:	6961      	ldr	r1, [r4, #20]
 8006ad6:	1d18      	adds	r0, r3, #4
 8006ad8:	6030      	str	r0, [r6, #0]
 8006ada:	062e      	lsls	r6, r5, #24
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	d501      	bpl.n	8006ae4 <_printf_i+0x1c0>
 8006ae0:	6019      	str	r1, [r3, #0]
 8006ae2:	e002      	b.n	8006aea <_printf_i+0x1c6>
 8006ae4:	0668      	lsls	r0, r5, #25
 8006ae6:	d5fb      	bpl.n	8006ae0 <_printf_i+0x1bc>
 8006ae8:	8019      	strh	r1, [r3, #0]
 8006aea:	2300      	movs	r3, #0
 8006aec:	6123      	str	r3, [r4, #16]
 8006aee:	4616      	mov	r6, r2
 8006af0:	e7bc      	b.n	8006a6c <_printf_i+0x148>
 8006af2:	6833      	ldr	r3, [r6, #0]
 8006af4:	1d1a      	adds	r2, r3, #4
 8006af6:	6032      	str	r2, [r6, #0]
 8006af8:	681e      	ldr	r6, [r3, #0]
 8006afa:	6862      	ldr	r2, [r4, #4]
 8006afc:	2100      	movs	r1, #0
 8006afe:	4630      	mov	r0, r6
 8006b00:	f7f9 fb66 	bl	80001d0 <memchr>
 8006b04:	b108      	cbz	r0, 8006b0a <_printf_i+0x1e6>
 8006b06:	1b80      	subs	r0, r0, r6
 8006b08:	6060      	str	r0, [r4, #4]
 8006b0a:	6863      	ldr	r3, [r4, #4]
 8006b0c:	6123      	str	r3, [r4, #16]
 8006b0e:	2300      	movs	r3, #0
 8006b10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b14:	e7aa      	b.n	8006a6c <_printf_i+0x148>
 8006b16:	6923      	ldr	r3, [r4, #16]
 8006b18:	4632      	mov	r2, r6
 8006b1a:	4649      	mov	r1, r9
 8006b1c:	4640      	mov	r0, r8
 8006b1e:	47d0      	blx	sl
 8006b20:	3001      	adds	r0, #1
 8006b22:	d0ad      	beq.n	8006a80 <_printf_i+0x15c>
 8006b24:	6823      	ldr	r3, [r4, #0]
 8006b26:	079b      	lsls	r3, r3, #30
 8006b28:	d413      	bmi.n	8006b52 <_printf_i+0x22e>
 8006b2a:	68e0      	ldr	r0, [r4, #12]
 8006b2c:	9b03      	ldr	r3, [sp, #12]
 8006b2e:	4298      	cmp	r0, r3
 8006b30:	bfb8      	it	lt
 8006b32:	4618      	movlt	r0, r3
 8006b34:	e7a6      	b.n	8006a84 <_printf_i+0x160>
 8006b36:	2301      	movs	r3, #1
 8006b38:	4632      	mov	r2, r6
 8006b3a:	4649      	mov	r1, r9
 8006b3c:	4640      	mov	r0, r8
 8006b3e:	47d0      	blx	sl
 8006b40:	3001      	adds	r0, #1
 8006b42:	d09d      	beq.n	8006a80 <_printf_i+0x15c>
 8006b44:	3501      	adds	r5, #1
 8006b46:	68e3      	ldr	r3, [r4, #12]
 8006b48:	9903      	ldr	r1, [sp, #12]
 8006b4a:	1a5b      	subs	r3, r3, r1
 8006b4c:	42ab      	cmp	r3, r5
 8006b4e:	dcf2      	bgt.n	8006b36 <_printf_i+0x212>
 8006b50:	e7eb      	b.n	8006b2a <_printf_i+0x206>
 8006b52:	2500      	movs	r5, #0
 8006b54:	f104 0619 	add.w	r6, r4, #25
 8006b58:	e7f5      	b.n	8006b46 <_printf_i+0x222>
 8006b5a:	bf00      	nop
 8006b5c:	08019e9e 	.word	0x08019e9e
 8006b60:	08019eaf 	.word	0x08019eaf

08006b64 <_scanf_float>:
 8006b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b68:	b087      	sub	sp, #28
 8006b6a:	4617      	mov	r7, r2
 8006b6c:	9303      	str	r3, [sp, #12]
 8006b6e:	688b      	ldr	r3, [r1, #8]
 8006b70:	1e5a      	subs	r2, r3, #1
 8006b72:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006b76:	bf81      	itttt	hi
 8006b78:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006b7c:	eb03 0b05 	addhi.w	fp, r3, r5
 8006b80:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006b84:	608b      	strhi	r3, [r1, #8]
 8006b86:	680b      	ldr	r3, [r1, #0]
 8006b88:	460a      	mov	r2, r1
 8006b8a:	f04f 0500 	mov.w	r5, #0
 8006b8e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006b92:	f842 3b1c 	str.w	r3, [r2], #28
 8006b96:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006b9a:	4680      	mov	r8, r0
 8006b9c:	460c      	mov	r4, r1
 8006b9e:	bf98      	it	ls
 8006ba0:	f04f 0b00 	movls.w	fp, #0
 8006ba4:	9201      	str	r2, [sp, #4]
 8006ba6:	4616      	mov	r6, r2
 8006ba8:	46aa      	mov	sl, r5
 8006baa:	46a9      	mov	r9, r5
 8006bac:	9502      	str	r5, [sp, #8]
 8006bae:	68a2      	ldr	r2, [r4, #8]
 8006bb0:	b152      	cbz	r2, 8006bc8 <_scanf_float+0x64>
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	2b4e      	cmp	r3, #78	@ 0x4e
 8006bb8:	d864      	bhi.n	8006c84 <_scanf_float+0x120>
 8006bba:	2b40      	cmp	r3, #64	@ 0x40
 8006bbc:	d83c      	bhi.n	8006c38 <_scanf_float+0xd4>
 8006bbe:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006bc2:	b2c8      	uxtb	r0, r1
 8006bc4:	280e      	cmp	r0, #14
 8006bc6:	d93a      	bls.n	8006c3e <_scanf_float+0xda>
 8006bc8:	f1b9 0f00 	cmp.w	r9, #0
 8006bcc:	d003      	beq.n	8006bd6 <_scanf_float+0x72>
 8006bce:	6823      	ldr	r3, [r4, #0]
 8006bd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006bd4:	6023      	str	r3, [r4, #0]
 8006bd6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006bda:	f1ba 0f01 	cmp.w	sl, #1
 8006bde:	f200 8117 	bhi.w	8006e10 <_scanf_float+0x2ac>
 8006be2:	9b01      	ldr	r3, [sp, #4]
 8006be4:	429e      	cmp	r6, r3
 8006be6:	f200 8108 	bhi.w	8006dfa <_scanf_float+0x296>
 8006bea:	2001      	movs	r0, #1
 8006bec:	b007      	add	sp, #28
 8006bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bf2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006bf6:	2a0d      	cmp	r2, #13
 8006bf8:	d8e6      	bhi.n	8006bc8 <_scanf_float+0x64>
 8006bfa:	a101      	add	r1, pc, #4	@ (adr r1, 8006c00 <_scanf_float+0x9c>)
 8006bfc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006c00:	08006d47 	.word	0x08006d47
 8006c04:	08006bc9 	.word	0x08006bc9
 8006c08:	08006bc9 	.word	0x08006bc9
 8006c0c:	08006bc9 	.word	0x08006bc9
 8006c10:	08006da7 	.word	0x08006da7
 8006c14:	08006d7f 	.word	0x08006d7f
 8006c18:	08006bc9 	.word	0x08006bc9
 8006c1c:	08006bc9 	.word	0x08006bc9
 8006c20:	08006d55 	.word	0x08006d55
 8006c24:	08006bc9 	.word	0x08006bc9
 8006c28:	08006bc9 	.word	0x08006bc9
 8006c2c:	08006bc9 	.word	0x08006bc9
 8006c30:	08006bc9 	.word	0x08006bc9
 8006c34:	08006d0d 	.word	0x08006d0d
 8006c38:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006c3c:	e7db      	b.n	8006bf6 <_scanf_float+0x92>
 8006c3e:	290e      	cmp	r1, #14
 8006c40:	d8c2      	bhi.n	8006bc8 <_scanf_float+0x64>
 8006c42:	a001      	add	r0, pc, #4	@ (adr r0, 8006c48 <_scanf_float+0xe4>)
 8006c44:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006c48:	08006cfd 	.word	0x08006cfd
 8006c4c:	08006bc9 	.word	0x08006bc9
 8006c50:	08006cfd 	.word	0x08006cfd
 8006c54:	08006d93 	.word	0x08006d93
 8006c58:	08006bc9 	.word	0x08006bc9
 8006c5c:	08006ca5 	.word	0x08006ca5
 8006c60:	08006ce3 	.word	0x08006ce3
 8006c64:	08006ce3 	.word	0x08006ce3
 8006c68:	08006ce3 	.word	0x08006ce3
 8006c6c:	08006ce3 	.word	0x08006ce3
 8006c70:	08006ce3 	.word	0x08006ce3
 8006c74:	08006ce3 	.word	0x08006ce3
 8006c78:	08006ce3 	.word	0x08006ce3
 8006c7c:	08006ce3 	.word	0x08006ce3
 8006c80:	08006ce3 	.word	0x08006ce3
 8006c84:	2b6e      	cmp	r3, #110	@ 0x6e
 8006c86:	d809      	bhi.n	8006c9c <_scanf_float+0x138>
 8006c88:	2b60      	cmp	r3, #96	@ 0x60
 8006c8a:	d8b2      	bhi.n	8006bf2 <_scanf_float+0x8e>
 8006c8c:	2b54      	cmp	r3, #84	@ 0x54
 8006c8e:	d07b      	beq.n	8006d88 <_scanf_float+0x224>
 8006c90:	2b59      	cmp	r3, #89	@ 0x59
 8006c92:	d199      	bne.n	8006bc8 <_scanf_float+0x64>
 8006c94:	2d07      	cmp	r5, #7
 8006c96:	d197      	bne.n	8006bc8 <_scanf_float+0x64>
 8006c98:	2508      	movs	r5, #8
 8006c9a:	e02c      	b.n	8006cf6 <_scanf_float+0x192>
 8006c9c:	2b74      	cmp	r3, #116	@ 0x74
 8006c9e:	d073      	beq.n	8006d88 <_scanf_float+0x224>
 8006ca0:	2b79      	cmp	r3, #121	@ 0x79
 8006ca2:	e7f6      	b.n	8006c92 <_scanf_float+0x12e>
 8006ca4:	6821      	ldr	r1, [r4, #0]
 8006ca6:	05c8      	lsls	r0, r1, #23
 8006ca8:	d51b      	bpl.n	8006ce2 <_scanf_float+0x17e>
 8006caa:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006cae:	6021      	str	r1, [r4, #0]
 8006cb0:	f109 0901 	add.w	r9, r9, #1
 8006cb4:	f1bb 0f00 	cmp.w	fp, #0
 8006cb8:	d003      	beq.n	8006cc2 <_scanf_float+0x15e>
 8006cba:	3201      	adds	r2, #1
 8006cbc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006cc0:	60a2      	str	r2, [r4, #8]
 8006cc2:	68a3      	ldr	r3, [r4, #8]
 8006cc4:	3b01      	subs	r3, #1
 8006cc6:	60a3      	str	r3, [r4, #8]
 8006cc8:	6923      	ldr	r3, [r4, #16]
 8006cca:	3301      	adds	r3, #1
 8006ccc:	6123      	str	r3, [r4, #16]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	3b01      	subs	r3, #1
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	607b      	str	r3, [r7, #4]
 8006cd6:	f340 8087 	ble.w	8006de8 <_scanf_float+0x284>
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	3301      	adds	r3, #1
 8006cde:	603b      	str	r3, [r7, #0]
 8006ce0:	e765      	b.n	8006bae <_scanf_float+0x4a>
 8006ce2:	eb1a 0105 	adds.w	r1, sl, r5
 8006ce6:	f47f af6f 	bne.w	8006bc8 <_scanf_float+0x64>
 8006cea:	6822      	ldr	r2, [r4, #0]
 8006cec:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006cf0:	6022      	str	r2, [r4, #0]
 8006cf2:	460d      	mov	r5, r1
 8006cf4:	468a      	mov	sl, r1
 8006cf6:	f806 3b01 	strb.w	r3, [r6], #1
 8006cfa:	e7e2      	b.n	8006cc2 <_scanf_float+0x15e>
 8006cfc:	6822      	ldr	r2, [r4, #0]
 8006cfe:	0610      	lsls	r0, r2, #24
 8006d00:	f57f af62 	bpl.w	8006bc8 <_scanf_float+0x64>
 8006d04:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006d08:	6022      	str	r2, [r4, #0]
 8006d0a:	e7f4      	b.n	8006cf6 <_scanf_float+0x192>
 8006d0c:	f1ba 0f00 	cmp.w	sl, #0
 8006d10:	d10e      	bne.n	8006d30 <_scanf_float+0x1cc>
 8006d12:	f1b9 0f00 	cmp.w	r9, #0
 8006d16:	d10e      	bne.n	8006d36 <_scanf_float+0x1d2>
 8006d18:	6822      	ldr	r2, [r4, #0]
 8006d1a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006d1e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006d22:	d108      	bne.n	8006d36 <_scanf_float+0x1d2>
 8006d24:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006d28:	6022      	str	r2, [r4, #0]
 8006d2a:	f04f 0a01 	mov.w	sl, #1
 8006d2e:	e7e2      	b.n	8006cf6 <_scanf_float+0x192>
 8006d30:	f1ba 0f02 	cmp.w	sl, #2
 8006d34:	d055      	beq.n	8006de2 <_scanf_float+0x27e>
 8006d36:	2d01      	cmp	r5, #1
 8006d38:	d002      	beq.n	8006d40 <_scanf_float+0x1dc>
 8006d3a:	2d04      	cmp	r5, #4
 8006d3c:	f47f af44 	bne.w	8006bc8 <_scanf_float+0x64>
 8006d40:	3501      	adds	r5, #1
 8006d42:	b2ed      	uxtb	r5, r5
 8006d44:	e7d7      	b.n	8006cf6 <_scanf_float+0x192>
 8006d46:	f1ba 0f01 	cmp.w	sl, #1
 8006d4a:	f47f af3d 	bne.w	8006bc8 <_scanf_float+0x64>
 8006d4e:	f04f 0a02 	mov.w	sl, #2
 8006d52:	e7d0      	b.n	8006cf6 <_scanf_float+0x192>
 8006d54:	b97d      	cbnz	r5, 8006d76 <_scanf_float+0x212>
 8006d56:	f1b9 0f00 	cmp.w	r9, #0
 8006d5a:	f47f af38 	bne.w	8006bce <_scanf_float+0x6a>
 8006d5e:	6822      	ldr	r2, [r4, #0]
 8006d60:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006d64:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006d68:	f040 8108 	bne.w	8006f7c <_scanf_float+0x418>
 8006d6c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006d70:	6022      	str	r2, [r4, #0]
 8006d72:	2501      	movs	r5, #1
 8006d74:	e7bf      	b.n	8006cf6 <_scanf_float+0x192>
 8006d76:	2d03      	cmp	r5, #3
 8006d78:	d0e2      	beq.n	8006d40 <_scanf_float+0x1dc>
 8006d7a:	2d05      	cmp	r5, #5
 8006d7c:	e7de      	b.n	8006d3c <_scanf_float+0x1d8>
 8006d7e:	2d02      	cmp	r5, #2
 8006d80:	f47f af22 	bne.w	8006bc8 <_scanf_float+0x64>
 8006d84:	2503      	movs	r5, #3
 8006d86:	e7b6      	b.n	8006cf6 <_scanf_float+0x192>
 8006d88:	2d06      	cmp	r5, #6
 8006d8a:	f47f af1d 	bne.w	8006bc8 <_scanf_float+0x64>
 8006d8e:	2507      	movs	r5, #7
 8006d90:	e7b1      	b.n	8006cf6 <_scanf_float+0x192>
 8006d92:	6822      	ldr	r2, [r4, #0]
 8006d94:	0591      	lsls	r1, r2, #22
 8006d96:	f57f af17 	bpl.w	8006bc8 <_scanf_float+0x64>
 8006d9a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006d9e:	6022      	str	r2, [r4, #0]
 8006da0:	f8cd 9008 	str.w	r9, [sp, #8]
 8006da4:	e7a7      	b.n	8006cf6 <_scanf_float+0x192>
 8006da6:	6822      	ldr	r2, [r4, #0]
 8006da8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006dac:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006db0:	d006      	beq.n	8006dc0 <_scanf_float+0x25c>
 8006db2:	0550      	lsls	r0, r2, #21
 8006db4:	f57f af08 	bpl.w	8006bc8 <_scanf_float+0x64>
 8006db8:	f1b9 0f00 	cmp.w	r9, #0
 8006dbc:	f000 80de 	beq.w	8006f7c <_scanf_float+0x418>
 8006dc0:	0591      	lsls	r1, r2, #22
 8006dc2:	bf58      	it	pl
 8006dc4:	9902      	ldrpl	r1, [sp, #8]
 8006dc6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006dca:	bf58      	it	pl
 8006dcc:	eba9 0101 	subpl.w	r1, r9, r1
 8006dd0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006dd4:	bf58      	it	pl
 8006dd6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006dda:	6022      	str	r2, [r4, #0]
 8006ddc:	f04f 0900 	mov.w	r9, #0
 8006de0:	e789      	b.n	8006cf6 <_scanf_float+0x192>
 8006de2:	f04f 0a03 	mov.w	sl, #3
 8006de6:	e786      	b.n	8006cf6 <_scanf_float+0x192>
 8006de8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006dec:	4639      	mov	r1, r7
 8006dee:	4640      	mov	r0, r8
 8006df0:	4798      	blx	r3
 8006df2:	2800      	cmp	r0, #0
 8006df4:	f43f aedb 	beq.w	8006bae <_scanf_float+0x4a>
 8006df8:	e6e6      	b.n	8006bc8 <_scanf_float+0x64>
 8006dfa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006dfe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006e02:	463a      	mov	r2, r7
 8006e04:	4640      	mov	r0, r8
 8006e06:	4798      	blx	r3
 8006e08:	6923      	ldr	r3, [r4, #16]
 8006e0a:	3b01      	subs	r3, #1
 8006e0c:	6123      	str	r3, [r4, #16]
 8006e0e:	e6e8      	b.n	8006be2 <_scanf_float+0x7e>
 8006e10:	1e6b      	subs	r3, r5, #1
 8006e12:	2b06      	cmp	r3, #6
 8006e14:	d824      	bhi.n	8006e60 <_scanf_float+0x2fc>
 8006e16:	2d02      	cmp	r5, #2
 8006e18:	d836      	bhi.n	8006e88 <_scanf_float+0x324>
 8006e1a:	9b01      	ldr	r3, [sp, #4]
 8006e1c:	429e      	cmp	r6, r3
 8006e1e:	f67f aee4 	bls.w	8006bea <_scanf_float+0x86>
 8006e22:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006e26:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006e2a:	463a      	mov	r2, r7
 8006e2c:	4640      	mov	r0, r8
 8006e2e:	4798      	blx	r3
 8006e30:	6923      	ldr	r3, [r4, #16]
 8006e32:	3b01      	subs	r3, #1
 8006e34:	6123      	str	r3, [r4, #16]
 8006e36:	e7f0      	b.n	8006e1a <_scanf_float+0x2b6>
 8006e38:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006e3c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006e40:	463a      	mov	r2, r7
 8006e42:	4640      	mov	r0, r8
 8006e44:	4798      	blx	r3
 8006e46:	6923      	ldr	r3, [r4, #16]
 8006e48:	3b01      	subs	r3, #1
 8006e4a:	6123      	str	r3, [r4, #16]
 8006e4c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e50:	fa5f fa8a 	uxtb.w	sl, sl
 8006e54:	f1ba 0f02 	cmp.w	sl, #2
 8006e58:	d1ee      	bne.n	8006e38 <_scanf_float+0x2d4>
 8006e5a:	3d03      	subs	r5, #3
 8006e5c:	b2ed      	uxtb	r5, r5
 8006e5e:	1b76      	subs	r6, r6, r5
 8006e60:	6823      	ldr	r3, [r4, #0]
 8006e62:	05da      	lsls	r2, r3, #23
 8006e64:	d530      	bpl.n	8006ec8 <_scanf_float+0x364>
 8006e66:	055b      	lsls	r3, r3, #21
 8006e68:	d511      	bpl.n	8006e8e <_scanf_float+0x32a>
 8006e6a:	9b01      	ldr	r3, [sp, #4]
 8006e6c:	429e      	cmp	r6, r3
 8006e6e:	f67f aebc 	bls.w	8006bea <_scanf_float+0x86>
 8006e72:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006e76:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006e7a:	463a      	mov	r2, r7
 8006e7c:	4640      	mov	r0, r8
 8006e7e:	4798      	blx	r3
 8006e80:	6923      	ldr	r3, [r4, #16]
 8006e82:	3b01      	subs	r3, #1
 8006e84:	6123      	str	r3, [r4, #16]
 8006e86:	e7f0      	b.n	8006e6a <_scanf_float+0x306>
 8006e88:	46aa      	mov	sl, r5
 8006e8a:	46b3      	mov	fp, r6
 8006e8c:	e7de      	b.n	8006e4c <_scanf_float+0x2e8>
 8006e8e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006e92:	6923      	ldr	r3, [r4, #16]
 8006e94:	2965      	cmp	r1, #101	@ 0x65
 8006e96:	f103 33ff 	add.w	r3, r3, #4294967295
 8006e9a:	f106 35ff 	add.w	r5, r6, #4294967295
 8006e9e:	6123      	str	r3, [r4, #16]
 8006ea0:	d00c      	beq.n	8006ebc <_scanf_float+0x358>
 8006ea2:	2945      	cmp	r1, #69	@ 0x45
 8006ea4:	d00a      	beq.n	8006ebc <_scanf_float+0x358>
 8006ea6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006eaa:	463a      	mov	r2, r7
 8006eac:	4640      	mov	r0, r8
 8006eae:	4798      	blx	r3
 8006eb0:	6923      	ldr	r3, [r4, #16]
 8006eb2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006eb6:	3b01      	subs	r3, #1
 8006eb8:	1eb5      	subs	r5, r6, #2
 8006eba:	6123      	str	r3, [r4, #16]
 8006ebc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006ec0:	463a      	mov	r2, r7
 8006ec2:	4640      	mov	r0, r8
 8006ec4:	4798      	blx	r3
 8006ec6:	462e      	mov	r6, r5
 8006ec8:	6822      	ldr	r2, [r4, #0]
 8006eca:	f012 0210 	ands.w	r2, r2, #16
 8006ece:	d001      	beq.n	8006ed4 <_scanf_float+0x370>
 8006ed0:	2000      	movs	r0, #0
 8006ed2:	e68b      	b.n	8006bec <_scanf_float+0x88>
 8006ed4:	7032      	strb	r2, [r6, #0]
 8006ed6:	6823      	ldr	r3, [r4, #0]
 8006ed8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006edc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ee0:	d11c      	bne.n	8006f1c <_scanf_float+0x3b8>
 8006ee2:	9b02      	ldr	r3, [sp, #8]
 8006ee4:	454b      	cmp	r3, r9
 8006ee6:	eba3 0209 	sub.w	r2, r3, r9
 8006eea:	d123      	bne.n	8006f34 <_scanf_float+0x3d0>
 8006eec:	9901      	ldr	r1, [sp, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	4640      	mov	r0, r8
 8006ef2:	f002 fd15 	bl	8009920 <_strtod_r>
 8006ef6:	9b03      	ldr	r3, [sp, #12]
 8006ef8:	6821      	ldr	r1, [r4, #0]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f011 0f02 	tst.w	r1, #2
 8006f00:	ec57 6b10 	vmov	r6, r7, d0
 8006f04:	f103 0204 	add.w	r2, r3, #4
 8006f08:	d01f      	beq.n	8006f4a <_scanf_float+0x3e6>
 8006f0a:	9903      	ldr	r1, [sp, #12]
 8006f0c:	600a      	str	r2, [r1, #0]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	e9c3 6700 	strd	r6, r7, [r3]
 8006f14:	68e3      	ldr	r3, [r4, #12]
 8006f16:	3301      	adds	r3, #1
 8006f18:	60e3      	str	r3, [r4, #12]
 8006f1a:	e7d9      	b.n	8006ed0 <_scanf_float+0x36c>
 8006f1c:	9b04      	ldr	r3, [sp, #16]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d0e4      	beq.n	8006eec <_scanf_float+0x388>
 8006f22:	9905      	ldr	r1, [sp, #20]
 8006f24:	230a      	movs	r3, #10
 8006f26:	3101      	adds	r1, #1
 8006f28:	4640      	mov	r0, r8
 8006f2a:	f002 fd79 	bl	8009a20 <_strtol_r>
 8006f2e:	9b04      	ldr	r3, [sp, #16]
 8006f30:	9e05      	ldr	r6, [sp, #20]
 8006f32:	1ac2      	subs	r2, r0, r3
 8006f34:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006f38:	429e      	cmp	r6, r3
 8006f3a:	bf28      	it	cs
 8006f3c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006f40:	4910      	ldr	r1, [pc, #64]	@ (8006f84 <_scanf_float+0x420>)
 8006f42:	4630      	mov	r0, r6
 8006f44:	f000 f94a 	bl	80071dc <siprintf>
 8006f48:	e7d0      	b.n	8006eec <_scanf_float+0x388>
 8006f4a:	f011 0f04 	tst.w	r1, #4
 8006f4e:	9903      	ldr	r1, [sp, #12]
 8006f50:	600a      	str	r2, [r1, #0]
 8006f52:	d1dc      	bne.n	8006f0e <_scanf_float+0x3aa>
 8006f54:	681d      	ldr	r5, [r3, #0]
 8006f56:	4632      	mov	r2, r6
 8006f58:	463b      	mov	r3, r7
 8006f5a:	4630      	mov	r0, r6
 8006f5c:	4639      	mov	r1, r7
 8006f5e:	f7f9 fde5 	bl	8000b2c <__aeabi_dcmpun>
 8006f62:	b128      	cbz	r0, 8006f70 <_scanf_float+0x40c>
 8006f64:	4808      	ldr	r0, [pc, #32]	@ (8006f88 <_scanf_float+0x424>)
 8006f66:	f000 fad3 	bl	8007510 <nanf>
 8006f6a:	ed85 0a00 	vstr	s0, [r5]
 8006f6e:	e7d1      	b.n	8006f14 <_scanf_float+0x3b0>
 8006f70:	4630      	mov	r0, r6
 8006f72:	4639      	mov	r1, r7
 8006f74:	f7f9 fe38 	bl	8000be8 <__aeabi_d2f>
 8006f78:	6028      	str	r0, [r5, #0]
 8006f7a:	e7cb      	b.n	8006f14 <_scanf_float+0x3b0>
 8006f7c:	f04f 0900 	mov.w	r9, #0
 8006f80:	e629      	b.n	8006bd6 <_scanf_float+0x72>
 8006f82:	bf00      	nop
 8006f84:	08019ec0 	.word	0x08019ec0
 8006f88:	0801a255 	.word	0x0801a255

08006f8c <std>:
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	b510      	push	{r4, lr}
 8006f90:	4604      	mov	r4, r0
 8006f92:	e9c0 3300 	strd	r3, r3, [r0]
 8006f96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f9a:	6083      	str	r3, [r0, #8]
 8006f9c:	8181      	strh	r1, [r0, #12]
 8006f9e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006fa0:	81c2      	strh	r2, [r0, #14]
 8006fa2:	6183      	str	r3, [r0, #24]
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	2208      	movs	r2, #8
 8006fa8:	305c      	adds	r0, #92	@ 0x5c
 8006faa:	f000 fa0f 	bl	80073cc <memset>
 8006fae:	4b0d      	ldr	r3, [pc, #52]	@ (8006fe4 <std+0x58>)
 8006fb0:	6263      	str	r3, [r4, #36]	@ 0x24
 8006fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8006fe8 <std+0x5c>)
 8006fb4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8006fec <std+0x60>)
 8006fb8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006fba:	4b0d      	ldr	r3, [pc, #52]	@ (8006ff0 <std+0x64>)
 8006fbc:	6323      	str	r3, [r4, #48]	@ 0x30
 8006fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8006ff4 <std+0x68>)
 8006fc0:	6224      	str	r4, [r4, #32]
 8006fc2:	429c      	cmp	r4, r3
 8006fc4:	d006      	beq.n	8006fd4 <std+0x48>
 8006fc6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006fca:	4294      	cmp	r4, r2
 8006fcc:	d002      	beq.n	8006fd4 <std+0x48>
 8006fce:	33d0      	adds	r3, #208	@ 0xd0
 8006fd0:	429c      	cmp	r4, r3
 8006fd2:	d105      	bne.n	8006fe0 <std+0x54>
 8006fd4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006fd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fdc:	f000 ba86 	b.w	80074ec <__retarget_lock_init_recursive>
 8006fe0:	bd10      	pop	{r4, pc}
 8006fe2:	bf00      	nop
 8006fe4:	0800721d 	.word	0x0800721d
 8006fe8:	0800723f 	.word	0x0800723f
 8006fec:	08007277 	.word	0x08007277
 8006ff0:	0800729b 	.word	0x0800729b
 8006ff4:	20000504 	.word	0x20000504

08006ff8 <stdio_exit_handler>:
 8006ff8:	4a02      	ldr	r2, [pc, #8]	@ (8007004 <stdio_exit_handler+0xc>)
 8006ffa:	4903      	ldr	r1, [pc, #12]	@ (8007008 <stdio_exit_handler+0x10>)
 8006ffc:	4803      	ldr	r0, [pc, #12]	@ (800700c <stdio_exit_handler+0x14>)
 8006ffe:	f000 b869 	b.w	80070d4 <_fwalk_sglue>
 8007002:	bf00      	nop
 8007004:	20000024 	.word	0x20000024
 8007008:	08009ddd 	.word	0x08009ddd
 800700c:	20000034 	.word	0x20000034

08007010 <cleanup_stdio>:
 8007010:	6841      	ldr	r1, [r0, #4]
 8007012:	4b0c      	ldr	r3, [pc, #48]	@ (8007044 <cleanup_stdio+0x34>)
 8007014:	4299      	cmp	r1, r3
 8007016:	b510      	push	{r4, lr}
 8007018:	4604      	mov	r4, r0
 800701a:	d001      	beq.n	8007020 <cleanup_stdio+0x10>
 800701c:	f002 fede 	bl	8009ddc <_fflush_r>
 8007020:	68a1      	ldr	r1, [r4, #8]
 8007022:	4b09      	ldr	r3, [pc, #36]	@ (8007048 <cleanup_stdio+0x38>)
 8007024:	4299      	cmp	r1, r3
 8007026:	d002      	beq.n	800702e <cleanup_stdio+0x1e>
 8007028:	4620      	mov	r0, r4
 800702a:	f002 fed7 	bl	8009ddc <_fflush_r>
 800702e:	68e1      	ldr	r1, [r4, #12]
 8007030:	4b06      	ldr	r3, [pc, #24]	@ (800704c <cleanup_stdio+0x3c>)
 8007032:	4299      	cmp	r1, r3
 8007034:	d004      	beq.n	8007040 <cleanup_stdio+0x30>
 8007036:	4620      	mov	r0, r4
 8007038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800703c:	f002 bece 	b.w	8009ddc <_fflush_r>
 8007040:	bd10      	pop	{r4, pc}
 8007042:	bf00      	nop
 8007044:	20000504 	.word	0x20000504
 8007048:	2000056c 	.word	0x2000056c
 800704c:	200005d4 	.word	0x200005d4

08007050 <global_stdio_init.part.0>:
 8007050:	b510      	push	{r4, lr}
 8007052:	4b0b      	ldr	r3, [pc, #44]	@ (8007080 <global_stdio_init.part.0+0x30>)
 8007054:	4c0b      	ldr	r4, [pc, #44]	@ (8007084 <global_stdio_init.part.0+0x34>)
 8007056:	4a0c      	ldr	r2, [pc, #48]	@ (8007088 <global_stdio_init.part.0+0x38>)
 8007058:	601a      	str	r2, [r3, #0]
 800705a:	4620      	mov	r0, r4
 800705c:	2200      	movs	r2, #0
 800705e:	2104      	movs	r1, #4
 8007060:	f7ff ff94 	bl	8006f8c <std>
 8007064:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007068:	2201      	movs	r2, #1
 800706a:	2109      	movs	r1, #9
 800706c:	f7ff ff8e 	bl	8006f8c <std>
 8007070:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007074:	2202      	movs	r2, #2
 8007076:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800707a:	2112      	movs	r1, #18
 800707c:	f7ff bf86 	b.w	8006f8c <std>
 8007080:	2000063c 	.word	0x2000063c
 8007084:	20000504 	.word	0x20000504
 8007088:	08006ff9 	.word	0x08006ff9

0800708c <__sfp_lock_acquire>:
 800708c:	4801      	ldr	r0, [pc, #4]	@ (8007094 <__sfp_lock_acquire+0x8>)
 800708e:	f000 ba2e 	b.w	80074ee <__retarget_lock_acquire_recursive>
 8007092:	bf00      	nop
 8007094:	20000645 	.word	0x20000645

08007098 <__sfp_lock_release>:
 8007098:	4801      	ldr	r0, [pc, #4]	@ (80070a0 <__sfp_lock_release+0x8>)
 800709a:	f000 ba29 	b.w	80074f0 <__retarget_lock_release_recursive>
 800709e:	bf00      	nop
 80070a0:	20000645 	.word	0x20000645

080070a4 <__sinit>:
 80070a4:	b510      	push	{r4, lr}
 80070a6:	4604      	mov	r4, r0
 80070a8:	f7ff fff0 	bl	800708c <__sfp_lock_acquire>
 80070ac:	6a23      	ldr	r3, [r4, #32]
 80070ae:	b11b      	cbz	r3, 80070b8 <__sinit+0x14>
 80070b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070b4:	f7ff bff0 	b.w	8007098 <__sfp_lock_release>
 80070b8:	4b04      	ldr	r3, [pc, #16]	@ (80070cc <__sinit+0x28>)
 80070ba:	6223      	str	r3, [r4, #32]
 80070bc:	4b04      	ldr	r3, [pc, #16]	@ (80070d0 <__sinit+0x2c>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d1f5      	bne.n	80070b0 <__sinit+0xc>
 80070c4:	f7ff ffc4 	bl	8007050 <global_stdio_init.part.0>
 80070c8:	e7f2      	b.n	80070b0 <__sinit+0xc>
 80070ca:	bf00      	nop
 80070cc:	08007011 	.word	0x08007011
 80070d0:	2000063c 	.word	0x2000063c

080070d4 <_fwalk_sglue>:
 80070d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070d8:	4607      	mov	r7, r0
 80070da:	4688      	mov	r8, r1
 80070dc:	4614      	mov	r4, r2
 80070de:	2600      	movs	r6, #0
 80070e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80070e4:	f1b9 0901 	subs.w	r9, r9, #1
 80070e8:	d505      	bpl.n	80070f6 <_fwalk_sglue+0x22>
 80070ea:	6824      	ldr	r4, [r4, #0]
 80070ec:	2c00      	cmp	r4, #0
 80070ee:	d1f7      	bne.n	80070e0 <_fwalk_sglue+0xc>
 80070f0:	4630      	mov	r0, r6
 80070f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070f6:	89ab      	ldrh	r3, [r5, #12]
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d907      	bls.n	800710c <_fwalk_sglue+0x38>
 80070fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007100:	3301      	adds	r3, #1
 8007102:	d003      	beq.n	800710c <_fwalk_sglue+0x38>
 8007104:	4629      	mov	r1, r5
 8007106:	4638      	mov	r0, r7
 8007108:	47c0      	blx	r8
 800710a:	4306      	orrs	r6, r0
 800710c:	3568      	adds	r5, #104	@ 0x68
 800710e:	e7e9      	b.n	80070e4 <_fwalk_sglue+0x10>

08007110 <putchar>:
 8007110:	4b02      	ldr	r3, [pc, #8]	@ (800711c <putchar+0xc>)
 8007112:	4601      	mov	r1, r0
 8007114:	6818      	ldr	r0, [r3, #0]
 8007116:	6882      	ldr	r2, [r0, #8]
 8007118:	f002 beea 	b.w	8009ef0 <_putc_r>
 800711c:	20000030 	.word	0x20000030

08007120 <_puts_r>:
 8007120:	6a03      	ldr	r3, [r0, #32]
 8007122:	b570      	push	{r4, r5, r6, lr}
 8007124:	6884      	ldr	r4, [r0, #8]
 8007126:	4605      	mov	r5, r0
 8007128:	460e      	mov	r6, r1
 800712a:	b90b      	cbnz	r3, 8007130 <_puts_r+0x10>
 800712c:	f7ff ffba 	bl	80070a4 <__sinit>
 8007130:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007132:	07db      	lsls	r3, r3, #31
 8007134:	d405      	bmi.n	8007142 <_puts_r+0x22>
 8007136:	89a3      	ldrh	r3, [r4, #12]
 8007138:	0598      	lsls	r0, r3, #22
 800713a:	d402      	bmi.n	8007142 <_puts_r+0x22>
 800713c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800713e:	f000 f9d6 	bl	80074ee <__retarget_lock_acquire_recursive>
 8007142:	89a3      	ldrh	r3, [r4, #12]
 8007144:	0719      	lsls	r1, r3, #28
 8007146:	d502      	bpl.n	800714e <_puts_r+0x2e>
 8007148:	6923      	ldr	r3, [r4, #16]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d135      	bne.n	80071ba <_puts_r+0x9a>
 800714e:	4621      	mov	r1, r4
 8007150:	4628      	mov	r0, r5
 8007152:	f000 f8e5 	bl	8007320 <__swsetup_r>
 8007156:	b380      	cbz	r0, 80071ba <_puts_r+0x9a>
 8007158:	f04f 35ff 	mov.w	r5, #4294967295
 800715c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800715e:	07da      	lsls	r2, r3, #31
 8007160:	d405      	bmi.n	800716e <_puts_r+0x4e>
 8007162:	89a3      	ldrh	r3, [r4, #12]
 8007164:	059b      	lsls	r3, r3, #22
 8007166:	d402      	bmi.n	800716e <_puts_r+0x4e>
 8007168:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800716a:	f000 f9c1 	bl	80074f0 <__retarget_lock_release_recursive>
 800716e:	4628      	mov	r0, r5
 8007170:	bd70      	pop	{r4, r5, r6, pc}
 8007172:	2b00      	cmp	r3, #0
 8007174:	da04      	bge.n	8007180 <_puts_r+0x60>
 8007176:	69a2      	ldr	r2, [r4, #24]
 8007178:	429a      	cmp	r2, r3
 800717a:	dc17      	bgt.n	80071ac <_puts_r+0x8c>
 800717c:	290a      	cmp	r1, #10
 800717e:	d015      	beq.n	80071ac <_puts_r+0x8c>
 8007180:	6823      	ldr	r3, [r4, #0]
 8007182:	1c5a      	adds	r2, r3, #1
 8007184:	6022      	str	r2, [r4, #0]
 8007186:	7019      	strb	r1, [r3, #0]
 8007188:	68a3      	ldr	r3, [r4, #8]
 800718a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800718e:	3b01      	subs	r3, #1
 8007190:	60a3      	str	r3, [r4, #8]
 8007192:	2900      	cmp	r1, #0
 8007194:	d1ed      	bne.n	8007172 <_puts_r+0x52>
 8007196:	2b00      	cmp	r3, #0
 8007198:	da11      	bge.n	80071be <_puts_r+0x9e>
 800719a:	4622      	mov	r2, r4
 800719c:	210a      	movs	r1, #10
 800719e:	4628      	mov	r0, r5
 80071a0:	f000 f87f 	bl	80072a2 <__swbuf_r>
 80071a4:	3001      	adds	r0, #1
 80071a6:	d0d7      	beq.n	8007158 <_puts_r+0x38>
 80071a8:	250a      	movs	r5, #10
 80071aa:	e7d7      	b.n	800715c <_puts_r+0x3c>
 80071ac:	4622      	mov	r2, r4
 80071ae:	4628      	mov	r0, r5
 80071b0:	f000 f877 	bl	80072a2 <__swbuf_r>
 80071b4:	3001      	adds	r0, #1
 80071b6:	d1e7      	bne.n	8007188 <_puts_r+0x68>
 80071b8:	e7ce      	b.n	8007158 <_puts_r+0x38>
 80071ba:	3e01      	subs	r6, #1
 80071bc:	e7e4      	b.n	8007188 <_puts_r+0x68>
 80071be:	6823      	ldr	r3, [r4, #0]
 80071c0:	1c5a      	adds	r2, r3, #1
 80071c2:	6022      	str	r2, [r4, #0]
 80071c4:	220a      	movs	r2, #10
 80071c6:	701a      	strb	r2, [r3, #0]
 80071c8:	e7ee      	b.n	80071a8 <_puts_r+0x88>
	...

080071cc <puts>:
 80071cc:	4b02      	ldr	r3, [pc, #8]	@ (80071d8 <puts+0xc>)
 80071ce:	4601      	mov	r1, r0
 80071d0:	6818      	ldr	r0, [r3, #0]
 80071d2:	f7ff bfa5 	b.w	8007120 <_puts_r>
 80071d6:	bf00      	nop
 80071d8:	20000030 	.word	0x20000030

080071dc <siprintf>:
 80071dc:	b40e      	push	{r1, r2, r3}
 80071de:	b500      	push	{lr}
 80071e0:	b09c      	sub	sp, #112	@ 0x70
 80071e2:	ab1d      	add	r3, sp, #116	@ 0x74
 80071e4:	9002      	str	r0, [sp, #8]
 80071e6:	9006      	str	r0, [sp, #24]
 80071e8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80071ec:	4809      	ldr	r0, [pc, #36]	@ (8007214 <siprintf+0x38>)
 80071ee:	9107      	str	r1, [sp, #28]
 80071f0:	9104      	str	r1, [sp, #16]
 80071f2:	4909      	ldr	r1, [pc, #36]	@ (8007218 <siprintf+0x3c>)
 80071f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80071f8:	9105      	str	r1, [sp, #20]
 80071fa:	6800      	ldr	r0, [r0, #0]
 80071fc:	9301      	str	r3, [sp, #4]
 80071fe:	a902      	add	r1, sp, #8
 8007200:	f002 fc6c 	bl	8009adc <_svfiprintf_r>
 8007204:	9b02      	ldr	r3, [sp, #8]
 8007206:	2200      	movs	r2, #0
 8007208:	701a      	strb	r2, [r3, #0]
 800720a:	b01c      	add	sp, #112	@ 0x70
 800720c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007210:	b003      	add	sp, #12
 8007212:	4770      	bx	lr
 8007214:	20000030 	.word	0x20000030
 8007218:	ffff0208 	.word	0xffff0208

0800721c <__sread>:
 800721c:	b510      	push	{r4, lr}
 800721e:	460c      	mov	r4, r1
 8007220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007224:	f000 f914 	bl	8007450 <_read_r>
 8007228:	2800      	cmp	r0, #0
 800722a:	bfab      	itete	ge
 800722c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800722e:	89a3      	ldrhlt	r3, [r4, #12]
 8007230:	181b      	addge	r3, r3, r0
 8007232:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007236:	bfac      	ite	ge
 8007238:	6563      	strge	r3, [r4, #84]	@ 0x54
 800723a:	81a3      	strhlt	r3, [r4, #12]
 800723c:	bd10      	pop	{r4, pc}

0800723e <__swrite>:
 800723e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007242:	461f      	mov	r7, r3
 8007244:	898b      	ldrh	r3, [r1, #12]
 8007246:	05db      	lsls	r3, r3, #23
 8007248:	4605      	mov	r5, r0
 800724a:	460c      	mov	r4, r1
 800724c:	4616      	mov	r6, r2
 800724e:	d505      	bpl.n	800725c <__swrite+0x1e>
 8007250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007254:	2302      	movs	r3, #2
 8007256:	2200      	movs	r2, #0
 8007258:	f000 f8e8 	bl	800742c <_lseek_r>
 800725c:	89a3      	ldrh	r3, [r4, #12]
 800725e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007262:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007266:	81a3      	strh	r3, [r4, #12]
 8007268:	4632      	mov	r2, r6
 800726a:	463b      	mov	r3, r7
 800726c:	4628      	mov	r0, r5
 800726e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007272:	f000 b8ff 	b.w	8007474 <_write_r>

08007276 <__sseek>:
 8007276:	b510      	push	{r4, lr}
 8007278:	460c      	mov	r4, r1
 800727a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800727e:	f000 f8d5 	bl	800742c <_lseek_r>
 8007282:	1c43      	adds	r3, r0, #1
 8007284:	89a3      	ldrh	r3, [r4, #12]
 8007286:	bf15      	itete	ne
 8007288:	6560      	strne	r0, [r4, #84]	@ 0x54
 800728a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800728e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007292:	81a3      	strheq	r3, [r4, #12]
 8007294:	bf18      	it	ne
 8007296:	81a3      	strhne	r3, [r4, #12]
 8007298:	bd10      	pop	{r4, pc}

0800729a <__sclose>:
 800729a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800729e:	f000 b8b5 	b.w	800740c <_close_r>

080072a2 <__swbuf_r>:
 80072a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072a4:	460e      	mov	r6, r1
 80072a6:	4614      	mov	r4, r2
 80072a8:	4605      	mov	r5, r0
 80072aa:	b118      	cbz	r0, 80072b4 <__swbuf_r+0x12>
 80072ac:	6a03      	ldr	r3, [r0, #32]
 80072ae:	b90b      	cbnz	r3, 80072b4 <__swbuf_r+0x12>
 80072b0:	f7ff fef8 	bl	80070a4 <__sinit>
 80072b4:	69a3      	ldr	r3, [r4, #24]
 80072b6:	60a3      	str	r3, [r4, #8]
 80072b8:	89a3      	ldrh	r3, [r4, #12]
 80072ba:	071a      	lsls	r2, r3, #28
 80072bc:	d501      	bpl.n	80072c2 <__swbuf_r+0x20>
 80072be:	6923      	ldr	r3, [r4, #16]
 80072c0:	b943      	cbnz	r3, 80072d4 <__swbuf_r+0x32>
 80072c2:	4621      	mov	r1, r4
 80072c4:	4628      	mov	r0, r5
 80072c6:	f000 f82b 	bl	8007320 <__swsetup_r>
 80072ca:	b118      	cbz	r0, 80072d4 <__swbuf_r+0x32>
 80072cc:	f04f 37ff 	mov.w	r7, #4294967295
 80072d0:	4638      	mov	r0, r7
 80072d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072d4:	6823      	ldr	r3, [r4, #0]
 80072d6:	6922      	ldr	r2, [r4, #16]
 80072d8:	1a98      	subs	r0, r3, r2
 80072da:	6963      	ldr	r3, [r4, #20]
 80072dc:	b2f6      	uxtb	r6, r6
 80072de:	4283      	cmp	r3, r0
 80072e0:	4637      	mov	r7, r6
 80072e2:	dc05      	bgt.n	80072f0 <__swbuf_r+0x4e>
 80072e4:	4621      	mov	r1, r4
 80072e6:	4628      	mov	r0, r5
 80072e8:	f002 fd78 	bl	8009ddc <_fflush_r>
 80072ec:	2800      	cmp	r0, #0
 80072ee:	d1ed      	bne.n	80072cc <__swbuf_r+0x2a>
 80072f0:	68a3      	ldr	r3, [r4, #8]
 80072f2:	3b01      	subs	r3, #1
 80072f4:	60a3      	str	r3, [r4, #8]
 80072f6:	6823      	ldr	r3, [r4, #0]
 80072f8:	1c5a      	adds	r2, r3, #1
 80072fa:	6022      	str	r2, [r4, #0]
 80072fc:	701e      	strb	r6, [r3, #0]
 80072fe:	6962      	ldr	r2, [r4, #20]
 8007300:	1c43      	adds	r3, r0, #1
 8007302:	429a      	cmp	r2, r3
 8007304:	d004      	beq.n	8007310 <__swbuf_r+0x6e>
 8007306:	89a3      	ldrh	r3, [r4, #12]
 8007308:	07db      	lsls	r3, r3, #31
 800730a:	d5e1      	bpl.n	80072d0 <__swbuf_r+0x2e>
 800730c:	2e0a      	cmp	r6, #10
 800730e:	d1df      	bne.n	80072d0 <__swbuf_r+0x2e>
 8007310:	4621      	mov	r1, r4
 8007312:	4628      	mov	r0, r5
 8007314:	f002 fd62 	bl	8009ddc <_fflush_r>
 8007318:	2800      	cmp	r0, #0
 800731a:	d0d9      	beq.n	80072d0 <__swbuf_r+0x2e>
 800731c:	e7d6      	b.n	80072cc <__swbuf_r+0x2a>
	...

08007320 <__swsetup_r>:
 8007320:	b538      	push	{r3, r4, r5, lr}
 8007322:	4b29      	ldr	r3, [pc, #164]	@ (80073c8 <__swsetup_r+0xa8>)
 8007324:	4605      	mov	r5, r0
 8007326:	6818      	ldr	r0, [r3, #0]
 8007328:	460c      	mov	r4, r1
 800732a:	b118      	cbz	r0, 8007334 <__swsetup_r+0x14>
 800732c:	6a03      	ldr	r3, [r0, #32]
 800732e:	b90b      	cbnz	r3, 8007334 <__swsetup_r+0x14>
 8007330:	f7ff feb8 	bl	80070a4 <__sinit>
 8007334:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007338:	0719      	lsls	r1, r3, #28
 800733a:	d422      	bmi.n	8007382 <__swsetup_r+0x62>
 800733c:	06da      	lsls	r2, r3, #27
 800733e:	d407      	bmi.n	8007350 <__swsetup_r+0x30>
 8007340:	2209      	movs	r2, #9
 8007342:	602a      	str	r2, [r5, #0]
 8007344:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007348:	81a3      	strh	r3, [r4, #12]
 800734a:	f04f 30ff 	mov.w	r0, #4294967295
 800734e:	e033      	b.n	80073b8 <__swsetup_r+0x98>
 8007350:	0758      	lsls	r0, r3, #29
 8007352:	d512      	bpl.n	800737a <__swsetup_r+0x5a>
 8007354:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007356:	b141      	cbz	r1, 800736a <__swsetup_r+0x4a>
 8007358:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800735c:	4299      	cmp	r1, r3
 800735e:	d002      	beq.n	8007366 <__swsetup_r+0x46>
 8007360:	4628      	mov	r0, r5
 8007362:	f000 ff29 	bl	80081b8 <_free_r>
 8007366:	2300      	movs	r3, #0
 8007368:	6363      	str	r3, [r4, #52]	@ 0x34
 800736a:	89a3      	ldrh	r3, [r4, #12]
 800736c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007370:	81a3      	strh	r3, [r4, #12]
 8007372:	2300      	movs	r3, #0
 8007374:	6063      	str	r3, [r4, #4]
 8007376:	6923      	ldr	r3, [r4, #16]
 8007378:	6023      	str	r3, [r4, #0]
 800737a:	89a3      	ldrh	r3, [r4, #12]
 800737c:	f043 0308 	orr.w	r3, r3, #8
 8007380:	81a3      	strh	r3, [r4, #12]
 8007382:	6923      	ldr	r3, [r4, #16]
 8007384:	b94b      	cbnz	r3, 800739a <__swsetup_r+0x7a>
 8007386:	89a3      	ldrh	r3, [r4, #12]
 8007388:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800738c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007390:	d003      	beq.n	800739a <__swsetup_r+0x7a>
 8007392:	4621      	mov	r1, r4
 8007394:	4628      	mov	r0, r5
 8007396:	f002 fd6f 	bl	8009e78 <__smakebuf_r>
 800739a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800739e:	f013 0201 	ands.w	r2, r3, #1
 80073a2:	d00a      	beq.n	80073ba <__swsetup_r+0x9a>
 80073a4:	2200      	movs	r2, #0
 80073a6:	60a2      	str	r2, [r4, #8]
 80073a8:	6962      	ldr	r2, [r4, #20]
 80073aa:	4252      	negs	r2, r2
 80073ac:	61a2      	str	r2, [r4, #24]
 80073ae:	6922      	ldr	r2, [r4, #16]
 80073b0:	b942      	cbnz	r2, 80073c4 <__swsetup_r+0xa4>
 80073b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80073b6:	d1c5      	bne.n	8007344 <__swsetup_r+0x24>
 80073b8:	bd38      	pop	{r3, r4, r5, pc}
 80073ba:	0799      	lsls	r1, r3, #30
 80073bc:	bf58      	it	pl
 80073be:	6962      	ldrpl	r2, [r4, #20]
 80073c0:	60a2      	str	r2, [r4, #8]
 80073c2:	e7f4      	b.n	80073ae <__swsetup_r+0x8e>
 80073c4:	2000      	movs	r0, #0
 80073c6:	e7f7      	b.n	80073b8 <__swsetup_r+0x98>
 80073c8:	20000030 	.word	0x20000030

080073cc <memset>:
 80073cc:	4402      	add	r2, r0
 80073ce:	4603      	mov	r3, r0
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d100      	bne.n	80073d6 <memset+0xa>
 80073d4:	4770      	bx	lr
 80073d6:	f803 1b01 	strb.w	r1, [r3], #1
 80073da:	e7f9      	b.n	80073d0 <memset+0x4>

080073dc <strncat>:
 80073dc:	b530      	push	{r4, r5, lr}
 80073de:	4604      	mov	r4, r0
 80073e0:	7825      	ldrb	r5, [r4, #0]
 80073e2:	4623      	mov	r3, r4
 80073e4:	3401      	adds	r4, #1
 80073e6:	2d00      	cmp	r5, #0
 80073e8:	d1fa      	bne.n	80073e0 <strncat+0x4>
 80073ea:	3a01      	subs	r2, #1
 80073ec:	d304      	bcc.n	80073f8 <strncat+0x1c>
 80073ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073f2:	f803 4b01 	strb.w	r4, [r3], #1
 80073f6:	b904      	cbnz	r4, 80073fa <strncat+0x1e>
 80073f8:	bd30      	pop	{r4, r5, pc}
 80073fa:	2a00      	cmp	r2, #0
 80073fc:	d1f5      	bne.n	80073ea <strncat+0xe>
 80073fe:	701a      	strb	r2, [r3, #0]
 8007400:	e7f3      	b.n	80073ea <strncat+0xe>
	...

08007404 <_localeconv_r>:
 8007404:	4800      	ldr	r0, [pc, #0]	@ (8007408 <_localeconv_r+0x4>)
 8007406:	4770      	bx	lr
 8007408:	20000170 	.word	0x20000170

0800740c <_close_r>:
 800740c:	b538      	push	{r3, r4, r5, lr}
 800740e:	4d06      	ldr	r5, [pc, #24]	@ (8007428 <_close_r+0x1c>)
 8007410:	2300      	movs	r3, #0
 8007412:	4604      	mov	r4, r0
 8007414:	4608      	mov	r0, r1
 8007416:	602b      	str	r3, [r5, #0]
 8007418:	f7fa fd2e 	bl	8001e78 <_close>
 800741c:	1c43      	adds	r3, r0, #1
 800741e:	d102      	bne.n	8007426 <_close_r+0x1a>
 8007420:	682b      	ldr	r3, [r5, #0]
 8007422:	b103      	cbz	r3, 8007426 <_close_r+0x1a>
 8007424:	6023      	str	r3, [r4, #0]
 8007426:	bd38      	pop	{r3, r4, r5, pc}
 8007428:	20000640 	.word	0x20000640

0800742c <_lseek_r>:
 800742c:	b538      	push	{r3, r4, r5, lr}
 800742e:	4d07      	ldr	r5, [pc, #28]	@ (800744c <_lseek_r+0x20>)
 8007430:	4604      	mov	r4, r0
 8007432:	4608      	mov	r0, r1
 8007434:	4611      	mov	r1, r2
 8007436:	2200      	movs	r2, #0
 8007438:	602a      	str	r2, [r5, #0]
 800743a:	461a      	mov	r2, r3
 800743c:	f7fa fd43 	bl	8001ec6 <_lseek>
 8007440:	1c43      	adds	r3, r0, #1
 8007442:	d102      	bne.n	800744a <_lseek_r+0x1e>
 8007444:	682b      	ldr	r3, [r5, #0]
 8007446:	b103      	cbz	r3, 800744a <_lseek_r+0x1e>
 8007448:	6023      	str	r3, [r4, #0]
 800744a:	bd38      	pop	{r3, r4, r5, pc}
 800744c:	20000640 	.word	0x20000640

08007450 <_read_r>:
 8007450:	b538      	push	{r3, r4, r5, lr}
 8007452:	4d07      	ldr	r5, [pc, #28]	@ (8007470 <_read_r+0x20>)
 8007454:	4604      	mov	r4, r0
 8007456:	4608      	mov	r0, r1
 8007458:	4611      	mov	r1, r2
 800745a:	2200      	movs	r2, #0
 800745c:	602a      	str	r2, [r5, #0]
 800745e:	461a      	mov	r2, r3
 8007460:	f7fa fcd1 	bl	8001e06 <_read>
 8007464:	1c43      	adds	r3, r0, #1
 8007466:	d102      	bne.n	800746e <_read_r+0x1e>
 8007468:	682b      	ldr	r3, [r5, #0]
 800746a:	b103      	cbz	r3, 800746e <_read_r+0x1e>
 800746c:	6023      	str	r3, [r4, #0]
 800746e:	bd38      	pop	{r3, r4, r5, pc}
 8007470:	20000640 	.word	0x20000640

08007474 <_write_r>:
 8007474:	b538      	push	{r3, r4, r5, lr}
 8007476:	4d07      	ldr	r5, [pc, #28]	@ (8007494 <_write_r+0x20>)
 8007478:	4604      	mov	r4, r0
 800747a:	4608      	mov	r0, r1
 800747c:	4611      	mov	r1, r2
 800747e:	2200      	movs	r2, #0
 8007480:	602a      	str	r2, [r5, #0]
 8007482:	461a      	mov	r2, r3
 8007484:	f7fa fcdc 	bl	8001e40 <_write>
 8007488:	1c43      	adds	r3, r0, #1
 800748a:	d102      	bne.n	8007492 <_write_r+0x1e>
 800748c:	682b      	ldr	r3, [r5, #0]
 800748e:	b103      	cbz	r3, 8007492 <_write_r+0x1e>
 8007490:	6023      	str	r3, [r4, #0]
 8007492:	bd38      	pop	{r3, r4, r5, pc}
 8007494:	20000640 	.word	0x20000640

08007498 <__errno>:
 8007498:	4b01      	ldr	r3, [pc, #4]	@ (80074a0 <__errno+0x8>)
 800749a:	6818      	ldr	r0, [r3, #0]
 800749c:	4770      	bx	lr
 800749e:	bf00      	nop
 80074a0:	20000030 	.word	0x20000030

080074a4 <__libc_init_array>:
 80074a4:	b570      	push	{r4, r5, r6, lr}
 80074a6:	4d0d      	ldr	r5, [pc, #52]	@ (80074dc <__libc_init_array+0x38>)
 80074a8:	4c0d      	ldr	r4, [pc, #52]	@ (80074e0 <__libc_init_array+0x3c>)
 80074aa:	1b64      	subs	r4, r4, r5
 80074ac:	10a4      	asrs	r4, r4, #2
 80074ae:	2600      	movs	r6, #0
 80074b0:	42a6      	cmp	r6, r4
 80074b2:	d109      	bne.n	80074c8 <__libc_init_array+0x24>
 80074b4:	4d0b      	ldr	r5, [pc, #44]	@ (80074e4 <__libc_init_array+0x40>)
 80074b6:	4c0c      	ldr	r4, [pc, #48]	@ (80074e8 <__libc_init_array+0x44>)
 80074b8:	f003 fb14 	bl	800aae4 <_init>
 80074bc:	1b64      	subs	r4, r4, r5
 80074be:	10a4      	asrs	r4, r4, #2
 80074c0:	2600      	movs	r6, #0
 80074c2:	42a6      	cmp	r6, r4
 80074c4:	d105      	bne.n	80074d2 <__libc_init_array+0x2e>
 80074c6:	bd70      	pop	{r4, r5, r6, pc}
 80074c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80074cc:	4798      	blx	r3
 80074ce:	3601      	adds	r6, #1
 80074d0:	e7ee      	b.n	80074b0 <__libc_init_array+0xc>
 80074d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80074d6:	4798      	blx	r3
 80074d8:	3601      	adds	r6, #1
 80074da:	e7f2      	b.n	80074c2 <__libc_init_array+0x1e>
 80074dc:	0801a2c0 	.word	0x0801a2c0
 80074e0:	0801a2c0 	.word	0x0801a2c0
 80074e4:	0801a2c0 	.word	0x0801a2c0
 80074e8:	0801a2c4 	.word	0x0801a2c4

080074ec <__retarget_lock_init_recursive>:
 80074ec:	4770      	bx	lr

080074ee <__retarget_lock_acquire_recursive>:
 80074ee:	4770      	bx	lr

080074f0 <__retarget_lock_release_recursive>:
 80074f0:	4770      	bx	lr

080074f2 <memcpy>:
 80074f2:	440a      	add	r2, r1
 80074f4:	4291      	cmp	r1, r2
 80074f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80074fa:	d100      	bne.n	80074fe <memcpy+0xc>
 80074fc:	4770      	bx	lr
 80074fe:	b510      	push	{r4, lr}
 8007500:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007504:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007508:	4291      	cmp	r1, r2
 800750a:	d1f9      	bne.n	8007500 <memcpy+0xe>
 800750c:	bd10      	pop	{r4, pc}
	...

08007510 <nanf>:
 8007510:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007518 <nanf+0x8>
 8007514:	4770      	bx	lr
 8007516:	bf00      	nop
 8007518:	7fc00000 	.word	0x7fc00000

0800751c <quorem>:
 800751c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007520:	6903      	ldr	r3, [r0, #16]
 8007522:	690c      	ldr	r4, [r1, #16]
 8007524:	42a3      	cmp	r3, r4
 8007526:	4607      	mov	r7, r0
 8007528:	db7e      	blt.n	8007628 <quorem+0x10c>
 800752a:	3c01      	subs	r4, #1
 800752c:	f101 0814 	add.w	r8, r1, #20
 8007530:	00a3      	lsls	r3, r4, #2
 8007532:	f100 0514 	add.w	r5, r0, #20
 8007536:	9300      	str	r3, [sp, #0]
 8007538:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800753c:	9301      	str	r3, [sp, #4]
 800753e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007542:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007546:	3301      	adds	r3, #1
 8007548:	429a      	cmp	r2, r3
 800754a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800754e:	fbb2 f6f3 	udiv	r6, r2, r3
 8007552:	d32e      	bcc.n	80075b2 <quorem+0x96>
 8007554:	f04f 0a00 	mov.w	sl, #0
 8007558:	46c4      	mov	ip, r8
 800755a:	46ae      	mov	lr, r5
 800755c:	46d3      	mov	fp, sl
 800755e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007562:	b298      	uxth	r0, r3
 8007564:	fb06 a000 	mla	r0, r6, r0, sl
 8007568:	0c02      	lsrs	r2, r0, #16
 800756a:	0c1b      	lsrs	r3, r3, #16
 800756c:	fb06 2303 	mla	r3, r6, r3, r2
 8007570:	f8de 2000 	ldr.w	r2, [lr]
 8007574:	b280      	uxth	r0, r0
 8007576:	b292      	uxth	r2, r2
 8007578:	1a12      	subs	r2, r2, r0
 800757a:	445a      	add	r2, fp
 800757c:	f8de 0000 	ldr.w	r0, [lr]
 8007580:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007584:	b29b      	uxth	r3, r3
 8007586:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800758a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800758e:	b292      	uxth	r2, r2
 8007590:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007594:	45e1      	cmp	r9, ip
 8007596:	f84e 2b04 	str.w	r2, [lr], #4
 800759a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800759e:	d2de      	bcs.n	800755e <quorem+0x42>
 80075a0:	9b00      	ldr	r3, [sp, #0]
 80075a2:	58eb      	ldr	r3, [r5, r3]
 80075a4:	b92b      	cbnz	r3, 80075b2 <quorem+0x96>
 80075a6:	9b01      	ldr	r3, [sp, #4]
 80075a8:	3b04      	subs	r3, #4
 80075aa:	429d      	cmp	r5, r3
 80075ac:	461a      	mov	r2, r3
 80075ae:	d32f      	bcc.n	8007610 <quorem+0xf4>
 80075b0:	613c      	str	r4, [r7, #16]
 80075b2:	4638      	mov	r0, r7
 80075b4:	f001 f9c4 	bl	8008940 <__mcmp>
 80075b8:	2800      	cmp	r0, #0
 80075ba:	db25      	blt.n	8007608 <quorem+0xec>
 80075bc:	4629      	mov	r1, r5
 80075be:	2000      	movs	r0, #0
 80075c0:	f858 2b04 	ldr.w	r2, [r8], #4
 80075c4:	f8d1 c000 	ldr.w	ip, [r1]
 80075c8:	fa1f fe82 	uxth.w	lr, r2
 80075cc:	fa1f f38c 	uxth.w	r3, ip
 80075d0:	eba3 030e 	sub.w	r3, r3, lr
 80075d4:	4403      	add	r3, r0
 80075d6:	0c12      	lsrs	r2, r2, #16
 80075d8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80075dc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80075e6:	45c1      	cmp	r9, r8
 80075e8:	f841 3b04 	str.w	r3, [r1], #4
 80075ec:	ea4f 4022 	mov.w	r0, r2, asr #16
 80075f0:	d2e6      	bcs.n	80075c0 <quorem+0xa4>
 80075f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80075f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80075fa:	b922      	cbnz	r2, 8007606 <quorem+0xea>
 80075fc:	3b04      	subs	r3, #4
 80075fe:	429d      	cmp	r5, r3
 8007600:	461a      	mov	r2, r3
 8007602:	d30b      	bcc.n	800761c <quorem+0x100>
 8007604:	613c      	str	r4, [r7, #16]
 8007606:	3601      	adds	r6, #1
 8007608:	4630      	mov	r0, r6
 800760a:	b003      	add	sp, #12
 800760c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007610:	6812      	ldr	r2, [r2, #0]
 8007612:	3b04      	subs	r3, #4
 8007614:	2a00      	cmp	r2, #0
 8007616:	d1cb      	bne.n	80075b0 <quorem+0x94>
 8007618:	3c01      	subs	r4, #1
 800761a:	e7c6      	b.n	80075aa <quorem+0x8e>
 800761c:	6812      	ldr	r2, [r2, #0]
 800761e:	3b04      	subs	r3, #4
 8007620:	2a00      	cmp	r2, #0
 8007622:	d1ef      	bne.n	8007604 <quorem+0xe8>
 8007624:	3c01      	subs	r4, #1
 8007626:	e7ea      	b.n	80075fe <quorem+0xe2>
 8007628:	2000      	movs	r0, #0
 800762a:	e7ee      	b.n	800760a <quorem+0xee>
 800762c:	0000      	movs	r0, r0
	...

08007630 <_dtoa_r>:
 8007630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007634:	69c7      	ldr	r7, [r0, #28]
 8007636:	b099      	sub	sp, #100	@ 0x64
 8007638:	ed8d 0b02 	vstr	d0, [sp, #8]
 800763c:	ec55 4b10 	vmov	r4, r5, d0
 8007640:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007642:	9109      	str	r1, [sp, #36]	@ 0x24
 8007644:	4683      	mov	fp, r0
 8007646:	920e      	str	r2, [sp, #56]	@ 0x38
 8007648:	9313      	str	r3, [sp, #76]	@ 0x4c
 800764a:	b97f      	cbnz	r7, 800766c <_dtoa_r+0x3c>
 800764c:	2010      	movs	r0, #16
 800764e:	f000 fdfd 	bl	800824c <malloc>
 8007652:	4602      	mov	r2, r0
 8007654:	f8cb 001c 	str.w	r0, [fp, #28]
 8007658:	b920      	cbnz	r0, 8007664 <_dtoa_r+0x34>
 800765a:	4ba7      	ldr	r3, [pc, #668]	@ (80078f8 <_dtoa_r+0x2c8>)
 800765c:	21ef      	movs	r1, #239	@ 0xef
 800765e:	48a7      	ldr	r0, [pc, #668]	@ (80078fc <_dtoa_r+0x2cc>)
 8007660:	f002 fce2 	bl	800a028 <__assert_func>
 8007664:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007668:	6007      	str	r7, [r0, #0]
 800766a:	60c7      	str	r7, [r0, #12]
 800766c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007670:	6819      	ldr	r1, [r3, #0]
 8007672:	b159      	cbz	r1, 800768c <_dtoa_r+0x5c>
 8007674:	685a      	ldr	r2, [r3, #4]
 8007676:	604a      	str	r2, [r1, #4]
 8007678:	2301      	movs	r3, #1
 800767a:	4093      	lsls	r3, r2
 800767c:	608b      	str	r3, [r1, #8]
 800767e:	4658      	mov	r0, fp
 8007680:	f000 feda 	bl	8008438 <_Bfree>
 8007684:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007688:	2200      	movs	r2, #0
 800768a:	601a      	str	r2, [r3, #0]
 800768c:	1e2b      	subs	r3, r5, #0
 800768e:	bfb9      	ittee	lt
 8007690:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007694:	9303      	strlt	r3, [sp, #12]
 8007696:	2300      	movge	r3, #0
 8007698:	6033      	strge	r3, [r6, #0]
 800769a:	9f03      	ldr	r7, [sp, #12]
 800769c:	4b98      	ldr	r3, [pc, #608]	@ (8007900 <_dtoa_r+0x2d0>)
 800769e:	bfbc      	itt	lt
 80076a0:	2201      	movlt	r2, #1
 80076a2:	6032      	strlt	r2, [r6, #0]
 80076a4:	43bb      	bics	r3, r7
 80076a6:	d112      	bne.n	80076ce <_dtoa_r+0x9e>
 80076a8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80076aa:	f242 730f 	movw	r3, #9999	@ 0x270f
 80076ae:	6013      	str	r3, [r2, #0]
 80076b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80076b4:	4323      	orrs	r3, r4
 80076b6:	f000 854d 	beq.w	8008154 <_dtoa_r+0xb24>
 80076ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80076bc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007914 <_dtoa_r+0x2e4>
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	f000 854f 	beq.w	8008164 <_dtoa_r+0xb34>
 80076c6:	f10a 0303 	add.w	r3, sl, #3
 80076ca:	f000 bd49 	b.w	8008160 <_dtoa_r+0xb30>
 80076ce:	ed9d 7b02 	vldr	d7, [sp, #8]
 80076d2:	2200      	movs	r2, #0
 80076d4:	ec51 0b17 	vmov	r0, r1, d7
 80076d8:	2300      	movs	r3, #0
 80076da:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80076de:	f7f9 f9f3 	bl	8000ac8 <__aeabi_dcmpeq>
 80076e2:	4680      	mov	r8, r0
 80076e4:	b158      	cbz	r0, 80076fe <_dtoa_r+0xce>
 80076e6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80076e8:	2301      	movs	r3, #1
 80076ea:	6013      	str	r3, [r2, #0]
 80076ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80076ee:	b113      	cbz	r3, 80076f6 <_dtoa_r+0xc6>
 80076f0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80076f2:	4b84      	ldr	r3, [pc, #528]	@ (8007904 <_dtoa_r+0x2d4>)
 80076f4:	6013      	str	r3, [r2, #0]
 80076f6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007918 <_dtoa_r+0x2e8>
 80076fa:	f000 bd33 	b.w	8008164 <_dtoa_r+0xb34>
 80076fe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007702:	aa16      	add	r2, sp, #88	@ 0x58
 8007704:	a917      	add	r1, sp, #92	@ 0x5c
 8007706:	4658      	mov	r0, fp
 8007708:	f001 fa3a 	bl	8008b80 <__d2b>
 800770c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007710:	4681      	mov	r9, r0
 8007712:	2e00      	cmp	r6, #0
 8007714:	d077      	beq.n	8007806 <_dtoa_r+0x1d6>
 8007716:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007718:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800771c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007720:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007724:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007728:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800772c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007730:	4619      	mov	r1, r3
 8007732:	2200      	movs	r2, #0
 8007734:	4b74      	ldr	r3, [pc, #464]	@ (8007908 <_dtoa_r+0x2d8>)
 8007736:	f7f8 fda7 	bl	8000288 <__aeabi_dsub>
 800773a:	a369      	add	r3, pc, #420	@ (adr r3, 80078e0 <_dtoa_r+0x2b0>)
 800773c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007740:	f7f8 ff5a 	bl	80005f8 <__aeabi_dmul>
 8007744:	a368      	add	r3, pc, #416	@ (adr r3, 80078e8 <_dtoa_r+0x2b8>)
 8007746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800774a:	f7f8 fd9f 	bl	800028c <__adddf3>
 800774e:	4604      	mov	r4, r0
 8007750:	4630      	mov	r0, r6
 8007752:	460d      	mov	r5, r1
 8007754:	f7f8 fee6 	bl	8000524 <__aeabi_i2d>
 8007758:	a365      	add	r3, pc, #404	@ (adr r3, 80078f0 <_dtoa_r+0x2c0>)
 800775a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800775e:	f7f8 ff4b 	bl	80005f8 <__aeabi_dmul>
 8007762:	4602      	mov	r2, r0
 8007764:	460b      	mov	r3, r1
 8007766:	4620      	mov	r0, r4
 8007768:	4629      	mov	r1, r5
 800776a:	f7f8 fd8f 	bl	800028c <__adddf3>
 800776e:	4604      	mov	r4, r0
 8007770:	460d      	mov	r5, r1
 8007772:	f7f9 f9f1 	bl	8000b58 <__aeabi_d2iz>
 8007776:	2200      	movs	r2, #0
 8007778:	4607      	mov	r7, r0
 800777a:	2300      	movs	r3, #0
 800777c:	4620      	mov	r0, r4
 800777e:	4629      	mov	r1, r5
 8007780:	f7f9 f9ac 	bl	8000adc <__aeabi_dcmplt>
 8007784:	b140      	cbz	r0, 8007798 <_dtoa_r+0x168>
 8007786:	4638      	mov	r0, r7
 8007788:	f7f8 fecc 	bl	8000524 <__aeabi_i2d>
 800778c:	4622      	mov	r2, r4
 800778e:	462b      	mov	r3, r5
 8007790:	f7f9 f99a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007794:	b900      	cbnz	r0, 8007798 <_dtoa_r+0x168>
 8007796:	3f01      	subs	r7, #1
 8007798:	2f16      	cmp	r7, #22
 800779a:	d851      	bhi.n	8007840 <_dtoa_r+0x210>
 800779c:	4b5b      	ldr	r3, [pc, #364]	@ (800790c <_dtoa_r+0x2dc>)
 800779e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80077a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80077aa:	f7f9 f997 	bl	8000adc <__aeabi_dcmplt>
 80077ae:	2800      	cmp	r0, #0
 80077b0:	d048      	beq.n	8007844 <_dtoa_r+0x214>
 80077b2:	3f01      	subs	r7, #1
 80077b4:	2300      	movs	r3, #0
 80077b6:	9312      	str	r3, [sp, #72]	@ 0x48
 80077b8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80077ba:	1b9b      	subs	r3, r3, r6
 80077bc:	1e5a      	subs	r2, r3, #1
 80077be:	bf44      	itt	mi
 80077c0:	f1c3 0801 	rsbmi	r8, r3, #1
 80077c4:	2300      	movmi	r3, #0
 80077c6:	9208      	str	r2, [sp, #32]
 80077c8:	bf54      	ite	pl
 80077ca:	f04f 0800 	movpl.w	r8, #0
 80077ce:	9308      	strmi	r3, [sp, #32]
 80077d0:	2f00      	cmp	r7, #0
 80077d2:	db39      	blt.n	8007848 <_dtoa_r+0x218>
 80077d4:	9b08      	ldr	r3, [sp, #32]
 80077d6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80077d8:	443b      	add	r3, r7
 80077da:	9308      	str	r3, [sp, #32]
 80077dc:	2300      	movs	r3, #0
 80077de:	930a      	str	r3, [sp, #40]	@ 0x28
 80077e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077e2:	2b09      	cmp	r3, #9
 80077e4:	d864      	bhi.n	80078b0 <_dtoa_r+0x280>
 80077e6:	2b05      	cmp	r3, #5
 80077e8:	bfc4      	itt	gt
 80077ea:	3b04      	subgt	r3, #4
 80077ec:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80077ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077f0:	f1a3 0302 	sub.w	r3, r3, #2
 80077f4:	bfcc      	ite	gt
 80077f6:	2400      	movgt	r4, #0
 80077f8:	2401      	movle	r4, #1
 80077fa:	2b03      	cmp	r3, #3
 80077fc:	d863      	bhi.n	80078c6 <_dtoa_r+0x296>
 80077fe:	e8df f003 	tbb	[pc, r3]
 8007802:	372a      	.short	0x372a
 8007804:	5535      	.short	0x5535
 8007806:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800780a:	441e      	add	r6, r3
 800780c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007810:	2b20      	cmp	r3, #32
 8007812:	bfc1      	itttt	gt
 8007814:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007818:	409f      	lslgt	r7, r3
 800781a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800781e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007822:	bfd6      	itet	le
 8007824:	f1c3 0320 	rsble	r3, r3, #32
 8007828:	ea47 0003 	orrgt.w	r0, r7, r3
 800782c:	fa04 f003 	lslle.w	r0, r4, r3
 8007830:	f7f8 fe68 	bl	8000504 <__aeabi_ui2d>
 8007834:	2201      	movs	r2, #1
 8007836:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800783a:	3e01      	subs	r6, #1
 800783c:	9214      	str	r2, [sp, #80]	@ 0x50
 800783e:	e777      	b.n	8007730 <_dtoa_r+0x100>
 8007840:	2301      	movs	r3, #1
 8007842:	e7b8      	b.n	80077b6 <_dtoa_r+0x186>
 8007844:	9012      	str	r0, [sp, #72]	@ 0x48
 8007846:	e7b7      	b.n	80077b8 <_dtoa_r+0x188>
 8007848:	427b      	negs	r3, r7
 800784a:	930a      	str	r3, [sp, #40]	@ 0x28
 800784c:	2300      	movs	r3, #0
 800784e:	eba8 0807 	sub.w	r8, r8, r7
 8007852:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007854:	e7c4      	b.n	80077e0 <_dtoa_r+0x1b0>
 8007856:	2300      	movs	r3, #0
 8007858:	930b      	str	r3, [sp, #44]	@ 0x2c
 800785a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800785c:	2b00      	cmp	r3, #0
 800785e:	dc35      	bgt.n	80078cc <_dtoa_r+0x29c>
 8007860:	2301      	movs	r3, #1
 8007862:	9300      	str	r3, [sp, #0]
 8007864:	9307      	str	r3, [sp, #28]
 8007866:	461a      	mov	r2, r3
 8007868:	920e      	str	r2, [sp, #56]	@ 0x38
 800786a:	e00b      	b.n	8007884 <_dtoa_r+0x254>
 800786c:	2301      	movs	r3, #1
 800786e:	e7f3      	b.n	8007858 <_dtoa_r+0x228>
 8007870:	2300      	movs	r3, #0
 8007872:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007874:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007876:	18fb      	adds	r3, r7, r3
 8007878:	9300      	str	r3, [sp, #0]
 800787a:	3301      	adds	r3, #1
 800787c:	2b01      	cmp	r3, #1
 800787e:	9307      	str	r3, [sp, #28]
 8007880:	bfb8      	it	lt
 8007882:	2301      	movlt	r3, #1
 8007884:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007888:	2100      	movs	r1, #0
 800788a:	2204      	movs	r2, #4
 800788c:	f102 0514 	add.w	r5, r2, #20
 8007890:	429d      	cmp	r5, r3
 8007892:	d91f      	bls.n	80078d4 <_dtoa_r+0x2a4>
 8007894:	6041      	str	r1, [r0, #4]
 8007896:	4658      	mov	r0, fp
 8007898:	f000 fd8e 	bl	80083b8 <_Balloc>
 800789c:	4682      	mov	sl, r0
 800789e:	2800      	cmp	r0, #0
 80078a0:	d13c      	bne.n	800791c <_dtoa_r+0x2ec>
 80078a2:	4b1b      	ldr	r3, [pc, #108]	@ (8007910 <_dtoa_r+0x2e0>)
 80078a4:	4602      	mov	r2, r0
 80078a6:	f240 11af 	movw	r1, #431	@ 0x1af
 80078aa:	e6d8      	b.n	800765e <_dtoa_r+0x2e>
 80078ac:	2301      	movs	r3, #1
 80078ae:	e7e0      	b.n	8007872 <_dtoa_r+0x242>
 80078b0:	2401      	movs	r4, #1
 80078b2:	2300      	movs	r3, #0
 80078b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80078b6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80078b8:	f04f 33ff 	mov.w	r3, #4294967295
 80078bc:	9300      	str	r3, [sp, #0]
 80078be:	9307      	str	r3, [sp, #28]
 80078c0:	2200      	movs	r2, #0
 80078c2:	2312      	movs	r3, #18
 80078c4:	e7d0      	b.n	8007868 <_dtoa_r+0x238>
 80078c6:	2301      	movs	r3, #1
 80078c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80078ca:	e7f5      	b.n	80078b8 <_dtoa_r+0x288>
 80078cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80078ce:	9300      	str	r3, [sp, #0]
 80078d0:	9307      	str	r3, [sp, #28]
 80078d2:	e7d7      	b.n	8007884 <_dtoa_r+0x254>
 80078d4:	3101      	adds	r1, #1
 80078d6:	0052      	lsls	r2, r2, #1
 80078d8:	e7d8      	b.n	800788c <_dtoa_r+0x25c>
 80078da:	bf00      	nop
 80078dc:	f3af 8000 	nop.w
 80078e0:	636f4361 	.word	0x636f4361
 80078e4:	3fd287a7 	.word	0x3fd287a7
 80078e8:	8b60c8b3 	.word	0x8b60c8b3
 80078ec:	3fc68a28 	.word	0x3fc68a28
 80078f0:	509f79fb 	.word	0x509f79fb
 80078f4:	3fd34413 	.word	0x3fd34413
 80078f8:	08019ed2 	.word	0x08019ed2
 80078fc:	08019ee9 	.word	0x08019ee9
 8007900:	7ff00000 	.word	0x7ff00000
 8007904:	08019e9d 	.word	0x08019e9d
 8007908:	3ff80000 	.word	0x3ff80000
 800790c:	08019fe0 	.word	0x08019fe0
 8007910:	08019f41 	.word	0x08019f41
 8007914:	08019ece 	.word	0x08019ece
 8007918:	08019e9c 	.word	0x08019e9c
 800791c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007920:	6018      	str	r0, [r3, #0]
 8007922:	9b07      	ldr	r3, [sp, #28]
 8007924:	2b0e      	cmp	r3, #14
 8007926:	f200 80a4 	bhi.w	8007a72 <_dtoa_r+0x442>
 800792a:	2c00      	cmp	r4, #0
 800792c:	f000 80a1 	beq.w	8007a72 <_dtoa_r+0x442>
 8007930:	2f00      	cmp	r7, #0
 8007932:	dd33      	ble.n	800799c <_dtoa_r+0x36c>
 8007934:	4bad      	ldr	r3, [pc, #692]	@ (8007bec <_dtoa_r+0x5bc>)
 8007936:	f007 020f 	and.w	r2, r7, #15
 800793a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800793e:	ed93 7b00 	vldr	d7, [r3]
 8007942:	05f8      	lsls	r0, r7, #23
 8007944:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007948:	ea4f 1427 	mov.w	r4, r7, asr #4
 800794c:	d516      	bpl.n	800797c <_dtoa_r+0x34c>
 800794e:	4ba8      	ldr	r3, [pc, #672]	@ (8007bf0 <_dtoa_r+0x5c0>)
 8007950:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007954:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007958:	f7f8 ff78 	bl	800084c <__aeabi_ddiv>
 800795c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007960:	f004 040f 	and.w	r4, r4, #15
 8007964:	2603      	movs	r6, #3
 8007966:	4da2      	ldr	r5, [pc, #648]	@ (8007bf0 <_dtoa_r+0x5c0>)
 8007968:	b954      	cbnz	r4, 8007980 <_dtoa_r+0x350>
 800796a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800796e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007972:	f7f8 ff6b 	bl	800084c <__aeabi_ddiv>
 8007976:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800797a:	e028      	b.n	80079ce <_dtoa_r+0x39e>
 800797c:	2602      	movs	r6, #2
 800797e:	e7f2      	b.n	8007966 <_dtoa_r+0x336>
 8007980:	07e1      	lsls	r1, r4, #31
 8007982:	d508      	bpl.n	8007996 <_dtoa_r+0x366>
 8007984:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007988:	e9d5 2300 	ldrd	r2, r3, [r5]
 800798c:	f7f8 fe34 	bl	80005f8 <__aeabi_dmul>
 8007990:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007994:	3601      	adds	r6, #1
 8007996:	1064      	asrs	r4, r4, #1
 8007998:	3508      	adds	r5, #8
 800799a:	e7e5      	b.n	8007968 <_dtoa_r+0x338>
 800799c:	f000 80d2 	beq.w	8007b44 <_dtoa_r+0x514>
 80079a0:	427c      	negs	r4, r7
 80079a2:	4b92      	ldr	r3, [pc, #584]	@ (8007bec <_dtoa_r+0x5bc>)
 80079a4:	4d92      	ldr	r5, [pc, #584]	@ (8007bf0 <_dtoa_r+0x5c0>)
 80079a6:	f004 020f 	and.w	r2, r4, #15
 80079aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80079ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80079b6:	f7f8 fe1f 	bl	80005f8 <__aeabi_dmul>
 80079ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80079be:	1124      	asrs	r4, r4, #4
 80079c0:	2300      	movs	r3, #0
 80079c2:	2602      	movs	r6, #2
 80079c4:	2c00      	cmp	r4, #0
 80079c6:	f040 80b2 	bne.w	8007b2e <_dtoa_r+0x4fe>
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d1d3      	bne.n	8007976 <_dtoa_r+0x346>
 80079ce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80079d0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	f000 80b7 	beq.w	8007b48 <_dtoa_r+0x518>
 80079da:	4b86      	ldr	r3, [pc, #536]	@ (8007bf4 <_dtoa_r+0x5c4>)
 80079dc:	2200      	movs	r2, #0
 80079de:	4620      	mov	r0, r4
 80079e0:	4629      	mov	r1, r5
 80079e2:	f7f9 f87b 	bl	8000adc <__aeabi_dcmplt>
 80079e6:	2800      	cmp	r0, #0
 80079e8:	f000 80ae 	beq.w	8007b48 <_dtoa_r+0x518>
 80079ec:	9b07      	ldr	r3, [sp, #28]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	f000 80aa 	beq.w	8007b48 <_dtoa_r+0x518>
 80079f4:	9b00      	ldr	r3, [sp, #0]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	dd37      	ble.n	8007a6a <_dtoa_r+0x43a>
 80079fa:	1e7b      	subs	r3, r7, #1
 80079fc:	9304      	str	r3, [sp, #16]
 80079fe:	4620      	mov	r0, r4
 8007a00:	4b7d      	ldr	r3, [pc, #500]	@ (8007bf8 <_dtoa_r+0x5c8>)
 8007a02:	2200      	movs	r2, #0
 8007a04:	4629      	mov	r1, r5
 8007a06:	f7f8 fdf7 	bl	80005f8 <__aeabi_dmul>
 8007a0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a0e:	9c00      	ldr	r4, [sp, #0]
 8007a10:	3601      	adds	r6, #1
 8007a12:	4630      	mov	r0, r6
 8007a14:	f7f8 fd86 	bl	8000524 <__aeabi_i2d>
 8007a18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a1c:	f7f8 fdec 	bl	80005f8 <__aeabi_dmul>
 8007a20:	4b76      	ldr	r3, [pc, #472]	@ (8007bfc <_dtoa_r+0x5cc>)
 8007a22:	2200      	movs	r2, #0
 8007a24:	f7f8 fc32 	bl	800028c <__adddf3>
 8007a28:	4605      	mov	r5, r0
 8007a2a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007a2e:	2c00      	cmp	r4, #0
 8007a30:	f040 808d 	bne.w	8007b4e <_dtoa_r+0x51e>
 8007a34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a38:	4b71      	ldr	r3, [pc, #452]	@ (8007c00 <_dtoa_r+0x5d0>)
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	f7f8 fc24 	bl	8000288 <__aeabi_dsub>
 8007a40:	4602      	mov	r2, r0
 8007a42:	460b      	mov	r3, r1
 8007a44:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007a48:	462a      	mov	r2, r5
 8007a4a:	4633      	mov	r3, r6
 8007a4c:	f7f9 f864 	bl	8000b18 <__aeabi_dcmpgt>
 8007a50:	2800      	cmp	r0, #0
 8007a52:	f040 828b 	bne.w	8007f6c <_dtoa_r+0x93c>
 8007a56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a5a:	462a      	mov	r2, r5
 8007a5c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007a60:	f7f9 f83c 	bl	8000adc <__aeabi_dcmplt>
 8007a64:	2800      	cmp	r0, #0
 8007a66:	f040 8128 	bne.w	8007cba <_dtoa_r+0x68a>
 8007a6a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007a6e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007a72:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	f2c0 815a 	blt.w	8007d2e <_dtoa_r+0x6fe>
 8007a7a:	2f0e      	cmp	r7, #14
 8007a7c:	f300 8157 	bgt.w	8007d2e <_dtoa_r+0x6fe>
 8007a80:	4b5a      	ldr	r3, [pc, #360]	@ (8007bec <_dtoa_r+0x5bc>)
 8007a82:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007a86:	ed93 7b00 	vldr	d7, [r3]
 8007a8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	ed8d 7b00 	vstr	d7, [sp]
 8007a92:	da03      	bge.n	8007a9c <_dtoa_r+0x46c>
 8007a94:	9b07      	ldr	r3, [sp, #28]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	f340 8101 	ble.w	8007c9e <_dtoa_r+0x66e>
 8007a9c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007aa0:	4656      	mov	r6, sl
 8007aa2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007aa6:	4620      	mov	r0, r4
 8007aa8:	4629      	mov	r1, r5
 8007aaa:	f7f8 fecf 	bl	800084c <__aeabi_ddiv>
 8007aae:	f7f9 f853 	bl	8000b58 <__aeabi_d2iz>
 8007ab2:	4680      	mov	r8, r0
 8007ab4:	f7f8 fd36 	bl	8000524 <__aeabi_i2d>
 8007ab8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007abc:	f7f8 fd9c 	bl	80005f8 <__aeabi_dmul>
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	460b      	mov	r3, r1
 8007ac4:	4620      	mov	r0, r4
 8007ac6:	4629      	mov	r1, r5
 8007ac8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007acc:	f7f8 fbdc 	bl	8000288 <__aeabi_dsub>
 8007ad0:	f806 4b01 	strb.w	r4, [r6], #1
 8007ad4:	9d07      	ldr	r5, [sp, #28]
 8007ad6:	eba6 040a 	sub.w	r4, r6, sl
 8007ada:	42a5      	cmp	r5, r4
 8007adc:	4602      	mov	r2, r0
 8007ade:	460b      	mov	r3, r1
 8007ae0:	f040 8117 	bne.w	8007d12 <_dtoa_r+0x6e2>
 8007ae4:	f7f8 fbd2 	bl	800028c <__adddf3>
 8007ae8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007aec:	4604      	mov	r4, r0
 8007aee:	460d      	mov	r5, r1
 8007af0:	f7f9 f812 	bl	8000b18 <__aeabi_dcmpgt>
 8007af4:	2800      	cmp	r0, #0
 8007af6:	f040 80f9 	bne.w	8007cec <_dtoa_r+0x6bc>
 8007afa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007afe:	4620      	mov	r0, r4
 8007b00:	4629      	mov	r1, r5
 8007b02:	f7f8 ffe1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b06:	b118      	cbz	r0, 8007b10 <_dtoa_r+0x4e0>
 8007b08:	f018 0f01 	tst.w	r8, #1
 8007b0c:	f040 80ee 	bne.w	8007cec <_dtoa_r+0x6bc>
 8007b10:	4649      	mov	r1, r9
 8007b12:	4658      	mov	r0, fp
 8007b14:	f000 fc90 	bl	8008438 <_Bfree>
 8007b18:	2300      	movs	r3, #0
 8007b1a:	7033      	strb	r3, [r6, #0]
 8007b1c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007b1e:	3701      	adds	r7, #1
 8007b20:	601f      	str	r7, [r3, #0]
 8007b22:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	f000 831d 	beq.w	8008164 <_dtoa_r+0xb34>
 8007b2a:	601e      	str	r6, [r3, #0]
 8007b2c:	e31a      	b.n	8008164 <_dtoa_r+0xb34>
 8007b2e:	07e2      	lsls	r2, r4, #31
 8007b30:	d505      	bpl.n	8007b3e <_dtoa_r+0x50e>
 8007b32:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007b36:	f7f8 fd5f 	bl	80005f8 <__aeabi_dmul>
 8007b3a:	3601      	adds	r6, #1
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	1064      	asrs	r4, r4, #1
 8007b40:	3508      	adds	r5, #8
 8007b42:	e73f      	b.n	80079c4 <_dtoa_r+0x394>
 8007b44:	2602      	movs	r6, #2
 8007b46:	e742      	b.n	80079ce <_dtoa_r+0x39e>
 8007b48:	9c07      	ldr	r4, [sp, #28]
 8007b4a:	9704      	str	r7, [sp, #16]
 8007b4c:	e761      	b.n	8007a12 <_dtoa_r+0x3e2>
 8007b4e:	4b27      	ldr	r3, [pc, #156]	@ (8007bec <_dtoa_r+0x5bc>)
 8007b50:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007b52:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007b56:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007b5a:	4454      	add	r4, sl
 8007b5c:	2900      	cmp	r1, #0
 8007b5e:	d053      	beq.n	8007c08 <_dtoa_r+0x5d8>
 8007b60:	4928      	ldr	r1, [pc, #160]	@ (8007c04 <_dtoa_r+0x5d4>)
 8007b62:	2000      	movs	r0, #0
 8007b64:	f7f8 fe72 	bl	800084c <__aeabi_ddiv>
 8007b68:	4633      	mov	r3, r6
 8007b6a:	462a      	mov	r2, r5
 8007b6c:	f7f8 fb8c 	bl	8000288 <__aeabi_dsub>
 8007b70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007b74:	4656      	mov	r6, sl
 8007b76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b7a:	f7f8 ffed 	bl	8000b58 <__aeabi_d2iz>
 8007b7e:	4605      	mov	r5, r0
 8007b80:	f7f8 fcd0 	bl	8000524 <__aeabi_i2d>
 8007b84:	4602      	mov	r2, r0
 8007b86:	460b      	mov	r3, r1
 8007b88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b8c:	f7f8 fb7c 	bl	8000288 <__aeabi_dsub>
 8007b90:	3530      	adds	r5, #48	@ 0x30
 8007b92:	4602      	mov	r2, r0
 8007b94:	460b      	mov	r3, r1
 8007b96:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007b9a:	f806 5b01 	strb.w	r5, [r6], #1
 8007b9e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007ba2:	f7f8 ff9b 	bl	8000adc <__aeabi_dcmplt>
 8007ba6:	2800      	cmp	r0, #0
 8007ba8:	d171      	bne.n	8007c8e <_dtoa_r+0x65e>
 8007baa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007bae:	4911      	ldr	r1, [pc, #68]	@ (8007bf4 <_dtoa_r+0x5c4>)
 8007bb0:	2000      	movs	r0, #0
 8007bb2:	f7f8 fb69 	bl	8000288 <__aeabi_dsub>
 8007bb6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007bba:	f7f8 ff8f 	bl	8000adc <__aeabi_dcmplt>
 8007bbe:	2800      	cmp	r0, #0
 8007bc0:	f040 8095 	bne.w	8007cee <_dtoa_r+0x6be>
 8007bc4:	42a6      	cmp	r6, r4
 8007bc6:	f43f af50 	beq.w	8007a6a <_dtoa_r+0x43a>
 8007bca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007bce:	4b0a      	ldr	r3, [pc, #40]	@ (8007bf8 <_dtoa_r+0x5c8>)
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	f7f8 fd11 	bl	80005f8 <__aeabi_dmul>
 8007bd6:	4b08      	ldr	r3, [pc, #32]	@ (8007bf8 <_dtoa_r+0x5c8>)
 8007bd8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007bdc:	2200      	movs	r2, #0
 8007bde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007be2:	f7f8 fd09 	bl	80005f8 <__aeabi_dmul>
 8007be6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bea:	e7c4      	b.n	8007b76 <_dtoa_r+0x546>
 8007bec:	08019fe0 	.word	0x08019fe0
 8007bf0:	08019fb8 	.word	0x08019fb8
 8007bf4:	3ff00000 	.word	0x3ff00000
 8007bf8:	40240000 	.word	0x40240000
 8007bfc:	401c0000 	.word	0x401c0000
 8007c00:	40140000 	.word	0x40140000
 8007c04:	3fe00000 	.word	0x3fe00000
 8007c08:	4631      	mov	r1, r6
 8007c0a:	4628      	mov	r0, r5
 8007c0c:	f7f8 fcf4 	bl	80005f8 <__aeabi_dmul>
 8007c10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007c14:	9415      	str	r4, [sp, #84]	@ 0x54
 8007c16:	4656      	mov	r6, sl
 8007c18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c1c:	f7f8 ff9c 	bl	8000b58 <__aeabi_d2iz>
 8007c20:	4605      	mov	r5, r0
 8007c22:	f7f8 fc7f 	bl	8000524 <__aeabi_i2d>
 8007c26:	4602      	mov	r2, r0
 8007c28:	460b      	mov	r3, r1
 8007c2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c2e:	f7f8 fb2b 	bl	8000288 <__aeabi_dsub>
 8007c32:	3530      	adds	r5, #48	@ 0x30
 8007c34:	f806 5b01 	strb.w	r5, [r6], #1
 8007c38:	4602      	mov	r2, r0
 8007c3a:	460b      	mov	r3, r1
 8007c3c:	42a6      	cmp	r6, r4
 8007c3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007c42:	f04f 0200 	mov.w	r2, #0
 8007c46:	d124      	bne.n	8007c92 <_dtoa_r+0x662>
 8007c48:	4bac      	ldr	r3, [pc, #688]	@ (8007efc <_dtoa_r+0x8cc>)
 8007c4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007c4e:	f7f8 fb1d 	bl	800028c <__adddf3>
 8007c52:	4602      	mov	r2, r0
 8007c54:	460b      	mov	r3, r1
 8007c56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c5a:	f7f8 ff5d 	bl	8000b18 <__aeabi_dcmpgt>
 8007c5e:	2800      	cmp	r0, #0
 8007c60:	d145      	bne.n	8007cee <_dtoa_r+0x6be>
 8007c62:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007c66:	49a5      	ldr	r1, [pc, #660]	@ (8007efc <_dtoa_r+0x8cc>)
 8007c68:	2000      	movs	r0, #0
 8007c6a:	f7f8 fb0d 	bl	8000288 <__aeabi_dsub>
 8007c6e:	4602      	mov	r2, r0
 8007c70:	460b      	mov	r3, r1
 8007c72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c76:	f7f8 ff31 	bl	8000adc <__aeabi_dcmplt>
 8007c7a:	2800      	cmp	r0, #0
 8007c7c:	f43f aef5 	beq.w	8007a6a <_dtoa_r+0x43a>
 8007c80:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007c82:	1e73      	subs	r3, r6, #1
 8007c84:	9315      	str	r3, [sp, #84]	@ 0x54
 8007c86:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007c8a:	2b30      	cmp	r3, #48	@ 0x30
 8007c8c:	d0f8      	beq.n	8007c80 <_dtoa_r+0x650>
 8007c8e:	9f04      	ldr	r7, [sp, #16]
 8007c90:	e73e      	b.n	8007b10 <_dtoa_r+0x4e0>
 8007c92:	4b9b      	ldr	r3, [pc, #620]	@ (8007f00 <_dtoa_r+0x8d0>)
 8007c94:	f7f8 fcb0 	bl	80005f8 <__aeabi_dmul>
 8007c98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c9c:	e7bc      	b.n	8007c18 <_dtoa_r+0x5e8>
 8007c9e:	d10c      	bne.n	8007cba <_dtoa_r+0x68a>
 8007ca0:	4b98      	ldr	r3, [pc, #608]	@ (8007f04 <_dtoa_r+0x8d4>)
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ca8:	f7f8 fca6 	bl	80005f8 <__aeabi_dmul>
 8007cac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007cb0:	f7f8 ff28 	bl	8000b04 <__aeabi_dcmpge>
 8007cb4:	2800      	cmp	r0, #0
 8007cb6:	f000 8157 	beq.w	8007f68 <_dtoa_r+0x938>
 8007cba:	2400      	movs	r4, #0
 8007cbc:	4625      	mov	r5, r4
 8007cbe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007cc0:	43db      	mvns	r3, r3
 8007cc2:	9304      	str	r3, [sp, #16]
 8007cc4:	4656      	mov	r6, sl
 8007cc6:	2700      	movs	r7, #0
 8007cc8:	4621      	mov	r1, r4
 8007cca:	4658      	mov	r0, fp
 8007ccc:	f000 fbb4 	bl	8008438 <_Bfree>
 8007cd0:	2d00      	cmp	r5, #0
 8007cd2:	d0dc      	beq.n	8007c8e <_dtoa_r+0x65e>
 8007cd4:	b12f      	cbz	r7, 8007ce2 <_dtoa_r+0x6b2>
 8007cd6:	42af      	cmp	r7, r5
 8007cd8:	d003      	beq.n	8007ce2 <_dtoa_r+0x6b2>
 8007cda:	4639      	mov	r1, r7
 8007cdc:	4658      	mov	r0, fp
 8007cde:	f000 fbab 	bl	8008438 <_Bfree>
 8007ce2:	4629      	mov	r1, r5
 8007ce4:	4658      	mov	r0, fp
 8007ce6:	f000 fba7 	bl	8008438 <_Bfree>
 8007cea:	e7d0      	b.n	8007c8e <_dtoa_r+0x65e>
 8007cec:	9704      	str	r7, [sp, #16]
 8007cee:	4633      	mov	r3, r6
 8007cf0:	461e      	mov	r6, r3
 8007cf2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007cf6:	2a39      	cmp	r2, #57	@ 0x39
 8007cf8:	d107      	bne.n	8007d0a <_dtoa_r+0x6da>
 8007cfa:	459a      	cmp	sl, r3
 8007cfc:	d1f8      	bne.n	8007cf0 <_dtoa_r+0x6c0>
 8007cfe:	9a04      	ldr	r2, [sp, #16]
 8007d00:	3201      	adds	r2, #1
 8007d02:	9204      	str	r2, [sp, #16]
 8007d04:	2230      	movs	r2, #48	@ 0x30
 8007d06:	f88a 2000 	strb.w	r2, [sl]
 8007d0a:	781a      	ldrb	r2, [r3, #0]
 8007d0c:	3201      	adds	r2, #1
 8007d0e:	701a      	strb	r2, [r3, #0]
 8007d10:	e7bd      	b.n	8007c8e <_dtoa_r+0x65e>
 8007d12:	4b7b      	ldr	r3, [pc, #492]	@ (8007f00 <_dtoa_r+0x8d0>)
 8007d14:	2200      	movs	r2, #0
 8007d16:	f7f8 fc6f 	bl	80005f8 <__aeabi_dmul>
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	4604      	mov	r4, r0
 8007d20:	460d      	mov	r5, r1
 8007d22:	f7f8 fed1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d26:	2800      	cmp	r0, #0
 8007d28:	f43f aebb 	beq.w	8007aa2 <_dtoa_r+0x472>
 8007d2c:	e6f0      	b.n	8007b10 <_dtoa_r+0x4e0>
 8007d2e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007d30:	2a00      	cmp	r2, #0
 8007d32:	f000 80db 	beq.w	8007eec <_dtoa_r+0x8bc>
 8007d36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d38:	2a01      	cmp	r2, #1
 8007d3a:	f300 80bf 	bgt.w	8007ebc <_dtoa_r+0x88c>
 8007d3e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007d40:	2a00      	cmp	r2, #0
 8007d42:	f000 80b7 	beq.w	8007eb4 <_dtoa_r+0x884>
 8007d46:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007d4a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007d4c:	4646      	mov	r6, r8
 8007d4e:	9a08      	ldr	r2, [sp, #32]
 8007d50:	2101      	movs	r1, #1
 8007d52:	441a      	add	r2, r3
 8007d54:	4658      	mov	r0, fp
 8007d56:	4498      	add	r8, r3
 8007d58:	9208      	str	r2, [sp, #32]
 8007d5a:	f000 fc6b 	bl	8008634 <__i2b>
 8007d5e:	4605      	mov	r5, r0
 8007d60:	b15e      	cbz	r6, 8007d7a <_dtoa_r+0x74a>
 8007d62:	9b08      	ldr	r3, [sp, #32]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	dd08      	ble.n	8007d7a <_dtoa_r+0x74a>
 8007d68:	42b3      	cmp	r3, r6
 8007d6a:	9a08      	ldr	r2, [sp, #32]
 8007d6c:	bfa8      	it	ge
 8007d6e:	4633      	movge	r3, r6
 8007d70:	eba8 0803 	sub.w	r8, r8, r3
 8007d74:	1af6      	subs	r6, r6, r3
 8007d76:	1ad3      	subs	r3, r2, r3
 8007d78:	9308      	str	r3, [sp, #32]
 8007d7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d7c:	b1f3      	cbz	r3, 8007dbc <_dtoa_r+0x78c>
 8007d7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	f000 80b7 	beq.w	8007ef4 <_dtoa_r+0x8c4>
 8007d86:	b18c      	cbz	r4, 8007dac <_dtoa_r+0x77c>
 8007d88:	4629      	mov	r1, r5
 8007d8a:	4622      	mov	r2, r4
 8007d8c:	4658      	mov	r0, fp
 8007d8e:	f000 fd11 	bl	80087b4 <__pow5mult>
 8007d92:	464a      	mov	r2, r9
 8007d94:	4601      	mov	r1, r0
 8007d96:	4605      	mov	r5, r0
 8007d98:	4658      	mov	r0, fp
 8007d9a:	f000 fc61 	bl	8008660 <__multiply>
 8007d9e:	4649      	mov	r1, r9
 8007da0:	9004      	str	r0, [sp, #16]
 8007da2:	4658      	mov	r0, fp
 8007da4:	f000 fb48 	bl	8008438 <_Bfree>
 8007da8:	9b04      	ldr	r3, [sp, #16]
 8007daa:	4699      	mov	r9, r3
 8007dac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007dae:	1b1a      	subs	r2, r3, r4
 8007db0:	d004      	beq.n	8007dbc <_dtoa_r+0x78c>
 8007db2:	4649      	mov	r1, r9
 8007db4:	4658      	mov	r0, fp
 8007db6:	f000 fcfd 	bl	80087b4 <__pow5mult>
 8007dba:	4681      	mov	r9, r0
 8007dbc:	2101      	movs	r1, #1
 8007dbe:	4658      	mov	r0, fp
 8007dc0:	f000 fc38 	bl	8008634 <__i2b>
 8007dc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007dc6:	4604      	mov	r4, r0
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	f000 81cf 	beq.w	800816c <_dtoa_r+0xb3c>
 8007dce:	461a      	mov	r2, r3
 8007dd0:	4601      	mov	r1, r0
 8007dd2:	4658      	mov	r0, fp
 8007dd4:	f000 fcee 	bl	80087b4 <__pow5mult>
 8007dd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dda:	2b01      	cmp	r3, #1
 8007ddc:	4604      	mov	r4, r0
 8007dde:	f300 8095 	bgt.w	8007f0c <_dtoa_r+0x8dc>
 8007de2:	9b02      	ldr	r3, [sp, #8]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	f040 8087 	bne.w	8007ef8 <_dtoa_r+0x8c8>
 8007dea:	9b03      	ldr	r3, [sp, #12]
 8007dec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	f040 8089 	bne.w	8007f08 <_dtoa_r+0x8d8>
 8007df6:	9b03      	ldr	r3, [sp, #12]
 8007df8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007dfc:	0d1b      	lsrs	r3, r3, #20
 8007dfe:	051b      	lsls	r3, r3, #20
 8007e00:	b12b      	cbz	r3, 8007e0e <_dtoa_r+0x7de>
 8007e02:	9b08      	ldr	r3, [sp, #32]
 8007e04:	3301      	adds	r3, #1
 8007e06:	9308      	str	r3, [sp, #32]
 8007e08:	f108 0801 	add.w	r8, r8, #1
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	f000 81b0 	beq.w	8008178 <_dtoa_r+0xb48>
 8007e18:	6923      	ldr	r3, [r4, #16]
 8007e1a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007e1e:	6918      	ldr	r0, [r3, #16]
 8007e20:	f000 fbbc 	bl	800859c <__hi0bits>
 8007e24:	f1c0 0020 	rsb	r0, r0, #32
 8007e28:	9b08      	ldr	r3, [sp, #32]
 8007e2a:	4418      	add	r0, r3
 8007e2c:	f010 001f 	ands.w	r0, r0, #31
 8007e30:	d077      	beq.n	8007f22 <_dtoa_r+0x8f2>
 8007e32:	f1c0 0320 	rsb	r3, r0, #32
 8007e36:	2b04      	cmp	r3, #4
 8007e38:	dd6b      	ble.n	8007f12 <_dtoa_r+0x8e2>
 8007e3a:	9b08      	ldr	r3, [sp, #32]
 8007e3c:	f1c0 001c 	rsb	r0, r0, #28
 8007e40:	4403      	add	r3, r0
 8007e42:	4480      	add	r8, r0
 8007e44:	4406      	add	r6, r0
 8007e46:	9308      	str	r3, [sp, #32]
 8007e48:	f1b8 0f00 	cmp.w	r8, #0
 8007e4c:	dd05      	ble.n	8007e5a <_dtoa_r+0x82a>
 8007e4e:	4649      	mov	r1, r9
 8007e50:	4642      	mov	r2, r8
 8007e52:	4658      	mov	r0, fp
 8007e54:	f000 fd08 	bl	8008868 <__lshift>
 8007e58:	4681      	mov	r9, r0
 8007e5a:	9b08      	ldr	r3, [sp, #32]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	dd05      	ble.n	8007e6c <_dtoa_r+0x83c>
 8007e60:	4621      	mov	r1, r4
 8007e62:	461a      	mov	r2, r3
 8007e64:	4658      	mov	r0, fp
 8007e66:	f000 fcff 	bl	8008868 <__lshift>
 8007e6a:	4604      	mov	r4, r0
 8007e6c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d059      	beq.n	8007f26 <_dtoa_r+0x8f6>
 8007e72:	4621      	mov	r1, r4
 8007e74:	4648      	mov	r0, r9
 8007e76:	f000 fd63 	bl	8008940 <__mcmp>
 8007e7a:	2800      	cmp	r0, #0
 8007e7c:	da53      	bge.n	8007f26 <_dtoa_r+0x8f6>
 8007e7e:	1e7b      	subs	r3, r7, #1
 8007e80:	9304      	str	r3, [sp, #16]
 8007e82:	4649      	mov	r1, r9
 8007e84:	2300      	movs	r3, #0
 8007e86:	220a      	movs	r2, #10
 8007e88:	4658      	mov	r0, fp
 8007e8a:	f000 faf7 	bl	800847c <__multadd>
 8007e8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e90:	4681      	mov	r9, r0
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	f000 8172 	beq.w	800817c <_dtoa_r+0xb4c>
 8007e98:	2300      	movs	r3, #0
 8007e9a:	4629      	mov	r1, r5
 8007e9c:	220a      	movs	r2, #10
 8007e9e:	4658      	mov	r0, fp
 8007ea0:	f000 faec 	bl	800847c <__multadd>
 8007ea4:	9b00      	ldr	r3, [sp, #0]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	4605      	mov	r5, r0
 8007eaa:	dc67      	bgt.n	8007f7c <_dtoa_r+0x94c>
 8007eac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007eae:	2b02      	cmp	r3, #2
 8007eb0:	dc41      	bgt.n	8007f36 <_dtoa_r+0x906>
 8007eb2:	e063      	b.n	8007f7c <_dtoa_r+0x94c>
 8007eb4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007eb6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007eba:	e746      	b.n	8007d4a <_dtoa_r+0x71a>
 8007ebc:	9b07      	ldr	r3, [sp, #28]
 8007ebe:	1e5c      	subs	r4, r3, #1
 8007ec0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ec2:	42a3      	cmp	r3, r4
 8007ec4:	bfbf      	itttt	lt
 8007ec6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007ec8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007eca:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007ecc:	1ae3      	sublt	r3, r4, r3
 8007ece:	bfb4      	ite	lt
 8007ed0:	18d2      	addlt	r2, r2, r3
 8007ed2:	1b1c      	subge	r4, r3, r4
 8007ed4:	9b07      	ldr	r3, [sp, #28]
 8007ed6:	bfbc      	itt	lt
 8007ed8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007eda:	2400      	movlt	r4, #0
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	bfb5      	itete	lt
 8007ee0:	eba8 0603 	sublt.w	r6, r8, r3
 8007ee4:	9b07      	ldrge	r3, [sp, #28]
 8007ee6:	2300      	movlt	r3, #0
 8007ee8:	4646      	movge	r6, r8
 8007eea:	e730      	b.n	8007d4e <_dtoa_r+0x71e>
 8007eec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007eee:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007ef0:	4646      	mov	r6, r8
 8007ef2:	e735      	b.n	8007d60 <_dtoa_r+0x730>
 8007ef4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007ef6:	e75c      	b.n	8007db2 <_dtoa_r+0x782>
 8007ef8:	2300      	movs	r3, #0
 8007efa:	e788      	b.n	8007e0e <_dtoa_r+0x7de>
 8007efc:	3fe00000 	.word	0x3fe00000
 8007f00:	40240000 	.word	0x40240000
 8007f04:	40140000 	.word	0x40140000
 8007f08:	9b02      	ldr	r3, [sp, #8]
 8007f0a:	e780      	b.n	8007e0e <_dtoa_r+0x7de>
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f10:	e782      	b.n	8007e18 <_dtoa_r+0x7e8>
 8007f12:	d099      	beq.n	8007e48 <_dtoa_r+0x818>
 8007f14:	9a08      	ldr	r2, [sp, #32]
 8007f16:	331c      	adds	r3, #28
 8007f18:	441a      	add	r2, r3
 8007f1a:	4498      	add	r8, r3
 8007f1c:	441e      	add	r6, r3
 8007f1e:	9208      	str	r2, [sp, #32]
 8007f20:	e792      	b.n	8007e48 <_dtoa_r+0x818>
 8007f22:	4603      	mov	r3, r0
 8007f24:	e7f6      	b.n	8007f14 <_dtoa_r+0x8e4>
 8007f26:	9b07      	ldr	r3, [sp, #28]
 8007f28:	9704      	str	r7, [sp, #16]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	dc20      	bgt.n	8007f70 <_dtoa_r+0x940>
 8007f2e:	9300      	str	r3, [sp, #0]
 8007f30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f32:	2b02      	cmp	r3, #2
 8007f34:	dd1e      	ble.n	8007f74 <_dtoa_r+0x944>
 8007f36:	9b00      	ldr	r3, [sp, #0]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	f47f aec0 	bne.w	8007cbe <_dtoa_r+0x68e>
 8007f3e:	4621      	mov	r1, r4
 8007f40:	2205      	movs	r2, #5
 8007f42:	4658      	mov	r0, fp
 8007f44:	f000 fa9a 	bl	800847c <__multadd>
 8007f48:	4601      	mov	r1, r0
 8007f4a:	4604      	mov	r4, r0
 8007f4c:	4648      	mov	r0, r9
 8007f4e:	f000 fcf7 	bl	8008940 <__mcmp>
 8007f52:	2800      	cmp	r0, #0
 8007f54:	f77f aeb3 	ble.w	8007cbe <_dtoa_r+0x68e>
 8007f58:	4656      	mov	r6, sl
 8007f5a:	2331      	movs	r3, #49	@ 0x31
 8007f5c:	f806 3b01 	strb.w	r3, [r6], #1
 8007f60:	9b04      	ldr	r3, [sp, #16]
 8007f62:	3301      	adds	r3, #1
 8007f64:	9304      	str	r3, [sp, #16]
 8007f66:	e6ae      	b.n	8007cc6 <_dtoa_r+0x696>
 8007f68:	9c07      	ldr	r4, [sp, #28]
 8007f6a:	9704      	str	r7, [sp, #16]
 8007f6c:	4625      	mov	r5, r4
 8007f6e:	e7f3      	b.n	8007f58 <_dtoa_r+0x928>
 8007f70:	9b07      	ldr	r3, [sp, #28]
 8007f72:	9300      	str	r3, [sp, #0]
 8007f74:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	f000 8104 	beq.w	8008184 <_dtoa_r+0xb54>
 8007f7c:	2e00      	cmp	r6, #0
 8007f7e:	dd05      	ble.n	8007f8c <_dtoa_r+0x95c>
 8007f80:	4629      	mov	r1, r5
 8007f82:	4632      	mov	r2, r6
 8007f84:	4658      	mov	r0, fp
 8007f86:	f000 fc6f 	bl	8008868 <__lshift>
 8007f8a:	4605      	mov	r5, r0
 8007f8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d05a      	beq.n	8008048 <_dtoa_r+0xa18>
 8007f92:	6869      	ldr	r1, [r5, #4]
 8007f94:	4658      	mov	r0, fp
 8007f96:	f000 fa0f 	bl	80083b8 <_Balloc>
 8007f9a:	4606      	mov	r6, r0
 8007f9c:	b928      	cbnz	r0, 8007faa <_dtoa_r+0x97a>
 8007f9e:	4b84      	ldr	r3, [pc, #528]	@ (80081b0 <_dtoa_r+0xb80>)
 8007fa0:	4602      	mov	r2, r0
 8007fa2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007fa6:	f7ff bb5a 	b.w	800765e <_dtoa_r+0x2e>
 8007faa:	692a      	ldr	r2, [r5, #16]
 8007fac:	3202      	adds	r2, #2
 8007fae:	0092      	lsls	r2, r2, #2
 8007fb0:	f105 010c 	add.w	r1, r5, #12
 8007fb4:	300c      	adds	r0, #12
 8007fb6:	f7ff fa9c 	bl	80074f2 <memcpy>
 8007fba:	2201      	movs	r2, #1
 8007fbc:	4631      	mov	r1, r6
 8007fbe:	4658      	mov	r0, fp
 8007fc0:	f000 fc52 	bl	8008868 <__lshift>
 8007fc4:	f10a 0301 	add.w	r3, sl, #1
 8007fc8:	9307      	str	r3, [sp, #28]
 8007fca:	9b00      	ldr	r3, [sp, #0]
 8007fcc:	4453      	add	r3, sl
 8007fce:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007fd0:	9b02      	ldr	r3, [sp, #8]
 8007fd2:	f003 0301 	and.w	r3, r3, #1
 8007fd6:	462f      	mov	r7, r5
 8007fd8:	930a      	str	r3, [sp, #40]	@ 0x28
 8007fda:	4605      	mov	r5, r0
 8007fdc:	9b07      	ldr	r3, [sp, #28]
 8007fde:	4621      	mov	r1, r4
 8007fe0:	3b01      	subs	r3, #1
 8007fe2:	4648      	mov	r0, r9
 8007fe4:	9300      	str	r3, [sp, #0]
 8007fe6:	f7ff fa99 	bl	800751c <quorem>
 8007fea:	4639      	mov	r1, r7
 8007fec:	9002      	str	r0, [sp, #8]
 8007fee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007ff2:	4648      	mov	r0, r9
 8007ff4:	f000 fca4 	bl	8008940 <__mcmp>
 8007ff8:	462a      	mov	r2, r5
 8007ffa:	9008      	str	r0, [sp, #32]
 8007ffc:	4621      	mov	r1, r4
 8007ffe:	4658      	mov	r0, fp
 8008000:	f000 fcba 	bl	8008978 <__mdiff>
 8008004:	68c2      	ldr	r2, [r0, #12]
 8008006:	4606      	mov	r6, r0
 8008008:	bb02      	cbnz	r2, 800804c <_dtoa_r+0xa1c>
 800800a:	4601      	mov	r1, r0
 800800c:	4648      	mov	r0, r9
 800800e:	f000 fc97 	bl	8008940 <__mcmp>
 8008012:	4602      	mov	r2, r0
 8008014:	4631      	mov	r1, r6
 8008016:	4658      	mov	r0, fp
 8008018:	920e      	str	r2, [sp, #56]	@ 0x38
 800801a:	f000 fa0d 	bl	8008438 <_Bfree>
 800801e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008020:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008022:	9e07      	ldr	r6, [sp, #28]
 8008024:	ea43 0102 	orr.w	r1, r3, r2
 8008028:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800802a:	4319      	orrs	r1, r3
 800802c:	d110      	bne.n	8008050 <_dtoa_r+0xa20>
 800802e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008032:	d029      	beq.n	8008088 <_dtoa_r+0xa58>
 8008034:	9b08      	ldr	r3, [sp, #32]
 8008036:	2b00      	cmp	r3, #0
 8008038:	dd02      	ble.n	8008040 <_dtoa_r+0xa10>
 800803a:	9b02      	ldr	r3, [sp, #8]
 800803c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008040:	9b00      	ldr	r3, [sp, #0]
 8008042:	f883 8000 	strb.w	r8, [r3]
 8008046:	e63f      	b.n	8007cc8 <_dtoa_r+0x698>
 8008048:	4628      	mov	r0, r5
 800804a:	e7bb      	b.n	8007fc4 <_dtoa_r+0x994>
 800804c:	2201      	movs	r2, #1
 800804e:	e7e1      	b.n	8008014 <_dtoa_r+0x9e4>
 8008050:	9b08      	ldr	r3, [sp, #32]
 8008052:	2b00      	cmp	r3, #0
 8008054:	db04      	blt.n	8008060 <_dtoa_r+0xa30>
 8008056:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008058:	430b      	orrs	r3, r1
 800805a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800805c:	430b      	orrs	r3, r1
 800805e:	d120      	bne.n	80080a2 <_dtoa_r+0xa72>
 8008060:	2a00      	cmp	r2, #0
 8008062:	dded      	ble.n	8008040 <_dtoa_r+0xa10>
 8008064:	4649      	mov	r1, r9
 8008066:	2201      	movs	r2, #1
 8008068:	4658      	mov	r0, fp
 800806a:	f000 fbfd 	bl	8008868 <__lshift>
 800806e:	4621      	mov	r1, r4
 8008070:	4681      	mov	r9, r0
 8008072:	f000 fc65 	bl	8008940 <__mcmp>
 8008076:	2800      	cmp	r0, #0
 8008078:	dc03      	bgt.n	8008082 <_dtoa_r+0xa52>
 800807a:	d1e1      	bne.n	8008040 <_dtoa_r+0xa10>
 800807c:	f018 0f01 	tst.w	r8, #1
 8008080:	d0de      	beq.n	8008040 <_dtoa_r+0xa10>
 8008082:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008086:	d1d8      	bne.n	800803a <_dtoa_r+0xa0a>
 8008088:	9a00      	ldr	r2, [sp, #0]
 800808a:	2339      	movs	r3, #57	@ 0x39
 800808c:	7013      	strb	r3, [r2, #0]
 800808e:	4633      	mov	r3, r6
 8008090:	461e      	mov	r6, r3
 8008092:	3b01      	subs	r3, #1
 8008094:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008098:	2a39      	cmp	r2, #57	@ 0x39
 800809a:	d052      	beq.n	8008142 <_dtoa_r+0xb12>
 800809c:	3201      	adds	r2, #1
 800809e:	701a      	strb	r2, [r3, #0]
 80080a0:	e612      	b.n	8007cc8 <_dtoa_r+0x698>
 80080a2:	2a00      	cmp	r2, #0
 80080a4:	dd07      	ble.n	80080b6 <_dtoa_r+0xa86>
 80080a6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80080aa:	d0ed      	beq.n	8008088 <_dtoa_r+0xa58>
 80080ac:	9a00      	ldr	r2, [sp, #0]
 80080ae:	f108 0301 	add.w	r3, r8, #1
 80080b2:	7013      	strb	r3, [r2, #0]
 80080b4:	e608      	b.n	8007cc8 <_dtoa_r+0x698>
 80080b6:	9b07      	ldr	r3, [sp, #28]
 80080b8:	9a07      	ldr	r2, [sp, #28]
 80080ba:	f803 8c01 	strb.w	r8, [r3, #-1]
 80080be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d028      	beq.n	8008116 <_dtoa_r+0xae6>
 80080c4:	4649      	mov	r1, r9
 80080c6:	2300      	movs	r3, #0
 80080c8:	220a      	movs	r2, #10
 80080ca:	4658      	mov	r0, fp
 80080cc:	f000 f9d6 	bl	800847c <__multadd>
 80080d0:	42af      	cmp	r7, r5
 80080d2:	4681      	mov	r9, r0
 80080d4:	f04f 0300 	mov.w	r3, #0
 80080d8:	f04f 020a 	mov.w	r2, #10
 80080dc:	4639      	mov	r1, r7
 80080de:	4658      	mov	r0, fp
 80080e0:	d107      	bne.n	80080f2 <_dtoa_r+0xac2>
 80080e2:	f000 f9cb 	bl	800847c <__multadd>
 80080e6:	4607      	mov	r7, r0
 80080e8:	4605      	mov	r5, r0
 80080ea:	9b07      	ldr	r3, [sp, #28]
 80080ec:	3301      	adds	r3, #1
 80080ee:	9307      	str	r3, [sp, #28]
 80080f0:	e774      	b.n	8007fdc <_dtoa_r+0x9ac>
 80080f2:	f000 f9c3 	bl	800847c <__multadd>
 80080f6:	4629      	mov	r1, r5
 80080f8:	4607      	mov	r7, r0
 80080fa:	2300      	movs	r3, #0
 80080fc:	220a      	movs	r2, #10
 80080fe:	4658      	mov	r0, fp
 8008100:	f000 f9bc 	bl	800847c <__multadd>
 8008104:	4605      	mov	r5, r0
 8008106:	e7f0      	b.n	80080ea <_dtoa_r+0xaba>
 8008108:	9b00      	ldr	r3, [sp, #0]
 800810a:	2b00      	cmp	r3, #0
 800810c:	bfcc      	ite	gt
 800810e:	461e      	movgt	r6, r3
 8008110:	2601      	movle	r6, #1
 8008112:	4456      	add	r6, sl
 8008114:	2700      	movs	r7, #0
 8008116:	4649      	mov	r1, r9
 8008118:	2201      	movs	r2, #1
 800811a:	4658      	mov	r0, fp
 800811c:	f000 fba4 	bl	8008868 <__lshift>
 8008120:	4621      	mov	r1, r4
 8008122:	4681      	mov	r9, r0
 8008124:	f000 fc0c 	bl	8008940 <__mcmp>
 8008128:	2800      	cmp	r0, #0
 800812a:	dcb0      	bgt.n	800808e <_dtoa_r+0xa5e>
 800812c:	d102      	bne.n	8008134 <_dtoa_r+0xb04>
 800812e:	f018 0f01 	tst.w	r8, #1
 8008132:	d1ac      	bne.n	800808e <_dtoa_r+0xa5e>
 8008134:	4633      	mov	r3, r6
 8008136:	461e      	mov	r6, r3
 8008138:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800813c:	2a30      	cmp	r2, #48	@ 0x30
 800813e:	d0fa      	beq.n	8008136 <_dtoa_r+0xb06>
 8008140:	e5c2      	b.n	8007cc8 <_dtoa_r+0x698>
 8008142:	459a      	cmp	sl, r3
 8008144:	d1a4      	bne.n	8008090 <_dtoa_r+0xa60>
 8008146:	9b04      	ldr	r3, [sp, #16]
 8008148:	3301      	adds	r3, #1
 800814a:	9304      	str	r3, [sp, #16]
 800814c:	2331      	movs	r3, #49	@ 0x31
 800814e:	f88a 3000 	strb.w	r3, [sl]
 8008152:	e5b9      	b.n	8007cc8 <_dtoa_r+0x698>
 8008154:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008156:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80081b4 <_dtoa_r+0xb84>
 800815a:	b11b      	cbz	r3, 8008164 <_dtoa_r+0xb34>
 800815c:	f10a 0308 	add.w	r3, sl, #8
 8008160:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008162:	6013      	str	r3, [r2, #0]
 8008164:	4650      	mov	r0, sl
 8008166:	b019      	add	sp, #100	@ 0x64
 8008168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800816c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800816e:	2b01      	cmp	r3, #1
 8008170:	f77f ae37 	ble.w	8007de2 <_dtoa_r+0x7b2>
 8008174:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008176:	930a      	str	r3, [sp, #40]	@ 0x28
 8008178:	2001      	movs	r0, #1
 800817a:	e655      	b.n	8007e28 <_dtoa_r+0x7f8>
 800817c:	9b00      	ldr	r3, [sp, #0]
 800817e:	2b00      	cmp	r3, #0
 8008180:	f77f aed6 	ble.w	8007f30 <_dtoa_r+0x900>
 8008184:	4656      	mov	r6, sl
 8008186:	4621      	mov	r1, r4
 8008188:	4648      	mov	r0, r9
 800818a:	f7ff f9c7 	bl	800751c <quorem>
 800818e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008192:	f806 8b01 	strb.w	r8, [r6], #1
 8008196:	9b00      	ldr	r3, [sp, #0]
 8008198:	eba6 020a 	sub.w	r2, r6, sl
 800819c:	4293      	cmp	r3, r2
 800819e:	ddb3      	ble.n	8008108 <_dtoa_r+0xad8>
 80081a0:	4649      	mov	r1, r9
 80081a2:	2300      	movs	r3, #0
 80081a4:	220a      	movs	r2, #10
 80081a6:	4658      	mov	r0, fp
 80081a8:	f000 f968 	bl	800847c <__multadd>
 80081ac:	4681      	mov	r9, r0
 80081ae:	e7ea      	b.n	8008186 <_dtoa_r+0xb56>
 80081b0:	08019f41 	.word	0x08019f41
 80081b4:	08019ec5 	.word	0x08019ec5

080081b8 <_free_r>:
 80081b8:	b538      	push	{r3, r4, r5, lr}
 80081ba:	4605      	mov	r5, r0
 80081bc:	2900      	cmp	r1, #0
 80081be:	d041      	beq.n	8008244 <_free_r+0x8c>
 80081c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081c4:	1f0c      	subs	r4, r1, #4
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	bfb8      	it	lt
 80081ca:	18e4      	addlt	r4, r4, r3
 80081cc:	f000 f8e8 	bl	80083a0 <__malloc_lock>
 80081d0:	4a1d      	ldr	r2, [pc, #116]	@ (8008248 <_free_r+0x90>)
 80081d2:	6813      	ldr	r3, [r2, #0]
 80081d4:	b933      	cbnz	r3, 80081e4 <_free_r+0x2c>
 80081d6:	6063      	str	r3, [r4, #4]
 80081d8:	6014      	str	r4, [r2, #0]
 80081da:	4628      	mov	r0, r5
 80081dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081e0:	f000 b8e4 	b.w	80083ac <__malloc_unlock>
 80081e4:	42a3      	cmp	r3, r4
 80081e6:	d908      	bls.n	80081fa <_free_r+0x42>
 80081e8:	6820      	ldr	r0, [r4, #0]
 80081ea:	1821      	adds	r1, r4, r0
 80081ec:	428b      	cmp	r3, r1
 80081ee:	bf01      	itttt	eq
 80081f0:	6819      	ldreq	r1, [r3, #0]
 80081f2:	685b      	ldreq	r3, [r3, #4]
 80081f4:	1809      	addeq	r1, r1, r0
 80081f6:	6021      	streq	r1, [r4, #0]
 80081f8:	e7ed      	b.n	80081d6 <_free_r+0x1e>
 80081fa:	461a      	mov	r2, r3
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	b10b      	cbz	r3, 8008204 <_free_r+0x4c>
 8008200:	42a3      	cmp	r3, r4
 8008202:	d9fa      	bls.n	80081fa <_free_r+0x42>
 8008204:	6811      	ldr	r1, [r2, #0]
 8008206:	1850      	adds	r0, r2, r1
 8008208:	42a0      	cmp	r0, r4
 800820a:	d10b      	bne.n	8008224 <_free_r+0x6c>
 800820c:	6820      	ldr	r0, [r4, #0]
 800820e:	4401      	add	r1, r0
 8008210:	1850      	adds	r0, r2, r1
 8008212:	4283      	cmp	r3, r0
 8008214:	6011      	str	r1, [r2, #0]
 8008216:	d1e0      	bne.n	80081da <_free_r+0x22>
 8008218:	6818      	ldr	r0, [r3, #0]
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	6053      	str	r3, [r2, #4]
 800821e:	4408      	add	r0, r1
 8008220:	6010      	str	r0, [r2, #0]
 8008222:	e7da      	b.n	80081da <_free_r+0x22>
 8008224:	d902      	bls.n	800822c <_free_r+0x74>
 8008226:	230c      	movs	r3, #12
 8008228:	602b      	str	r3, [r5, #0]
 800822a:	e7d6      	b.n	80081da <_free_r+0x22>
 800822c:	6820      	ldr	r0, [r4, #0]
 800822e:	1821      	adds	r1, r4, r0
 8008230:	428b      	cmp	r3, r1
 8008232:	bf04      	itt	eq
 8008234:	6819      	ldreq	r1, [r3, #0]
 8008236:	685b      	ldreq	r3, [r3, #4]
 8008238:	6063      	str	r3, [r4, #4]
 800823a:	bf04      	itt	eq
 800823c:	1809      	addeq	r1, r1, r0
 800823e:	6021      	streq	r1, [r4, #0]
 8008240:	6054      	str	r4, [r2, #4]
 8008242:	e7ca      	b.n	80081da <_free_r+0x22>
 8008244:	bd38      	pop	{r3, r4, r5, pc}
 8008246:	bf00      	nop
 8008248:	2000064c 	.word	0x2000064c

0800824c <malloc>:
 800824c:	4b02      	ldr	r3, [pc, #8]	@ (8008258 <malloc+0xc>)
 800824e:	4601      	mov	r1, r0
 8008250:	6818      	ldr	r0, [r3, #0]
 8008252:	f000 b825 	b.w	80082a0 <_malloc_r>
 8008256:	bf00      	nop
 8008258:	20000030 	.word	0x20000030

0800825c <sbrk_aligned>:
 800825c:	b570      	push	{r4, r5, r6, lr}
 800825e:	4e0f      	ldr	r6, [pc, #60]	@ (800829c <sbrk_aligned+0x40>)
 8008260:	460c      	mov	r4, r1
 8008262:	6831      	ldr	r1, [r6, #0]
 8008264:	4605      	mov	r5, r0
 8008266:	b911      	cbnz	r1, 800826e <sbrk_aligned+0x12>
 8008268:	f001 fec4 	bl	8009ff4 <_sbrk_r>
 800826c:	6030      	str	r0, [r6, #0]
 800826e:	4621      	mov	r1, r4
 8008270:	4628      	mov	r0, r5
 8008272:	f001 febf 	bl	8009ff4 <_sbrk_r>
 8008276:	1c43      	adds	r3, r0, #1
 8008278:	d103      	bne.n	8008282 <sbrk_aligned+0x26>
 800827a:	f04f 34ff 	mov.w	r4, #4294967295
 800827e:	4620      	mov	r0, r4
 8008280:	bd70      	pop	{r4, r5, r6, pc}
 8008282:	1cc4      	adds	r4, r0, #3
 8008284:	f024 0403 	bic.w	r4, r4, #3
 8008288:	42a0      	cmp	r0, r4
 800828a:	d0f8      	beq.n	800827e <sbrk_aligned+0x22>
 800828c:	1a21      	subs	r1, r4, r0
 800828e:	4628      	mov	r0, r5
 8008290:	f001 feb0 	bl	8009ff4 <_sbrk_r>
 8008294:	3001      	adds	r0, #1
 8008296:	d1f2      	bne.n	800827e <sbrk_aligned+0x22>
 8008298:	e7ef      	b.n	800827a <sbrk_aligned+0x1e>
 800829a:	bf00      	nop
 800829c:	20000648 	.word	0x20000648

080082a0 <_malloc_r>:
 80082a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082a4:	1ccd      	adds	r5, r1, #3
 80082a6:	f025 0503 	bic.w	r5, r5, #3
 80082aa:	3508      	adds	r5, #8
 80082ac:	2d0c      	cmp	r5, #12
 80082ae:	bf38      	it	cc
 80082b0:	250c      	movcc	r5, #12
 80082b2:	2d00      	cmp	r5, #0
 80082b4:	4606      	mov	r6, r0
 80082b6:	db01      	blt.n	80082bc <_malloc_r+0x1c>
 80082b8:	42a9      	cmp	r1, r5
 80082ba:	d904      	bls.n	80082c6 <_malloc_r+0x26>
 80082bc:	230c      	movs	r3, #12
 80082be:	6033      	str	r3, [r6, #0]
 80082c0:	2000      	movs	r0, #0
 80082c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800839c <_malloc_r+0xfc>
 80082ca:	f000 f869 	bl	80083a0 <__malloc_lock>
 80082ce:	f8d8 3000 	ldr.w	r3, [r8]
 80082d2:	461c      	mov	r4, r3
 80082d4:	bb44      	cbnz	r4, 8008328 <_malloc_r+0x88>
 80082d6:	4629      	mov	r1, r5
 80082d8:	4630      	mov	r0, r6
 80082da:	f7ff ffbf 	bl	800825c <sbrk_aligned>
 80082de:	1c43      	adds	r3, r0, #1
 80082e0:	4604      	mov	r4, r0
 80082e2:	d158      	bne.n	8008396 <_malloc_r+0xf6>
 80082e4:	f8d8 4000 	ldr.w	r4, [r8]
 80082e8:	4627      	mov	r7, r4
 80082ea:	2f00      	cmp	r7, #0
 80082ec:	d143      	bne.n	8008376 <_malloc_r+0xd6>
 80082ee:	2c00      	cmp	r4, #0
 80082f0:	d04b      	beq.n	800838a <_malloc_r+0xea>
 80082f2:	6823      	ldr	r3, [r4, #0]
 80082f4:	4639      	mov	r1, r7
 80082f6:	4630      	mov	r0, r6
 80082f8:	eb04 0903 	add.w	r9, r4, r3
 80082fc:	f001 fe7a 	bl	8009ff4 <_sbrk_r>
 8008300:	4581      	cmp	r9, r0
 8008302:	d142      	bne.n	800838a <_malloc_r+0xea>
 8008304:	6821      	ldr	r1, [r4, #0]
 8008306:	1a6d      	subs	r5, r5, r1
 8008308:	4629      	mov	r1, r5
 800830a:	4630      	mov	r0, r6
 800830c:	f7ff ffa6 	bl	800825c <sbrk_aligned>
 8008310:	3001      	adds	r0, #1
 8008312:	d03a      	beq.n	800838a <_malloc_r+0xea>
 8008314:	6823      	ldr	r3, [r4, #0]
 8008316:	442b      	add	r3, r5
 8008318:	6023      	str	r3, [r4, #0]
 800831a:	f8d8 3000 	ldr.w	r3, [r8]
 800831e:	685a      	ldr	r2, [r3, #4]
 8008320:	bb62      	cbnz	r2, 800837c <_malloc_r+0xdc>
 8008322:	f8c8 7000 	str.w	r7, [r8]
 8008326:	e00f      	b.n	8008348 <_malloc_r+0xa8>
 8008328:	6822      	ldr	r2, [r4, #0]
 800832a:	1b52      	subs	r2, r2, r5
 800832c:	d420      	bmi.n	8008370 <_malloc_r+0xd0>
 800832e:	2a0b      	cmp	r2, #11
 8008330:	d917      	bls.n	8008362 <_malloc_r+0xc2>
 8008332:	1961      	adds	r1, r4, r5
 8008334:	42a3      	cmp	r3, r4
 8008336:	6025      	str	r5, [r4, #0]
 8008338:	bf18      	it	ne
 800833a:	6059      	strne	r1, [r3, #4]
 800833c:	6863      	ldr	r3, [r4, #4]
 800833e:	bf08      	it	eq
 8008340:	f8c8 1000 	streq.w	r1, [r8]
 8008344:	5162      	str	r2, [r4, r5]
 8008346:	604b      	str	r3, [r1, #4]
 8008348:	4630      	mov	r0, r6
 800834a:	f000 f82f 	bl	80083ac <__malloc_unlock>
 800834e:	f104 000b 	add.w	r0, r4, #11
 8008352:	1d23      	adds	r3, r4, #4
 8008354:	f020 0007 	bic.w	r0, r0, #7
 8008358:	1ac2      	subs	r2, r0, r3
 800835a:	bf1c      	itt	ne
 800835c:	1a1b      	subne	r3, r3, r0
 800835e:	50a3      	strne	r3, [r4, r2]
 8008360:	e7af      	b.n	80082c2 <_malloc_r+0x22>
 8008362:	6862      	ldr	r2, [r4, #4]
 8008364:	42a3      	cmp	r3, r4
 8008366:	bf0c      	ite	eq
 8008368:	f8c8 2000 	streq.w	r2, [r8]
 800836c:	605a      	strne	r2, [r3, #4]
 800836e:	e7eb      	b.n	8008348 <_malloc_r+0xa8>
 8008370:	4623      	mov	r3, r4
 8008372:	6864      	ldr	r4, [r4, #4]
 8008374:	e7ae      	b.n	80082d4 <_malloc_r+0x34>
 8008376:	463c      	mov	r4, r7
 8008378:	687f      	ldr	r7, [r7, #4]
 800837a:	e7b6      	b.n	80082ea <_malloc_r+0x4a>
 800837c:	461a      	mov	r2, r3
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	42a3      	cmp	r3, r4
 8008382:	d1fb      	bne.n	800837c <_malloc_r+0xdc>
 8008384:	2300      	movs	r3, #0
 8008386:	6053      	str	r3, [r2, #4]
 8008388:	e7de      	b.n	8008348 <_malloc_r+0xa8>
 800838a:	230c      	movs	r3, #12
 800838c:	6033      	str	r3, [r6, #0]
 800838e:	4630      	mov	r0, r6
 8008390:	f000 f80c 	bl	80083ac <__malloc_unlock>
 8008394:	e794      	b.n	80082c0 <_malloc_r+0x20>
 8008396:	6005      	str	r5, [r0, #0]
 8008398:	e7d6      	b.n	8008348 <_malloc_r+0xa8>
 800839a:	bf00      	nop
 800839c:	2000064c 	.word	0x2000064c

080083a0 <__malloc_lock>:
 80083a0:	4801      	ldr	r0, [pc, #4]	@ (80083a8 <__malloc_lock+0x8>)
 80083a2:	f7ff b8a4 	b.w	80074ee <__retarget_lock_acquire_recursive>
 80083a6:	bf00      	nop
 80083a8:	20000644 	.word	0x20000644

080083ac <__malloc_unlock>:
 80083ac:	4801      	ldr	r0, [pc, #4]	@ (80083b4 <__malloc_unlock+0x8>)
 80083ae:	f7ff b89f 	b.w	80074f0 <__retarget_lock_release_recursive>
 80083b2:	bf00      	nop
 80083b4:	20000644 	.word	0x20000644

080083b8 <_Balloc>:
 80083b8:	b570      	push	{r4, r5, r6, lr}
 80083ba:	69c6      	ldr	r6, [r0, #28]
 80083bc:	4604      	mov	r4, r0
 80083be:	460d      	mov	r5, r1
 80083c0:	b976      	cbnz	r6, 80083e0 <_Balloc+0x28>
 80083c2:	2010      	movs	r0, #16
 80083c4:	f7ff ff42 	bl	800824c <malloc>
 80083c8:	4602      	mov	r2, r0
 80083ca:	61e0      	str	r0, [r4, #28]
 80083cc:	b920      	cbnz	r0, 80083d8 <_Balloc+0x20>
 80083ce:	4b18      	ldr	r3, [pc, #96]	@ (8008430 <_Balloc+0x78>)
 80083d0:	4818      	ldr	r0, [pc, #96]	@ (8008434 <_Balloc+0x7c>)
 80083d2:	216b      	movs	r1, #107	@ 0x6b
 80083d4:	f001 fe28 	bl	800a028 <__assert_func>
 80083d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80083dc:	6006      	str	r6, [r0, #0]
 80083de:	60c6      	str	r6, [r0, #12]
 80083e0:	69e6      	ldr	r6, [r4, #28]
 80083e2:	68f3      	ldr	r3, [r6, #12]
 80083e4:	b183      	cbz	r3, 8008408 <_Balloc+0x50>
 80083e6:	69e3      	ldr	r3, [r4, #28]
 80083e8:	68db      	ldr	r3, [r3, #12]
 80083ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80083ee:	b9b8      	cbnz	r0, 8008420 <_Balloc+0x68>
 80083f0:	2101      	movs	r1, #1
 80083f2:	fa01 f605 	lsl.w	r6, r1, r5
 80083f6:	1d72      	adds	r2, r6, #5
 80083f8:	0092      	lsls	r2, r2, #2
 80083fa:	4620      	mov	r0, r4
 80083fc:	f001 fe32 	bl	800a064 <_calloc_r>
 8008400:	b160      	cbz	r0, 800841c <_Balloc+0x64>
 8008402:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008406:	e00e      	b.n	8008426 <_Balloc+0x6e>
 8008408:	2221      	movs	r2, #33	@ 0x21
 800840a:	2104      	movs	r1, #4
 800840c:	4620      	mov	r0, r4
 800840e:	f001 fe29 	bl	800a064 <_calloc_r>
 8008412:	69e3      	ldr	r3, [r4, #28]
 8008414:	60f0      	str	r0, [r6, #12]
 8008416:	68db      	ldr	r3, [r3, #12]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d1e4      	bne.n	80083e6 <_Balloc+0x2e>
 800841c:	2000      	movs	r0, #0
 800841e:	bd70      	pop	{r4, r5, r6, pc}
 8008420:	6802      	ldr	r2, [r0, #0]
 8008422:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008426:	2300      	movs	r3, #0
 8008428:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800842c:	e7f7      	b.n	800841e <_Balloc+0x66>
 800842e:	bf00      	nop
 8008430:	08019ed2 	.word	0x08019ed2
 8008434:	08019f52 	.word	0x08019f52

08008438 <_Bfree>:
 8008438:	b570      	push	{r4, r5, r6, lr}
 800843a:	69c6      	ldr	r6, [r0, #28]
 800843c:	4605      	mov	r5, r0
 800843e:	460c      	mov	r4, r1
 8008440:	b976      	cbnz	r6, 8008460 <_Bfree+0x28>
 8008442:	2010      	movs	r0, #16
 8008444:	f7ff ff02 	bl	800824c <malloc>
 8008448:	4602      	mov	r2, r0
 800844a:	61e8      	str	r0, [r5, #28]
 800844c:	b920      	cbnz	r0, 8008458 <_Bfree+0x20>
 800844e:	4b09      	ldr	r3, [pc, #36]	@ (8008474 <_Bfree+0x3c>)
 8008450:	4809      	ldr	r0, [pc, #36]	@ (8008478 <_Bfree+0x40>)
 8008452:	218f      	movs	r1, #143	@ 0x8f
 8008454:	f001 fde8 	bl	800a028 <__assert_func>
 8008458:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800845c:	6006      	str	r6, [r0, #0]
 800845e:	60c6      	str	r6, [r0, #12]
 8008460:	b13c      	cbz	r4, 8008472 <_Bfree+0x3a>
 8008462:	69eb      	ldr	r3, [r5, #28]
 8008464:	6862      	ldr	r2, [r4, #4]
 8008466:	68db      	ldr	r3, [r3, #12]
 8008468:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800846c:	6021      	str	r1, [r4, #0]
 800846e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008472:	bd70      	pop	{r4, r5, r6, pc}
 8008474:	08019ed2 	.word	0x08019ed2
 8008478:	08019f52 	.word	0x08019f52

0800847c <__multadd>:
 800847c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008480:	690d      	ldr	r5, [r1, #16]
 8008482:	4607      	mov	r7, r0
 8008484:	460c      	mov	r4, r1
 8008486:	461e      	mov	r6, r3
 8008488:	f101 0c14 	add.w	ip, r1, #20
 800848c:	2000      	movs	r0, #0
 800848e:	f8dc 3000 	ldr.w	r3, [ip]
 8008492:	b299      	uxth	r1, r3
 8008494:	fb02 6101 	mla	r1, r2, r1, r6
 8008498:	0c1e      	lsrs	r6, r3, #16
 800849a:	0c0b      	lsrs	r3, r1, #16
 800849c:	fb02 3306 	mla	r3, r2, r6, r3
 80084a0:	b289      	uxth	r1, r1
 80084a2:	3001      	adds	r0, #1
 80084a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80084a8:	4285      	cmp	r5, r0
 80084aa:	f84c 1b04 	str.w	r1, [ip], #4
 80084ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80084b2:	dcec      	bgt.n	800848e <__multadd+0x12>
 80084b4:	b30e      	cbz	r6, 80084fa <__multadd+0x7e>
 80084b6:	68a3      	ldr	r3, [r4, #8]
 80084b8:	42ab      	cmp	r3, r5
 80084ba:	dc19      	bgt.n	80084f0 <__multadd+0x74>
 80084bc:	6861      	ldr	r1, [r4, #4]
 80084be:	4638      	mov	r0, r7
 80084c0:	3101      	adds	r1, #1
 80084c2:	f7ff ff79 	bl	80083b8 <_Balloc>
 80084c6:	4680      	mov	r8, r0
 80084c8:	b928      	cbnz	r0, 80084d6 <__multadd+0x5a>
 80084ca:	4602      	mov	r2, r0
 80084cc:	4b0c      	ldr	r3, [pc, #48]	@ (8008500 <__multadd+0x84>)
 80084ce:	480d      	ldr	r0, [pc, #52]	@ (8008504 <__multadd+0x88>)
 80084d0:	21ba      	movs	r1, #186	@ 0xba
 80084d2:	f001 fda9 	bl	800a028 <__assert_func>
 80084d6:	6922      	ldr	r2, [r4, #16]
 80084d8:	3202      	adds	r2, #2
 80084da:	f104 010c 	add.w	r1, r4, #12
 80084de:	0092      	lsls	r2, r2, #2
 80084e0:	300c      	adds	r0, #12
 80084e2:	f7ff f806 	bl	80074f2 <memcpy>
 80084e6:	4621      	mov	r1, r4
 80084e8:	4638      	mov	r0, r7
 80084ea:	f7ff ffa5 	bl	8008438 <_Bfree>
 80084ee:	4644      	mov	r4, r8
 80084f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80084f4:	3501      	adds	r5, #1
 80084f6:	615e      	str	r6, [r3, #20]
 80084f8:	6125      	str	r5, [r4, #16]
 80084fa:	4620      	mov	r0, r4
 80084fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008500:	08019f41 	.word	0x08019f41
 8008504:	08019f52 	.word	0x08019f52

08008508 <__s2b>:
 8008508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800850c:	460c      	mov	r4, r1
 800850e:	4615      	mov	r5, r2
 8008510:	461f      	mov	r7, r3
 8008512:	2209      	movs	r2, #9
 8008514:	3308      	adds	r3, #8
 8008516:	4606      	mov	r6, r0
 8008518:	fb93 f3f2 	sdiv	r3, r3, r2
 800851c:	2100      	movs	r1, #0
 800851e:	2201      	movs	r2, #1
 8008520:	429a      	cmp	r2, r3
 8008522:	db09      	blt.n	8008538 <__s2b+0x30>
 8008524:	4630      	mov	r0, r6
 8008526:	f7ff ff47 	bl	80083b8 <_Balloc>
 800852a:	b940      	cbnz	r0, 800853e <__s2b+0x36>
 800852c:	4602      	mov	r2, r0
 800852e:	4b19      	ldr	r3, [pc, #100]	@ (8008594 <__s2b+0x8c>)
 8008530:	4819      	ldr	r0, [pc, #100]	@ (8008598 <__s2b+0x90>)
 8008532:	21d3      	movs	r1, #211	@ 0xd3
 8008534:	f001 fd78 	bl	800a028 <__assert_func>
 8008538:	0052      	lsls	r2, r2, #1
 800853a:	3101      	adds	r1, #1
 800853c:	e7f0      	b.n	8008520 <__s2b+0x18>
 800853e:	9b08      	ldr	r3, [sp, #32]
 8008540:	6143      	str	r3, [r0, #20]
 8008542:	2d09      	cmp	r5, #9
 8008544:	f04f 0301 	mov.w	r3, #1
 8008548:	6103      	str	r3, [r0, #16]
 800854a:	dd16      	ble.n	800857a <__s2b+0x72>
 800854c:	f104 0909 	add.w	r9, r4, #9
 8008550:	46c8      	mov	r8, r9
 8008552:	442c      	add	r4, r5
 8008554:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008558:	4601      	mov	r1, r0
 800855a:	3b30      	subs	r3, #48	@ 0x30
 800855c:	220a      	movs	r2, #10
 800855e:	4630      	mov	r0, r6
 8008560:	f7ff ff8c 	bl	800847c <__multadd>
 8008564:	45a0      	cmp	r8, r4
 8008566:	d1f5      	bne.n	8008554 <__s2b+0x4c>
 8008568:	f1a5 0408 	sub.w	r4, r5, #8
 800856c:	444c      	add	r4, r9
 800856e:	1b2d      	subs	r5, r5, r4
 8008570:	1963      	adds	r3, r4, r5
 8008572:	42bb      	cmp	r3, r7
 8008574:	db04      	blt.n	8008580 <__s2b+0x78>
 8008576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800857a:	340a      	adds	r4, #10
 800857c:	2509      	movs	r5, #9
 800857e:	e7f6      	b.n	800856e <__s2b+0x66>
 8008580:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008584:	4601      	mov	r1, r0
 8008586:	3b30      	subs	r3, #48	@ 0x30
 8008588:	220a      	movs	r2, #10
 800858a:	4630      	mov	r0, r6
 800858c:	f7ff ff76 	bl	800847c <__multadd>
 8008590:	e7ee      	b.n	8008570 <__s2b+0x68>
 8008592:	bf00      	nop
 8008594:	08019f41 	.word	0x08019f41
 8008598:	08019f52 	.word	0x08019f52

0800859c <__hi0bits>:
 800859c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80085a0:	4603      	mov	r3, r0
 80085a2:	bf36      	itet	cc
 80085a4:	0403      	lslcc	r3, r0, #16
 80085a6:	2000      	movcs	r0, #0
 80085a8:	2010      	movcc	r0, #16
 80085aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80085ae:	bf3c      	itt	cc
 80085b0:	021b      	lslcc	r3, r3, #8
 80085b2:	3008      	addcc	r0, #8
 80085b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80085b8:	bf3c      	itt	cc
 80085ba:	011b      	lslcc	r3, r3, #4
 80085bc:	3004      	addcc	r0, #4
 80085be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085c2:	bf3c      	itt	cc
 80085c4:	009b      	lslcc	r3, r3, #2
 80085c6:	3002      	addcc	r0, #2
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	db05      	blt.n	80085d8 <__hi0bits+0x3c>
 80085cc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80085d0:	f100 0001 	add.w	r0, r0, #1
 80085d4:	bf08      	it	eq
 80085d6:	2020      	moveq	r0, #32
 80085d8:	4770      	bx	lr

080085da <__lo0bits>:
 80085da:	6803      	ldr	r3, [r0, #0]
 80085dc:	4602      	mov	r2, r0
 80085de:	f013 0007 	ands.w	r0, r3, #7
 80085e2:	d00b      	beq.n	80085fc <__lo0bits+0x22>
 80085e4:	07d9      	lsls	r1, r3, #31
 80085e6:	d421      	bmi.n	800862c <__lo0bits+0x52>
 80085e8:	0798      	lsls	r0, r3, #30
 80085ea:	bf49      	itett	mi
 80085ec:	085b      	lsrmi	r3, r3, #1
 80085ee:	089b      	lsrpl	r3, r3, #2
 80085f0:	2001      	movmi	r0, #1
 80085f2:	6013      	strmi	r3, [r2, #0]
 80085f4:	bf5c      	itt	pl
 80085f6:	6013      	strpl	r3, [r2, #0]
 80085f8:	2002      	movpl	r0, #2
 80085fa:	4770      	bx	lr
 80085fc:	b299      	uxth	r1, r3
 80085fe:	b909      	cbnz	r1, 8008604 <__lo0bits+0x2a>
 8008600:	0c1b      	lsrs	r3, r3, #16
 8008602:	2010      	movs	r0, #16
 8008604:	b2d9      	uxtb	r1, r3
 8008606:	b909      	cbnz	r1, 800860c <__lo0bits+0x32>
 8008608:	3008      	adds	r0, #8
 800860a:	0a1b      	lsrs	r3, r3, #8
 800860c:	0719      	lsls	r1, r3, #28
 800860e:	bf04      	itt	eq
 8008610:	091b      	lsreq	r3, r3, #4
 8008612:	3004      	addeq	r0, #4
 8008614:	0799      	lsls	r1, r3, #30
 8008616:	bf04      	itt	eq
 8008618:	089b      	lsreq	r3, r3, #2
 800861a:	3002      	addeq	r0, #2
 800861c:	07d9      	lsls	r1, r3, #31
 800861e:	d403      	bmi.n	8008628 <__lo0bits+0x4e>
 8008620:	085b      	lsrs	r3, r3, #1
 8008622:	f100 0001 	add.w	r0, r0, #1
 8008626:	d003      	beq.n	8008630 <__lo0bits+0x56>
 8008628:	6013      	str	r3, [r2, #0]
 800862a:	4770      	bx	lr
 800862c:	2000      	movs	r0, #0
 800862e:	4770      	bx	lr
 8008630:	2020      	movs	r0, #32
 8008632:	4770      	bx	lr

08008634 <__i2b>:
 8008634:	b510      	push	{r4, lr}
 8008636:	460c      	mov	r4, r1
 8008638:	2101      	movs	r1, #1
 800863a:	f7ff febd 	bl	80083b8 <_Balloc>
 800863e:	4602      	mov	r2, r0
 8008640:	b928      	cbnz	r0, 800864e <__i2b+0x1a>
 8008642:	4b05      	ldr	r3, [pc, #20]	@ (8008658 <__i2b+0x24>)
 8008644:	4805      	ldr	r0, [pc, #20]	@ (800865c <__i2b+0x28>)
 8008646:	f240 1145 	movw	r1, #325	@ 0x145
 800864a:	f001 fced 	bl	800a028 <__assert_func>
 800864e:	2301      	movs	r3, #1
 8008650:	6144      	str	r4, [r0, #20]
 8008652:	6103      	str	r3, [r0, #16]
 8008654:	bd10      	pop	{r4, pc}
 8008656:	bf00      	nop
 8008658:	08019f41 	.word	0x08019f41
 800865c:	08019f52 	.word	0x08019f52

08008660 <__multiply>:
 8008660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008664:	4614      	mov	r4, r2
 8008666:	690a      	ldr	r2, [r1, #16]
 8008668:	6923      	ldr	r3, [r4, #16]
 800866a:	429a      	cmp	r2, r3
 800866c:	bfa8      	it	ge
 800866e:	4623      	movge	r3, r4
 8008670:	460f      	mov	r7, r1
 8008672:	bfa4      	itt	ge
 8008674:	460c      	movge	r4, r1
 8008676:	461f      	movge	r7, r3
 8008678:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800867c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008680:	68a3      	ldr	r3, [r4, #8]
 8008682:	6861      	ldr	r1, [r4, #4]
 8008684:	eb0a 0609 	add.w	r6, sl, r9
 8008688:	42b3      	cmp	r3, r6
 800868a:	b085      	sub	sp, #20
 800868c:	bfb8      	it	lt
 800868e:	3101      	addlt	r1, #1
 8008690:	f7ff fe92 	bl	80083b8 <_Balloc>
 8008694:	b930      	cbnz	r0, 80086a4 <__multiply+0x44>
 8008696:	4602      	mov	r2, r0
 8008698:	4b44      	ldr	r3, [pc, #272]	@ (80087ac <__multiply+0x14c>)
 800869a:	4845      	ldr	r0, [pc, #276]	@ (80087b0 <__multiply+0x150>)
 800869c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80086a0:	f001 fcc2 	bl	800a028 <__assert_func>
 80086a4:	f100 0514 	add.w	r5, r0, #20
 80086a8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80086ac:	462b      	mov	r3, r5
 80086ae:	2200      	movs	r2, #0
 80086b0:	4543      	cmp	r3, r8
 80086b2:	d321      	bcc.n	80086f8 <__multiply+0x98>
 80086b4:	f107 0114 	add.w	r1, r7, #20
 80086b8:	f104 0214 	add.w	r2, r4, #20
 80086bc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80086c0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80086c4:	9302      	str	r3, [sp, #8]
 80086c6:	1b13      	subs	r3, r2, r4
 80086c8:	3b15      	subs	r3, #21
 80086ca:	f023 0303 	bic.w	r3, r3, #3
 80086ce:	3304      	adds	r3, #4
 80086d0:	f104 0715 	add.w	r7, r4, #21
 80086d4:	42ba      	cmp	r2, r7
 80086d6:	bf38      	it	cc
 80086d8:	2304      	movcc	r3, #4
 80086da:	9301      	str	r3, [sp, #4]
 80086dc:	9b02      	ldr	r3, [sp, #8]
 80086de:	9103      	str	r1, [sp, #12]
 80086e0:	428b      	cmp	r3, r1
 80086e2:	d80c      	bhi.n	80086fe <__multiply+0x9e>
 80086e4:	2e00      	cmp	r6, #0
 80086e6:	dd03      	ble.n	80086f0 <__multiply+0x90>
 80086e8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d05b      	beq.n	80087a8 <__multiply+0x148>
 80086f0:	6106      	str	r6, [r0, #16]
 80086f2:	b005      	add	sp, #20
 80086f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086f8:	f843 2b04 	str.w	r2, [r3], #4
 80086fc:	e7d8      	b.n	80086b0 <__multiply+0x50>
 80086fe:	f8b1 a000 	ldrh.w	sl, [r1]
 8008702:	f1ba 0f00 	cmp.w	sl, #0
 8008706:	d024      	beq.n	8008752 <__multiply+0xf2>
 8008708:	f104 0e14 	add.w	lr, r4, #20
 800870c:	46a9      	mov	r9, r5
 800870e:	f04f 0c00 	mov.w	ip, #0
 8008712:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008716:	f8d9 3000 	ldr.w	r3, [r9]
 800871a:	fa1f fb87 	uxth.w	fp, r7
 800871e:	b29b      	uxth	r3, r3
 8008720:	fb0a 330b 	mla	r3, sl, fp, r3
 8008724:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008728:	f8d9 7000 	ldr.w	r7, [r9]
 800872c:	4463      	add	r3, ip
 800872e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008732:	fb0a c70b 	mla	r7, sl, fp, ip
 8008736:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800873a:	b29b      	uxth	r3, r3
 800873c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008740:	4572      	cmp	r2, lr
 8008742:	f849 3b04 	str.w	r3, [r9], #4
 8008746:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800874a:	d8e2      	bhi.n	8008712 <__multiply+0xb2>
 800874c:	9b01      	ldr	r3, [sp, #4]
 800874e:	f845 c003 	str.w	ip, [r5, r3]
 8008752:	9b03      	ldr	r3, [sp, #12]
 8008754:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008758:	3104      	adds	r1, #4
 800875a:	f1b9 0f00 	cmp.w	r9, #0
 800875e:	d021      	beq.n	80087a4 <__multiply+0x144>
 8008760:	682b      	ldr	r3, [r5, #0]
 8008762:	f104 0c14 	add.w	ip, r4, #20
 8008766:	46ae      	mov	lr, r5
 8008768:	f04f 0a00 	mov.w	sl, #0
 800876c:	f8bc b000 	ldrh.w	fp, [ip]
 8008770:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008774:	fb09 770b 	mla	r7, r9, fp, r7
 8008778:	4457      	add	r7, sl
 800877a:	b29b      	uxth	r3, r3
 800877c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008780:	f84e 3b04 	str.w	r3, [lr], #4
 8008784:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008788:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800878c:	f8be 3000 	ldrh.w	r3, [lr]
 8008790:	fb09 330a 	mla	r3, r9, sl, r3
 8008794:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008798:	4562      	cmp	r2, ip
 800879a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800879e:	d8e5      	bhi.n	800876c <__multiply+0x10c>
 80087a0:	9f01      	ldr	r7, [sp, #4]
 80087a2:	51eb      	str	r3, [r5, r7]
 80087a4:	3504      	adds	r5, #4
 80087a6:	e799      	b.n	80086dc <__multiply+0x7c>
 80087a8:	3e01      	subs	r6, #1
 80087aa:	e79b      	b.n	80086e4 <__multiply+0x84>
 80087ac:	08019f41 	.word	0x08019f41
 80087b0:	08019f52 	.word	0x08019f52

080087b4 <__pow5mult>:
 80087b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087b8:	4615      	mov	r5, r2
 80087ba:	f012 0203 	ands.w	r2, r2, #3
 80087be:	4607      	mov	r7, r0
 80087c0:	460e      	mov	r6, r1
 80087c2:	d007      	beq.n	80087d4 <__pow5mult+0x20>
 80087c4:	4c25      	ldr	r4, [pc, #148]	@ (800885c <__pow5mult+0xa8>)
 80087c6:	3a01      	subs	r2, #1
 80087c8:	2300      	movs	r3, #0
 80087ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80087ce:	f7ff fe55 	bl	800847c <__multadd>
 80087d2:	4606      	mov	r6, r0
 80087d4:	10ad      	asrs	r5, r5, #2
 80087d6:	d03d      	beq.n	8008854 <__pow5mult+0xa0>
 80087d8:	69fc      	ldr	r4, [r7, #28]
 80087da:	b97c      	cbnz	r4, 80087fc <__pow5mult+0x48>
 80087dc:	2010      	movs	r0, #16
 80087de:	f7ff fd35 	bl	800824c <malloc>
 80087e2:	4602      	mov	r2, r0
 80087e4:	61f8      	str	r0, [r7, #28]
 80087e6:	b928      	cbnz	r0, 80087f4 <__pow5mult+0x40>
 80087e8:	4b1d      	ldr	r3, [pc, #116]	@ (8008860 <__pow5mult+0xac>)
 80087ea:	481e      	ldr	r0, [pc, #120]	@ (8008864 <__pow5mult+0xb0>)
 80087ec:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80087f0:	f001 fc1a 	bl	800a028 <__assert_func>
 80087f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80087f8:	6004      	str	r4, [r0, #0]
 80087fa:	60c4      	str	r4, [r0, #12]
 80087fc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008800:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008804:	b94c      	cbnz	r4, 800881a <__pow5mult+0x66>
 8008806:	f240 2171 	movw	r1, #625	@ 0x271
 800880a:	4638      	mov	r0, r7
 800880c:	f7ff ff12 	bl	8008634 <__i2b>
 8008810:	2300      	movs	r3, #0
 8008812:	f8c8 0008 	str.w	r0, [r8, #8]
 8008816:	4604      	mov	r4, r0
 8008818:	6003      	str	r3, [r0, #0]
 800881a:	f04f 0900 	mov.w	r9, #0
 800881e:	07eb      	lsls	r3, r5, #31
 8008820:	d50a      	bpl.n	8008838 <__pow5mult+0x84>
 8008822:	4631      	mov	r1, r6
 8008824:	4622      	mov	r2, r4
 8008826:	4638      	mov	r0, r7
 8008828:	f7ff ff1a 	bl	8008660 <__multiply>
 800882c:	4631      	mov	r1, r6
 800882e:	4680      	mov	r8, r0
 8008830:	4638      	mov	r0, r7
 8008832:	f7ff fe01 	bl	8008438 <_Bfree>
 8008836:	4646      	mov	r6, r8
 8008838:	106d      	asrs	r5, r5, #1
 800883a:	d00b      	beq.n	8008854 <__pow5mult+0xa0>
 800883c:	6820      	ldr	r0, [r4, #0]
 800883e:	b938      	cbnz	r0, 8008850 <__pow5mult+0x9c>
 8008840:	4622      	mov	r2, r4
 8008842:	4621      	mov	r1, r4
 8008844:	4638      	mov	r0, r7
 8008846:	f7ff ff0b 	bl	8008660 <__multiply>
 800884a:	6020      	str	r0, [r4, #0]
 800884c:	f8c0 9000 	str.w	r9, [r0]
 8008850:	4604      	mov	r4, r0
 8008852:	e7e4      	b.n	800881e <__pow5mult+0x6a>
 8008854:	4630      	mov	r0, r6
 8008856:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800885a:	bf00      	nop
 800885c:	08019fac 	.word	0x08019fac
 8008860:	08019ed2 	.word	0x08019ed2
 8008864:	08019f52 	.word	0x08019f52

08008868 <__lshift>:
 8008868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800886c:	460c      	mov	r4, r1
 800886e:	6849      	ldr	r1, [r1, #4]
 8008870:	6923      	ldr	r3, [r4, #16]
 8008872:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008876:	68a3      	ldr	r3, [r4, #8]
 8008878:	4607      	mov	r7, r0
 800887a:	4691      	mov	r9, r2
 800887c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008880:	f108 0601 	add.w	r6, r8, #1
 8008884:	42b3      	cmp	r3, r6
 8008886:	db0b      	blt.n	80088a0 <__lshift+0x38>
 8008888:	4638      	mov	r0, r7
 800888a:	f7ff fd95 	bl	80083b8 <_Balloc>
 800888e:	4605      	mov	r5, r0
 8008890:	b948      	cbnz	r0, 80088a6 <__lshift+0x3e>
 8008892:	4602      	mov	r2, r0
 8008894:	4b28      	ldr	r3, [pc, #160]	@ (8008938 <__lshift+0xd0>)
 8008896:	4829      	ldr	r0, [pc, #164]	@ (800893c <__lshift+0xd4>)
 8008898:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800889c:	f001 fbc4 	bl	800a028 <__assert_func>
 80088a0:	3101      	adds	r1, #1
 80088a2:	005b      	lsls	r3, r3, #1
 80088a4:	e7ee      	b.n	8008884 <__lshift+0x1c>
 80088a6:	2300      	movs	r3, #0
 80088a8:	f100 0114 	add.w	r1, r0, #20
 80088ac:	f100 0210 	add.w	r2, r0, #16
 80088b0:	4618      	mov	r0, r3
 80088b2:	4553      	cmp	r3, sl
 80088b4:	db33      	blt.n	800891e <__lshift+0xb6>
 80088b6:	6920      	ldr	r0, [r4, #16]
 80088b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80088bc:	f104 0314 	add.w	r3, r4, #20
 80088c0:	f019 091f 	ands.w	r9, r9, #31
 80088c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80088c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80088cc:	d02b      	beq.n	8008926 <__lshift+0xbe>
 80088ce:	f1c9 0e20 	rsb	lr, r9, #32
 80088d2:	468a      	mov	sl, r1
 80088d4:	2200      	movs	r2, #0
 80088d6:	6818      	ldr	r0, [r3, #0]
 80088d8:	fa00 f009 	lsl.w	r0, r0, r9
 80088dc:	4310      	orrs	r0, r2
 80088de:	f84a 0b04 	str.w	r0, [sl], #4
 80088e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80088e6:	459c      	cmp	ip, r3
 80088e8:	fa22 f20e 	lsr.w	r2, r2, lr
 80088ec:	d8f3      	bhi.n	80088d6 <__lshift+0x6e>
 80088ee:	ebac 0304 	sub.w	r3, ip, r4
 80088f2:	3b15      	subs	r3, #21
 80088f4:	f023 0303 	bic.w	r3, r3, #3
 80088f8:	3304      	adds	r3, #4
 80088fa:	f104 0015 	add.w	r0, r4, #21
 80088fe:	4584      	cmp	ip, r0
 8008900:	bf38      	it	cc
 8008902:	2304      	movcc	r3, #4
 8008904:	50ca      	str	r2, [r1, r3]
 8008906:	b10a      	cbz	r2, 800890c <__lshift+0xa4>
 8008908:	f108 0602 	add.w	r6, r8, #2
 800890c:	3e01      	subs	r6, #1
 800890e:	4638      	mov	r0, r7
 8008910:	612e      	str	r6, [r5, #16]
 8008912:	4621      	mov	r1, r4
 8008914:	f7ff fd90 	bl	8008438 <_Bfree>
 8008918:	4628      	mov	r0, r5
 800891a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800891e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008922:	3301      	adds	r3, #1
 8008924:	e7c5      	b.n	80088b2 <__lshift+0x4a>
 8008926:	3904      	subs	r1, #4
 8008928:	f853 2b04 	ldr.w	r2, [r3], #4
 800892c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008930:	459c      	cmp	ip, r3
 8008932:	d8f9      	bhi.n	8008928 <__lshift+0xc0>
 8008934:	e7ea      	b.n	800890c <__lshift+0xa4>
 8008936:	bf00      	nop
 8008938:	08019f41 	.word	0x08019f41
 800893c:	08019f52 	.word	0x08019f52

08008940 <__mcmp>:
 8008940:	690a      	ldr	r2, [r1, #16]
 8008942:	4603      	mov	r3, r0
 8008944:	6900      	ldr	r0, [r0, #16]
 8008946:	1a80      	subs	r0, r0, r2
 8008948:	b530      	push	{r4, r5, lr}
 800894a:	d10e      	bne.n	800896a <__mcmp+0x2a>
 800894c:	3314      	adds	r3, #20
 800894e:	3114      	adds	r1, #20
 8008950:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008954:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008958:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800895c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008960:	4295      	cmp	r5, r2
 8008962:	d003      	beq.n	800896c <__mcmp+0x2c>
 8008964:	d205      	bcs.n	8008972 <__mcmp+0x32>
 8008966:	f04f 30ff 	mov.w	r0, #4294967295
 800896a:	bd30      	pop	{r4, r5, pc}
 800896c:	42a3      	cmp	r3, r4
 800896e:	d3f3      	bcc.n	8008958 <__mcmp+0x18>
 8008970:	e7fb      	b.n	800896a <__mcmp+0x2a>
 8008972:	2001      	movs	r0, #1
 8008974:	e7f9      	b.n	800896a <__mcmp+0x2a>
	...

08008978 <__mdiff>:
 8008978:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800897c:	4689      	mov	r9, r1
 800897e:	4606      	mov	r6, r0
 8008980:	4611      	mov	r1, r2
 8008982:	4648      	mov	r0, r9
 8008984:	4614      	mov	r4, r2
 8008986:	f7ff ffdb 	bl	8008940 <__mcmp>
 800898a:	1e05      	subs	r5, r0, #0
 800898c:	d112      	bne.n	80089b4 <__mdiff+0x3c>
 800898e:	4629      	mov	r1, r5
 8008990:	4630      	mov	r0, r6
 8008992:	f7ff fd11 	bl	80083b8 <_Balloc>
 8008996:	4602      	mov	r2, r0
 8008998:	b928      	cbnz	r0, 80089a6 <__mdiff+0x2e>
 800899a:	4b3f      	ldr	r3, [pc, #252]	@ (8008a98 <__mdiff+0x120>)
 800899c:	f240 2137 	movw	r1, #567	@ 0x237
 80089a0:	483e      	ldr	r0, [pc, #248]	@ (8008a9c <__mdiff+0x124>)
 80089a2:	f001 fb41 	bl	800a028 <__assert_func>
 80089a6:	2301      	movs	r3, #1
 80089a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80089ac:	4610      	mov	r0, r2
 80089ae:	b003      	add	sp, #12
 80089b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089b4:	bfbc      	itt	lt
 80089b6:	464b      	movlt	r3, r9
 80089b8:	46a1      	movlt	r9, r4
 80089ba:	4630      	mov	r0, r6
 80089bc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80089c0:	bfba      	itte	lt
 80089c2:	461c      	movlt	r4, r3
 80089c4:	2501      	movlt	r5, #1
 80089c6:	2500      	movge	r5, #0
 80089c8:	f7ff fcf6 	bl	80083b8 <_Balloc>
 80089cc:	4602      	mov	r2, r0
 80089ce:	b918      	cbnz	r0, 80089d8 <__mdiff+0x60>
 80089d0:	4b31      	ldr	r3, [pc, #196]	@ (8008a98 <__mdiff+0x120>)
 80089d2:	f240 2145 	movw	r1, #581	@ 0x245
 80089d6:	e7e3      	b.n	80089a0 <__mdiff+0x28>
 80089d8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80089dc:	6926      	ldr	r6, [r4, #16]
 80089de:	60c5      	str	r5, [r0, #12]
 80089e0:	f109 0310 	add.w	r3, r9, #16
 80089e4:	f109 0514 	add.w	r5, r9, #20
 80089e8:	f104 0e14 	add.w	lr, r4, #20
 80089ec:	f100 0b14 	add.w	fp, r0, #20
 80089f0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80089f4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80089f8:	9301      	str	r3, [sp, #4]
 80089fa:	46d9      	mov	r9, fp
 80089fc:	f04f 0c00 	mov.w	ip, #0
 8008a00:	9b01      	ldr	r3, [sp, #4]
 8008a02:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008a06:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008a0a:	9301      	str	r3, [sp, #4]
 8008a0c:	fa1f f38a 	uxth.w	r3, sl
 8008a10:	4619      	mov	r1, r3
 8008a12:	b283      	uxth	r3, r0
 8008a14:	1acb      	subs	r3, r1, r3
 8008a16:	0c00      	lsrs	r0, r0, #16
 8008a18:	4463      	add	r3, ip
 8008a1a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008a1e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008a22:	b29b      	uxth	r3, r3
 8008a24:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008a28:	4576      	cmp	r6, lr
 8008a2a:	f849 3b04 	str.w	r3, [r9], #4
 8008a2e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008a32:	d8e5      	bhi.n	8008a00 <__mdiff+0x88>
 8008a34:	1b33      	subs	r3, r6, r4
 8008a36:	3b15      	subs	r3, #21
 8008a38:	f023 0303 	bic.w	r3, r3, #3
 8008a3c:	3415      	adds	r4, #21
 8008a3e:	3304      	adds	r3, #4
 8008a40:	42a6      	cmp	r6, r4
 8008a42:	bf38      	it	cc
 8008a44:	2304      	movcc	r3, #4
 8008a46:	441d      	add	r5, r3
 8008a48:	445b      	add	r3, fp
 8008a4a:	461e      	mov	r6, r3
 8008a4c:	462c      	mov	r4, r5
 8008a4e:	4544      	cmp	r4, r8
 8008a50:	d30e      	bcc.n	8008a70 <__mdiff+0xf8>
 8008a52:	f108 0103 	add.w	r1, r8, #3
 8008a56:	1b49      	subs	r1, r1, r5
 8008a58:	f021 0103 	bic.w	r1, r1, #3
 8008a5c:	3d03      	subs	r5, #3
 8008a5e:	45a8      	cmp	r8, r5
 8008a60:	bf38      	it	cc
 8008a62:	2100      	movcc	r1, #0
 8008a64:	440b      	add	r3, r1
 8008a66:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008a6a:	b191      	cbz	r1, 8008a92 <__mdiff+0x11a>
 8008a6c:	6117      	str	r7, [r2, #16]
 8008a6e:	e79d      	b.n	80089ac <__mdiff+0x34>
 8008a70:	f854 1b04 	ldr.w	r1, [r4], #4
 8008a74:	46e6      	mov	lr, ip
 8008a76:	0c08      	lsrs	r0, r1, #16
 8008a78:	fa1c fc81 	uxtah	ip, ip, r1
 8008a7c:	4471      	add	r1, lr
 8008a7e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008a82:	b289      	uxth	r1, r1
 8008a84:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008a88:	f846 1b04 	str.w	r1, [r6], #4
 8008a8c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008a90:	e7dd      	b.n	8008a4e <__mdiff+0xd6>
 8008a92:	3f01      	subs	r7, #1
 8008a94:	e7e7      	b.n	8008a66 <__mdiff+0xee>
 8008a96:	bf00      	nop
 8008a98:	08019f41 	.word	0x08019f41
 8008a9c:	08019f52 	.word	0x08019f52

08008aa0 <__ulp>:
 8008aa0:	b082      	sub	sp, #8
 8008aa2:	ed8d 0b00 	vstr	d0, [sp]
 8008aa6:	9a01      	ldr	r2, [sp, #4]
 8008aa8:	4b0f      	ldr	r3, [pc, #60]	@ (8008ae8 <__ulp+0x48>)
 8008aaa:	4013      	ands	r3, r2
 8008aac:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	dc08      	bgt.n	8008ac6 <__ulp+0x26>
 8008ab4:	425b      	negs	r3, r3
 8008ab6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008aba:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008abe:	da04      	bge.n	8008aca <__ulp+0x2a>
 8008ac0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008ac4:	4113      	asrs	r3, r2
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	e008      	b.n	8008adc <__ulp+0x3c>
 8008aca:	f1a2 0314 	sub.w	r3, r2, #20
 8008ace:	2b1e      	cmp	r3, #30
 8008ad0:	bfda      	itte	le
 8008ad2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008ad6:	40da      	lsrle	r2, r3
 8008ad8:	2201      	movgt	r2, #1
 8008ada:	2300      	movs	r3, #0
 8008adc:	4619      	mov	r1, r3
 8008ade:	4610      	mov	r0, r2
 8008ae0:	ec41 0b10 	vmov	d0, r0, r1
 8008ae4:	b002      	add	sp, #8
 8008ae6:	4770      	bx	lr
 8008ae8:	7ff00000 	.word	0x7ff00000

08008aec <__b2d>:
 8008aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008af0:	6906      	ldr	r6, [r0, #16]
 8008af2:	f100 0814 	add.w	r8, r0, #20
 8008af6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008afa:	1f37      	subs	r7, r6, #4
 8008afc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008b00:	4610      	mov	r0, r2
 8008b02:	f7ff fd4b 	bl	800859c <__hi0bits>
 8008b06:	f1c0 0320 	rsb	r3, r0, #32
 8008b0a:	280a      	cmp	r0, #10
 8008b0c:	600b      	str	r3, [r1, #0]
 8008b0e:	491b      	ldr	r1, [pc, #108]	@ (8008b7c <__b2d+0x90>)
 8008b10:	dc15      	bgt.n	8008b3e <__b2d+0x52>
 8008b12:	f1c0 0c0b 	rsb	ip, r0, #11
 8008b16:	fa22 f30c 	lsr.w	r3, r2, ip
 8008b1a:	45b8      	cmp	r8, r7
 8008b1c:	ea43 0501 	orr.w	r5, r3, r1
 8008b20:	bf34      	ite	cc
 8008b22:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008b26:	2300      	movcs	r3, #0
 8008b28:	3015      	adds	r0, #21
 8008b2a:	fa02 f000 	lsl.w	r0, r2, r0
 8008b2e:	fa23 f30c 	lsr.w	r3, r3, ip
 8008b32:	4303      	orrs	r3, r0
 8008b34:	461c      	mov	r4, r3
 8008b36:	ec45 4b10 	vmov	d0, r4, r5
 8008b3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b3e:	45b8      	cmp	r8, r7
 8008b40:	bf3a      	itte	cc
 8008b42:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008b46:	f1a6 0708 	subcc.w	r7, r6, #8
 8008b4a:	2300      	movcs	r3, #0
 8008b4c:	380b      	subs	r0, #11
 8008b4e:	d012      	beq.n	8008b76 <__b2d+0x8a>
 8008b50:	f1c0 0120 	rsb	r1, r0, #32
 8008b54:	fa23 f401 	lsr.w	r4, r3, r1
 8008b58:	4082      	lsls	r2, r0
 8008b5a:	4322      	orrs	r2, r4
 8008b5c:	4547      	cmp	r7, r8
 8008b5e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008b62:	bf8c      	ite	hi
 8008b64:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008b68:	2200      	movls	r2, #0
 8008b6a:	4083      	lsls	r3, r0
 8008b6c:	40ca      	lsrs	r2, r1
 8008b6e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008b72:	4313      	orrs	r3, r2
 8008b74:	e7de      	b.n	8008b34 <__b2d+0x48>
 8008b76:	ea42 0501 	orr.w	r5, r2, r1
 8008b7a:	e7db      	b.n	8008b34 <__b2d+0x48>
 8008b7c:	3ff00000 	.word	0x3ff00000

08008b80 <__d2b>:
 8008b80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008b84:	460f      	mov	r7, r1
 8008b86:	2101      	movs	r1, #1
 8008b88:	ec59 8b10 	vmov	r8, r9, d0
 8008b8c:	4616      	mov	r6, r2
 8008b8e:	f7ff fc13 	bl	80083b8 <_Balloc>
 8008b92:	4604      	mov	r4, r0
 8008b94:	b930      	cbnz	r0, 8008ba4 <__d2b+0x24>
 8008b96:	4602      	mov	r2, r0
 8008b98:	4b23      	ldr	r3, [pc, #140]	@ (8008c28 <__d2b+0xa8>)
 8008b9a:	4824      	ldr	r0, [pc, #144]	@ (8008c2c <__d2b+0xac>)
 8008b9c:	f240 310f 	movw	r1, #783	@ 0x30f
 8008ba0:	f001 fa42 	bl	800a028 <__assert_func>
 8008ba4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008ba8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008bac:	b10d      	cbz	r5, 8008bb2 <__d2b+0x32>
 8008bae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008bb2:	9301      	str	r3, [sp, #4]
 8008bb4:	f1b8 0300 	subs.w	r3, r8, #0
 8008bb8:	d023      	beq.n	8008c02 <__d2b+0x82>
 8008bba:	4668      	mov	r0, sp
 8008bbc:	9300      	str	r3, [sp, #0]
 8008bbe:	f7ff fd0c 	bl	80085da <__lo0bits>
 8008bc2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008bc6:	b1d0      	cbz	r0, 8008bfe <__d2b+0x7e>
 8008bc8:	f1c0 0320 	rsb	r3, r0, #32
 8008bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8008bd0:	430b      	orrs	r3, r1
 8008bd2:	40c2      	lsrs	r2, r0
 8008bd4:	6163      	str	r3, [r4, #20]
 8008bd6:	9201      	str	r2, [sp, #4]
 8008bd8:	9b01      	ldr	r3, [sp, #4]
 8008bda:	61a3      	str	r3, [r4, #24]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	bf0c      	ite	eq
 8008be0:	2201      	moveq	r2, #1
 8008be2:	2202      	movne	r2, #2
 8008be4:	6122      	str	r2, [r4, #16]
 8008be6:	b1a5      	cbz	r5, 8008c12 <__d2b+0x92>
 8008be8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008bec:	4405      	add	r5, r0
 8008bee:	603d      	str	r5, [r7, #0]
 8008bf0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008bf4:	6030      	str	r0, [r6, #0]
 8008bf6:	4620      	mov	r0, r4
 8008bf8:	b003      	add	sp, #12
 8008bfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008bfe:	6161      	str	r1, [r4, #20]
 8008c00:	e7ea      	b.n	8008bd8 <__d2b+0x58>
 8008c02:	a801      	add	r0, sp, #4
 8008c04:	f7ff fce9 	bl	80085da <__lo0bits>
 8008c08:	9b01      	ldr	r3, [sp, #4]
 8008c0a:	6163      	str	r3, [r4, #20]
 8008c0c:	3020      	adds	r0, #32
 8008c0e:	2201      	movs	r2, #1
 8008c10:	e7e8      	b.n	8008be4 <__d2b+0x64>
 8008c12:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008c16:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008c1a:	6038      	str	r0, [r7, #0]
 8008c1c:	6918      	ldr	r0, [r3, #16]
 8008c1e:	f7ff fcbd 	bl	800859c <__hi0bits>
 8008c22:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008c26:	e7e5      	b.n	8008bf4 <__d2b+0x74>
 8008c28:	08019f41 	.word	0x08019f41
 8008c2c:	08019f52 	.word	0x08019f52

08008c30 <__ratio>:
 8008c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c34:	b085      	sub	sp, #20
 8008c36:	e9cd 1000 	strd	r1, r0, [sp]
 8008c3a:	a902      	add	r1, sp, #8
 8008c3c:	f7ff ff56 	bl	8008aec <__b2d>
 8008c40:	9800      	ldr	r0, [sp, #0]
 8008c42:	a903      	add	r1, sp, #12
 8008c44:	ec55 4b10 	vmov	r4, r5, d0
 8008c48:	f7ff ff50 	bl	8008aec <__b2d>
 8008c4c:	9b01      	ldr	r3, [sp, #4]
 8008c4e:	6919      	ldr	r1, [r3, #16]
 8008c50:	9b00      	ldr	r3, [sp, #0]
 8008c52:	691b      	ldr	r3, [r3, #16]
 8008c54:	1ac9      	subs	r1, r1, r3
 8008c56:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008c5a:	1a9b      	subs	r3, r3, r2
 8008c5c:	ec5b ab10 	vmov	sl, fp, d0
 8008c60:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	bfce      	itee	gt
 8008c68:	462a      	movgt	r2, r5
 8008c6a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008c6e:	465a      	movle	r2, fp
 8008c70:	462f      	mov	r7, r5
 8008c72:	46d9      	mov	r9, fp
 8008c74:	bfcc      	ite	gt
 8008c76:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008c7a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008c7e:	464b      	mov	r3, r9
 8008c80:	4652      	mov	r2, sl
 8008c82:	4620      	mov	r0, r4
 8008c84:	4639      	mov	r1, r7
 8008c86:	f7f7 fde1 	bl	800084c <__aeabi_ddiv>
 8008c8a:	ec41 0b10 	vmov	d0, r0, r1
 8008c8e:	b005      	add	sp, #20
 8008c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008c94 <__copybits>:
 8008c94:	3901      	subs	r1, #1
 8008c96:	b570      	push	{r4, r5, r6, lr}
 8008c98:	1149      	asrs	r1, r1, #5
 8008c9a:	6914      	ldr	r4, [r2, #16]
 8008c9c:	3101      	adds	r1, #1
 8008c9e:	f102 0314 	add.w	r3, r2, #20
 8008ca2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008ca6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008caa:	1f05      	subs	r5, r0, #4
 8008cac:	42a3      	cmp	r3, r4
 8008cae:	d30c      	bcc.n	8008cca <__copybits+0x36>
 8008cb0:	1aa3      	subs	r3, r4, r2
 8008cb2:	3b11      	subs	r3, #17
 8008cb4:	f023 0303 	bic.w	r3, r3, #3
 8008cb8:	3211      	adds	r2, #17
 8008cba:	42a2      	cmp	r2, r4
 8008cbc:	bf88      	it	hi
 8008cbe:	2300      	movhi	r3, #0
 8008cc0:	4418      	add	r0, r3
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	4288      	cmp	r0, r1
 8008cc6:	d305      	bcc.n	8008cd4 <__copybits+0x40>
 8008cc8:	bd70      	pop	{r4, r5, r6, pc}
 8008cca:	f853 6b04 	ldr.w	r6, [r3], #4
 8008cce:	f845 6f04 	str.w	r6, [r5, #4]!
 8008cd2:	e7eb      	b.n	8008cac <__copybits+0x18>
 8008cd4:	f840 3b04 	str.w	r3, [r0], #4
 8008cd8:	e7f4      	b.n	8008cc4 <__copybits+0x30>

08008cda <__any_on>:
 8008cda:	f100 0214 	add.w	r2, r0, #20
 8008cde:	6900      	ldr	r0, [r0, #16]
 8008ce0:	114b      	asrs	r3, r1, #5
 8008ce2:	4298      	cmp	r0, r3
 8008ce4:	b510      	push	{r4, lr}
 8008ce6:	db11      	blt.n	8008d0c <__any_on+0x32>
 8008ce8:	dd0a      	ble.n	8008d00 <__any_on+0x26>
 8008cea:	f011 011f 	ands.w	r1, r1, #31
 8008cee:	d007      	beq.n	8008d00 <__any_on+0x26>
 8008cf0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008cf4:	fa24 f001 	lsr.w	r0, r4, r1
 8008cf8:	fa00 f101 	lsl.w	r1, r0, r1
 8008cfc:	428c      	cmp	r4, r1
 8008cfe:	d10b      	bne.n	8008d18 <__any_on+0x3e>
 8008d00:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d803      	bhi.n	8008d10 <__any_on+0x36>
 8008d08:	2000      	movs	r0, #0
 8008d0a:	bd10      	pop	{r4, pc}
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	e7f7      	b.n	8008d00 <__any_on+0x26>
 8008d10:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008d14:	2900      	cmp	r1, #0
 8008d16:	d0f5      	beq.n	8008d04 <__any_on+0x2a>
 8008d18:	2001      	movs	r0, #1
 8008d1a:	e7f6      	b.n	8008d0a <__any_on+0x30>

08008d1c <sulp>:
 8008d1c:	b570      	push	{r4, r5, r6, lr}
 8008d1e:	4604      	mov	r4, r0
 8008d20:	460d      	mov	r5, r1
 8008d22:	ec45 4b10 	vmov	d0, r4, r5
 8008d26:	4616      	mov	r6, r2
 8008d28:	f7ff feba 	bl	8008aa0 <__ulp>
 8008d2c:	ec51 0b10 	vmov	r0, r1, d0
 8008d30:	b17e      	cbz	r6, 8008d52 <sulp+0x36>
 8008d32:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008d36:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	dd09      	ble.n	8008d52 <sulp+0x36>
 8008d3e:	051b      	lsls	r3, r3, #20
 8008d40:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008d44:	2400      	movs	r4, #0
 8008d46:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008d4a:	4622      	mov	r2, r4
 8008d4c:	462b      	mov	r3, r5
 8008d4e:	f7f7 fc53 	bl	80005f8 <__aeabi_dmul>
 8008d52:	ec41 0b10 	vmov	d0, r0, r1
 8008d56:	bd70      	pop	{r4, r5, r6, pc}

08008d58 <_strtod_l>:
 8008d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d5c:	b09f      	sub	sp, #124	@ 0x7c
 8008d5e:	460c      	mov	r4, r1
 8008d60:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008d62:	2200      	movs	r2, #0
 8008d64:	921a      	str	r2, [sp, #104]	@ 0x68
 8008d66:	9005      	str	r0, [sp, #20]
 8008d68:	f04f 0a00 	mov.w	sl, #0
 8008d6c:	f04f 0b00 	mov.w	fp, #0
 8008d70:	460a      	mov	r2, r1
 8008d72:	9219      	str	r2, [sp, #100]	@ 0x64
 8008d74:	7811      	ldrb	r1, [r2, #0]
 8008d76:	292b      	cmp	r1, #43	@ 0x2b
 8008d78:	d04a      	beq.n	8008e10 <_strtod_l+0xb8>
 8008d7a:	d838      	bhi.n	8008dee <_strtod_l+0x96>
 8008d7c:	290d      	cmp	r1, #13
 8008d7e:	d832      	bhi.n	8008de6 <_strtod_l+0x8e>
 8008d80:	2908      	cmp	r1, #8
 8008d82:	d832      	bhi.n	8008dea <_strtod_l+0x92>
 8008d84:	2900      	cmp	r1, #0
 8008d86:	d03b      	beq.n	8008e00 <_strtod_l+0xa8>
 8008d88:	2200      	movs	r2, #0
 8008d8a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008d8c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008d8e:	782a      	ldrb	r2, [r5, #0]
 8008d90:	2a30      	cmp	r2, #48	@ 0x30
 8008d92:	f040 80b3 	bne.w	8008efc <_strtod_l+0x1a4>
 8008d96:	786a      	ldrb	r2, [r5, #1]
 8008d98:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008d9c:	2a58      	cmp	r2, #88	@ 0x58
 8008d9e:	d16e      	bne.n	8008e7e <_strtod_l+0x126>
 8008da0:	9302      	str	r3, [sp, #8]
 8008da2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008da4:	9301      	str	r3, [sp, #4]
 8008da6:	ab1a      	add	r3, sp, #104	@ 0x68
 8008da8:	9300      	str	r3, [sp, #0]
 8008daa:	4a8e      	ldr	r2, [pc, #568]	@ (8008fe4 <_strtod_l+0x28c>)
 8008dac:	9805      	ldr	r0, [sp, #20]
 8008dae:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008db0:	a919      	add	r1, sp, #100	@ 0x64
 8008db2:	f001 f9d3 	bl	800a15c <__gethex>
 8008db6:	f010 060f 	ands.w	r6, r0, #15
 8008dba:	4604      	mov	r4, r0
 8008dbc:	d005      	beq.n	8008dca <_strtod_l+0x72>
 8008dbe:	2e06      	cmp	r6, #6
 8008dc0:	d128      	bne.n	8008e14 <_strtod_l+0xbc>
 8008dc2:	3501      	adds	r5, #1
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	9519      	str	r5, [sp, #100]	@ 0x64
 8008dc8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008dca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	f040 858e 	bne.w	80098ee <_strtod_l+0xb96>
 8008dd2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008dd4:	b1cb      	cbz	r3, 8008e0a <_strtod_l+0xb2>
 8008dd6:	4652      	mov	r2, sl
 8008dd8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008ddc:	ec43 2b10 	vmov	d0, r2, r3
 8008de0:	b01f      	add	sp, #124	@ 0x7c
 8008de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008de6:	2920      	cmp	r1, #32
 8008de8:	d1ce      	bne.n	8008d88 <_strtod_l+0x30>
 8008dea:	3201      	adds	r2, #1
 8008dec:	e7c1      	b.n	8008d72 <_strtod_l+0x1a>
 8008dee:	292d      	cmp	r1, #45	@ 0x2d
 8008df0:	d1ca      	bne.n	8008d88 <_strtod_l+0x30>
 8008df2:	2101      	movs	r1, #1
 8008df4:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008df6:	1c51      	adds	r1, r2, #1
 8008df8:	9119      	str	r1, [sp, #100]	@ 0x64
 8008dfa:	7852      	ldrb	r2, [r2, #1]
 8008dfc:	2a00      	cmp	r2, #0
 8008dfe:	d1c5      	bne.n	8008d8c <_strtod_l+0x34>
 8008e00:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008e02:	9419      	str	r4, [sp, #100]	@ 0x64
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	f040 8570 	bne.w	80098ea <_strtod_l+0xb92>
 8008e0a:	4652      	mov	r2, sl
 8008e0c:	465b      	mov	r3, fp
 8008e0e:	e7e5      	b.n	8008ddc <_strtod_l+0x84>
 8008e10:	2100      	movs	r1, #0
 8008e12:	e7ef      	b.n	8008df4 <_strtod_l+0x9c>
 8008e14:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008e16:	b13a      	cbz	r2, 8008e28 <_strtod_l+0xd0>
 8008e18:	2135      	movs	r1, #53	@ 0x35
 8008e1a:	a81c      	add	r0, sp, #112	@ 0x70
 8008e1c:	f7ff ff3a 	bl	8008c94 <__copybits>
 8008e20:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008e22:	9805      	ldr	r0, [sp, #20]
 8008e24:	f7ff fb08 	bl	8008438 <_Bfree>
 8008e28:	3e01      	subs	r6, #1
 8008e2a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008e2c:	2e04      	cmp	r6, #4
 8008e2e:	d806      	bhi.n	8008e3e <_strtod_l+0xe6>
 8008e30:	e8df f006 	tbb	[pc, r6]
 8008e34:	201d0314 	.word	0x201d0314
 8008e38:	14          	.byte	0x14
 8008e39:	00          	.byte	0x00
 8008e3a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008e3e:	05e1      	lsls	r1, r4, #23
 8008e40:	bf48      	it	mi
 8008e42:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008e46:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008e4a:	0d1b      	lsrs	r3, r3, #20
 8008e4c:	051b      	lsls	r3, r3, #20
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d1bb      	bne.n	8008dca <_strtod_l+0x72>
 8008e52:	f7fe fb21 	bl	8007498 <__errno>
 8008e56:	2322      	movs	r3, #34	@ 0x22
 8008e58:	6003      	str	r3, [r0, #0]
 8008e5a:	e7b6      	b.n	8008dca <_strtod_l+0x72>
 8008e5c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008e60:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008e64:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008e68:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008e6c:	e7e7      	b.n	8008e3e <_strtod_l+0xe6>
 8008e6e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8008fec <_strtod_l+0x294>
 8008e72:	e7e4      	b.n	8008e3e <_strtod_l+0xe6>
 8008e74:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008e78:	f04f 3aff 	mov.w	sl, #4294967295
 8008e7c:	e7df      	b.n	8008e3e <_strtod_l+0xe6>
 8008e7e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008e80:	1c5a      	adds	r2, r3, #1
 8008e82:	9219      	str	r2, [sp, #100]	@ 0x64
 8008e84:	785b      	ldrb	r3, [r3, #1]
 8008e86:	2b30      	cmp	r3, #48	@ 0x30
 8008e88:	d0f9      	beq.n	8008e7e <_strtod_l+0x126>
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d09d      	beq.n	8008dca <_strtod_l+0x72>
 8008e8e:	2301      	movs	r3, #1
 8008e90:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e92:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008e94:	930c      	str	r3, [sp, #48]	@ 0x30
 8008e96:	2300      	movs	r3, #0
 8008e98:	9308      	str	r3, [sp, #32]
 8008e9a:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e9c:	461f      	mov	r7, r3
 8008e9e:	220a      	movs	r2, #10
 8008ea0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008ea2:	7805      	ldrb	r5, [r0, #0]
 8008ea4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008ea8:	b2d9      	uxtb	r1, r3
 8008eaa:	2909      	cmp	r1, #9
 8008eac:	d928      	bls.n	8008f00 <_strtod_l+0x1a8>
 8008eae:	494e      	ldr	r1, [pc, #312]	@ (8008fe8 <_strtod_l+0x290>)
 8008eb0:	2201      	movs	r2, #1
 8008eb2:	f001 f86b 	bl	8009f8c <strncmp>
 8008eb6:	2800      	cmp	r0, #0
 8008eb8:	d032      	beq.n	8008f20 <_strtod_l+0x1c8>
 8008eba:	2000      	movs	r0, #0
 8008ebc:	462a      	mov	r2, r5
 8008ebe:	4681      	mov	r9, r0
 8008ec0:	463d      	mov	r5, r7
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	2a65      	cmp	r2, #101	@ 0x65
 8008ec6:	d001      	beq.n	8008ecc <_strtod_l+0x174>
 8008ec8:	2a45      	cmp	r2, #69	@ 0x45
 8008eca:	d114      	bne.n	8008ef6 <_strtod_l+0x19e>
 8008ecc:	b91d      	cbnz	r5, 8008ed6 <_strtod_l+0x17e>
 8008ece:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ed0:	4302      	orrs	r2, r0
 8008ed2:	d095      	beq.n	8008e00 <_strtod_l+0xa8>
 8008ed4:	2500      	movs	r5, #0
 8008ed6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008ed8:	1c62      	adds	r2, r4, #1
 8008eda:	9219      	str	r2, [sp, #100]	@ 0x64
 8008edc:	7862      	ldrb	r2, [r4, #1]
 8008ede:	2a2b      	cmp	r2, #43	@ 0x2b
 8008ee0:	d077      	beq.n	8008fd2 <_strtod_l+0x27a>
 8008ee2:	2a2d      	cmp	r2, #45	@ 0x2d
 8008ee4:	d07b      	beq.n	8008fde <_strtod_l+0x286>
 8008ee6:	f04f 0c00 	mov.w	ip, #0
 8008eea:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008eee:	2909      	cmp	r1, #9
 8008ef0:	f240 8082 	bls.w	8008ff8 <_strtod_l+0x2a0>
 8008ef4:	9419      	str	r4, [sp, #100]	@ 0x64
 8008ef6:	f04f 0800 	mov.w	r8, #0
 8008efa:	e0a2      	b.n	8009042 <_strtod_l+0x2ea>
 8008efc:	2300      	movs	r3, #0
 8008efe:	e7c7      	b.n	8008e90 <_strtod_l+0x138>
 8008f00:	2f08      	cmp	r7, #8
 8008f02:	bfd5      	itete	le
 8008f04:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8008f06:	9908      	ldrgt	r1, [sp, #32]
 8008f08:	fb02 3301 	mlale	r3, r2, r1, r3
 8008f0c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008f10:	f100 0001 	add.w	r0, r0, #1
 8008f14:	bfd4      	ite	le
 8008f16:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008f18:	9308      	strgt	r3, [sp, #32]
 8008f1a:	3701      	adds	r7, #1
 8008f1c:	9019      	str	r0, [sp, #100]	@ 0x64
 8008f1e:	e7bf      	b.n	8008ea0 <_strtod_l+0x148>
 8008f20:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f22:	1c5a      	adds	r2, r3, #1
 8008f24:	9219      	str	r2, [sp, #100]	@ 0x64
 8008f26:	785a      	ldrb	r2, [r3, #1]
 8008f28:	b37f      	cbz	r7, 8008f8a <_strtod_l+0x232>
 8008f2a:	4681      	mov	r9, r0
 8008f2c:	463d      	mov	r5, r7
 8008f2e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008f32:	2b09      	cmp	r3, #9
 8008f34:	d912      	bls.n	8008f5c <_strtod_l+0x204>
 8008f36:	2301      	movs	r3, #1
 8008f38:	e7c4      	b.n	8008ec4 <_strtod_l+0x16c>
 8008f3a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f3c:	1c5a      	adds	r2, r3, #1
 8008f3e:	9219      	str	r2, [sp, #100]	@ 0x64
 8008f40:	785a      	ldrb	r2, [r3, #1]
 8008f42:	3001      	adds	r0, #1
 8008f44:	2a30      	cmp	r2, #48	@ 0x30
 8008f46:	d0f8      	beq.n	8008f3a <_strtod_l+0x1e2>
 8008f48:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008f4c:	2b08      	cmp	r3, #8
 8008f4e:	f200 84d3 	bhi.w	80098f8 <_strtod_l+0xba0>
 8008f52:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f54:	930c      	str	r3, [sp, #48]	@ 0x30
 8008f56:	4681      	mov	r9, r0
 8008f58:	2000      	movs	r0, #0
 8008f5a:	4605      	mov	r5, r0
 8008f5c:	3a30      	subs	r2, #48	@ 0x30
 8008f5e:	f100 0301 	add.w	r3, r0, #1
 8008f62:	d02a      	beq.n	8008fba <_strtod_l+0x262>
 8008f64:	4499      	add	r9, r3
 8008f66:	eb00 0c05 	add.w	ip, r0, r5
 8008f6a:	462b      	mov	r3, r5
 8008f6c:	210a      	movs	r1, #10
 8008f6e:	4563      	cmp	r3, ip
 8008f70:	d10d      	bne.n	8008f8e <_strtod_l+0x236>
 8008f72:	1c69      	adds	r1, r5, #1
 8008f74:	4401      	add	r1, r0
 8008f76:	4428      	add	r0, r5
 8008f78:	2808      	cmp	r0, #8
 8008f7a:	dc16      	bgt.n	8008faa <_strtod_l+0x252>
 8008f7c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008f7e:	230a      	movs	r3, #10
 8008f80:	fb03 2300 	mla	r3, r3, r0, r2
 8008f84:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f86:	2300      	movs	r3, #0
 8008f88:	e018      	b.n	8008fbc <_strtod_l+0x264>
 8008f8a:	4638      	mov	r0, r7
 8008f8c:	e7da      	b.n	8008f44 <_strtod_l+0x1ec>
 8008f8e:	2b08      	cmp	r3, #8
 8008f90:	f103 0301 	add.w	r3, r3, #1
 8008f94:	dc03      	bgt.n	8008f9e <_strtod_l+0x246>
 8008f96:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008f98:	434e      	muls	r6, r1
 8008f9a:	960a      	str	r6, [sp, #40]	@ 0x28
 8008f9c:	e7e7      	b.n	8008f6e <_strtod_l+0x216>
 8008f9e:	2b10      	cmp	r3, #16
 8008fa0:	bfde      	ittt	le
 8008fa2:	9e08      	ldrle	r6, [sp, #32]
 8008fa4:	434e      	mulle	r6, r1
 8008fa6:	9608      	strle	r6, [sp, #32]
 8008fa8:	e7e1      	b.n	8008f6e <_strtod_l+0x216>
 8008faa:	280f      	cmp	r0, #15
 8008fac:	dceb      	bgt.n	8008f86 <_strtod_l+0x22e>
 8008fae:	9808      	ldr	r0, [sp, #32]
 8008fb0:	230a      	movs	r3, #10
 8008fb2:	fb03 2300 	mla	r3, r3, r0, r2
 8008fb6:	9308      	str	r3, [sp, #32]
 8008fb8:	e7e5      	b.n	8008f86 <_strtod_l+0x22e>
 8008fba:	4629      	mov	r1, r5
 8008fbc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008fbe:	1c50      	adds	r0, r2, #1
 8008fc0:	9019      	str	r0, [sp, #100]	@ 0x64
 8008fc2:	7852      	ldrb	r2, [r2, #1]
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	460d      	mov	r5, r1
 8008fc8:	e7b1      	b.n	8008f2e <_strtod_l+0x1d6>
 8008fca:	f04f 0900 	mov.w	r9, #0
 8008fce:	2301      	movs	r3, #1
 8008fd0:	e77d      	b.n	8008ece <_strtod_l+0x176>
 8008fd2:	f04f 0c00 	mov.w	ip, #0
 8008fd6:	1ca2      	adds	r2, r4, #2
 8008fd8:	9219      	str	r2, [sp, #100]	@ 0x64
 8008fda:	78a2      	ldrb	r2, [r4, #2]
 8008fdc:	e785      	b.n	8008eea <_strtod_l+0x192>
 8008fde:	f04f 0c01 	mov.w	ip, #1
 8008fe2:	e7f8      	b.n	8008fd6 <_strtod_l+0x27e>
 8008fe4:	0801a0c0 	.word	0x0801a0c0
 8008fe8:	0801a0a8 	.word	0x0801a0a8
 8008fec:	7ff00000 	.word	0x7ff00000
 8008ff0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008ff2:	1c51      	adds	r1, r2, #1
 8008ff4:	9119      	str	r1, [sp, #100]	@ 0x64
 8008ff6:	7852      	ldrb	r2, [r2, #1]
 8008ff8:	2a30      	cmp	r2, #48	@ 0x30
 8008ffa:	d0f9      	beq.n	8008ff0 <_strtod_l+0x298>
 8008ffc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009000:	2908      	cmp	r1, #8
 8009002:	f63f af78 	bhi.w	8008ef6 <_strtod_l+0x19e>
 8009006:	3a30      	subs	r2, #48	@ 0x30
 8009008:	920e      	str	r2, [sp, #56]	@ 0x38
 800900a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800900c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800900e:	f04f 080a 	mov.w	r8, #10
 8009012:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009014:	1c56      	adds	r6, r2, #1
 8009016:	9619      	str	r6, [sp, #100]	@ 0x64
 8009018:	7852      	ldrb	r2, [r2, #1]
 800901a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800901e:	f1be 0f09 	cmp.w	lr, #9
 8009022:	d939      	bls.n	8009098 <_strtod_l+0x340>
 8009024:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009026:	1a76      	subs	r6, r6, r1
 8009028:	2e08      	cmp	r6, #8
 800902a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800902e:	dc03      	bgt.n	8009038 <_strtod_l+0x2e0>
 8009030:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009032:	4588      	cmp	r8, r1
 8009034:	bfa8      	it	ge
 8009036:	4688      	movge	r8, r1
 8009038:	f1bc 0f00 	cmp.w	ip, #0
 800903c:	d001      	beq.n	8009042 <_strtod_l+0x2ea>
 800903e:	f1c8 0800 	rsb	r8, r8, #0
 8009042:	2d00      	cmp	r5, #0
 8009044:	d14e      	bne.n	80090e4 <_strtod_l+0x38c>
 8009046:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009048:	4308      	orrs	r0, r1
 800904a:	f47f aebe 	bne.w	8008dca <_strtod_l+0x72>
 800904e:	2b00      	cmp	r3, #0
 8009050:	f47f aed6 	bne.w	8008e00 <_strtod_l+0xa8>
 8009054:	2a69      	cmp	r2, #105	@ 0x69
 8009056:	d028      	beq.n	80090aa <_strtod_l+0x352>
 8009058:	dc25      	bgt.n	80090a6 <_strtod_l+0x34e>
 800905a:	2a49      	cmp	r2, #73	@ 0x49
 800905c:	d025      	beq.n	80090aa <_strtod_l+0x352>
 800905e:	2a4e      	cmp	r2, #78	@ 0x4e
 8009060:	f47f aece 	bne.w	8008e00 <_strtod_l+0xa8>
 8009064:	499b      	ldr	r1, [pc, #620]	@ (80092d4 <_strtod_l+0x57c>)
 8009066:	a819      	add	r0, sp, #100	@ 0x64
 8009068:	f001 fa9a 	bl	800a5a0 <__match>
 800906c:	2800      	cmp	r0, #0
 800906e:	f43f aec7 	beq.w	8008e00 <_strtod_l+0xa8>
 8009072:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009074:	781b      	ldrb	r3, [r3, #0]
 8009076:	2b28      	cmp	r3, #40	@ 0x28
 8009078:	d12e      	bne.n	80090d8 <_strtod_l+0x380>
 800907a:	4997      	ldr	r1, [pc, #604]	@ (80092d8 <_strtod_l+0x580>)
 800907c:	aa1c      	add	r2, sp, #112	@ 0x70
 800907e:	a819      	add	r0, sp, #100	@ 0x64
 8009080:	f001 faa2 	bl	800a5c8 <__hexnan>
 8009084:	2805      	cmp	r0, #5
 8009086:	d127      	bne.n	80090d8 <_strtod_l+0x380>
 8009088:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800908a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800908e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009092:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009096:	e698      	b.n	8008dca <_strtod_l+0x72>
 8009098:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800909a:	fb08 2101 	mla	r1, r8, r1, r2
 800909e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80090a2:	920e      	str	r2, [sp, #56]	@ 0x38
 80090a4:	e7b5      	b.n	8009012 <_strtod_l+0x2ba>
 80090a6:	2a6e      	cmp	r2, #110	@ 0x6e
 80090a8:	e7da      	b.n	8009060 <_strtod_l+0x308>
 80090aa:	498c      	ldr	r1, [pc, #560]	@ (80092dc <_strtod_l+0x584>)
 80090ac:	a819      	add	r0, sp, #100	@ 0x64
 80090ae:	f001 fa77 	bl	800a5a0 <__match>
 80090b2:	2800      	cmp	r0, #0
 80090b4:	f43f aea4 	beq.w	8008e00 <_strtod_l+0xa8>
 80090b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80090ba:	4989      	ldr	r1, [pc, #548]	@ (80092e0 <_strtod_l+0x588>)
 80090bc:	3b01      	subs	r3, #1
 80090be:	a819      	add	r0, sp, #100	@ 0x64
 80090c0:	9319      	str	r3, [sp, #100]	@ 0x64
 80090c2:	f001 fa6d 	bl	800a5a0 <__match>
 80090c6:	b910      	cbnz	r0, 80090ce <_strtod_l+0x376>
 80090c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80090ca:	3301      	adds	r3, #1
 80090cc:	9319      	str	r3, [sp, #100]	@ 0x64
 80090ce:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80092f0 <_strtod_l+0x598>
 80090d2:	f04f 0a00 	mov.w	sl, #0
 80090d6:	e678      	b.n	8008dca <_strtod_l+0x72>
 80090d8:	4882      	ldr	r0, [pc, #520]	@ (80092e4 <_strtod_l+0x58c>)
 80090da:	f000 ff9d 	bl	800a018 <nan>
 80090de:	ec5b ab10 	vmov	sl, fp, d0
 80090e2:	e672      	b.n	8008dca <_strtod_l+0x72>
 80090e4:	eba8 0309 	sub.w	r3, r8, r9
 80090e8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80090ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80090ec:	2f00      	cmp	r7, #0
 80090ee:	bf08      	it	eq
 80090f0:	462f      	moveq	r7, r5
 80090f2:	2d10      	cmp	r5, #16
 80090f4:	462c      	mov	r4, r5
 80090f6:	bfa8      	it	ge
 80090f8:	2410      	movge	r4, #16
 80090fa:	f7f7 fa03 	bl	8000504 <__aeabi_ui2d>
 80090fe:	2d09      	cmp	r5, #9
 8009100:	4682      	mov	sl, r0
 8009102:	468b      	mov	fp, r1
 8009104:	dc13      	bgt.n	800912e <_strtod_l+0x3d6>
 8009106:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009108:	2b00      	cmp	r3, #0
 800910a:	f43f ae5e 	beq.w	8008dca <_strtod_l+0x72>
 800910e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009110:	dd78      	ble.n	8009204 <_strtod_l+0x4ac>
 8009112:	2b16      	cmp	r3, #22
 8009114:	dc5f      	bgt.n	80091d6 <_strtod_l+0x47e>
 8009116:	4974      	ldr	r1, [pc, #464]	@ (80092e8 <_strtod_l+0x590>)
 8009118:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800911c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009120:	4652      	mov	r2, sl
 8009122:	465b      	mov	r3, fp
 8009124:	f7f7 fa68 	bl	80005f8 <__aeabi_dmul>
 8009128:	4682      	mov	sl, r0
 800912a:	468b      	mov	fp, r1
 800912c:	e64d      	b.n	8008dca <_strtod_l+0x72>
 800912e:	4b6e      	ldr	r3, [pc, #440]	@ (80092e8 <_strtod_l+0x590>)
 8009130:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009134:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009138:	f7f7 fa5e 	bl	80005f8 <__aeabi_dmul>
 800913c:	4682      	mov	sl, r0
 800913e:	9808      	ldr	r0, [sp, #32]
 8009140:	468b      	mov	fp, r1
 8009142:	f7f7 f9df 	bl	8000504 <__aeabi_ui2d>
 8009146:	4602      	mov	r2, r0
 8009148:	460b      	mov	r3, r1
 800914a:	4650      	mov	r0, sl
 800914c:	4659      	mov	r1, fp
 800914e:	f7f7 f89d 	bl	800028c <__adddf3>
 8009152:	2d0f      	cmp	r5, #15
 8009154:	4682      	mov	sl, r0
 8009156:	468b      	mov	fp, r1
 8009158:	ddd5      	ble.n	8009106 <_strtod_l+0x3ae>
 800915a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800915c:	1b2c      	subs	r4, r5, r4
 800915e:	441c      	add	r4, r3
 8009160:	2c00      	cmp	r4, #0
 8009162:	f340 8096 	ble.w	8009292 <_strtod_l+0x53a>
 8009166:	f014 030f 	ands.w	r3, r4, #15
 800916a:	d00a      	beq.n	8009182 <_strtod_l+0x42a>
 800916c:	495e      	ldr	r1, [pc, #376]	@ (80092e8 <_strtod_l+0x590>)
 800916e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009172:	4652      	mov	r2, sl
 8009174:	465b      	mov	r3, fp
 8009176:	e9d1 0100 	ldrd	r0, r1, [r1]
 800917a:	f7f7 fa3d 	bl	80005f8 <__aeabi_dmul>
 800917e:	4682      	mov	sl, r0
 8009180:	468b      	mov	fp, r1
 8009182:	f034 040f 	bics.w	r4, r4, #15
 8009186:	d073      	beq.n	8009270 <_strtod_l+0x518>
 8009188:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800918c:	dd48      	ble.n	8009220 <_strtod_l+0x4c8>
 800918e:	2400      	movs	r4, #0
 8009190:	46a0      	mov	r8, r4
 8009192:	940a      	str	r4, [sp, #40]	@ 0x28
 8009194:	46a1      	mov	r9, r4
 8009196:	9a05      	ldr	r2, [sp, #20]
 8009198:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80092f0 <_strtod_l+0x598>
 800919c:	2322      	movs	r3, #34	@ 0x22
 800919e:	6013      	str	r3, [r2, #0]
 80091a0:	f04f 0a00 	mov.w	sl, #0
 80091a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	f43f ae0f 	beq.w	8008dca <_strtod_l+0x72>
 80091ac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80091ae:	9805      	ldr	r0, [sp, #20]
 80091b0:	f7ff f942 	bl	8008438 <_Bfree>
 80091b4:	9805      	ldr	r0, [sp, #20]
 80091b6:	4649      	mov	r1, r9
 80091b8:	f7ff f93e 	bl	8008438 <_Bfree>
 80091bc:	9805      	ldr	r0, [sp, #20]
 80091be:	4641      	mov	r1, r8
 80091c0:	f7ff f93a 	bl	8008438 <_Bfree>
 80091c4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80091c6:	9805      	ldr	r0, [sp, #20]
 80091c8:	f7ff f936 	bl	8008438 <_Bfree>
 80091cc:	9805      	ldr	r0, [sp, #20]
 80091ce:	4621      	mov	r1, r4
 80091d0:	f7ff f932 	bl	8008438 <_Bfree>
 80091d4:	e5f9      	b.n	8008dca <_strtod_l+0x72>
 80091d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80091d8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80091dc:	4293      	cmp	r3, r2
 80091de:	dbbc      	blt.n	800915a <_strtod_l+0x402>
 80091e0:	4c41      	ldr	r4, [pc, #260]	@ (80092e8 <_strtod_l+0x590>)
 80091e2:	f1c5 050f 	rsb	r5, r5, #15
 80091e6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80091ea:	4652      	mov	r2, sl
 80091ec:	465b      	mov	r3, fp
 80091ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80091f2:	f7f7 fa01 	bl	80005f8 <__aeabi_dmul>
 80091f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091f8:	1b5d      	subs	r5, r3, r5
 80091fa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80091fe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009202:	e78f      	b.n	8009124 <_strtod_l+0x3cc>
 8009204:	3316      	adds	r3, #22
 8009206:	dba8      	blt.n	800915a <_strtod_l+0x402>
 8009208:	4b37      	ldr	r3, [pc, #220]	@ (80092e8 <_strtod_l+0x590>)
 800920a:	eba9 0808 	sub.w	r8, r9, r8
 800920e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009212:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009216:	4650      	mov	r0, sl
 8009218:	4659      	mov	r1, fp
 800921a:	f7f7 fb17 	bl	800084c <__aeabi_ddiv>
 800921e:	e783      	b.n	8009128 <_strtod_l+0x3d0>
 8009220:	4b32      	ldr	r3, [pc, #200]	@ (80092ec <_strtod_l+0x594>)
 8009222:	9308      	str	r3, [sp, #32]
 8009224:	2300      	movs	r3, #0
 8009226:	1124      	asrs	r4, r4, #4
 8009228:	4650      	mov	r0, sl
 800922a:	4659      	mov	r1, fp
 800922c:	461e      	mov	r6, r3
 800922e:	2c01      	cmp	r4, #1
 8009230:	dc21      	bgt.n	8009276 <_strtod_l+0x51e>
 8009232:	b10b      	cbz	r3, 8009238 <_strtod_l+0x4e0>
 8009234:	4682      	mov	sl, r0
 8009236:	468b      	mov	fp, r1
 8009238:	492c      	ldr	r1, [pc, #176]	@ (80092ec <_strtod_l+0x594>)
 800923a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800923e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009242:	4652      	mov	r2, sl
 8009244:	465b      	mov	r3, fp
 8009246:	e9d1 0100 	ldrd	r0, r1, [r1]
 800924a:	f7f7 f9d5 	bl	80005f8 <__aeabi_dmul>
 800924e:	4b28      	ldr	r3, [pc, #160]	@ (80092f0 <_strtod_l+0x598>)
 8009250:	460a      	mov	r2, r1
 8009252:	400b      	ands	r3, r1
 8009254:	4927      	ldr	r1, [pc, #156]	@ (80092f4 <_strtod_l+0x59c>)
 8009256:	428b      	cmp	r3, r1
 8009258:	4682      	mov	sl, r0
 800925a:	d898      	bhi.n	800918e <_strtod_l+0x436>
 800925c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009260:	428b      	cmp	r3, r1
 8009262:	bf86      	itte	hi
 8009264:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80092f8 <_strtod_l+0x5a0>
 8009268:	f04f 3aff 	movhi.w	sl, #4294967295
 800926c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009270:	2300      	movs	r3, #0
 8009272:	9308      	str	r3, [sp, #32]
 8009274:	e07a      	b.n	800936c <_strtod_l+0x614>
 8009276:	07e2      	lsls	r2, r4, #31
 8009278:	d505      	bpl.n	8009286 <_strtod_l+0x52e>
 800927a:	9b08      	ldr	r3, [sp, #32]
 800927c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009280:	f7f7 f9ba 	bl	80005f8 <__aeabi_dmul>
 8009284:	2301      	movs	r3, #1
 8009286:	9a08      	ldr	r2, [sp, #32]
 8009288:	3208      	adds	r2, #8
 800928a:	3601      	adds	r6, #1
 800928c:	1064      	asrs	r4, r4, #1
 800928e:	9208      	str	r2, [sp, #32]
 8009290:	e7cd      	b.n	800922e <_strtod_l+0x4d6>
 8009292:	d0ed      	beq.n	8009270 <_strtod_l+0x518>
 8009294:	4264      	negs	r4, r4
 8009296:	f014 020f 	ands.w	r2, r4, #15
 800929a:	d00a      	beq.n	80092b2 <_strtod_l+0x55a>
 800929c:	4b12      	ldr	r3, [pc, #72]	@ (80092e8 <_strtod_l+0x590>)
 800929e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80092a2:	4650      	mov	r0, sl
 80092a4:	4659      	mov	r1, fp
 80092a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092aa:	f7f7 facf 	bl	800084c <__aeabi_ddiv>
 80092ae:	4682      	mov	sl, r0
 80092b0:	468b      	mov	fp, r1
 80092b2:	1124      	asrs	r4, r4, #4
 80092b4:	d0dc      	beq.n	8009270 <_strtod_l+0x518>
 80092b6:	2c1f      	cmp	r4, #31
 80092b8:	dd20      	ble.n	80092fc <_strtod_l+0x5a4>
 80092ba:	2400      	movs	r4, #0
 80092bc:	46a0      	mov	r8, r4
 80092be:	940a      	str	r4, [sp, #40]	@ 0x28
 80092c0:	46a1      	mov	r9, r4
 80092c2:	9a05      	ldr	r2, [sp, #20]
 80092c4:	2322      	movs	r3, #34	@ 0x22
 80092c6:	f04f 0a00 	mov.w	sl, #0
 80092ca:	f04f 0b00 	mov.w	fp, #0
 80092ce:	6013      	str	r3, [r2, #0]
 80092d0:	e768      	b.n	80091a4 <_strtod_l+0x44c>
 80092d2:	bf00      	nop
 80092d4:	08019e99 	.word	0x08019e99
 80092d8:	0801a0ac 	.word	0x0801a0ac
 80092dc:	08019e91 	.word	0x08019e91
 80092e0:	08019ec8 	.word	0x08019ec8
 80092e4:	0801a255 	.word	0x0801a255
 80092e8:	08019fe0 	.word	0x08019fe0
 80092ec:	08019fb8 	.word	0x08019fb8
 80092f0:	7ff00000 	.word	0x7ff00000
 80092f4:	7ca00000 	.word	0x7ca00000
 80092f8:	7fefffff 	.word	0x7fefffff
 80092fc:	f014 0310 	ands.w	r3, r4, #16
 8009300:	bf18      	it	ne
 8009302:	236a      	movne	r3, #106	@ 0x6a
 8009304:	4ea9      	ldr	r6, [pc, #676]	@ (80095ac <_strtod_l+0x854>)
 8009306:	9308      	str	r3, [sp, #32]
 8009308:	4650      	mov	r0, sl
 800930a:	4659      	mov	r1, fp
 800930c:	2300      	movs	r3, #0
 800930e:	07e2      	lsls	r2, r4, #31
 8009310:	d504      	bpl.n	800931c <_strtod_l+0x5c4>
 8009312:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009316:	f7f7 f96f 	bl	80005f8 <__aeabi_dmul>
 800931a:	2301      	movs	r3, #1
 800931c:	1064      	asrs	r4, r4, #1
 800931e:	f106 0608 	add.w	r6, r6, #8
 8009322:	d1f4      	bne.n	800930e <_strtod_l+0x5b6>
 8009324:	b10b      	cbz	r3, 800932a <_strtod_l+0x5d2>
 8009326:	4682      	mov	sl, r0
 8009328:	468b      	mov	fp, r1
 800932a:	9b08      	ldr	r3, [sp, #32]
 800932c:	b1b3      	cbz	r3, 800935c <_strtod_l+0x604>
 800932e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009332:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009336:	2b00      	cmp	r3, #0
 8009338:	4659      	mov	r1, fp
 800933a:	dd0f      	ble.n	800935c <_strtod_l+0x604>
 800933c:	2b1f      	cmp	r3, #31
 800933e:	dd55      	ble.n	80093ec <_strtod_l+0x694>
 8009340:	2b34      	cmp	r3, #52	@ 0x34
 8009342:	bfde      	ittt	le
 8009344:	f04f 33ff 	movle.w	r3, #4294967295
 8009348:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800934c:	4093      	lslle	r3, r2
 800934e:	f04f 0a00 	mov.w	sl, #0
 8009352:	bfcc      	ite	gt
 8009354:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009358:	ea03 0b01 	andle.w	fp, r3, r1
 800935c:	2200      	movs	r2, #0
 800935e:	2300      	movs	r3, #0
 8009360:	4650      	mov	r0, sl
 8009362:	4659      	mov	r1, fp
 8009364:	f7f7 fbb0 	bl	8000ac8 <__aeabi_dcmpeq>
 8009368:	2800      	cmp	r0, #0
 800936a:	d1a6      	bne.n	80092ba <_strtod_l+0x562>
 800936c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800936e:	9300      	str	r3, [sp, #0]
 8009370:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009372:	9805      	ldr	r0, [sp, #20]
 8009374:	462b      	mov	r3, r5
 8009376:	463a      	mov	r2, r7
 8009378:	f7ff f8c6 	bl	8008508 <__s2b>
 800937c:	900a      	str	r0, [sp, #40]	@ 0x28
 800937e:	2800      	cmp	r0, #0
 8009380:	f43f af05 	beq.w	800918e <_strtod_l+0x436>
 8009384:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009386:	2a00      	cmp	r2, #0
 8009388:	eba9 0308 	sub.w	r3, r9, r8
 800938c:	bfa8      	it	ge
 800938e:	2300      	movge	r3, #0
 8009390:	9312      	str	r3, [sp, #72]	@ 0x48
 8009392:	2400      	movs	r4, #0
 8009394:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009398:	9316      	str	r3, [sp, #88]	@ 0x58
 800939a:	46a0      	mov	r8, r4
 800939c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800939e:	9805      	ldr	r0, [sp, #20]
 80093a0:	6859      	ldr	r1, [r3, #4]
 80093a2:	f7ff f809 	bl	80083b8 <_Balloc>
 80093a6:	4681      	mov	r9, r0
 80093a8:	2800      	cmp	r0, #0
 80093aa:	f43f aef4 	beq.w	8009196 <_strtod_l+0x43e>
 80093ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80093b0:	691a      	ldr	r2, [r3, #16]
 80093b2:	3202      	adds	r2, #2
 80093b4:	f103 010c 	add.w	r1, r3, #12
 80093b8:	0092      	lsls	r2, r2, #2
 80093ba:	300c      	adds	r0, #12
 80093bc:	f7fe f899 	bl	80074f2 <memcpy>
 80093c0:	ec4b ab10 	vmov	d0, sl, fp
 80093c4:	9805      	ldr	r0, [sp, #20]
 80093c6:	aa1c      	add	r2, sp, #112	@ 0x70
 80093c8:	a91b      	add	r1, sp, #108	@ 0x6c
 80093ca:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80093ce:	f7ff fbd7 	bl	8008b80 <__d2b>
 80093d2:	901a      	str	r0, [sp, #104]	@ 0x68
 80093d4:	2800      	cmp	r0, #0
 80093d6:	f43f aede 	beq.w	8009196 <_strtod_l+0x43e>
 80093da:	9805      	ldr	r0, [sp, #20]
 80093dc:	2101      	movs	r1, #1
 80093de:	f7ff f929 	bl	8008634 <__i2b>
 80093e2:	4680      	mov	r8, r0
 80093e4:	b948      	cbnz	r0, 80093fa <_strtod_l+0x6a2>
 80093e6:	f04f 0800 	mov.w	r8, #0
 80093ea:	e6d4      	b.n	8009196 <_strtod_l+0x43e>
 80093ec:	f04f 32ff 	mov.w	r2, #4294967295
 80093f0:	fa02 f303 	lsl.w	r3, r2, r3
 80093f4:	ea03 0a0a 	and.w	sl, r3, sl
 80093f8:	e7b0      	b.n	800935c <_strtod_l+0x604>
 80093fa:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80093fc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80093fe:	2d00      	cmp	r5, #0
 8009400:	bfab      	itete	ge
 8009402:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009404:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009406:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009408:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800940a:	bfac      	ite	ge
 800940c:	18ef      	addge	r7, r5, r3
 800940e:	1b5e      	sublt	r6, r3, r5
 8009410:	9b08      	ldr	r3, [sp, #32]
 8009412:	1aed      	subs	r5, r5, r3
 8009414:	4415      	add	r5, r2
 8009416:	4b66      	ldr	r3, [pc, #408]	@ (80095b0 <_strtod_l+0x858>)
 8009418:	3d01      	subs	r5, #1
 800941a:	429d      	cmp	r5, r3
 800941c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009420:	da50      	bge.n	80094c4 <_strtod_l+0x76c>
 8009422:	1b5b      	subs	r3, r3, r5
 8009424:	2b1f      	cmp	r3, #31
 8009426:	eba2 0203 	sub.w	r2, r2, r3
 800942a:	f04f 0101 	mov.w	r1, #1
 800942e:	dc3d      	bgt.n	80094ac <_strtod_l+0x754>
 8009430:	fa01 f303 	lsl.w	r3, r1, r3
 8009434:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009436:	2300      	movs	r3, #0
 8009438:	9310      	str	r3, [sp, #64]	@ 0x40
 800943a:	18bd      	adds	r5, r7, r2
 800943c:	9b08      	ldr	r3, [sp, #32]
 800943e:	42af      	cmp	r7, r5
 8009440:	4416      	add	r6, r2
 8009442:	441e      	add	r6, r3
 8009444:	463b      	mov	r3, r7
 8009446:	bfa8      	it	ge
 8009448:	462b      	movge	r3, r5
 800944a:	42b3      	cmp	r3, r6
 800944c:	bfa8      	it	ge
 800944e:	4633      	movge	r3, r6
 8009450:	2b00      	cmp	r3, #0
 8009452:	bfc2      	ittt	gt
 8009454:	1aed      	subgt	r5, r5, r3
 8009456:	1af6      	subgt	r6, r6, r3
 8009458:	1aff      	subgt	r7, r7, r3
 800945a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800945c:	2b00      	cmp	r3, #0
 800945e:	dd16      	ble.n	800948e <_strtod_l+0x736>
 8009460:	4641      	mov	r1, r8
 8009462:	9805      	ldr	r0, [sp, #20]
 8009464:	461a      	mov	r2, r3
 8009466:	f7ff f9a5 	bl	80087b4 <__pow5mult>
 800946a:	4680      	mov	r8, r0
 800946c:	2800      	cmp	r0, #0
 800946e:	d0ba      	beq.n	80093e6 <_strtod_l+0x68e>
 8009470:	4601      	mov	r1, r0
 8009472:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009474:	9805      	ldr	r0, [sp, #20]
 8009476:	f7ff f8f3 	bl	8008660 <__multiply>
 800947a:	900e      	str	r0, [sp, #56]	@ 0x38
 800947c:	2800      	cmp	r0, #0
 800947e:	f43f ae8a 	beq.w	8009196 <_strtod_l+0x43e>
 8009482:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009484:	9805      	ldr	r0, [sp, #20]
 8009486:	f7fe ffd7 	bl	8008438 <_Bfree>
 800948a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800948c:	931a      	str	r3, [sp, #104]	@ 0x68
 800948e:	2d00      	cmp	r5, #0
 8009490:	dc1d      	bgt.n	80094ce <_strtod_l+0x776>
 8009492:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009494:	2b00      	cmp	r3, #0
 8009496:	dd23      	ble.n	80094e0 <_strtod_l+0x788>
 8009498:	4649      	mov	r1, r9
 800949a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800949c:	9805      	ldr	r0, [sp, #20]
 800949e:	f7ff f989 	bl	80087b4 <__pow5mult>
 80094a2:	4681      	mov	r9, r0
 80094a4:	b9e0      	cbnz	r0, 80094e0 <_strtod_l+0x788>
 80094a6:	f04f 0900 	mov.w	r9, #0
 80094aa:	e674      	b.n	8009196 <_strtod_l+0x43e>
 80094ac:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80094b0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80094b4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80094b8:	35e2      	adds	r5, #226	@ 0xe2
 80094ba:	fa01 f305 	lsl.w	r3, r1, r5
 80094be:	9310      	str	r3, [sp, #64]	@ 0x40
 80094c0:	9113      	str	r1, [sp, #76]	@ 0x4c
 80094c2:	e7ba      	b.n	800943a <_strtod_l+0x6e2>
 80094c4:	2300      	movs	r3, #0
 80094c6:	9310      	str	r3, [sp, #64]	@ 0x40
 80094c8:	2301      	movs	r3, #1
 80094ca:	9313      	str	r3, [sp, #76]	@ 0x4c
 80094cc:	e7b5      	b.n	800943a <_strtod_l+0x6e2>
 80094ce:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80094d0:	9805      	ldr	r0, [sp, #20]
 80094d2:	462a      	mov	r2, r5
 80094d4:	f7ff f9c8 	bl	8008868 <__lshift>
 80094d8:	901a      	str	r0, [sp, #104]	@ 0x68
 80094da:	2800      	cmp	r0, #0
 80094dc:	d1d9      	bne.n	8009492 <_strtod_l+0x73a>
 80094de:	e65a      	b.n	8009196 <_strtod_l+0x43e>
 80094e0:	2e00      	cmp	r6, #0
 80094e2:	dd07      	ble.n	80094f4 <_strtod_l+0x79c>
 80094e4:	4649      	mov	r1, r9
 80094e6:	9805      	ldr	r0, [sp, #20]
 80094e8:	4632      	mov	r2, r6
 80094ea:	f7ff f9bd 	bl	8008868 <__lshift>
 80094ee:	4681      	mov	r9, r0
 80094f0:	2800      	cmp	r0, #0
 80094f2:	d0d8      	beq.n	80094a6 <_strtod_l+0x74e>
 80094f4:	2f00      	cmp	r7, #0
 80094f6:	dd08      	ble.n	800950a <_strtod_l+0x7b2>
 80094f8:	4641      	mov	r1, r8
 80094fa:	9805      	ldr	r0, [sp, #20]
 80094fc:	463a      	mov	r2, r7
 80094fe:	f7ff f9b3 	bl	8008868 <__lshift>
 8009502:	4680      	mov	r8, r0
 8009504:	2800      	cmp	r0, #0
 8009506:	f43f ae46 	beq.w	8009196 <_strtod_l+0x43e>
 800950a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800950c:	9805      	ldr	r0, [sp, #20]
 800950e:	464a      	mov	r2, r9
 8009510:	f7ff fa32 	bl	8008978 <__mdiff>
 8009514:	4604      	mov	r4, r0
 8009516:	2800      	cmp	r0, #0
 8009518:	f43f ae3d 	beq.w	8009196 <_strtod_l+0x43e>
 800951c:	68c3      	ldr	r3, [r0, #12]
 800951e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009520:	2300      	movs	r3, #0
 8009522:	60c3      	str	r3, [r0, #12]
 8009524:	4641      	mov	r1, r8
 8009526:	f7ff fa0b 	bl	8008940 <__mcmp>
 800952a:	2800      	cmp	r0, #0
 800952c:	da46      	bge.n	80095bc <_strtod_l+0x864>
 800952e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009530:	ea53 030a 	orrs.w	r3, r3, sl
 8009534:	d16c      	bne.n	8009610 <_strtod_l+0x8b8>
 8009536:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800953a:	2b00      	cmp	r3, #0
 800953c:	d168      	bne.n	8009610 <_strtod_l+0x8b8>
 800953e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009542:	0d1b      	lsrs	r3, r3, #20
 8009544:	051b      	lsls	r3, r3, #20
 8009546:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800954a:	d961      	bls.n	8009610 <_strtod_l+0x8b8>
 800954c:	6963      	ldr	r3, [r4, #20]
 800954e:	b913      	cbnz	r3, 8009556 <_strtod_l+0x7fe>
 8009550:	6923      	ldr	r3, [r4, #16]
 8009552:	2b01      	cmp	r3, #1
 8009554:	dd5c      	ble.n	8009610 <_strtod_l+0x8b8>
 8009556:	4621      	mov	r1, r4
 8009558:	2201      	movs	r2, #1
 800955a:	9805      	ldr	r0, [sp, #20]
 800955c:	f7ff f984 	bl	8008868 <__lshift>
 8009560:	4641      	mov	r1, r8
 8009562:	4604      	mov	r4, r0
 8009564:	f7ff f9ec 	bl	8008940 <__mcmp>
 8009568:	2800      	cmp	r0, #0
 800956a:	dd51      	ble.n	8009610 <_strtod_l+0x8b8>
 800956c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009570:	9a08      	ldr	r2, [sp, #32]
 8009572:	0d1b      	lsrs	r3, r3, #20
 8009574:	051b      	lsls	r3, r3, #20
 8009576:	2a00      	cmp	r2, #0
 8009578:	d06b      	beq.n	8009652 <_strtod_l+0x8fa>
 800957a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800957e:	d868      	bhi.n	8009652 <_strtod_l+0x8fa>
 8009580:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009584:	f67f ae9d 	bls.w	80092c2 <_strtod_l+0x56a>
 8009588:	4b0a      	ldr	r3, [pc, #40]	@ (80095b4 <_strtod_l+0x85c>)
 800958a:	4650      	mov	r0, sl
 800958c:	4659      	mov	r1, fp
 800958e:	2200      	movs	r2, #0
 8009590:	f7f7 f832 	bl	80005f8 <__aeabi_dmul>
 8009594:	4b08      	ldr	r3, [pc, #32]	@ (80095b8 <_strtod_l+0x860>)
 8009596:	400b      	ands	r3, r1
 8009598:	4682      	mov	sl, r0
 800959a:	468b      	mov	fp, r1
 800959c:	2b00      	cmp	r3, #0
 800959e:	f47f ae05 	bne.w	80091ac <_strtod_l+0x454>
 80095a2:	9a05      	ldr	r2, [sp, #20]
 80095a4:	2322      	movs	r3, #34	@ 0x22
 80095a6:	6013      	str	r3, [r2, #0]
 80095a8:	e600      	b.n	80091ac <_strtod_l+0x454>
 80095aa:	bf00      	nop
 80095ac:	0801a0d8 	.word	0x0801a0d8
 80095b0:	fffffc02 	.word	0xfffffc02
 80095b4:	39500000 	.word	0x39500000
 80095b8:	7ff00000 	.word	0x7ff00000
 80095bc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80095c0:	d165      	bne.n	800968e <_strtod_l+0x936>
 80095c2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80095c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80095c8:	b35a      	cbz	r2, 8009622 <_strtod_l+0x8ca>
 80095ca:	4a9f      	ldr	r2, [pc, #636]	@ (8009848 <_strtod_l+0xaf0>)
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d12b      	bne.n	8009628 <_strtod_l+0x8d0>
 80095d0:	9b08      	ldr	r3, [sp, #32]
 80095d2:	4651      	mov	r1, sl
 80095d4:	b303      	cbz	r3, 8009618 <_strtod_l+0x8c0>
 80095d6:	4b9d      	ldr	r3, [pc, #628]	@ (800984c <_strtod_l+0xaf4>)
 80095d8:	465a      	mov	r2, fp
 80095da:	4013      	ands	r3, r2
 80095dc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80095e0:	f04f 32ff 	mov.w	r2, #4294967295
 80095e4:	d81b      	bhi.n	800961e <_strtod_l+0x8c6>
 80095e6:	0d1b      	lsrs	r3, r3, #20
 80095e8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80095ec:	fa02 f303 	lsl.w	r3, r2, r3
 80095f0:	4299      	cmp	r1, r3
 80095f2:	d119      	bne.n	8009628 <_strtod_l+0x8d0>
 80095f4:	4b96      	ldr	r3, [pc, #600]	@ (8009850 <_strtod_l+0xaf8>)
 80095f6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80095f8:	429a      	cmp	r2, r3
 80095fa:	d102      	bne.n	8009602 <_strtod_l+0x8aa>
 80095fc:	3101      	adds	r1, #1
 80095fe:	f43f adca 	beq.w	8009196 <_strtod_l+0x43e>
 8009602:	4b92      	ldr	r3, [pc, #584]	@ (800984c <_strtod_l+0xaf4>)
 8009604:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009606:	401a      	ands	r2, r3
 8009608:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800960c:	f04f 0a00 	mov.w	sl, #0
 8009610:	9b08      	ldr	r3, [sp, #32]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d1b8      	bne.n	8009588 <_strtod_l+0x830>
 8009616:	e5c9      	b.n	80091ac <_strtod_l+0x454>
 8009618:	f04f 33ff 	mov.w	r3, #4294967295
 800961c:	e7e8      	b.n	80095f0 <_strtod_l+0x898>
 800961e:	4613      	mov	r3, r2
 8009620:	e7e6      	b.n	80095f0 <_strtod_l+0x898>
 8009622:	ea53 030a 	orrs.w	r3, r3, sl
 8009626:	d0a1      	beq.n	800956c <_strtod_l+0x814>
 8009628:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800962a:	b1db      	cbz	r3, 8009664 <_strtod_l+0x90c>
 800962c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800962e:	4213      	tst	r3, r2
 8009630:	d0ee      	beq.n	8009610 <_strtod_l+0x8b8>
 8009632:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009634:	9a08      	ldr	r2, [sp, #32]
 8009636:	4650      	mov	r0, sl
 8009638:	4659      	mov	r1, fp
 800963a:	b1bb      	cbz	r3, 800966c <_strtod_l+0x914>
 800963c:	f7ff fb6e 	bl	8008d1c <sulp>
 8009640:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009644:	ec53 2b10 	vmov	r2, r3, d0
 8009648:	f7f6 fe20 	bl	800028c <__adddf3>
 800964c:	4682      	mov	sl, r0
 800964e:	468b      	mov	fp, r1
 8009650:	e7de      	b.n	8009610 <_strtod_l+0x8b8>
 8009652:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009656:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800965a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800965e:	f04f 3aff 	mov.w	sl, #4294967295
 8009662:	e7d5      	b.n	8009610 <_strtod_l+0x8b8>
 8009664:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009666:	ea13 0f0a 	tst.w	r3, sl
 800966a:	e7e1      	b.n	8009630 <_strtod_l+0x8d8>
 800966c:	f7ff fb56 	bl	8008d1c <sulp>
 8009670:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009674:	ec53 2b10 	vmov	r2, r3, d0
 8009678:	f7f6 fe06 	bl	8000288 <__aeabi_dsub>
 800967c:	2200      	movs	r2, #0
 800967e:	2300      	movs	r3, #0
 8009680:	4682      	mov	sl, r0
 8009682:	468b      	mov	fp, r1
 8009684:	f7f7 fa20 	bl	8000ac8 <__aeabi_dcmpeq>
 8009688:	2800      	cmp	r0, #0
 800968a:	d0c1      	beq.n	8009610 <_strtod_l+0x8b8>
 800968c:	e619      	b.n	80092c2 <_strtod_l+0x56a>
 800968e:	4641      	mov	r1, r8
 8009690:	4620      	mov	r0, r4
 8009692:	f7ff facd 	bl	8008c30 <__ratio>
 8009696:	ec57 6b10 	vmov	r6, r7, d0
 800969a:	2200      	movs	r2, #0
 800969c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80096a0:	4630      	mov	r0, r6
 80096a2:	4639      	mov	r1, r7
 80096a4:	f7f7 fa24 	bl	8000af0 <__aeabi_dcmple>
 80096a8:	2800      	cmp	r0, #0
 80096aa:	d06f      	beq.n	800978c <_strtod_l+0xa34>
 80096ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d17a      	bne.n	80097a8 <_strtod_l+0xa50>
 80096b2:	f1ba 0f00 	cmp.w	sl, #0
 80096b6:	d158      	bne.n	800976a <_strtod_l+0xa12>
 80096b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80096ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d15a      	bne.n	8009778 <_strtod_l+0xa20>
 80096c2:	4b64      	ldr	r3, [pc, #400]	@ (8009854 <_strtod_l+0xafc>)
 80096c4:	2200      	movs	r2, #0
 80096c6:	4630      	mov	r0, r6
 80096c8:	4639      	mov	r1, r7
 80096ca:	f7f7 fa07 	bl	8000adc <__aeabi_dcmplt>
 80096ce:	2800      	cmp	r0, #0
 80096d0:	d159      	bne.n	8009786 <_strtod_l+0xa2e>
 80096d2:	4630      	mov	r0, r6
 80096d4:	4639      	mov	r1, r7
 80096d6:	4b60      	ldr	r3, [pc, #384]	@ (8009858 <_strtod_l+0xb00>)
 80096d8:	2200      	movs	r2, #0
 80096da:	f7f6 ff8d 	bl	80005f8 <__aeabi_dmul>
 80096de:	4606      	mov	r6, r0
 80096e0:	460f      	mov	r7, r1
 80096e2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80096e6:	9606      	str	r6, [sp, #24]
 80096e8:	9307      	str	r3, [sp, #28]
 80096ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80096ee:	4d57      	ldr	r5, [pc, #348]	@ (800984c <_strtod_l+0xaf4>)
 80096f0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80096f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80096f6:	401d      	ands	r5, r3
 80096f8:	4b58      	ldr	r3, [pc, #352]	@ (800985c <_strtod_l+0xb04>)
 80096fa:	429d      	cmp	r5, r3
 80096fc:	f040 80b2 	bne.w	8009864 <_strtod_l+0xb0c>
 8009700:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009702:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009706:	ec4b ab10 	vmov	d0, sl, fp
 800970a:	f7ff f9c9 	bl	8008aa0 <__ulp>
 800970e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009712:	ec51 0b10 	vmov	r0, r1, d0
 8009716:	f7f6 ff6f 	bl	80005f8 <__aeabi_dmul>
 800971a:	4652      	mov	r2, sl
 800971c:	465b      	mov	r3, fp
 800971e:	f7f6 fdb5 	bl	800028c <__adddf3>
 8009722:	460b      	mov	r3, r1
 8009724:	4949      	ldr	r1, [pc, #292]	@ (800984c <_strtod_l+0xaf4>)
 8009726:	4a4e      	ldr	r2, [pc, #312]	@ (8009860 <_strtod_l+0xb08>)
 8009728:	4019      	ands	r1, r3
 800972a:	4291      	cmp	r1, r2
 800972c:	4682      	mov	sl, r0
 800972e:	d942      	bls.n	80097b6 <_strtod_l+0xa5e>
 8009730:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009732:	4b47      	ldr	r3, [pc, #284]	@ (8009850 <_strtod_l+0xaf8>)
 8009734:	429a      	cmp	r2, r3
 8009736:	d103      	bne.n	8009740 <_strtod_l+0x9e8>
 8009738:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800973a:	3301      	adds	r3, #1
 800973c:	f43f ad2b 	beq.w	8009196 <_strtod_l+0x43e>
 8009740:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009850 <_strtod_l+0xaf8>
 8009744:	f04f 3aff 	mov.w	sl, #4294967295
 8009748:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800974a:	9805      	ldr	r0, [sp, #20]
 800974c:	f7fe fe74 	bl	8008438 <_Bfree>
 8009750:	9805      	ldr	r0, [sp, #20]
 8009752:	4649      	mov	r1, r9
 8009754:	f7fe fe70 	bl	8008438 <_Bfree>
 8009758:	9805      	ldr	r0, [sp, #20]
 800975a:	4641      	mov	r1, r8
 800975c:	f7fe fe6c 	bl	8008438 <_Bfree>
 8009760:	9805      	ldr	r0, [sp, #20]
 8009762:	4621      	mov	r1, r4
 8009764:	f7fe fe68 	bl	8008438 <_Bfree>
 8009768:	e618      	b.n	800939c <_strtod_l+0x644>
 800976a:	f1ba 0f01 	cmp.w	sl, #1
 800976e:	d103      	bne.n	8009778 <_strtod_l+0xa20>
 8009770:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009772:	2b00      	cmp	r3, #0
 8009774:	f43f ada5 	beq.w	80092c2 <_strtod_l+0x56a>
 8009778:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009828 <_strtod_l+0xad0>
 800977c:	4f35      	ldr	r7, [pc, #212]	@ (8009854 <_strtod_l+0xafc>)
 800977e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009782:	2600      	movs	r6, #0
 8009784:	e7b1      	b.n	80096ea <_strtod_l+0x992>
 8009786:	4f34      	ldr	r7, [pc, #208]	@ (8009858 <_strtod_l+0xb00>)
 8009788:	2600      	movs	r6, #0
 800978a:	e7aa      	b.n	80096e2 <_strtod_l+0x98a>
 800978c:	4b32      	ldr	r3, [pc, #200]	@ (8009858 <_strtod_l+0xb00>)
 800978e:	4630      	mov	r0, r6
 8009790:	4639      	mov	r1, r7
 8009792:	2200      	movs	r2, #0
 8009794:	f7f6 ff30 	bl	80005f8 <__aeabi_dmul>
 8009798:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800979a:	4606      	mov	r6, r0
 800979c:	460f      	mov	r7, r1
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d09f      	beq.n	80096e2 <_strtod_l+0x98a>
 80097a2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80097a6:	e7a0      	b.n	80096ea <_strtod_l+0x992>
 80097a8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009830 <_strtod_l+0xad8>
 80097ac:	ed8d 7b06 	vstr	d7, [sp, #24]
 80097b0:	ec57 6b17 	vmov	r6, r7, d7
 80097b4:	e799      	b.n	80096ea <_strtod_l+0x992>
 80097b6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80097ba:	9b08      	ldr	r3, [sp, #32]
 80097bc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d1c1      	bne.n	8009748 <_strtod_l+0x9f0>
 80097c4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80097c8:	0d1b      	lsrs	r3, r3, #20
 80097ca:	051b      	lsls	r3, r3, #20
 80097cc:	429d      	cmp	r5, r3
 80097ce:	d1bb      	bne.n	8009748 <_strtod_l+0x9f0>
 80097d0:	4630      	mov	r0, r6
 80097d2:	4639      	mov	r1, r7
 80097d4:	f7f7 fa70 	bl	8000cb8 <__aeabi_d2lz>
 80097d8:	f7f6 fee0 	bl	800059c <__aeabi_l2d>
 80097dc:	4602      	mov	r2, r0
 80097de:	460b      	mov	r3, r1
 80097e0:	4630      	mov	r0, r6
 80097e2:	4639      	mov	r1, r7
 80097e4:	f7f6 fd50 	bl	8000288 <__aeabi_dsub>
 80097e8:	460b      	mov	r3, r1
 80097ea:	4602      	mov	r2, r0
 80097ec:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80097f0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80097f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80097f6:	ea46 060a 	orr.w	r6, r6, sl
 80097fa:	431e      	orrs	r6, r3
 80097fc:	d06f      	beq.n	80098de <_strtod_l+0xb86>
 80097fe:	a30e      	add	r3, pc, #56	@ (adr r3, 8009838 <_strtod_l+0xae0>)
 8009800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009804:	f7f7 f96a 	bl	8000adc <__aeabi_dcmplt>
 8009808:	2800      	cmp	r0, #0
 800980a:	f47f accf 	bne.w	80091ac <_strtod_l+0x454>
 800980e:	a30c      	add	r3, pc, #48	@ (adr r3, 8009840 <_strtod_l+0xae8>)
 8009810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009814:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009818:	f7f7 f97e 	bl	8000b18 <__aeabi_dcmpgt>
 800981c:	2800      	cmp	r0, #0
 800981e:	d093      	beq.n	8009748 <_strtod_l+0x9f0>
 8009820:	e4c4      	b.n	80091ac <_strtod_l+0x454>
 8009822:	bf00      	nop
 8009824:	f3af 8000 	nop.w
 8009828:	00000000 	.word	0x00000000
 800982c:	bff00000 	.word	0xbff00000
 8009830:	00000000 	.word	0x00000000
 8009834:	3ff00000 	.word	0x3ff00000
 8009838:	94a03595 	.word	0x94a03595
 800983c:	3fdfffff 	.word	0x3fdfffff
 8009840:	35afe535 	.word	0x35afe535
 8009844:	3fe00000 	.word	0x3fe00000
 8009848:	000fffff 	.word	0x000fffff
 800984c:	7ff00000 	.word	0x7ff00000
 8009850:	7fefffff 	.word	0x7fefffff
 8009854:	3ff00000 	.word	0x3ff00000
 8009858:	3fe00000 	.word	0x3fe00000
 800985c:	7fe00000 	.word	0x7fe00000
 8009860:	7c9fffff 	.word	0x7c9fffff
 8009864:	9b08      	ldr	r3, [sp, #32]
 8009866:	b323      	cbz	r3, 80098b2 <_strtod_l+0xb5a>
 8009868:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800986c:	d821      	bhi.n	80098b2 <_strtod_l+0xb5a>
 800986e:	a328      	add	r3, pc, #160	@ (adr r3, 8009910 <_strtod_l+0xbb8>)
 8009870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009874:	4630      	mov	r0, r6
 8009876:	4639      	mov	r1, r7
 8009878:	f7f7 f93a 	bl	8000af0 <__aeabi_dcmple>
 800987c:	b1a0      	cbz	r0, 80098a8 <_strtod_l+0xb50>
 800987e:	4639      	mov	r1, r7
 8009880:	4630      	mov	r0, r6
 8009882:	f7f7 f991 	bl	8000ba8 <__aeabi_d2uiz>
 8009886:	2801      	cmp	r0, #1
 8009888:	bf38      	it	cc
 800988a:	2001      	movcc	r0, #1
 800988c:	f7f6 fe3a 	bl	8000504 <__aeabi_ui2d>
 8009890:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009892:	4606      	mov	r6, r0
 8009894:	460f      	mov	r7, r1
 8009896:	b9fb      	cbnz	r3, 80098d8 <_strtod_l+0xb80>
 8009898:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800989c:	9014      	str	r0, [sp, #80]	@ 0x50
 800989e:	9315      	str	r3, [sp, #84]	@ 0x54
 80098a0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80098a4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80098a8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80098aa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80098ae:	1b5b      	subs	r3, r3, r5
 80098b0:	9311      	str	r3, [sp, #68]	@ 0x44
 80098b2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80098b6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80098ba:	f7ff f8f1 	bl	8008aa0 <__ulp>
 80098be:	4650      	mov	r0, sl
 80098c0:	ec53 2b10 	vmov	r2, r3, d0
 80098c4:	4659      	mov	r1, fp
 80098c6:	f7f6 fe97 	bl	80005f8 <__aeabi_dmul>
 80098ca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80098ce:	f7f6 fcdd 	bl	800028c <__adddf3>
 80098d2:	4682      	mov	sl, r0
 80098d4:	468b      	mov	fp, r1
 80098d6:	e770      	b.n	80097ba <_strtod_l+0xa62>
 80098d8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80098dc:	e7e0      	b.n	80098a0 <_strtod_l+0xb48>
 80098de:	a30e      	add	r3, pc, #56	@ (adr r3, 8009918 <_strtod_l+0xbc0>)
 80098e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098e4:	f7f7 f8fa 	bl	8000adc <__aeabi_dcmplt>
 80098e8:	e798      	b.n	800981c <_strtod_l+0xac4>
 80098ea:	2300      	movs	r3, #0
 80098ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 80098ee:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80098f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80098f2:	6013      	str	r3, [r2, #0]
 80098f4:	f7ff ba6d 	b.w	8008dd2 <_strtod_l+0x7a>
 80098f8:	2a65      	cmp	r2, #101	@ 0x65
 80098fa:	f43f ab66 	beq.w	8008fca <_strtod_l+0x272>
 80098fe:	2a45      	cmp	r2, #69	@ 0x45
 8009900:	f43f ab63 	beq.w	8008fca <_strtod_l+0x272>
 8009904:	2301      	movs	r3, #1
 8009906:	f7ff bb9e 	b.w	8009046 <_strtod_l+0x2ee>
 800990a:	bf00      	nop
 800990c:	f3af 8000 	nop.w
 8009910:	ffc00000 	.word	0xffc00000
 8009914:	41dfffff 	.word	0x41dfffff
 8009918:	94a03595 	.word	0x94a03595
 800991c:	3fcfffff 	.word	0x3fcfffff

08009920 <_strtod_r>:
 8009920:	4b01      	ldr	r3, [pc, #4]	@ (8009928 <_strtod_r+0x8>)
 8009922:	f7ff ba19 	b.w	8008d58 <_strtod_l>
 8009926:	bf00      	nop
 8009928:	20000080 	.word	0x20000080

0800992c <_strtol_l.constprop.0>:
 800992c:	2b24      	cmp	r3, #36	@ 0x24
 800992e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009932:	4686      	mov	lr, r0
 8009934:	4690      	mov	r8, r2
 8009936:	d801      	bhi.n	800993c <_strtol_l.constprop.0+0x10>
 8009938:	2b01      	cmp	r3, #1
 800993a:	d106      	bne.n	800994a <_strtol_l.constprop.0+0x1e>
 800993c:	f7fd fdac 	bl	8007498 <__errno>
 8009940:	2316      	movs	r3, #22
 8009942:	6003      	str	r3, [r0, #0]
 8009944:	2000      	movs	r0, #0
 8009946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800994a:	4834      	ldr	r0, [pc, #208]	@ (8009a1c <_strtol_l.constprop.0+0xf0>)
 800994c:	460d      	mov	r5, r1
 800994e:	462a      	mov	r2, r5
 8009950:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009954:	5d06      	ldrb	r6, [r0, r4]
 8009956:	f016 0608 	ands.w	r6, r6, #8
 800995a:	d1f8      	bne.n	800994e <_strtol_l.constprop.0+0x22>
 800995c:	2c2d      	cmp	r4, #45	@ 0x2d
 800995e:	d12d      	bne.n	80099bc <_strtol_l.constprop.0+0x90>
 8009960:	782c      	ldrb	r4, [r5, #0]
 8009962:	2601      	movs	r6, #1
 8009964:	1c95      	adds	r5, r2, #2
 8009966:	f033 0210 	bics.w	r2, r3, #16
 800996a:	d109      	bne.n	8009980 <_strtol_l.constprop.0+0x54>
 800996c:	2c30      	cmp	r4, #48	@ 0x30
 800996e:	d12a      	bne.n	80099c6 <_strtol_l.constprop.0+0x9a>
 8009970:	782a      	ldrb	r2, [r5, #0]
 8009972:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009976:	2a58      	cmp	r2, #88	@ 0x58
 8009978:	d125      	bne.n	80099c6 <_strtol_l.constprop.0+0x9a>
 800997a:	786c      	ldrb	r4, [r5, #1]
 800997c:	2310      	movs	r3, #16
 800997e:	3502      	adds	r5, #2
 8009980:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009984:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009988:	2200      	movs	r2, #0
 800998a:	fbbc f9f3 	udiv	r9, ip, r3
 800998e:	4610      	mov	r0, r2
 8009990:	fb03 ca19 	mls	sl, r3, r9, ip
 8009994:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009998:	2f09      	cmp	r7, #9
 800999a:	d81b      	bhi.n	80099d4 <_strtol_l.constprop.0+0xa8>
 800999c:	463c      	mov	r4, r7
 800999e:	42a3      	cmp	r3, r4
 80099a0:	dd27      	ble.n	80099f2 <_strtol_l.constprop.0+0xc6>
 80099a2:	1c57      	adds	r7, r2, #1
 80099a4:	d007      	beq.n	80099b6 <_strtol_l.constprop.0+0x8a>
 80099a6:	4581      	cmp	r9, r0
 80099a8:	d320      	bcc.n	80099ec <_strtol_l.constprop.0+0xc0>
 80099aa:	d101      	bne.n	80099b0 <_strtol_l.constprop.0+0x84>
 80099ac:	45a2      	cmp	sl, r4
 80099ae:	db1d      	blt.n	80099ec <_strtol_l.constprop.0+0xc0>
 80099b0:	fb00 4003 	mla	r0, r0, r3, r4
 80099b4:	2201      	movs	r2, #1
 80099b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80099ba:	e7eb      	b.n	8009994 <_strtol_l.constprop.0+0x68>
 80099bc:	2c2b      	cmp	r4, #43	@ 0x2b
 80099be:	bf04      	itt	eq
 80099c0:	782c      	ldrbeq	r4, [r5, #0]
 80099c2:	1c95      	addeq	r5, r2, #2
 80099c4:	e7cf      	b.n	8009966 <_strtol_l.constprop.0+0x3a>
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d1da      	bne.n	8009980 <_strtol_l.constprop.0+0x54>
 80099ca:	2c30      	cmp	r4, #48	@ 0x30
 80099cc:	bf0c      	ite	eq
 80099ce:	2308      	moveq	r3, #8
 80099d0:	230a      	movne	r3, #10
 80099d2:	e7d5      	b.n	8009980 <_strtol_l.constprop.0+0x54>
 80099d4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80099d8:	2f19      	cmp	r7, #25
 80099da:	d801      	bhi.n	80099e0 <_strtol_l.constprop.0+0xb4>
 80099dc:	3c37      	subs	r4, #55	@ 0x37
 80099de:	e7de      	b.n	800999e <_strtol_l.constprop.0+0x72>
 80099e0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80099e4:	2f19      	cmp	r7, #25
 80099e6:	d804      	bhi.n	80099f2 <_strtol_l.constprop.0+0xc6>
 80099e8:	3c57      	subs	r4, #87	@ 0x57
 80099ea:	e7d8      	b.n	800999e <_strtol_l.constprop.0+0x72>
 80099ec:	f04f 32ff 	mov.w	r2, #4294967295
 80099f0:	e7e1      	b.n	80099b6 <_strtol_l.constprop.0+0x8a>
 80099f2:	1c53      	adds	r3, r2, #1
 80099f4:	d108      	bne.n	8009a08 <_strtol_l.constprop.0+0xdc>
 80099f6:	2322      	movs	r3, #34	@ 0x22
 80099f8:	f8ce 3000 	str.w	r3, [lr]
 80099fc:	4660      	mov	r0, ip
 80099fe:	f1b8 0f00 	cmp.w	r8, #0
 8009a02:	d0a0      	beq.n	8009946 <_strtol_l.constprop.0+0x1a>
 8009a04:	1e69      	subs	r1, r5, #1
 8009a06:	e006      	b.n	8009a16 <_strtol_l.constprop.0+0xea>
 8009a08:	b106      	cbz	r6, 8009a0c <_strtol_l.constprop.0+0xe0>
 8009a0a:	4240      	negs	r0, r0
 8009a0c:	f1b8 0f00 	cmp.w	r8, #0
 8009a10:	d099      	beq.n	8009946 <_strtol_l.constprop.0+0x1a>
 8009a12:	2a00      	cmp	r2, #0
 8009a14:	d1f6      	bne.n	8009a04 <_strtol_l.constprop.0+0xd8>
 8009a16:	f8c8 1000 	str.w	r1, [r8]
 8009a1a:	e794      	b.n	8009946 <_strtol_l.constprop.0+0x1a>
 8009a1c:	0801a101 	.word	0x0801a101

08009a20 <_strtol_r>:
 8009a20:	f7ff bf84 	b.w	800992c <_strtol_l.constprop.0>

08009a24 <__ssputs_r>:
 8009a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a28:	688e      	ldr	r6, [r1, #8]
 8009a2a:	461f      	mov	r7, r3
 8009a2c:	42be      	cmp	r6, r7
 8009a2e:	680b      	ldr	r3, [r1, #0]
 8009a30:	4682      	mov	sl, r0
 8009a32:	460c      	mov	r4, r1
 8009a34:	4690      	mov	r8, r2
 8009a36:	d82d      	bhi.n	8009a94 <__ssputs_r+0x70>
 8009a38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009a3c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009a40:	d026      	beq.n	8009a90 <__ssputs_r+0x6c>
 8009a42:	6965      	ldr	r5, [r4, #20]
 8009a44:	6909      	ldr	r1, [r1, #16]
 8009a46:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009a4a:	eba3 0901 	sub.w	r9, r3, r1
 8009a4e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009a52:	1c7b      	adds	r3, r7, #1
 8009a54:	444b      	add	r3, r9
 8009a56:	106d      	asrs	r5, r5, #1
 8009a58:	429d      	cmp	r5, r3
 8009a5a:	bf38      	it	cc
 8009a5c:	461d      	movcc	r5, r3
 8009a5e:	0553      	lsls	r3, r2, #21
 8009a60:	d527      	bpl.n	8009ab2 <__ssputs_r+0x8e>
 8009a62:	4629      	mov	r1, r5
 8009a64:	f7fe fc1c 	bl	80082a0 <_malloc_r>
 8009a68:	4606      	mov	r6, r0
 8009a6a:	b360      	cbz	r0, 8009ac6 <__ssputs_r+0xa2>
 8009a6c:	6921      	ldr	r1, [r4, #16]
 8009a6e:	464a      	mov	r2, r9
 8009a70:	f7fd fd3f 	bl	80074f2 <memcpy>
 8009a74:	89a3      	ldrh	r3, [r4, #12]
 8009a76:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009a7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a7e:	81a3      	strh	r3, [r4, #12]
 8009a80:	6126      	str	r6, [r4, #16]
 8009a82:	6165      	str	r5, [r4, #20]
 8009a84:	444e      	add	r6, r9
 8009a86:	eba5 0509 	sub.w	r5, r5, r9
 8009a8a:	6026      	str	r6, [r4, #0]
 8009a8c:	60a5      	str	r5, [r4, #8]
 8009a8e:	463e      	mov	r6, r7
 8009a90:	42be      	cmp	r6, r7
 8009a92:	d900      	bls.n	8009a96 <__ssputs_r+0x72>
 8009a94:	463e      	mov	r6, r7
 8009a96:	6820      	ldr	r0, [r4, #0]
 8009a98:	4632      	mov	r2, r6
 8009a9a:	4641      	mov	r1, r8
 8009a9c:	f000 fa5c 	bl	8009f58 <memmove>
 8009aa0:	68a3      	ldr	r3, [r4, #8]
 8009aa2:	1b9b      	subs	r3, r3, r6
 8009aa4:	60a3      	str	r3, [r4, #8]
 8009aa6:	6823      	ldr	r3, [r4, #0]
 8009aa8:	4433      	add	r3, r6
 8009aaa:	6023      	str	r3, [r4, #0]
 8009aac:	2000      	movs	r0, #0
 8009aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ab2:	462a      	mov	r2, r5
 8009ab4:	f000 fe35 	bl	800a722 <_realloc_r>
 8009ab8:	4606      	mov	r6, r0
 8009aba:	2800      	cmp	r0, #0
 8009abc:	d1e0      	bne.n	8009a80 <__ssputs_r+0x5c>
 8009abe:	6921      	ldr	r1, [r4, #16]
 8009ac0:	4650      	mov	r0, sl
 8009ac2:	f7fe fb79 	bl	80081b8 <_free_r>
 8009ac6:	230c      	movs	r3, #12
 8009ac8:	f8ca 3000 	str.w	r3, [sl]
 8009acc:	89a3      	ldrh	r3, [r4, #12]
 8009ace:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ad2:	81a3      	strh	r3, [r4, #12]
 8009ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ad8:	e7e9      	b.n	8009aae <__ssputs_r+0x8a>
	...

08009adc <_svfiprintf_r>:
 8009adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ae0:	4698      	mov	r8, r3
 8009ae2:	898b      	ldrh	r3, [r1, #12]
 8009ae4:	061b      	lsls	r3, r3, #24
 8009ae6:	b09d      	sub	sp, #116	@ 0x74
 8009ae8:	4607      	mov	r7, r0
 8009aea:	460d      	mov	r5, r1
 8009aec:	4614      	mov	r4, r2
 8009aee:	d510      	bpl.n	8009b12 <_svfiprintf_r+0x36>
 8009af0:	690b      	ldr	r3, [r1, #16]
 8009af2:	b973      	cbnz	r3, 8009b12 <_svfiprintf_r+0x36>
 8009af4:	2140      	movs	r1, #64	@ 0x40
 8009af6:	f7fe fbd3 	bl	80082a0 <_malloc_r>
 8009afa:	6028      	str	r0, [r5, #0]
 8009afc:	6128      	str	r0, [r5, #16]
 8009afe:	b930      	cbnz	r0, 8009b0e <_svfiprintf_r+0x32>
 8009b00:	230c      	movs	r3, #12
 8009b02:	603b      	str	r3, [r7, #0]
 8009b04:	f04f 30ff 	mov.w	r0, #4294967295
 8009b08:	b01d      	add	sp, #116	@ 0x74
 8009b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b0e:	2340      	movs	r3, #64	@ 0x40
 8009b10:	616b      	str	r3, [r5, #20]
 8009b12:	2300      	movs	r3, #0
 8009b14:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b16:	2320      	movs	r3, #32
 8009b18:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009b1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b20:	2330      	movs	r3, #48	@ 0x30
 8009b22:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009cc0 <_svfiprintf_r+0x1e4>
 8009b26:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009b2a:	f04f 0901 	mov.w	r9, #1
 8009b2e:	4623      	mov	r3, r4
 8009b30:	469a      	mov	sl, r3
 8009b32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b36:	b10a      	cbz	r2, 8009b3c <_svfiprintf_r+0x60>
 8009b38:	2a25      	cmp	r2, #37	@ 0x25
 8009b3a:	d1f9      	bne.n	8009b30 <_svfiprintf_r+0x54>
 8009b3c:	ebba 0b04 	subs.w	fp, sl, r4
 8009b40:	d00b      	beq.n	8009b5a <_svfiprintf_r+0x7e>
 8009b42:	465b      	mov	r3, fp
 8009b44:	4622      	mov	r2, r4
 8009b46:	4629      	mov	r1, r5
 8009b48:	4638      	mov	r0, r7
 8009b4a:	f7ff ff6b 	bl	8009a24 <__ssputs_r>
 8009b4e:	3001      	adds	r0, #1
 8009b50:	f000 80a7 	beq.w	8009ca2 <_svfiprintf_r+0x1c6>
 8009b54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b56:	445a      	add	r2, fp
 8009b58:	9209      	str	r2, [sp, #36]	@ 0x24
 8009b5a:	f89a 3000 	ldrb.w	r3, [sl]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	f000 809f 	beq.w	8009ca2 <_svfiprintf_r+0x1c6>
 8009b64:	2300      	movs	r3, #0
 8009b66:	f04f 32ff 	mov.w	r2, #4294967295
 8009b6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b6e:	f10a 0a01 	add.w	sl, sl, #1
 8009b72:	9304      	str	r3, [sp, #16]
 8009b74:	9307      	str	r3, [sp, #28]
 8009b76:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009b7a:	931a      	str	r3, [sp, #104]	@ 0x68
 8009b7c:	4654      	mov	r4, sl
 8009b7e:	2205      	movs	r2, #5
 8009b80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b84:	484e      	ldr	r0, [pc, #312]	@ (8009cc0 <_svfiprintf_r+0x1e4>)
 8009b86:	f7f6 fb23 	bl	80001d0 <memchr>
 8009b8a:	9a04      	ldr	r2, [sp, #16]
 8009b8c:	b9d8      	cbnz	r0, 8009bc6 <_svfiprintf_r+0xea>
 8009b8e:	06d0      	lsls	r0, r2, #27
 8009b90:	bf44      	itt	mi
 8009b92:	2320      	movmi	r3, #32
 8009b94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b98:	0711      	lsls	r1, r2, #28
 8009b9a:	bf44      	itt	mi
 8009b9c:	232b      	movmi	r3, #43	@ 0x2b
 8009b9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ba2:	f89a 3000 	ldrb.w	r3, [sl]
 8009ba6:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ba8:	d015      	beq.n	8009bd6 <_svfiprintf_r+0xfa>
 8009baa:	9a07      	ldr	r2, [sp, #28]
 8009bac:	4654      	mov	r4, sl
 8009bae:	2000      	movs	r0, #0
 8009bb0:	f04f 0c0a 	mov.w	ip, #10
 8009bb4:	4621      	mov	r1, r4
 8009bb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009bba:	3b30      	subs	r3, #48	@ 0x30
 8009bbc:	2b09      	cmp	r3, #9
 8009bbe:	d94b      	bls.n	8009c58 <_svfiprintf_r+0x17c>
 8009bc0:	b1b0      	cbz	r0, 8009bf0 <_svfiprintf_r+0x114>
 8009bc2:	9207      	str	r2, [sp, #28]
 8009bc4:	e014      	b.n	8009bf0 <_svfiprintf_r+0x114>
 8009bc6:	eba0 0308 	sub.w	r3, r0, r8
 8009bca:	fa09 f303 	lsl.w	r3, r9, r3
 8009bce:	4313      	orrs	r3, r2
 8009bd0:	9304      	str	r3, [sp, #16]
 8009bd2:	46a2      	mov	sl, r4
 8009bd4:	e7d2      	b.n	8009b7c <_svfiprintf_r+0xa0>
 8009bd6:	9b03      	ldr	r3, [sp, #12]
 8009bd8:	1d19      	adds	r1, r3, #4
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	9103      	str	r1, [sp, #12]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	bfbb      	ittet	lt
 8009be2:	425b      	neglt	r3, r3
 8009be4:	f042 0202 	orrlt.w	r2, r2, #2
 8009be8:	9307      	strge	r3, [sp, #28]
 8009bea:	9307      	strlt	r3, [sp, #28]
 8009bec:	bfb8      	it	lt
 8009bee:	9204      	strlt	r2, [sp, #16]
 8009bf0:	7823      	ldrb	r3, [r4, #0]
 8009bf2:	2b2e      	cmp	r3, #46	@ 0x2e
 8009bf4:	d10a      	bne.n	8009c0c <_svfiprintf_r+0x130>
 8009bf6:	7863      	ldrb	r3, [r4, #1]
 8009bf8:	2b2a      	cmp	r3, #42	@ 0x2a
 8009bfa:	d132      	bne.n	8009c62 <_svfiprintf_r+0x186>
 8009bfc:	9b03      	ldr	r3, [sp, #12]
 8009bfe:	1d1a      	adds	r2, r3, #4
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	9203      	str	r2, [sp, #12]
 8009c04:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009c08:	3402      	adds	r4, #2
 8009c0a:	9305      	str	r3, [sp, #20]
 8009c0c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009cd0 <_svfiprintf_r+0x1f4>
 8009c10:	7821      	ldrb	r1, [r4, #0]
 8009c12:	2203      	movs	r2, #3
 8009c14:	4650      	mov	r0, sl
 8009c16:	f7f6 fadb 	bl	80001d0 <memchr>
 8009c1a:	b138      	cbz	r0, 8009c2c <_svfiprintf_r+0x150>
 8009c1c:	9b04      	ldr	r3, [sp, #16]
 8009c1e:	eba0 000a 	sub.w	r0, r0, sl
 8009c22:	2240      	movs	r2, #64	@ 0x40
 8009c24:	4082      	lsls	r2, r0
 8009c26:	4313      	orrs	r3, r2
 8009c28:	3401      	adds	r4, #1
 8009c2a:	9304      	str	r3, [sp, #16]
 8009c2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c30:	4824      	ldr	r0, [pc, #144]	@ (8009cc4 <_svfiprintf_r+0x1e8>)
 8009c32:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009c36:	2206      	movs	r2, #6
 8009c38:	f7f6 faca 	bl	80001d0 <memchr>
 8009c3c:	2800      	cmp	r0, #0
 8009c3e:	d036      	beq.n	8009cae <_svfiprintf_r+0x1d2>
 8009c40:	4b21      	ldr	r3, [pc, #132]	@ (8009cc8 <_svfiprintf_r+0x1ec>)
 8009c42:	bb1b      	cbnz	r3, 8009c8c <_svfiprintf_r+0x1b0>
 8009c44:	9b03      	ldr	r3, [sp, #12]
 8009c46:	3307      	adds	r3, #7
 8009c48:	f023 0307 	bic.w	r3, r3, #7
 8009c4c:	3308      	adds	r3, #8
 8009c4e:	9303      	str	r3, [sp, #12]
 8009c50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c52:	4433      	add	r3, r6
 8009c54:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c56:	e76a      	b.n	8009b2e <_svfiprintf_r+0x52>
 8009c58:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c5c:	460c      	mov	r4, r1
 8009c5e:	2001      	movs	r0, #1
 8009c60:	e7a8      	b.n	8009bb4 <_svfiprintf_r+0xd8>
 8009c62:	2300      	movs	r3, #0
 8009c64:	3401      	adds	r4, #1
 8009c66:	9305      	str	r3, [sp, #20]
 8009c68:	4619      	mov	r1, r3
 8009c6a:	f04f 0c0a 	mov.w	ip, #10
 8009c6e:	4620      	mov	r0, r4
 8009c70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c74:	3a30      	subs	r2, #48	@ 0x30
 8009c76:	2a09      	cmp	r2, #9
 8009c78:	d903      	bls.n	8009c82 <_svfiprintf_r+0x1a6>
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d0c6      	beq.n	8009c0c <_svfiprintf_r+0x130>
 8009c7e:	9105      	str	r1, [sp, #20]
 8009c80:	e7c4      	b.n	8009c0c <_svfiprintf_r+0x130>
 8009c82:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c86:	4604      	mov	r4, r0
 8009c88:	2301      	movs	r3, #1
 8009c8a:	e7f0      	b.n	8009c6e <_svfiprintf_r+0x192>
 8009c8c:	ab03      	add	r3, sp, #12
 8009c8e:	9300      	str	r3, [sp, #0]
 8009c90:	462a      	mov	r2, r5
 8009c92:	4b0e      	ldr	r3, [pc, #56]	@ (8009ccc <_svfiprintf_r+0x1f0>)
 8009c94:	a904      	add	r1, sp, #16
 8009c96:	4638      	mov	r0, r7
 8009c98:	f7fc fbac 	bl	80063f4 <_printf_float>
 8009c9c:	1c42      	adds	r2, r0, #1
 8009c9e:	4606      	mov	r6, r0
 8009ca0:	d1d6      	bne.n	8009c50 <_svfiprintf_r+0x174>
 8009ca2:	89ab      	ldrh	r3, [r5, #12]
 8009ca4:	065b      	lsls	r3, r3, #25
 8009ca6:	f53f af2d 	bmi.w	8009b04 <_svfiprintf_r+0x28>
 8009caa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009cac:	e72c      	b.n	8009b08 <_svfiprintf_r+0x2c>
 8009cae:	ab03      	add	r3, sp, #12
 8009cb0:	9300      	str	r3, [sp, #0]
 8009cb2:	462a      	mov	r2, r5
 8009cb4:	4b05      	ldr	r3, [pc, #20]	@ (8009ccc <_svfiprintf_r+0x1f0>)
 8009cb6:	a904      	add	r1, sp, #16
 8009cb8:	4638      	mov	r0, r7
 8009cba:	f7fc fe33 	bl	8006924 <_printf_i>
 8009cbe:	e7ed      	b.n	8009c9c <_svfiprintf_r+0x1c0>
 8009cc0:	0801a201 	.word	0x0801a201
 8009cc4:	0801a20b 	.word	0x0801a20b
 8009cc8:	080063f5 	.word	0x080063f5
 8009ccc:	08009a25 	.word	0x08009a25
 8009cd0:	0801a207 	.word	0x0801a207

08009cd4 <__sflush_r>:
 8009cd4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cdc:	0716      	lsls	r6, r2, #28
 8009cde:	4605      	mov	r5, r0
 8009ce0:	460c      	mov	r4, r1
 8009ce2:	d454      	bmi.n	8009d8e <__sflush_r+0xba>
 8009ce4:	684b      	ldr	r3, [r1, #4]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	dc02      	bgt.n	8009cf0 <__sflush_r+0x1c>
 8009cea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	dd48      	ble.n	8009d82 <__sflush_r+0xae>
 8009cf0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009cf2:	2e00      	cmp	r6, #0
 8009cf4:	d045      	beq.n	8009d82 <__sflush_r+0xae>
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009cfc:	682f      	ldr	r7, [r5, #0]
 8009cfe:	6a21      	ldr	r1, [r4, #32]
 8009d00:	602b      	str	r3, [r5, #0]
 8009d02:	d030      	beq.n	8009d66 <__sflush_r+0x92>
 8009d04:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009d06:	89a3      	ldrh	r3, [r4, #12]
 8009d08:	0759      	lsls	r1, r3, #29
 8009d0a:	d505      	bpl.n	8009d18 <__sflush_r+0x44>
 8009d0c:	6863      	ldr	r3, [r4, #4]
 8009d0e:	1ad2      	subs	r2, r2, r3
 8009d10:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009d12:	b10b      	cbz	r3, 8009d18 <__sflush_r+0x44>
 8009d14:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009d16:	1ad2      	subs	r2, r2, r3
 8009d18:	2300      	movs	r3, #0
 8009d1a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009d1c:	6a21      	ldr	r1, [r4, #32]
 8009d1e:	4628      	mov	r0, r5
 8009d20:	47b0      	blx	r6
 8009d22:	1c43      	adds	r3, r0, #1
 8009d24:	89a3      	ldrh	r3, [r4, #12]
 8009d26:	d106      	bne.n	8009d36 <__sflush_r+0x62>
 8009d28:	6829      	ldr	r1, [r5, #0]
 8009d2a:	291d      	cmp	r1, #29
 8009d2c:	d82b      	bhi.n	8009d86 <__sflush_r+0xb2>
 8009d2e:	4a2a      	ldr	r2, [pc, #168]	@ (8009dd8 <__sflush_r+0x104>)
 8009d30:	410a      	asrs	r2, r1
 8009d32:	07d6      	lsls	r6, r2, #31
 8009d34:	d427      	bmi.n	8009d86 <__sflush_r+0xb2>
 8009d36:	2200      	movs	r2, #0
 8009d38:	6062      	str	r2, [r4, #4]
 8009d3a:	04d9      	lsls	r1, r3, #19
 8009d3c:	6922      	ldr	r2, [r4, #16]
 8009d3e:	6022      	str	r2, [r4, #0]
 8009d40:	d504      	bpl.n	8009d4c <__sflush_r+0x78>
 8009d42:	1c42      	adds	r2, r0, #1
 8009d44:	d101      	bne.n	8009d4a <__sflush_r+0x76>
 8009d46:	682b      	ldr	r3, [r5, #0]
 8009d48:	b903      	cbnz	r3, 8009d4c <__sflush_r+0x78>
 8009d4a:	6560      	str	r0, [r4, #84]	@ 0x54
 8009d4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009d4e:	602f      	str	r7, [r5, #0]
 8009d50:	b1b9      	cbz	r1, 8009d82 <__sflush_r+0xae>
 8009d52:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009d56:	4299      	cmp	r1, r3
 8009d58:	d002      	beq.n	8009d60 <__sflush_r+0x8c>
 8009d5a:	4628      	mov	r0, r5
 8009d5c:	f7fe fa2c 	bl	80081b8 <_free_r>
 8009d60:	2300      	movs	r3, #0
 8009d62:	6363      	str	r3, [r4, #52]	@ 0x34
 8009d64:	e00d      	b.n	8009d82 <__sflush_r+0xae>
 8009d66:	2301      	movs	r3, #1
 8009d68:	4628      	mov	r0, r5
 8009d6a:	47b0      	blx	r6
 8009d6c:	4602      	mov	r2, r0
 8009d6e:	1c50      	adds	r0, r2, #1
 8009d70:	d1c9      	bne.n	8009d06 <__sflush_r+0x32>
 8009d72:	682b      	ldr	r3, [r5, #0]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d0c6      	beq.n	8009d06 <__sflush_r+0x32>
 8009d78:	2b1d      	cmp	r3, #29
 8009d7a:	d001      	beq.n	8009d80 <__sflush_r+0xac>
 8009d7c:	2b16      	cmp	r3, #22
 8009d7e:	d11e      	bne.n	8009dbe <__sflush_r+0xea>
 8009d80:	602f      	str	r7, [r5, #0]
 8009d82:	2000      	movs	r0, #0
 8009d84:	e022      	b.n	8009dcc <__sflush_r+0xf8>
 8009d86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d8a:	b21b      	sxth	r3, r3
 8009d8c:	e01b      	b.n	8009dc6 <__sflush_r+0xf2>
 8009d8e:	690f      	ldr	r7, [r1, #16]
 8009d90:	2f00      	cmp	r7, #0
 8009d92:	d0f6      	beq.n	8009d82 <__sflush_r+0xae>
 8009d94:	0793      	lsls	r3, r2, #30
 8009d96:	680e      	ldr	r6, [r1, #0]
 8009d98:	bf08      	it	eq
 8009d9a:	694b      	ldreq	r3, [r1, #20]
 8009d9c:	600f      	str	r7, [r1, #0]
 8009d9e:	bf18      	it	ne
 8009da0:	2300      	movne	r3, #0
 8009da2:	eba6 0807 	sub.w	r8, r6, r7
 8009da6:	608b      	str	r3, [r1, #8]
 8009da8:	f1b8 0f00 	cmp.w	r8, #0
 8009dac:	dde9      	ble.n	8009d82 <__sflush_r+0xae>
 8009dae:	6a21      	ldr	r1, [r4, #32]
 8009db0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009db2:	4643      	mov	r3, r8
 8009db4:	463a      	mov	r2, r7
 8009db6:	4628      	mov	r0, r5
 8009db8:	47b0      	blx	r6
 8009dba:	2800      	cmp	r0, #0
 8009dbc:	dc08      	bgt.n	8009dd0 <__sflush_r+0xfc>
 8009dbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009dc6:	81a3      	strh	r3, [r4, #12]
 8009dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8009dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dd0:	4407      	add	r7, r0
 8009dd2:	eba8 0800 	sub.w	r8, r8, r0
 8009dd6:	e7e7      	b.n	8009da8 <__sflush_r+0xd4>
 8009dd8:	dfbffffe 	.word	0xdfbffffe

08009ddc <_fflush_r>:
 8009ddc:	b538      	push	{r3, r4, r5, lr}
 8009dde:	690b      	ldr	r3, [r1, #16]
 8009de0:	4605      	mov	r5, r0
 8009de2:	460c      	mov	r4, r1
 8009de4:	b913      	cbnz	r3, 8009dec <_fflush_r+0x10>
 8009de6:	2500      	movs	r5, #0
 8009de8:	4628      	mov	r0, r5
 8009dea:	bd38      	pop	{r3, r4, r5, pc}
 8009dec:	b118      	cbz	r0, 8009df6 <_fflush_r+0x1a>
 8009dee:	6a03      	ldr	r3, [r0, #32]
 8009df0:	b90b      	cbnz	r3, 8009df6 <_fflush_r+0x1a>
 8009df2:	f7fd f957 	bl	80070a4 <__sinit>
 8009df6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d0f3      	beq.n	8009de6 <_fflush_r+0xa>
 8009dfe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009e00:	07d0      	lsls	r0, r2, #31
 8009e02:	d404      	bmi.n	8009e0e <_fflush_r+0x32>
 8009e04:	0599      	lsls	r1, r3, #22
 8009e06:	d402      	bmi.n	8009e0e <_fflush_r+0x32>
 8009e08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009e0a:	f7fd fb70 	bl	80074ee <__retarget_lock_acquire_recursive>
 8009e0e:	4628      	mov	r0, r5
 8009e10:	4621      	mov	r1, r4
 8009e12:	f7ff ff5f 	bl	8009cd4 <__sflush_r>
 8009e16:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009e18:	07da      	lsls	r2, r3, #31
 8009e1a:	4605      	mov	r5, r0
 8009e1c:	d4e4      	bmi.n	8009de8 <_fflush_r+0xc>
 8009e1e:	89a3      	ldrh	r3, [r4, #12]
 8009e20:	059b      	lsls	r3, r3, #22
 8009e22:	d4e1      	bmi.n	8009de8 <_fflush_r+0xc>
 8009e24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009e26:	f7fd fb63 	bl	80074f0 <__retarget_lock_release_recursive>
 8009e2a:	e7dd      	b.n	8009de8 <_fflush_r+0xc>

08009e2c <__swhatbuf_r>:
 8009e2c:	b570      	push	{r4, r5, r6, lr}
 8009e2e:	460c      	mov	r4, r1
 8009e30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e34:	2900      	cmp	r1, #0
 8009e36:	b096      	sub	sp, #88	@ 0x58
 8009e38:	4615      	mov	r5, r2
 8009e3a:	461e      	mov	r6, r3
 8009e3c:	da0d      	bge.n	8009e5a <__swhatbuf_r+0x2e>
 8009e3e:	89a3      	ldrh	r3, [r4, #12]
 8009e40:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009e44:	f04f 0100 	mov.w	r1, #0
 8009e48:	bf14      	ite	ne
 8009e4a:	2340      	movne	r3, #64	@ 0x40
 8009e4c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009e50:	2000      	movs	r0, #0
 8009e52:	6031      	str	r1, [r6, #0]
 8009e54:	602b      	str	r3, [r5, #0]
 8009e56:	b016      	add	sp, #88	@ 0x58
 8009e58:	bd70      	pop	{r4, r5, r6, pc}
 8009e5a:	466a      	mov	r2, sp
 8009e5c:	f000 f8a8 	bl	8009fb0 <_fstat_r>
 8009e60:	2800      	cmp	r0, #0
 8009e62:	dbec      	blt.n	8009e3e <__swhatbuf_r+0x12>
 8009e64:	9901      	ldr	r1, [sp, #4]
 8009e66:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009e6a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009e6e:	4259      	negs	r1, r3
 8009e70:	4159      	adcs	r1, r3
 8009e72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009e76:	e7eb      	b.n	8009e50 <__swhatbuf_r+0x24>

08009e78 <__smakebuf_r>:
 8009e78:	898b      	ldrh	r3, [r1, #12]
 8009e7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e7c:	079d      	lsls	r5, r3, #30
 8009e7e:	4606      	mov	r6, r0
 8009e80:	460c      	mov	r4, r1
 8009e82:	d507      	bpl.n	8009e94 <__smakebuf_r+0x1c>
 8009e84:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009e88:	6023      	str	r3, [r4, #0]
 8009e8a:	6123      	str	r3, [r4, #16]
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	6163      	str	r3, [r4, #20]
 8009e90:	b003      	add	sp, #12
 8009e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e94:	ab01      	add	r3, sp, #4
 8009e96:	466a      	mov	r2, sp
 8009e98:	f7ff ffc8 	bl	8009e2c <__swhatbuf_r>
 8009e9c:	9f00      	ldr	r7, [sp, #0]
 8009e9e:	4605      	mov	r5, r0
 8009ea0:	4639      	mov	r1, r7
 8009ea2:	4630      	mov	r0, r6
 8009ea4:	f7fe f9fc 	bl	80082a0 <_malloc_r>
 8009ea8:	b948      	cbnz	r0, 8009ebe <__smakebuf_r+0x46>
 8009eaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009eae:	059a      	lsls	r2, r3, #22
 8009eb0:	d4ee      	bmi.n	8009e90 <__smakebuf_r+0x18>
 8009eb2:	f023 0303 	bic.w	r3, r3, #3
 8009eb6:	f043 0302 	orr.w	r3, r3, #2
 8009eba:	81a3      	strh	r3, [r4, #12]
 8009ebc:	e7e2      	b.n	8009e84 <__smakebuf_r+0xc>
 8009ebe:	89a3      	ldrh	r3, [r4, #12]
 8009ec0:	6020      	str	r0, [r4, #0]
 8009ec2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ec6:	81a3      	strh	r3, [r4, #12]
 8009ec8:	9b01      	ldr	r3, [sp, #4]
 8009eca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009ece:	b15b      	cbz	r3, 8009ee8 <__smakebuf_r+0x70>
 8009ed0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ed4:	4630      	mov	r0, r6
 8009ed6:	f000 f87d 	bl	8009fd4 <_isatty_r>
 8009eda:	b128      	cbz	r0, 8009ee8 <__smakebuf_r+0x70>
 8009edc:	89a3      	ldrh	r3, [r4, #12]
 8009ede:	f023 0303 	bic.w	r3, r3, #3
 8009ee2:	f043 0301 	orr.w	r3, r3, #1
 8009ee6:	81a3      	strh	r3, [r4, #12]
 8009ee8:	89a3      	ldrh	r3, [r4, #12]
 8009eea:	431d      	orrs	r5, r3
 8009eec:	81a5      	strh	r5, [r4, #12]
 8009eee:	e7cf      	b.n	8009e90 <__smakebuf_r+0x18>

08009ef0 <_putc_r>:
 8009ef0:	b570      	push	{r4, r5, r6, lr}
 8009ef2:	460d      	mov	r5, r1
 8009ef4:	4614      	mov	r4, r2
 8009ef6:	4606      	mov	r6, r0
 8009ef8:	b118      	cbz	r0, 8009f02 <_putc_r+0x12>
 8009efa:	6a03      	ldr	r3, [r0, #32]
 8009efc:	b90b      	cbnz	r3, 8009f02 <_putc_r+0x12>
 8009efe:	f7fd f8d1 	bl	80070a4 <__sinit>
 8009f02:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009f04:	07d8      	lsls	r0, r3, #31
 8009f06:	d405      	bmi.n	8009f14 <_putc_r+0x24>
 8009f08:	89a3      	ldrh	r3, [r4, #12]
 8009f0a:	0599      	lsls	r1, r3, #22
 8009f0c:	d402      	bmi.n	8009f14 <_putc_r+0x24>
 8009f0e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009f10:	f7fd faed 	bl	80074ee <__retarget_lock_acquire_recursive>
 8009f14:	68a3      	ldr	r3, [r4, #8]
 8009f16:	3b01      	subs	r3, #1
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	60a3      	str	r3, [r4, #8]
 8009f1c:	da05      	bge.n	8009f2a <_putc_r+0x3a>
 8009f1e:	69a2      	ldr	r2, [r4, #24]
 8009f20:	4293      	cmp	r3, r2
 8009f22:	db12      	blt.n	8009f4a <_putc_r+0x5a>
 8009f24:	b2eb      	uxtb	r3, r5
 8009f26:	2b0a      	cmp	r3, #10
 8009f28:	d00f      	beq.n	8009f4a <_putc_r+0x5a>
 8009f2a:	6823      	ldr	r3, [r4, #0]
 8009f2c:	1c5a      	adds	r2, r3, #1
 8009f2e:	6022      	str	r2, [r4, #0]
 8009f30:	701d      	strb	r5, [r3, #0]
 8009f32:	b2ed      	uxtb	r5, r5
 8009f34:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009f36:	07da      	lsls	r2, r3, #31
 8009f38:	d405      	bmi.n	8009f46 <_putc_r+0x56>
 8009f3a:	89a3      	ldrh	r3, [r4, #12]
 8009f3c:	059b      	lsls	r3, r3, #22
 8009f3e:	d402      	bmi.n	8009f46 <_putc_r+0x56>
 8009f40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009f42:	f7fd fad5 	bl	80074f0 <__retarget_lock_release_recursive>
 8009f46:	4628      	mov	r0, r5
 8009f48:	bd70      	pop	{r4, r5, r6, pc}
 8009f4a:	4629      	mov	r1, r5
 8009f4c:	4622      	mov	r2, r4
 8009f4e:	4630      	mov	r0, r6
 8009f50:	f7fd f9a7 	bl	80072a2 <__swbuf_r>
 8009f54:	4605      	mov	r5, r0
 8009f56:	e7ed      	b.n	8009f34 <_putc_r+0x44>

08009f58 <memmove>:
 8009f58:	4288      	cmp	r0, r1
 8009f5a:	b510      	push	{r4, lr}
 8009f5c:	eb01 0402 	add.w	r4, r1, r2
 8009f60:	d902      	bls.n	8009f68 <memmove+0x10>
 8009f62:	4284      	cmp	r4, r0
 8009f64:	4623      	mov	r3, r4
 8009f66:	d807      	bhi.n	8009f78 <memmove+0x20>
 8009f68:	1e43      	subs	r3, r0, #1
 8009f6a:	42a1      	cmp	r1, r4
 8009f6c:	d008      	beq.n	8009f80 <memmove+0x28>
 8009f6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f72:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f76:	e7f8      	b.n	8009f6a <memmove+0x12>
 8009f78:	4402      	add	r2, r0
 8009f7a:	4601      	mov	r1, r0
 8009f7c:	428a      	cmp	r2, r1
 8009f7e:	d100      	bne.n	8009f82 <memmove+0x2a>
 8009f80:	bd10      	pop	{r4, pc}
 8009f82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f8a:	e7f7      	b.n	8009f7c <memmove+0x24>

08009f8c <strncmp>:
 8009f8c:	b510      	push	{r4, lr}
 8009f8e:	b16a      	cbz	r2, 8009fac <strncmp+0x20>
 8009f90:	3901      	subs	r1, #1
 8009f92:	1884      	adds	r4, r0, r2
 8009f94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f98:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009f9c:	429a      	cmp	r2, r3
 8009f9e:	d103      	bne.n	8009fa8 <strncmp+0x1c>
 8009fa0:	42a0      	cmp	r0, r4
 8009fa2:	d001      	beq.n	8009fa8 <strncmp+0x1c>
 8009fa4:	2a00      	cmp	r2, #0
 8009fa6:	d1f5      	bne.n	8009f94 <strncmp+0x8>
 8009fa8:	1ad0      	subs	r0, r2, r3
 8009faa:	bd10      	pop	{r4, pc}
 8009fac:	4610      	mov	r0, r2
 8009fae:	e7fc      	b.n	8009faa <strncmp+0x1e>

08009fb0 <_fstat_r>:
 8009fb0:	b538      	push	{r3, r4, r5, lr}
 8009fb2:	4d07      	ldr	r5, [pc, #28]	@ (8009fd0 <_fstat_r+0x20>)
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	4604      	mov	r4, r0
 8009fb8:	4608      	mov	r0, r1
 8009fba:	4611      	mov	r1, r2
 8009fbc:	602b      	str	r3, [r5, #0]
 8009fbe:	f7f7 ff67 	bl	8001e90 <_fstat>
 8009fc2:	1c43      	adds	r3, r0, #1
 8009fc4:	d102      	bne.n	8009fcc <_fstat_r+0x1c>
 8009fc6:	682b      	ldr	r3, [r5, #0]
 8009fc8:	b103      	cbz	r3, 8009fcc <_fstat_r+0x1c>
 8009fca:	6023      	str	r3, [r4, #0]
 8009fcc:	bd38      	pop	{r3, r4, r5, pc}
 8009fce:	bf00      	nop
 8009fd0:	20000640 	.word	0x20000640

08009fd4 <_isatty_r>:
 8009fd4:	b538      	push	{r3, r4, r5, lr}
 8009fd6:	4d06      	ldr	r5, [pc, #24]	@ (8009ff0 <_isatty_r+0x1c>)
 8009fd8:	2300      	movs	r3, #0
 8009fda:	4604      	mov	r4, r0
 8009fdc:	4608      	mov	r0, r1
 8009fde:	602b      	str	r3, [r5, #0]
 8009fe0:	f7f7 ff66 	bl	8001eb0 <_isatty>
 8009fe4:	1c43      	adds	r3, r0, #1
 8009fe6:	d102      	bne.n	8009fee <_isatty_r+0x1a>
 8009fe8:	682b      	ldr	r3, [r5, #0]
 8009fea:	b103      	cbz	r3, 8009fee <_isatty_r+0x1a>
 8009fec:	6023      	str	r3, [r4, #0]
 8009fee:	bd38      	pop	{r3, r4, r5, pc}
 8009ff0:	20000640 	.word	0x20000640

08009ff4 <_sbrk_r>:
 8009ff4:	b538      	push	{r3, r4, r5, lr}
 8009ff6:	4d06      	ldr	r5, [pc, #24]	@ (800a010 <_sbrk_r+0x1c>)
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	4604      	mov	r4, r0
 8009ffc:	4608      	mov	r0, r1
 8009ffe:	602b      	str	r3, [r5, #0]
 800a000:	f7f7 ff6e 	bl	8001ee0 <_sbrk>
 800a004:	1c43      	adds	r3, r0, #1
 800a006:	d102      	bne.n	800a00e <_sbrk_r+0x1a>
 800a008:	682b      	ldr	r3, [r5, #0]
 800a00a:	b103      	cbz	r3, 800a00e <_sbrk_r+0x1a>
 800a00c:	6023      	str	r3, [r4, #0]
 800a00e:	bd38      	pop	{r3, r4, r5, pc}
 800a010:	20000640 	.word	0x20000640
 800a014:	00000000 	.word	0x00000000

0800a018 <nan>:
 800a018:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a020 <nan+0x8>
 800a01c:	4770      	bx	lr
 800a01e:	bf00      	nop
 800a020:	00000000 	.word	0x00000000
 800a024:	7ff80000 	.word	0x7ff80000

0800a028 <__assert_func>:
 800a028:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a02a:	4614      	mov	r4, r2
 800a02c:	461a      	mov	r2, r3
 800a02e:	4b09      	ldr	r3, [pc, #36]	@ (800a054 <__assert_func+0x2c>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	4605      	mov	r5, r0
 800a034:	68d8      	ldr	r0, [r3, #12]
 800a036:	b954      	cbnz	r4, 800a04e <__assert_func+0x26>
 800a038:	4b07      	ldr	r3, [pc, #28]	@ (800a058 <__assert_func+0x30>)
 800a03a:	461c      	mov	r4, r3
 800a03c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a040:	9100      	str	r1, [sp, #0]
 800a042:	462b      	mov	r3, r5
 800a044:	4905      	ldr	r1, [pc, #20]	@ (800a05c <__assert_func+0x34>)
 800a046:	f000 fba7 	bl	800a798 <fiprintf>
 800a04a:	f000 fbb7 	bl	800a7bc <abort>
 800a04e:	4b04      	ldr	r3, [pc, #16]	@ (800a060 <__assert_func+0x38>)
 800a050:	e7f4      	b.n	800a03c <__assert_func+0x14>
 800a052:	bf00      	nop
 800a054:	20000030 	.word	0x20000030
 800a058:	0801a255 	.word	0x0801a255
 800a05c:	0801a227 	.word	0x0801a227
 800a060:	0801a21a 	.word	0x0801a21a

0800a064 <_calloc_r>:
 800a064:	b570      	push	{r4, r5, r6, lr}
 800a066:	fba1 5402 	umull	r5, r4, r1, r2
 800a06a:	b93c      	cbnz	r4, 800a07c <_calloc_r+0x18>
 800a06c:	4629      	mov	r1, r5
 800a06e:	f7fe f917 	bl	80082a0 <_malloc_r>
 800a072:	4606      	mov	r6, r0
 800a074:	b928      	cbnz	r0, 800a082 <_calloc_r+0x1e>
 800a076:	2600      	movs	r6, #0
 800a078:	4630      	mov	r0, r6
 800a07a:	bd70      	pop	{r4, r5, r6, pc}
 800a07c:	220c      	movs	r2, #12
 800a07e:	6002      	str	r2, [r0, #0]
 800a080:	e7f9      	b.n	800a076 <_calloc_r+0x12>
 800a082:	462a      	mov	r2, r5
 800a084:	4621      	mov	r1, r4
 800a086:	f7fd f9a1 	bl	80073cc <memset>
 800a08a:	e7f5      	b.n	800a078 <_calloc_r+0x14>

0800a08c <rshift>:
 800a08c:	6903      	ldr	r3, [r0, #16]
 800a08e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a092:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a096:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a09a:	f100 0414 	add.w	r4, r0, #20
 800a09e:	dd45      	ble.n	800a12c <rshift+0xa0>
 800a0a0:	f011 011f 	ands.w	r1, r1, #31
 800a0a4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a0a8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a0ac:	d10c      	bne.n	800a0c8 <rshift+0x3c>
 800a0ae:	f100 0710 	add.w	r7, r0, #16
 800a0b2:	4629      	mov	r1, r5
 800a0b4:	42b1      	cmp	r1, r6
 800a0b6:	d334      	bcc.n	800a122 <rshift+0x96>
 800a0b8:	1a9b      	subs	r3, r3, r2
 800a0ba:	009b      	lsls	r3, r3, #2
 800a0bc:	1eea      	subs	r2, r5, #3
 800a0be:	4296      	cmp	r6, r2
 800a0c0:	bf38      	it	cc
 800a0c2:	2300      	movcc	r3, #0
 800a0c4:	4423      	add	r3, r4
 800a0c6:	e015      	b.n	800a0f4 <rshift+0x68>
 800a0c8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a0cc:	f1c1 0820 	rsb	r8, r1, #32
 800a0d0:	40cf      	lsrs	r7, r1
 800a0d2:	f105 0e04 	add.w	lr, r5, #4
 800a0d6:	46a1      	mov	r9, r4
 800a0d8:	4576      	cmp	r6, lr
 800a0da:	46f4      	mov	ip, lr
 800a0dc:	d815      	bhi.n	800a10a <rshift+0x7e>
 800a0de:	1a9a      	subs	r2, r3, r2
 800a0e0:	0092      	lsls	r2, r2, #2
 800a0e2:	3a04      	subs	r2, #4
 800a0e4:	3501      	adds	r5, #1
 800a0e6:	42ae      	cmp	r6, r5
 800a0e8:	bf38      	it	cc
 800a0ea:	2200      	movcc	r2, #0
 800a0ec:	18a3      	adds	r3, r4, r2
 800a0ee:	50a7      	str	r7, [r4, r2]
 800a0f0:	b107      	cbz	r7, 800a0f4 <rshift+0x68>
 800a0f2:	3304      	adds	r3, #4
 800a0f4:	1b1a      	subs	r2, r3, r4
 800a0f6:	42a3      	cmp	r3, r4
 800a0f8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a0fc:	bf08      	it	eq
 800a0fe:	2300      	moveq	r3, #0
 800a100:	6102      	str	r2, [r0, #16]
 800a102:	bf08      	it	eq
 800a104:	6143      	streq	r3, [r0, #20]
 800a106:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a10a:	f8dc c000 	ldr.w	ip, [ip]
 800a10e:	fa0c fc08 	lsl.w	ip, ip, r8
 800a112:	ea4c 0707 	orr.w	r7, ip, r7
 800a116:	f849 7b04 	str.w	r7, [r9], #4
 800a11a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a11e:	40cf      	lsrs	r7, r1
 800a120:	e7da      	b.n	800a0d8 <rshift+0x4c>
 800a122:	f851 cb04 	ldr.w	ip, [r1], #4
 800a126:	f847 cf04 	str.w	ip, [r7, #4]!
 800a12a:	e7c3      	b.n	800a0b4 <rshift+0x28>
 800a12c:	4623      	mov	r3, r4
 800a12e:	e7e1      	b.n	800a0f4 <rshift+0x68>

0800a130 <__hexdig_fun>:
 800a130:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a134:	2b09      	cmp	r3, #9
 800a136:	d802      	bhi.n	800a13e <__hexdig_fun+0xe>
 800a138:	3820      	subs	r0, #32
 800a13a:	b2c0      	uxtb	r0, r0
 800a13c:	4770      	bx	lr
 800a13e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a142:	2b05      	cmp	r3, #5
 800a144:	d801      	bhi.n	800a14a <__hexdig_fun+0x1a>
 800a146:	3847      	subs	r0, #71	@ 0x47
 800a148:	e7f7      	b.n	800a13a <__hexdig_fun+0xa>
 800a14a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a14e:	2b05      	cmp	r3, #5
 800a150:	d801      	bhi.n	800a156 <__hexdig_fun+0x26>
 800a152:	3827      	subs	r0, #39	@ 0x27
 800a154:	e7f1      	b.n	800a13a <__hexdig_fun+0xa>
 800a156:	2000      	movs	r0, #0
 800a158:	4770      	bx	lr
	...

0800a15c <__gethex>:
 800a15c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a160:	b085      	sub	sp, #20
 800a162:	468a      	mov	sl, r1
 800a164:	9302      	str	r3, [sp, #8]
 800a166:	680b      	ldr	r3, [r1, #0]
 800a168:	9001      	str	r0, [sp, #4]
 800a16a:	4690      	mov	r8, r2
 800a16c:	1c9c      	adds	r4, r3, #2
 800a16e:	46a1      	mov	r9, r4
 800a170:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a174:	2830      	cmp	r0, #48	@ 0x30
 800a176:	d0fa      	beq.n	800a16e <__gethex+0x12>
 800a178:	eba9 0303 	sub.w	r3, r9, r3
 800a17c:	f1a3 0b02 	sub.w	fp, r3, #2
 800a180:	f7ff ffd6 	bl	800a130 <__hexdig_fun>
 800a184:	4605      	mov	r5, r0
 800a186:	2800      	cmp	r0, #0
 800a188:	d168      	bne.n	800a25c <__gethex+0x100>
 800a18a:	49a0      	ldr	r1, [pc, #640]	@ (800a40c <__gethex+0x2b0>)
 800a18c:	2201      	movs	r2, #1
 800a18e:	4648      	mov	r0, r9
 800a190:	f7ff fefc 	bl	8009f8c <strncmp>
 800a194:	4607      	mov	r7, r0
 800a196:	2800      	cmp	r0, #0
 800a198:	d167      	bne.n	800a26a <__gethex+0x10e>
 800a19a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a19e:	4626      	mov	r6, r4
 800a1a0:	f7ff ffc6 	bl	800a130 <__hexdig_fun>
 800a1a4:	2800      	cmp	r0, #0
 800a1a6:	d062      	beq.n	800a26e <__gethex+0x112>
 800a1a8:	4623      	mov	r3, r4
 800a1aa:	7818      	ldrb	r0, [r3, #0]
 800a1ac:	2830      	cmp	r0, #48	@ 0x30
 800a1ae:	4699      	mov	r9, r3
 800a1b0:	f103 0301 	add.w	r3, r3, #1
 800a1b4:	d0f9      	beq.n	800a1aa <__gethex+0x4e>
 800a1b6:	f7ff ffbb 	bl	800a130 <__hexdig_fun>
 800a1ba:	fab0 f580 	clz	r5, r0
 800a1be:	096d      	lsrs	r5, r5, #5
 800a1c0:	f04f 0b01 	mov.w	fp, #1
 800a1c4:	464a      	mov	r2, r9
 800a1c6:	4616      	mov	r6, r2
 800a1c8:	3201      	adds	r2, #1
 800a1ca:	7830      	ldrb	r0, [r6, #0]
 800a1cc:	f7ff ffb0 	bl	800a130 <__hexdig_fun>
 800a1d0:	2800      	cmp	r0, #0
 800a1d2:	d1f8      	bne.n	800a1c6 <__gethex+0x6a>
 800a1d4:	498d      	ldr	r1, [pc, #564]	@ (800a40c <__gethex+0x2b0>)
 800a1d6:	2201      	movs	r2, #1
 800a1d8:	4630      	mov	r0, r6
 800a1da:	f7ff fed7 	bl	8009f8c <strncmp>
 800a1de:	2800      	cmp	r0, #0
 800a1e0:	d13f      	bne.n	800a262 <__gethex+0x106>
 800a1e2:	b944      	cbnz	r4, 800a1f6 <__gethex+0x9a>
 800a1e4:	1c74      	adds	r4, r6, #1
 800a1e6:	4622      	mov	r2, r4
 800a1e8:	4616      	mov	r6, r2
 800a1ea:	3201      	adds	r2, #1
 800a1ec:	7830      	ldrb	r0, [r6, #0]
 800a1ee:	f7ff ff9f 	bl	800a130 <__hexdig_fun>
 800a1f2:	2800      	cmp	r0, #0
 800a1f4:	d1f8      	bne.n	800a1e8 <__gethex+0x8c>
 800a1f6:	1ba4      	subs	r4, r4, r6
 800a1f8:	00a7      	lsls	r7, r4, #2
 800a1fa:	7833      	ldrb	r3, [r6, #0]
 800a1fc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a200:	2b50      	cmp	r3, #80	@ 0x50
 800a202:	d13e      	bne.n	800a282 <__gethex+0x126>
 800a204:	7873      	ldrb	r3, [r6, #1]
 800a206:	2b2b      	cmp	r3, #43	@ 0x2b
 800a208:	d033      	beq.n	800a272 <__gethex+0x116>
 800a20a:	2b2d      	cmp	r3, #45	@ 0x2d
 800a20c:	d034      	beq.n	800a278 <__gethex+0x11c>
 800a20e:	1c71      	adds	r1, r6, #1
 800a210:	2400      	movs	r4, #0
 800a212:	7808      	ldrb	r0, [r1, #0]
 800a214:	f7ff ff8c 	bl	800a130 <__hexdig_fun>
 800a218:	1e43      	subs	r3, r0, #1
 800a21a:	b2db      	uxtb	r3, r3
 800a21c:	2b18      	cmp	r3, #24
 800a21e:	d830      	bhi.n	800a282 <__gethex+0x126>
 800a220:	f1a0 0210 	sub.w	r2, r0, #16
 800a224:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a228:	f7ff ff82 	bl	800a130 <__hexdig_fun>
 800a22c:	f100 3cff 	add.w	ip, r0, #4294967295
 800a230:	fa5f fc8c 	uxtb.w	ip, ip
 800a234:	f1bc 0f18 	cmp.w	ip, #24
 800a238:	f04f 030a 	mov.w	r3, #10
 800a23c:	d91e      	bls.n	800a27c <__gethex+0x120>
 800a23e:	b104      	cbz	r4, 800a242 <__gethex+0xe6>
 800a240:	4252      	negs	r2, r2
 800a242:	4417      	add	r7, r2
 800a244:	f8ca 1000 	str.w	r1, [sl]
 800a248:	b1ed      	cbz	r5, 800a286 <__gethex+0x12a>
 800a24a:	f1bb 0f00 	cmp.w	fp, #0
 800a24e:	bf0c      	ite	eq
 800a250:	2506      	moveq	r5, #6
 800a252:	2500      	movne	r5, #0
 800a254:	4628      	mov	r0, r5
 800a256:	b005      	add	sp, #20
 800a258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a25c:	2500      	movs	r5, #0
 800a25e:	462c      	mov	r4, r5
 800a260:	e7b0      	b.n	800a1c4 <__gethex+0x68>
 800a262:	2c00      	cmp	r4, #0
 800a264:	d1c7      	bne.n	800a1f6 <__gethex+0x9a>
 800a266:	4627      	mov	r7, r4
 800a268:	e7c7      	b.n	800a1fa <__gethex+0x9e>
 800a26a:	464e      	mov	r6, r9
 800a26c:	462f      	mov	r7, r5
 800a26e:	2501      	movs	r5, #1
 800a270:	e7c3      	b.n	800a1fa <__gethex+0x9e>
 800a272:	2400      	movs	r4, #0
 800a274:	1cb1      	adds	r1, r6, #2
 800a276:	e7cc      	b.n	800a212 <__gethex+0xb6>
 800a278:	2401      	movs	r4, #1
 800a27a:	e7fb      	b.n	800a274 <__gethex+0x118>
 800a27c:	fb03 0002 	mla	r0, r3, r2, r0
 800a280:	e7ce      	b.n	800a220 <__gethex+0xc4>
 800a282:	4631      	mov	r1, r6
 800a284:	e7de      	b.n	800a244 <__gethex+0xe8>
 800a286:	eba6 0309 	sub.w	r3, r6, r9
 800a28a:	3b01      	subs	r3, #1
 800a28c:	4629      	mov	r1, r5
 800a28e:	2b07      	cmp	r3, #7
 800a290:	dc0a      	bgt.n	800a2a8 <__gethex+0x14c>
 800a292:	9801      	ldr	r0, [sp, #4]
 800a294:	f7fe f890 	bl	80083b8 <_Balloc>
 800a298:	4604      	mov	r4, r0
 800a29a:	b940      	cbnz	r0, 800a2ae <__gethex+0x152>
 800a29c:	4b5c      	ldr	r3, [pc, #368]	@ (800a410 <__gethex+0x2b4>)
 800a29e:	4602      	mov	r2, r0
 800a2a0:	21e4      	movs	r1, #228	@ 0xe4
 800a2a2:	485c      	ldr	r0, [pc, #368]	@ (800a414 <__gethex+0x2b8>)
 800a2a4:	f7ff fec0 	bl	800a028 <__assert_func>
 800a2a8:	3101      	adds	r1, #1
 800a2aa:	105b      	asrs	r3, r3, #1
 800a2ac:	e7ef      	b.n	800a28e <__gethex+0x132>
 800a2ae:	f100 0a14 	add.w	sl, r0, #20
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	4655      	mov	r5, sl
 800a2b6:	469b      	mov	fp, r3
 800a2b8:	45b1      	cmp	r9, r6
 800a2ba:	d337      	bcc.n	800a32c <__gethex+0x1d0>
 800a2bc:	f845 bb04 	str.w	fp, [r5], #4
 800a2c0:	eba5 050a 	sub.w	r5, r5, sl
 800a2c4:	10ad      	asrs	r5, r5, #2
 800a2c6:	6125      	str	r5, [r4, #16]
 800a2c8:	4658      	mov	r0, fp
 800a2ca:	f7fe f967 	bl	800859c <__hi0bits>
 800a2ce:	016d      	lsls	r5, r5, #5
 800a2d0:	f8d8 6000 	ldr.w	r6, [r8]
 800a2d4:	1a2d      	subs	r5, r5, r0
 800a2d6:	42b5      	cmp	r5, r6
 800a2d8:	dd54      	ble.n	800a384 <__gethex+0x228>
 800a2da:	1bad      	subs	r5, r5, r6
 800a2dc:	4629      	mov	r1, r5
 800a2de:	4620      	mov	r0, r4
 800a2e0:	f7fe fcfb 	bl	8008cda <__any_on>
 800a2e4:	4681      	mov	r9, r0
 800a2e6:	b178      	cbz	r0, 800a308 <__gethex+0x1ac>
 800a2e8:	1e6b      	subs	r3, r5, #1
 800a2ea:	1159      	asrs	r1, r3, #5
 800a2ec:	f003 021f 	and.w	r2, r3, #31
 800a2f0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a2f4:	f04f 0901 	mov.w	r9, #1
 800a2f8:	fa09 f202 	lsl.w	r2, r9, r2
 800a2fc:	420a      	tst	r2, r1
 800a2fe:	d003      	beq.n	800a308 <__gethex+0x1ac>
 800a300:	454b      	cmp	r3, r9
 800a302:	dc36      	bgt.n	800a372 <__gethex+0x216>
 800a304:	f04f 0902 	mov.w	r9, #2
 800a308:	4629      	mov	r1, r5
 800a30a:	4620      	mov	r0, r4
 800a30c:	f7ff febe 	bl	800a08c <rshift>
 800a310:	442f      	add	r7, r5
 800a312:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a316:	42bb      	cmp	r3, r7
 800a318:	da42      	bge.n	800a3a0 <__gethex+0x244>
 800a31a:	9801      	ldr	r0, [sp, #4]
 800a31c:	4621      	mov	r1, r4
 800a31e:	f7fe f88b 	bl	8008438 <_Bfree>
 800a322:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a324:	2300      	movs	r3, #0
 800a326:	6013      	str	r3, [r2, #0]
 800a328:	25a3      	movs	r5, #163	@ 0xa3
 800a32a:	e793      	b.n	800a254 <__gethex+0xf8>
 800a32c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a330:	2a2e      	cmp	r2, #46	@ 0x2e
 800a332:	d012      	beq.n	800a35a <__gethex+0x1fe>
 800a334:	2b20      	cmp	r3, #32
 800a336:	d104      	bne.n	800a342 <__gethex+0x1e6>
 800a338:	f845 bb04 	str.w	fp, [r5], #4
 800a33c:	f04f 0b00 	mov.w	fp, #0
 800a340:	465b      	mov	r3, fp
 800a342:	7830      	ldrb	r0, [r6, #0]
 800a344:	9303      	str	r3, [sp, #12]
 800a346:	f7ff fef3 	bl	800a130 <__hexdig_fun>
 800a34a:	9b03      	ldr	r3, [sp, #12]
 800a34c:	f000 000f 	and.w	r0, r0, #15
 800a350:	4098      	lsls	r0, r3
 800a352:	ea4b 0b00 	orr.w	fp, fp, r0
 800a356:	3304      	adds	r3, #4
 800a358:	e7ae      	b.n	800a2b8 <__gethex+0x15c>
 800a35a:	45b1      	cmp	r9, r6
 800a35c:	d8ea      	bhi.n	800a334 <__gethex+0x1d8>
 800a35e:	492b      	ldr	r1, [pc, #172]	@ (800a40c <__gethex+0x2b0>)
 800a360:	9303      	str	r3, [sp, #12]
 800a362:	2201      	movs	r2, #1
 800a364:	4630      	mov	r0, r6
 800a366:	f7ff fe11 	bl	8009f8c <strncmp>
 800a36a:	9b03      	ldr	r3, [sp, #12]
 800a36c:	2800      	cmp	r0, #0
 800a36e:	d1e1      	bne.n	800a334 <__gethex+0x1d8>
 800a370:	e7a2      	b.n	800a2b8 <__gethex+0x15c>
 800a372:	1ea9      	subs	r1, r5, #2
 800a374:	4620      	mov	r0, r4
 800a376:	f7fe fcb0 	bl	8008cda <__any_on>
 800a37a:	2800      	cmp	r0, #0
 800a37c:	d0c2      	beq.n	800a304 <__gethex+0x1a8>
 800a37e:	f04f 0903 	mov.w	r9, #3
 800a382:	e7c1      	b.n	800a308 <__gethex+0x1ac>
 800a384:	da09      	bge.n	800a39a <__gethex+0x23e>
 800a386:	1b75      	subs	r5, r6, r5
 800a388:	4621      	mov	r1, r4
 800a38a:	9801      	ldr	r0, [sp, #4]
 800a38c:	462a      	mov	r2, r5
 800a38e:	f7fe fa6b 	bl	8008868 <__lshift>
 800a392:	1b7f      	subs	r7, r7, r5
 800a394:	4604      	mov	r4, r0
 800a396:	f100 0a14 	add.w	sl, r0, #20
 800a39a:	f04f 0900 	mov.w	r9, #0
 800a39e:	e7b8      	b.n	800a312 <__gethex+0x1b6>
 800a3a0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a3a4:	42bd      	cmp	r5, r7
 800a3a6:	dd6f      	ble.n	800a488 <__gethex+0x32c>
 800a3a8:	1bed      	subs	r5, r5, r7
 800a3aa:	42ae      	cmp	r6, r5
 800a3ac:	dc34      	bgt.n	800a418 <__gethex+0x2bc>
 800a3ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a3b2:	2b02      	cmp	r3, #2
 800a3b4:	d022      	beq.n	800a3fc <__gethex+0x2a0>
 800a3b6:	2b03      	cmp	r3, #3
 800a3b8:	d024      	beq.n	800a404 <__gethex+0x2a8>
 800a3ba:	2b01      	cmp	r3, #1
 800a3bc:	d115      	bne.n	800a3ea <__gethex+0x28e>
 800a3be:	42ae      	cmp	r6, r5
 800a3c0:	d113      	bne.n	800a3ea <__gethex+0x28e>
 800a3c2:	2e01      	cmp	r6, #1
 800a3c4:	d10b      	bne.n	800a3de <__gethex+0x282>
 800a3c6:	9a02      	ldr	r2, [sp, #8]
 800a3c8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a3cc:	6013      	str	r3, [r2, #0]
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	6123      	str	r3, [r4, #16]
 800a3d2:	f8ca 3000 	str.w	r3, [sl]
 800a3d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a3d8:	2562      	movs	r5, #98	@ 0x62
 800a3da:	601c      	str	r4, [r3, #0]
 800a3dc:	e73a      	b.n	800a254 <__gethex+0xf8>
 800a3de:	1e71      	subs	r1, r6, #1
 800a3e0:	4620      	mov	r0, r4
 800a3e2:	f7fe fc7a 	bl	8008cda <__any_on>
 800a3e6:	2800      	cmp	r0, #0
 800a3e8:	d1ed      	bne.n	800a3c6 <__gethex+0x26a>
 800a3ea:	9801      	ldr	r0, [sp, #4]
 800a3ec:	4621      	mov	r1, r4
 800a3ee:	f7fe f823 	bl	8008438 <_Bfree>
 800a3f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	6013      	str	r3, [r2, #0]
 800a3f8:	2550      	movs	r5, #80	@ 0x50
 800a3fa:	e72b      	b.n	800a254 <__gethex+0xf8>
 800a3fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d1f3      	bne.n	800a3ea <__gethex+0x28e>
 800a402:	e7e0      	b.n	800a3c6 <__gethex+0x26a>
 800a404:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a406:	2b00      	cmp	r3, #0
 800a408:	d1dd      	bne.n	800a3c6 <__gethex+0x26a>
 800a40a:	e7ee      	b.n	800a3ea <__gethex+0x28e>
 800a40c:	0801a0a8 	.word	0x0801a0a8
 800a410:	08019f41 	.word	0x08019f41
 800a414:	0801a256 	.word	0x0801a256
 800a418:	1e6f      	subs	r7, r5, #1
 800a41a:	f1b9 0f00 	cmp.w	r9, #0
 800a41e:	d130      	bne.n	800a482 <__gethex+0x326>
 800a420:	b127      	cbz	r7, 800a42c <__gethex+0x2d0>
 800a422:	4639      	mov	r1, r7
 800a424:	4620      	mov	r0, r4
 800a426:	f7fe fc58 	bl	8008cda <__any_on>
 800a42a:	4681      	mov	r9, r0
 800a42c:	117a      	asrs	r2, r7, #5
 800a42e:	2301      	movs	r3, #1
 800a430:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a434:	f007 071f 	and.w	r7, r7, #31
 800a438:	40bb      	lsls	r3, r7
 800a43a:	4213      	tst	r3, r2
 800a43c:	4629      	mov	r1, r5
 800a43e:	4620      	mov	r0, r4
 800a440:	bf18      	it	ne
 800a442:	f049 0902 	orrne.w	r9, r9, #2
 800a446:	f7ff fe21 	bl	800a08c <rshift>
 800a44a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a44e:	1b76      	subs	r6, r6, r5
 800a450:	2502      	movs	r5, #2
 800a452:	f1b9 0f00 	cmp.w	r9, #0
 800a456:	d047      	beq.n	800a4e8 <__gethex+0x38c>
 800a458:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a45c:	2b02      	cmp	r3, #2
 800a45e:	d015      	beq.n	800a48c <__gethex+0x330>
 800a460:	2b03      	cmp	r3, #3
 800a462:	d017      	beq.n	800a494 <__gethex+0x338>
 800a464:	2b01      	cmp	r3, #1
 800a466:	d109      	bne.n	800a47c <__gethex+0x320>
 800a468:	f019 0f02 	tst.w	r9, #2
 800a46c:	d006      	beq.n	800a47c <__gethex+0x320>
 800a46e:	f8da 3000 	ldr.w	r3, [sl]
 800a472:	ea49 0903 	orr.w	r9, r9, r3
 800a476:	f019 0f01 	tst.w	r9, #1
 800a47a:	d10e      	bne.n	800a49a <__gethex+0x33e>
 800a47c:	f045 0510 	orr.w	r5, r5, #16
 800a480:	e032      	b.n	800a4e8 <__gethex+0x38c>
 800a482:	f04f 0901 	mov.w	r9, #1
 800a486:	e7d1      	b.n	800a42c <__gethex+0x2d0>
 800a488:	2501      	movs	r5, #1
 800a48a:	e7e2      	b.n	800a452 <__gethex+0x2f6>
 800a48c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a48e:	f1c3 0301 	rsb	r3, r3, #1
 800a492:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a494:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a496:	2b00      	cmp	r3, #0
 800a498:	d0f0      	beq.n	800a47c <__gethex+0x320>
 800a49a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a49e:	f104 0314 	add.w	r3, r4, #20
 800a4a2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a4a6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a4aa:	f04f 0c00 	mov.w	ip, #0
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4b4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a4b8:	d01b      	beq.n	800a4f2 <__gethex+0x396>
 800a4ba:	3201      	adds	r2, #1
 800a4bc:	6002      	str	r2, [r0, #0]
 800a4be:	2d02      	cmp	r5, #2
 800a4c0:	f104 0314 	add.w	r3, r4, #20
 800a4c4:	d13c      	bne.n	800a540 <__gethex+0x3e4>
 800a4c6:	f8d8 2000 	ldr.w	r2, [r8]
 800a4ca:	3a01      	subs	r2, #1
 800a4cc:	42b2      	cmp	r2, r6
 800a4ce:	d109      	bne.n	800a4e4 <__gethex+0x388>
 800a4d0:	1171      	asrs	r1, r6, #5
 800a4d2:	2201      	movs	r2, #1
 800a4d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a4d8:	f006 061f 	and.w	r6, r6, #31
 800a4dc:	fa02 f606 	lsl.w	r6, r2, r6
 800a4e0:	421e      	tst	r6, r3
 800a4e2:	d13a      	bne.n	800a55a <__gethex+0x3fe>
 800a4e4:	f045 0520 	orr.w	r5, r5, #32
 800a4e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a4ea:	601c      	str	r4, [r3, #0]
 800a4ec:	9b02      	ldr	r3, [sp, #8]
 800a4ee:	601f      	str	r7, [r3, #0]
 800a4f0:	e6b0      	b.n	800a254 <__gethex+0xf8>
 800a4f2:	4299      	cmp	r1, r3
 800a4f4:	f843 cc04 	str.w	ip, [r3, #-4]
 800a4f8:	d8d9      	bhi.n	800a4ae <__gethex+0x352>
 800a4fa:	68a3      	ldr	r3, [r4, #8]
 800a4fc:	459b      	cmp	fp, r3
 800a4fe:	db17      	blt.n	800a530 <__gethex+0x3d4>
 800a500:	6861      	ldr	r1, [r4, #4]
 800a502:	9801      	ldr	r0, [sp, #4]
 800a504:	3101      	adds	r1, #1
 800a506:	f7fd ff57 	bl	80083b8 <_Balloc>
 800a50a:	4681      	mov	r9, r0
 800a50c:	b918      	cbnz	r0, 800a516 <__gethex+0x3ba>
 800a50e:	4b1a      	ldr	r3, [pc, #104]	@ (800a578 <__gethex+0x41c>)
 800a510:	4602      	mov	r2, r0
 800a512:	2184      	movs	r1, #132	@ 0x84
 800a514:	e6c5      	b.n	800a2a2 <__gethex+0x146>
 800a516:	6922      	ldr	r2, [r4, #16]
 800a518:	3202      	adds	r2, #2
 800a51a:	f104 010c 	add.w	r1, r4, #12
 800a51e:	0092      	lsls	r2, r2, #2
 800a520:	300c      	adds	r0, #12
 800a522:	f7fc ffe6 	bl	80074f2 <memcpy>
 800a526:	4621      	mov	r1, r4
 800a528:	9801      	ldr	r0, [sp, #4]
 800a52a:	f7fd ff85 	bl	8008438 <_Bfree>
 800a52e:	464c      	mov	r4, r9
 800a530:	6923      	ldr	r3, [r4, #16]
 800a532:	1c5a      	adds	r2, r3, #1
 800a534:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a538:	6122      	str	r2, [r4, #16]
 800a53a:	2201      	movs	r2, #1
 800a53c:	615a      	str	r2, [r3, #20]
 800a53e:	e7be      	b.n	800a4be <__gethex+0x362>
 800a540:	6922      	ldr	r2, [r4, #16]
 800a542:	455a      	cmp	r2, fp
 800a544:	dd0b      	ble.n	800a55e <__gethex+0x402>
 800a546:	2101      	movs	r1, #1
 800a548:	4620      	mov	r0, r4
 800a54a:	f7ff fd9f 	bl	800a08c <rshift>
 800a54e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a552:	3701      	adds	r7, #1
 800a554:	42bb      	cmp	r3, r7
 800a556:	f6ff aee0 	blt.w	800a31a <__gethex+0x1be>
 800a55a:	2501      	movs	r5, #1
 800a55c:	e7c2      	b.n	800a4e4 <__gethex+0x388>
 800a55e:	f016 061f 	ands.w	r6, r6, #31
 800a562:	d0fa      	beq.n	800a55a <__gethex+0x3fe>
 800a564:	4453      	add	r3, sl
 800a566:	f1c6 0620 	rsb	r6, r6, #32
 800a56a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a56e:	f7fe f815 	bl	800859c <__hi0bits>
 800a572:	42b0      	cmp	r0, r6
 800a574:	dbe7      	blt.n	800a546 <__gethex+0x3ea>
 800a576:	e7f0      	b.n	800a55a <__gethex+0x3fe>
 800a578:	08019f41 	.word	0x08019f41

0800a57c <L_shift>:
 800a57c:	f1c2 0208 	rsb	r2, r2, #8
 800a580:	0092      	lsls	r2, r2, #2
 800a582:	b570      	push	{r4, r5, r6, lr}
 800a584:	f1c2 0620 	rsb	r6, r2, #32
 800a588:	6843      	ldr	r3, [r0, #4]
 800a58a:	6804      	ldr	r4, [r0, #0]
 800a58c:	fa03 f506 	lsl.w	r5, r3, r6
 800a590:	432c      	orrs	r4, r5
 800a592:	40d3      	lsrs	r3, r2
 800a594:	6004      	str	r4, [r0, #0]
 800a596:	f840 3f04 	str.w	r3, [r0, #4]!
 800a59a:	4288      	cmp	r0, r1
 800a59c:	d3f4      	bcc.n	800a588 <L_shift+0xc>
 800a59e:	bd70      	pop	{r4, r5, r6, pc}

0800a5a0 <__match>:
 800a5a0:	b530      	push	{r4, r5, lr}
 800a5a2:	6803      	ldr	r3, [r0, #0]
 800a5a4:	3301      	adds	r3, #1
 800a5a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5aa:	b914      	cbnz	r4, 800a5b2 <__match+0x12>
 800a5ac:	6003      	str	r3, [r0, #0]
 800a5ae:	2001      	movs	r0, #1
 800a5b0:	bd30      	pop	{r4, r5, pc}
 800a5b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5b6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a5ba:	2d19      	cmp	r5, #25
 800a5bc:	bf98      	it	ls
 800a5be:	3220      	addls	r2, #32
 800a5c0:	42a2      	cmp	r2, r4
 800a5c2:	d0f0      	beq.n	800a5a6 <__match+0x6>
 800a5c4:	2000      	movs	r0, #0
 800a5c6:	e7f3      	b.n	800a5b0 <__match+0x10>

0800a5c8 <__hexnan>:
 800a5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5cc:	680b      	ldr	r3, [r1, #0]
 800a5ce:	6801      	ldr	r1, [r0, #0]
 800a5d0:	115e      	asrs	r6, r3, #5
 800a5d2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a5d6:	f013 031f 	ands.w	r3, r3, #31
 800a5da:	b087      	sub	sp, #28
 800a5dc:	bf18      	it	ne
 800a5de:	3604      	addne	r6, #4
 800a5e0:	2500      	movs	r5, #0
 800a5e2:	1f37      	subs	r7, r6, #4
 800a5e4:	4682      	mov	sl, r0
 800a5e6:	4690      	mov	r8, r2
 800a5e8:	9301      	str	r3, [sp, #4]
 800a5ea:	f846 5c04 	str.w	r5, [r6, #-4]
 800a5ee:	46b9      	mov	r9, r7
 800a5f0:	463c      	mov	r4, r7
 800a5f2:	9502      	str	r5, [sp, #8]
 800a5f4:	46ab      	mov	fp, r5
 800a5f6:	784a      	ldrb	r2, [r1, #1]
 800a5f8:	1c4b      	adds	r3, r1, #1
 800a5fa:	9303      	str	r3, [sp, #12]
 800a5fc:	b342      	cbz	r2, 800a650 <__hexnan+0x88>
 800a5fe:	4610      	mov	r0, r2
 800a600:	9105      	str	r1, [sp, #20]
 800a602:	9204      	str	r2, [sp, #16]
 800a604:	f7ff fd94 	bl	800a130 <__hexdig_fun>
 800a608:	2800      	cmp	r0, #0
 800a60a:	d151      	bne.n	800a6b0 <__hexnan+0xe8>
 800a60c:	9a04      	ldr	r2, [sp, #16]
 800a60e:	9905      	ldr	r1, [sp, #20]
 800a610:	2a20      	cmp	r2, #32
 800a612:	d818      	bhi.n	800a646 <__hexnan+0x7e>
 800a614:	9b02      	ldr	r3, [sp, #8]
 800a616:	459b      	cmp	fp, r3
 800a618:	dd13      	ble.n	800a642 <__hexnan+0x7a>
 800a61a:	454c      	cmp	r4, r9
 800a61c:	d206      	bcs.n	800a62c <__hexnan+0x64>
 800a61e:	2d07      	cmp	r5, #7
 800a620:	dc04      	bgt.n	800a62c <__hexnan+0x64>
 800a622:	462a      	mov	r2, r5
 800a624:	4649      	mov	r1, r9
 800a626:	4620      	mov	r0, r4
 800a628:	f7ff ffa8 	bl	800a57c <L_shift>
 800a62c:	4544      	cmp	r4, r8
 800a62e:	d952      	bls.n	800a6d6 <__hexnan+0x10e>
 800a630:	2300      	movs	r3, #0
 800a632:	f1a4 0904 	sub.w	r9, r4, #4
 800a636:	f844 3c04 	str.w	r3, [r4, #-4]
 800a63a:	f8cd b008 	str.w	fp, [sp, #8]
 800a63e:	464c      	mov	r4, r9
 800a640:	461d      	mov	r5, r3
 800a642:	9903      	ldr	r1, [sp, #12]
 800a644:	e7d7      	b.n	800a5f6 <__hexnan+0x2e>
 800a646:	2a29      	cmp	r2, #41	@ 0x29
 800a648:	d157      	bne.n	800a6fa <__hexnan+0x132>
 800a64a:	3102      	adds	r1, #2
 800a64c:	f8ca 1000 	str.w	r1, [sl]
 800a650:	f1bb 0f00 	cmp.w	fp, #0
 800a654:	d051      	beq.n	800a6fa <__hexnan+0x132>
 800a656:	454c      	cmp	r4, r9
 800a658:	d206      	bcs.n	800a668 <__hexnan+0xa0>
 800a65a:	2d07      	cmp	r5, #7
 800a65c:	dc04      	bgt.n	800a668 <__hexnan+0xa0>
 800a65e:	462a      	mov	r2, r5
 800a660:	4649      	mov	r1, r9
 800a662:	4620      	mov	r0, r4
 800a664:	f7ff ff8a 	bl	800a57c <L_shift>
 800a668:	4544      	cmp	r4, r8
 800a66a:	d936      	bls.n	800a6da <__hexnan+0x112>
 800a66c:	f1a8 0204 	sub.w	r2, r8, #4
 800a670:	4623      	mov	r3, r4
 800a672:	f853 1b04 	ldr.w	r1, [r3], #4
 800a676:	f842 1f04 	str.w	r1, [r2, #4]!
 800a67a:	429f      	cmp	r7, r3
 800a67c:	d2f9      	bcs.n	800a672 <__hexnan+0xaa>
 800a67e:	1b3b      	subs	r3, r7, r4
 800a680:	f023 0303 	bic.w	r3, r3, #3
 800a684:	3304      	adds	r3, #4
 800a686:	3401      	adds	r4, #1
 800a688:	3e03      	subs	r6, #3
 800a68a:	42b4      	cmp	r4, r6
 800a68c:	bf88      	it	hi
 800a68e:	2304      	movhi	r3, #4
 800a690:	4443      	add	r3, r8
 800a692:	2200      	movs	r2, #0
 800a694:	f843 2b04 	str.w	r2, [r3], #4
 800a698:	429f      	cmp	r7, r3
 800a69a:	d2fb      	bcs.n	800a694 <__hexnan+0xcc>
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	b91b      	cbnz	r3, 800a6a8 <__hexnan+0xe0>
 800a6a0:	4547      	cmp	r7, r8
 800a6a2:	d128      	bne.n	800a6f6 <__hexnan+0x12e>
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	603b      	str	r3, [r7, #0]
 800a6a8:	2005      	movs	r0, #5
 800a6aa:	b007      	add	sp, #28
 800a6ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6b0:	3501      	adds	r5, #1
 800a6b2:	2d08      	cmp	r5, #8
 800a6b4:	f10b 0b01 	add.w	fp, fp, #1
 800a6b8:	dd06      	ble.n	800a6c8 <__hexnan+0x100>
 800a6ba:	4544      	cmp	r4, r8
 800a6bc:	d9c1      	bls.n	800a642 <__hexnan+0x7a>
 800a6be:	2300      	movs	r3, #0
 800a6c0:	f844 3c04 	str.w	r3, [r4, #-4]
 800a6c4:	2501      	movs	r5, #1
 800a6c6:	3c04      	subs	r4, #4
 800a6c8:	6822      	ldr	r2, [r4, #0]
 800a6ca:	f000 000f 	and.w	r0, r0, #15
 800a6ce:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a6d2:	6020      	str	r0, [r4, #0]
 800a6d4:	e7b5      	b.n	800a642 <__hexnan+0x7a>
 800a6d6:	2508      	movs	r5, #8
 800a6d8:	e7b3      	b.n	800a642 <__hexnan+0x7a>
 800a6da:	9b01      	ldr	r3, [sp, #4]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d0dd      	beq.n	800a69c <__hexnan+0xd4>
 800a6e0:	f1c3 0320 	rsb	r3, r3, #32
 800a6e4:	f04f 32ff 	mov.w	r2, #4294967295
 800a6e8:	40da      	lsrs	r2, r3
 800a6ea:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a6ee:	4013      	ands	r3, r2
 800a6f0:	f846 3c04 	str.w	r3, [r6, #-4]
 800a6f4:	e7d2      	b.n	800a69c <__hexnan+0xd4>
 800a6f6:	3f04      	subs	r7, #4
 800a6f8:	e7d0      	b.n	800a69c <__hexnan+0xd4>
 800a6fa:	2004      	movs	r0, #4
 800a6fc:	e7d5      	b.n	800a6aa <__hexnan+0xe2>

0800a6fe <__ascii_mbtowc>:
 800a6fe:	b082      	sub	sp, #8
 800a700:	b901      	cbnz	r1, 800a704 <__ascii_mbtowc+0x6>
 800a702:	a901      	add	r1, sp, #4
 800a704:	b142      	cbz	r2, 800a718 <__ascii_mbtowc+0x1a>
 800a706:	b14b      	cbz	r3, 800a71c <__ascii_mbtowc+0x1e>
 800a708:	7813      	ldrb	r3, [r2, #0]
 800a70a:	600b      	str	r3, [r1, #0]
 800a70c:	7812      	ldrb	r2, [r2, #0]
 800a70e:	1e10      	subs	r0, r2, #0
 800a710:	bf18      	it	ne
 800a712:	2001      	movne	r0, #1
 800a714:	b002      	add	sp, #8
 800a716:	4770      	bx	lr
 800a718:	4610      	mov	r0, r2
 800a71a:	e7fb      	b.n	800a714 <__ascii_mbtowc+0x16>
 800a71c:	f06f 0001 	mvn.w	r0, #1
 800a720:	e7f8      	b.n	800a714 <__ascii_mbtowc+0x16>

0800a722 <_realloc_r>:
 800a722:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a726:	4680      	mov	r8, r0
 800a728:	4615      	mov	r5, r2
 800a72a:	460c      	mov	r4, r1
 800a72c:	b921      	cbnz	r1, 800a738 <_realloc_r+0x16>
 800a72e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a732:	4611      	mov	r1, r2
 800a734:	f7fd bdb4 	b.w	80082a0 <_malloc_r>
 800a738:	b92a      	cbnz	r2, 800a746 <_realloc_r+0x24>
 800a73a:	f7fd fd3d 	bl	80081b8 <_free_r>
 800a73e:	2400      	movs	r4, #0
 800a740:	4620      	mov	r0, r4
 800a742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a746:	f000 f840 	bl	800a7ca <_malloc_usable_size_r>
 800a74a:	4285      	cmp	r5, r0
 800a74c:	4606      	mov	r6, r0
 800a74e:	d802      	bhi.n	800a756 <_realloc_r+0x34>
 800a750:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a754:	d8f4      	bhi.n	800a740 <_realloc_r+0x1e>
 800a756:	4629      	mov	r1, r5
 800a758:	4640      	mov	r0, r8
 800a75a:	f7fd fda1 	bl	80082a0 <_malloc_r>
 800a75e:	4607      	mov	r7, r0
 800a760:	2800      	cmp	r0, #0
 800a762:	d0ec      	beq.n	800a73e <_realloc_r+0x1c>
 800a764:	42b5      	cmp	r5, r6
 800a766:	462a      	mov	r2, r5
 800a768:	4621      	mov	r1, r4
 800a76a:	bf28      	it	cs
 800a76c:	4632      	movcs	r2, r6
 800a76e:	f7fc fec0 	bl	80074f2 <memcpy>
 800a772:	4621      	mov	r1, r4
 800a774:	4640      	mov	r0, r8
 800a776:	f7fd fd1f 	bl	80081b8 <_free_r>
 800a77a:	463c      	mov	r4, r7
 800a77c:	e7e0      	b.n	800a740 <_realloc_r+0x1e>

0800a77e <__ascii_wctomb>:
 800a77e:	4603      	mov	r3, r0
 800a780:	4608      	mov	r0, r1
 800a782:	b141      	cbz	r1, 800a796 <__ascii_wctomb+0x18>
 800a784:	2aff      	cmp	r2, #255	@ 0xff
 800a786:	d904      	bls.n	800a792 <__ascii_wctomb+0x14>
 800a788:	228a      	movs	r2, #138	@ 0x8a
 800a78a:	601a      	str	r2, [r3, #0]
 800a78c:	f04f 30ff 	mov.w	r0, #4294967295
 800a790:	4770      	bx	lr
 800a792:	700a      	strb	r2, [r1, #0]
 800a794:	2001      	movs	r0, #1
 800a796:	4770      	bx	lr

0800a798 <fiprintf>:
 800a798:	b40e      	push	{r1, r2, r3}
 800a79a:	b503      	push	{r0, r1, lr}
 800a79c:	4601      	mov	r1, r0
 800a79e:	ab03      	add	r3, sp, #12
 800a7a0:	4805      	ldr	r0, [pc, #20]	@ (800a7b8 <fiprintf+0x20>)
 800a7a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7a6:	6800      	ldr	r0, [r0, #0]
 800a7a8:	9301      	str	r3, [sp, #4]
 800a7aa:	f000 f83f 	bl	800a82c <_vfiprintf_r>
 800a7ae:	b002      	add	sp, #8
 800a7b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a7b4:	b003      	add	sp, #12
 800a7b6:	4770      	bx	lr
 800a7b8:	20000030 	.word	0x20000030

0800a7bc <abort>:
 800a7bc:	b508      	push	{r3, lr}
 800a7be:	2006      	movs	r0, #6
 800a7c0:	f000 f974 	bl	800aaac <raise>
 800a7c4:	2001      	movs	r0, #1
 800a7c6:	f7f7 fb13 	bl	8001df0 <_exit>

0800a7ca <_malloc_usable_size_r>:
 800a7ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7ce:	1f18      	subs	r0, r3, #4
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	bfbc      	itt	lt
 800a7d4:	580b      	ldrlt	r3, [r1, r0]
 800a7d6:	18c0      	addlt	r0, r0, r3
 800a7d8:	4770      	bx	lr

0800a7da <__sfputc_r>:
 800a7da:	6893      	ldr	r3, [r2, #8]
 800a7dc:	3b01      	subs	r3, #1
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	b410      	push	{r4}
 800a7e2:	6093      	str	r3, [r2, #8]
 800a7e4:	da08      	bge.n	800a7f8 <__sfputc_r+0x1e>
 800a7e6:	6994      	ldr	r4, [r2, #24]
 800a7e8:	42a3      	cmp	r3, r4
 800a7ea:	db01      	blt.n	800a7f0 <__sfputc_r+0x16>
 800a7ec:	290a      	cmp	r1, #10
 800a7ee:	d103      	bne.n	800a7f8 <__sfputc_r+0x1e>
 800a7f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7f4:	f7fc bd55 	b.w	80072a2 <__swbuf_r>
 800a7f8:	6813      	ldr	r3, [r2, #0]
 800a7fa:	1c58      	adds	r0, r3, #1
 800a7fc:	6010      	str	r0, [r2, #0]
 800a7fe:	7019      	strb	r1, [r3, #0]
 800a800:	4608      	mov	r0, r1
 800a802:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a806:	4770      	bx	lr

0800a808 <__sfputs_r>:
 800a808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a80a:	4606      	mov	r6, r0
 800a80c:	460f      	mov	r7, r1
 800a80e:	4614      	mov	r4, r2
 800a810:	18d5      	adds	r5, r2, r3
 800a812:	42ac      	cmp	r4, r5
 800a814:	d101      	bne.n	800a81a <__sfputs_r+0x12>
 800a816:	2000      	movs	r0, #0
 800a818:	e007      	b.n	800a82a <__sfputs_r+0x22>
 800a81a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a81e:	463a      	mov	r2, r7
 800a820:	4630      	mov	r0, r6
 800a822:	f7ff ffda 	bl	800a7da <__sfputc_r>
 800a826:	1c43      	adds	r3, r0, #1
 800a828:	d1f3      	bne.n	800a812 <__sfputs_r+0xa>
 800a82a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a82c <_vfiprintf_r>:
 800a82c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a830:	460d      	mov	r5, r1
 800a832:	b09d      	sub	sp, #116	@ 0x74
 800a834:	4614      	mov	r4, r2
 800a836:	4698      	mov	r8, r3
 800a838:	4606      	mov	r6, r0
 800a83a:	b118      	cbz	r0, 800a844 <_vfiprintf_r+0x18>
 800a83c:	6a03      	ldr	r3, [r0, #32]
 800a83e:	b90b      	cbnz	r3, 800a844 <_vfiprintf_r+0x18>
 800a840:	f7fc fc30 	bl	80070a4 <__sinit>
 800a844:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a846:	07d9      	lsls	r1, r3, #31
 800a848:	d405      	bmi.n	800a856 <_vfiprintf_r+0x2a>
 800a84a:	89ab      	ldrh	r3, [r5, #12]
 800a84c:	059a      	lsls	r2, r3, #22
 800a84e:	d402      	bmi.n	800a856 <_vfiprintf_r+0x2a>
 800a850:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a852:	f7fc fe4c 	bl	80074ee <__retarget_lock_acquire_recursive>
 800a856:	89ab      	ldrh	r3, [r5, #12]
 800a858:	071b      	lsls	r3, r3, #28
 800a85a:	d501      	bpl.n	800a860 <_vfiprintf_r+0x34>
 800a85c:	692b      	ldr	r3, [r5, #16]
 800a85e:	b99b      	cbnz	r3, 800a888 <_vfiprintf_r+0x5c>
 800a860:	4629      	mov	r1, r5
 800a862:	4630      	mov	r0, r6
 800a864:	f7fc fd5c 	bl	8007320 <__swsetup_r>
 800a868:	b170      	cbz	r0, 800a888 <_vfiprintf_r+0x5c>
 800a86a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a86c:	07dc      	lsls	r4, r3, #31
 800a86e:	d504      	bpl.n	800a87a <_vfiprintf_r+0x4e>
 800a870:	f04f 30ff 	mov.w	r0, #4294967295
 800a874:	b01d      	add	sp, #116	@ 0x74
 800a876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a87a:	89ab      	ldrh	r3, [r5, #12]
 800a87c:	0598      	lsls	r0, r3, #22
 800a87e:	d4f7      	bmi.n	800a870 <_vfiprintf_r+0x44>
 800a880:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a882:	f7fc fe35 	bl	80074f0 <__retarget_lock_release_recursive>
 800a886:	e7f3      	b.n	800a870 <_vfiprintf_r+0x44>
 800a888:	2300      	movs	r3, #0
 800a88a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a88c:	2320      	movs	r3, #32
 800a88e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a892:	f8cd 800c 	str.w	r8, [sp, #12]
 800a896:	2330      	movs	r3, #48	@ 0x30
 800a898:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800aa48 <_vfiprintf_r+0x21c>
 800a89c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a8a0:	f04f 0901 	mov.w	r9, #1
 800a8a4:	4623      	mov	r3, r4
 800a8a6:	469a      	mov	sl, r3
 800a8a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a8ac:	b10a      	cbz	r2, 800a8b2 <_vfiprintf_r+0x86>
 800a8ae:	2a25      	cmp	r2, #37	@ 0x25
 800a8b0:	d1f9      	bne.n	800a8a6 <_vfiprintf_r+0x7a>
 800a8b2:	ebba 0b04 	subs.w	fp, sl, r4
 800a8b6:	d00b      	beq.n	800a8d0 <_vfiprintf_r+0xa4>
 800a8b8:	465b      	mov	r3, fp
 800a8ba:	4622      	mov	r2, r4
 800a8bc:	4629      	mov	r1, r5
 800a8be:	4630      	mov	r0, r6
 800a8c0:	f7ff ffa2 	bl	800a808 <__sfputs_r>
 800a8c4:	3001      	adds	r0, #1
 800a8c6:	f000 80a7 	beq.w	800aa18 <_vfiprintf_r+0x1ec>
 800a8ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a8cc:	445a      	add	r2, fp
 800a8ce:	9209      	str	r2, [sp, #36]	@ 0x24
 800a8d0:	f89a 3000 	ldrb.w	r3, [sl]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	f000 809f 	beq.w	800aa18 <_vfiprintf_r+0x1ec>
 800a8da:	2300      	movs	r3, #0
 800a8dc:	f04f 32ff 	mov.w	r2, #4294967295
 800a8e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a8e4:	f10a 0a01 	add.w	sl, sl, #1
 800a8e8:	9304      	str	r3, [sp, #16]
 800a8ea:	9307      	str	r3, [sp, #28]
 800a8ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a8f0:	931a      	str	r3, [sp, #104]	@ 0x68
 800a8f2:	4654      	mov	r4, sl
 800a8f4:	2205      	movs	r2, #5
 800a8f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8fa:	4853      	ldr	r0, [pc, #332]	@ (800aa48 <_vfiprintf_r+0x21c>)
 800a8fc:	f7f5 fc68 	bl	80001d0 <memchr>
 800a900:	9a04      	ldr	r2, [sp, #16]
 800a902:	b9d8      	cbnz	r0, 800a93c <_vfiprintf_r+0x110>
 800a904:	06d1      	lsls	r1, r2, #27
 800a906:	bf44      	itt	mi
 800a908:	2320      	movmi	r3, #32
 800a90a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a90e:	0713      	lsls	r3, r2, #28
 800a910:	bf44      	itt	mi
 800a912:	232b      	movmi	r3, #43	@ 0x2b
 800a914:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a918:	f89a 3000 	ldrb.w	r3, [sl]
 800a91c:	2b2a      	cmp	r3, #42	@ 0x2a
 800a91e:	d015      	beq.n	800a94c <_vfiprintf_r+0x120>
 800a920:	9a07      	ldr	r2, [sp, #28]
 800a922:	4654      	mov	r4, sl
 800a924:	2000      	movs	r0, #0
 800a926:	f04f 0c0a 	mov.w	ip, #10
 800a92a:	4621      	mov	r1, r4
 800a92c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a930:	3b30      	subs	r3, #48	@ 0x30
 800a932:	2b09      	cmp	r3, #9
 800a934:	d94b      	bls.n	800a9ce <_vfiprintf_r+0x1a2>
 800a936:	b1b0      	cbz	r0, 800a966 <_vfiprintf_r+0x13a>
 800a938:	9207      	str	r2, [sp, #28]
 800a93a:	e014      	b.n	800a966 <_vfiprintf_r+0x13a>
 800a93c:	eba0 0308 	sub.w	r3, r0, r8
 800a940:	fa09 f303 	lsl.w	r3, r9, r3
 800a944:	4313      	orrs	r3, r2
 800a946:	9304      	str	r3, [sp, #16]
 800a948:	46a2      	mov	sl, r4
 800a94a:	e7d2      	b.n	800a8f2 <_vfiprintf_r+0xc6>
 800a94c:	9b03      	ldr	r3, [sp, #12]
 800a94e:	1d19      	adds	r1, r3, #4
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	9103      	str	r1, [sp, #12]
 800a954:	2b00      	cmp	r3, #0
 800a956:	bfbb      	ittet	lt
 800a958:	425b      	neglt	r3, r3
 800a95a:	f042 0202 	orrlt.w	r2, r2, #2
 800a95e:	9307      	strge	r3, [sp, #28]
 800a960:	9307      	strlt	r3, [sp, #28]
 800a962:	bfb8      	it	lt
 800a964:	9204      	strlt	r2, [sp, #16]
 800a966:	7823      	ldrb	r3, [r4, #0]
 800a968:	2b2e      	cmp	r3, #46	@ 0x2e
 800a96a:	d10a      	bne.n	800a982 <_vfiprintf_r+0x156>
 800a96c:	7863      	ldrb	r3, [r4, #1]
 800a96e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a970:	d132      	bne.n	800a9d8 <_vfiprintf_r+0x1ac>
 800a972:	9b03      	ldr	r3, [sp, #12]
 800a974:	1d1a      	adds	r2, r3, #4
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	9203      	str	r2, [sp, #12]
 800a97a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a97e:	3402      	adds	r4, #2
 800a980:	9305      	str	r3, [sp, #20]
 800a982:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800aa58 <_vfiprintf_r+0x22c>
 800a986:	7821      	ldrb	r1, [r4, #0]
 800a988:	2203      	movs	r2, #3
 800a98a:	4650      	mov	r0, sl
 800a98c:	f7f5 fc20 	bl	80001d0 <memchr>
 800a990:	b138      	cbz	r0, 800a9a2 <_vfiprintf_r+0x176>
 800a992:	9b04      	ldr	r3, [sp, #16]
 800a994:	eba0 000a 	sub.w	r0, r0, sl
 800a998:	2240      	movs	r2, #64	@ 0x40
 800a99a:	4082      	lsls	r2, r0
 800a99c:	4313      	orrs	r3, r2
 800a99e:	3401      	adds	r4, #1
 800a9a0:	9304      	str	r3, [sp, #16]
 800a9a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9a6:	4829      	ldr	r0, [pc, #164]	@ (800aa4c <_vfiprintf_r+0x220>)
 800a9a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a9ac:	2206      	movs	r2, #6
 800a9ae:	f7f5 fc0f 	bl	80001d0 <memchr>
 800a9b2:	2800      	cmp	r0, #0
 800a9b4:	d03f      	beq.n	800aa36 <_vfiprintf_r+0x20a>
 800a9b6:	4b26      	ldr	r3, [pc, #152]	@ (800aa50 <_vfiprintf_r+0x224>)
 800a9b8:	bb1b      	cbnz	r3, 800aa02 <_vfiprintf_r+0x1d6>
 800a9ba:	9b03      	ldr	r3, [sp, #12]
 800a9bc:	3307      	adds	r3, #7
 800a9be:	f023 0307 	bic.w	r3, r3, #7
 800a9c2:	3308      	adds	r3, #8
 800a9c4:	9303      	str	r3, [sp, #12]
 800a9c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9c8:	443b      	add	r3, r7
 800a9ca:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9cc:	e76a      	b.n	800a8a4 <_vfiprintf_r+0x78>
 800a9ce:	fb0c 3202 	mla	r2, ip, r2, r3
 800a9d2:	460c      	mov	r4, r1
 800a9d4:	2001      	movs	r0, #1
 800a9d6:	e7a8      	b.n	800a92a <_vfiprintf_r+0xfe>
 800a9d8:	2300      	movs	r3, #0
 800a9da:	3401      	adds	r4, #1
 800a9dc:	9305      	str	r3, [sp, #20]
 800a9de:	4619      	mov	r1, r3
 800a9e0:	f04f 0c0a 	mov.w	ip, #10
 800a9e4:	4620      	mov	r0, r4
 800a9e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a9ea:	3a30      	subs	r2, #48	@ 0x30
 800a9ec:	2a09      	cmp	r2, #9
 800a9ee:	d903      	bls.n	800a9f8 <_vfiprintf_r+0x1cc>
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d0c6      	beq.n	800a982 <_vfiprintf_r+0x156>
 800a9f4:	9105      	str	r1, [sp, #20]
 800a9f6:	e7c4      	b.n	800a982 <_vfiprintf_r+0x156>
 800a9f8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a9fc:	4604      	mov	r4, r0
 800a9fe:	2301      	movs	r3, #1
 800aa00:	e7f0      	b.n	800a9e4 <_vfiprintf_r+0x1b8>
 800aa02:	ab03      	add	r3, sp, #12
 800aa04:	9300      	str	r3, [sp, #0]
 800aa06:	462a      	mov	r2, r5
 800aa08:	4b12      	ldr	r3, [pc, #72]	@ (800aa54 <_vfiprintf_r+0x228>)
 800aa0a:	a904      	add	r1, sp, #16
 800aa0c:	4630      	mov	r0, r6
 800aa0e:	f7fb fcf1 	bl	80063f4 <_printf_float>
 800aa12:	4607      	mov	r7, r0
 800aa14:	1c78      	adds	r0, r7, #1
 800aa16:	d1d6      	bne.n	800a9c6 <_vfiprintf_r+0x19a>
 800aa18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aa1a:	07d9      	lsls	r1, r3, #31
 800aa1c:	d405      	bmi.n	800aa2a <_vfiprintf_r+0x1fe>
 800aa1e:	89ab      	ldrh	r3, [r5, #12]
 800aa20:	059a      	lsls	r2, r3, #22
 800aa22:	d402      	bmi.n	800aa2a <_vfiprintf_r+0x1fe>
 800aa24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aa26:	f7fc fd63 	bl	80074f0 <__retarget_lock_release_recursive>
 800aa2a:	89ab      	ldrh	r3, [r5, #12]
 800aa2c:	065b      	lsls	r3, r3, #25
 800aa2e:	f53f af1f 	bmi.w	800a870 <_vfiprintf_r+0x44>
 800aa32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aa34:	e71e      	b.n	800a874 <_vfiprintf_r+0x48>
 800aa36:	ab03      	add	r3, sp, #12
 800aa38:	9300      	str	r3, [sp, #0]
 800aa3a:	462a      	mov	r2, r5
 800aa3c:	4b05      	ldr	r3, [pc, #20]	@ (800aa54 <_vfiprintf_r+0x228>)
 800aa3e:	a904      	add	r1, sp, #16
 800aa40:	4630      	mov	r0, r6
 800aa42:	f7fb ff6f 	bl	8006924 <_printf_i>
 800aa46:	e7e4      	b.n	800aa12 <_vfiprintf_r+0x1e6>
 800aa48:	0801a201 	.word	0x0801a201
 800aa4c:	0801a20b 	.word	0x0801a20b
 800aa50:	080063f5 	.word	0x080063f5
 800aa54:	0800a809 	.word	0x0800a809
 800aa58:	0801a207 	.word	0x0801a207

0800aa5c <_raise_r>:
 800aa5c:	291f      	cmp	r1, #31
 800aa5e:	b538      	push	{r3, r4, r5, lr}
 800aa60:	4605      	mov	r5, r0
 800aa62:	460c      	mov	r4, r1
 800aa64:	d904      	bls.n	800aa70 <_raise_r+0x14>
 800aa66:	2316      	movs	r3, #22
 800aa68:	6003      	str	r3, [r0, #0]
 800aa6a:	f04f 30ff 	mov.w	r0, #4294967295
 800aa6e:	bd38      	pop	{r3, r4, r5, pc}
 800aa70:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800aa72:	b112      	cbz	r2, 800aa7a <_raise_r+0x1e>
 800aa74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aa78:	b94b      	cbnz	r3, 800aa8e <_raise_r+0x32>
 800aa7a:	4628      	mov	r0, r5
 800aa7c:	f000 f830 	bl	800aae0 <_getpid_r>
 800aa80:	4622      	mov	r2, r4
 800aa82:	4601      	mov	r1, r0
 800aa84:	4628      	mov	r0, r5
 800aa86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa8a:	f000 b817 	b.w	800aabc <_kill_r>
 800aa8e:	2b01      	cmp	r3, #1
 800aa90:	d00a      	beq.n	800aaa8 <_raise_r+0x4c>
 800aa92:	1c59      	adds	r1, r3, #1
 800aa94:	d103      	bne.n	800aa9e <_raise_r+0x42>
 800aa96:	2316      	movs	r3, #22
 800aa98:	6003      	str	r3, [r0, #0]
 800aa9a:	2001      	movs	r0, #1
 800aa9c:	e7e7      	b.n	800aa6e <_raise_r+0x12>
 800aa9e:	2100      	movs	r1, #0
 800aaa0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800aaa4:	4620      	mov	r0, r4
 800aaa6:	4798      	blx	r3
 800aaa8:	2000      	movs	r0, #0
 800aaaa:	e7e0      	b.n	800aa6e <_raise_r+0x12>

0800aaac <raise>:
 800aaac:	4b02      	ldr	r3, [pc, #8]	@ (800aab8 <raise+0xc>)
 800aaae:	4601      	mov	r1, r0
 800aab0:	6818      	ldr	r0, [r3, #0]
 800aab2:	f7ff bfd3 	b.w	800aa5c <_raise_r>
 800aab6:	bf00      	nop
 800aab8:	20000030 	.word	0x20000030

0800aabc <_kill_r>:
 800aabc:	b538      	push	{r3, r4, r5, lr}
 800aabe:	4d07      	ldr	r5, [pc, #28]	@ (800aadc <_kill_r+0x20>)
 800aac0:	2300      	movs	r3, #0
 800aac2:	4604      	mov	r4, r0
 800aac4:	4608      	mov	r0, r1
 800aac6:	4611      	mov	r1, r2
 800aac8:	602b      	str	r3, [r5, #0]
 800aaca:	f7f7 f981 	bl	8001dd0 <_kill>
 800aace:	1c43      	adds	r3, r0, #1
 800aad0:	d102      	bne.n	800aad8 <_kill_r+0x1c>
 800aad2:	682b      	ldr	r3, [r5, #0]
 800aad4:	b103      	cbz	r3, 800aad8 <_kill_r+0x1c>
 800aad6:	6023      	str	r3, [r4, #0]
 800aad8:	bd38      	pop	{r3, r4, r5, pc}
 800aada:	bf00      	nop
 800aadc:	20000640 	.word	0x20000640

0800aae0 <_getpid_r>:
 800aae0:	f7f7 b96e 	b.w	8001dc0 <_getpid>

0800aae4 <_init>:
 800aae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aae6:	bf00      	nop
 800aae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aaea:	bc08      	pop	{r3}
 800aaec:	469e      	mov	lr, r3
 800aaee:	4770      	bx	lr

0800aaf0 <_fini>:
 800aaf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaf2:	bf00      	nop
 800aaf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aaf6:	bc08      	pop	{r3}
 800aaf8:	469e      	mov	lr, r3
 800aafa:	4770      	bx	lr
